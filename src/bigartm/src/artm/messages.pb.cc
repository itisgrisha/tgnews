// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artm/messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "artm/messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace artm {

namespace {

const ::google::protobuf::Descriptor* FloatArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoolArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoolArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* Batch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Batch_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegularizerSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegularizerSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegularizerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegularizerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmoothSparseThetaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothSparseThetaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmoothSparsePhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothSparsePhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecorrelatorPhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecorrelatorPhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiLanguagePhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiLanguagePhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelRegularizationPhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelRegularizationPhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecifiedSparsePhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecifiedSparsePhiConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SpecifiedSparsePhiConfig_SparseMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImproveCoherencePhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImproveCoherencePhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmoothPtdwConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothPtdwConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SmoothPtdwConfig_SmoothType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TopicSelectionThetaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicSelectionThetaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitermsPhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitermsPhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* HierarchySparsingThetaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HierarchySparsingThetaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicSegmentationPtdwConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicSegmentationPtdwConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmoothTimeInTopicsPhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothTimeInTopicsPhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetPlsaPhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetPlsaPhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransformConfig_TransformType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerplexityScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerplexityScoreConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PerplexityScoreConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PerplexityScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerplexityScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerplexityScore_TransactionNameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerplexityScore_TransactionNameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparsityThetaScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsityThetaScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparsityThetaScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsityThetaScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparsityPhiScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsityPhiScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparsityPhiScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsityPhiScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemsProcessedScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemsProcessedScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemsProcessedScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemsProcessedScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopTokensScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopTokensScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopTokensScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopTokensScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThetaSnippetScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThetaSnippetScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThetaSnippetScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThetaSnippetScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicKernelScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicKernelScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicKernelScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicKernelScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicMassPhiScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicMassPhiScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicMassPhiScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicMassPhiScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassPrecisionScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassPrecisionScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassPrecisionScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassPrecisionScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeakMemoryScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeakMemoryScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeakMemoryScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeakMemoryScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackgroundTokensRatioScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackgroundTokensRatioScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackgroundTokensRatioScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackgroundTokensRatioScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThetaMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThetaMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectionParserConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectionParserConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CollectionParserConfig_CollectionFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CollectionParserConfig_BatchNameType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CollectionParserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectionParserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CooccurrenceCollectorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CooccurrenceCollectorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitializeModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitializeModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* DictionaryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DictionaryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatherDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatherDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTopicModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTopicModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetThetaMatrixArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetThetaMatrixArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetScoreValueArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetScoreValueArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetScoreArrayArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetScoreArrayArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExportModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExportModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExportScoreTrackerArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExportScoreTrackerArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportScoreTrackerArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportScoreTrackerArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttachModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttachModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessBatchesArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessBatchesArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessBatchesResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessBatchesResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegularizeModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegularizeModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* NormalizeModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalizeModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExportDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExportDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuplicateMasterComponentArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplicateMasterComponentArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMasterComponentInfoArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMasterComponentInfoArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_RegularizerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_RegularizerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_ScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_ScoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_DictionaryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_DictionaryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_BatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_BatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_ModelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_ModelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_CacheEntryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_CacheEntryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportBatchesArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportBatchesArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* AwaitOperationArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AwaitOperationArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterModelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterModelConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FitOfflineMasterModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FitOfflineMasterModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* FitOnlineMasterModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FitOnlineMasterModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformMasterModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformMasterModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigureLoggingArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigureLoggingArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearThetaCacheArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearThetaCacheArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearScoreCacheArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearScoreCacheArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearScoreArrayCacheArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearScoreArrayCacheArgs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegularizerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScoreType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MatrixLayout_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ThetaMatrixType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_artm_2fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_artm_2fmessages_2eproto() {
  protobuf_AddDesc_artm_2fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "artm/messages.proto");
  GOOGLE_CHECK(file != NULL);
  FloatArray_descriptor_ = file->message_type(0);
  static const int FloatArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatArray, value_),
  };
  FloatArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FloatArray_descriptor_,
      FloatArray::default_instance_,
      FloatArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatArray, _has_bits_[0]),
      -1,
      -1,
      sizeof(FloatArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatArray, _internal_metadata_),
      -1);
  BoolArray_descriptor_ = file->message_type(1);
  static const int BoolArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolArray, value_),
  };
  BoolArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoolArray_descriptor_,
      BoolArray::default_instance_,
      BoolArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolArray, _has_bits_[0]),
      -1,
      -1,
      sizeof(BoolArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolArray, _internal_metadata_),
      -1);
  IntArray_descriptor_ = file->message_type(2);
  static const int IntArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntArray, value_),
  };
  IntArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IntArray_descriptor_,
      IntArray::default_instance_,
      IntArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntArray, _has_bits_[0]),
      -1,
      -1,
      sizeof(IntArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntArray, _internal_metadata_),
      -1);
  StringArray_descriptor_ = file->message_type(3);
  static const int StringArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringArray, value_),
  };
  StringArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StringArray_descriptor_,
      StringArray::default_instance_,
      StringArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringArray, _has_bits_[0]),
      -1,
      -1,
      sizeof(StringArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringArray, _internal_metadata_),
      -1);
  Item_descriptor_ = file->message_type(4);
  static const int Item_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, token_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, token_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, transaction_start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, transaction_typename_id_),
  };
  Item_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      -1,
      -1,
      sizeof(Item),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _internal_metadata_),
      -1);
  Field_descriptor_ = file->message_type(5);
  static const int Field_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, token_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, token_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, token_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, date_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, string_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, int_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, double_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, date_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, token_weight_),
  };
  Field_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _has_bits_[0]),
      -1,
      -1,
      sizeof(Field),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _internal_metadata_),
      -1);
  Batch_descriptor_ = file->message_type(6);
  static const int Batch_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, transaction_typename_),
  };
  Batch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Batch_descriptor_,
      Batch::default_instance_,
      Batch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _has_bits_[0]),
      -1,
      -1,
      sizeof(Batch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _internal_metadata_),
      -1);
  RegularizerSettings_descriptor_ = file->message_type(7);
  static const int RegularizerSettings_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerSettings, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerSettings, tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerSettings, gamma_),
  };
  RegularizerSettings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegularizerSettings_descriptor_,
      RegularizerSettings::default_instance_,
      RegularizerSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerSettings, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegularizerSettings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerSettings, _internal_metadata_),
      -1);
  RegularizerConfig_descriptor_ = file->message_type(8);
  static const int RegularizerConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, config_json_),
  };
  RegularizerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegularizerConfig_descriptor_,
      RegularizerConfig::default_instance_,
      RegularizerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegularizerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, _internal_metadata_),
      -1);
  SmoothSparseThetaConfig_descriptor_ = file->message_type(9);
  static const int SmoothSparseThetaConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, alpha_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, transform_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, item_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, item_topic_multiplier_),
  };
  SmoothSparseThetaConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SmoothSparseThetaConfig_descriptor_,
      SmoothSparseThetaConfig::default_instance_,
      SmoothSparseThetaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SmoothSparseThetaConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, _internal_metadata_),
      -1);
  SmoothSparsePhiConfig_descriptor_ = file->message_type(10);
  static const int SmoothSparsePhiConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, dictionary_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, transform_config_),
  };
  SmoothSparsePhiConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SmoothSparsePhiConfig_descriptor_,
      SmoothSparsePhiConfig::default_instance_,
      SmoothSparsePhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SmoothSparsePhiConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, _internal_metadata_),
      -1);
  DecorrelatorPhiConfig_descriptor_ = file->message_type(11);
  static const int DecorrelatorPhiConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, first_topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, second_topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, value_),
  };
  DecorrelatorPhiConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DecorrelatorPhiConfig_descriptor_,
      DecorrelatorPhiConfig::default_instance_,
      DecorrelatorPhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(DecorrelatorPhiConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, _internal_metadata_),
      -1);
  MultiLanguagePhiConfig_descriptor_ = file->message_type(12);
  static const int MultiLanguagePhiConfig_offsets_[1] = {
  };
  MultiLanguagePhiConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiLanguagePhiConfig_descriptor_,
      MultiLanguagePhiConfig::default_instance_,
      MultiLanguagePhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLanguagePhiConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(MultiLanguagePhiConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLanguagePhiConfig, _internal_metadata_),
      -1);
  LabelRegularizationPhiConfig_descriptor_ = file->message_type(13);
  static const int LabelRegularizationPhiConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRegularizationPhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRegularizationPhiConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRegularizationPhiConfig, dictionary_name_),
  };
  LabelRegularizationPhiConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelRegularizationPhiConfig_descriptor_,
      LabelRegularizationPhiConfig::default_instance_,
      LabelRegularizationPhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRegularizationPhiConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(LabelRegularizationPhiConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRegularizationPhiConfig, _internal_metadata_),
      -1);
  SpecifiedSparsePhiConfig_descriptor_ = file->message_type(14);
  static const int SpecifiedSparsePhiConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, max_elements_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, probability_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, mode_),
  };
  SpecifiedSparsePhiConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpecifiedSparsePhiConfig_descriptor_,
      SpecifiedSparsePhiConfig::default_instance_,
      SpecifiedSparsePhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpecifiedSparsePhiConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, _internal_metadata_),
      -1);
  SpecifiedSparsePhiConfig_SparseMode_descriptor_ = SpecifiedSparsePhiConfig_descriptor_->enum_type(0);
  ImproveCoherencePhiConfig_descriptor_ = file->message_type(15);
  static const int ImproveCoherencePhiConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImproveCoherencePhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImproveCoherencePhiConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImproveCoherencePhiConfig, dictionary_name_),
  };
  ImproveCoherencePhiConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImproveCoherencePhiConfig_descriptor_,
      ImproveCoherencePhiConfig::default_instance_,
      ImproveCoherencePhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImproveCoherencePhiConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImproveCoherencePhiConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImproveCoherencePhiConfig, _internal_metadata_),
      -1);
  SmoothPtdwConfig_descriptor_ = file->message_type(16);
  static const int SmoothPtdwConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothPtdwConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothPtdwConfig, window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothPtdwConfig, threshold_),
  };
  SmoothPtdwConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SmoothPtdwConfig_descriptor_,
      SmoothPtdwConfig::default_instance_,
      SmoothPtdwConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothPtdwConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SmoothPtdwConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothPtdwConfig, _internal_metadata_),
      -1);
  SmoothPtdwConfig_SmoothType_descriptor_ = SmoothPtdwConfig_descriptor_->enum_type(0);
  TopicSelectionThetaConfig_descriptor_ = file->message_type(17);
  static const int TopicSelectionThetaConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSelectionThetaConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSelectionThetaConfig, topic_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSelectionThetaConfig, alpha_iter_),
  };
  TopicSelectionThetaConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicSelectionThetaConfig_descriptor_,
      TopicSelectionThetaConfig::default_instance_,
      TopicSelectionThetaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSelectionThetaConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopicSelectionThetaConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSelectionThetaConfig, _internal_metadata_),
      -1);
  BitermsPhiConfig_descriptor_ = file->message_type(18);
  static const int BitermsPhiConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitermsPhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitermsPhiConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitermsPhiConfig, dictionary_name_),
  };
  BitermsPhiConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BitermsPhiConfig_descriptor_,
      BitermsPhiConfig::default_instance_,
      BitermsPhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitermsPhiConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(BitermsPhiConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitermsPhiConfig, _internal_metadata_),
      -1);
  HierarchySparsingThetaConfig_descriptor_ = file->message_type(19);
  static const int HierarchySparsingThetaConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchySparsingThetaConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchySparsingThetaConfig, parent_topic_proportion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchySparsingThetaConfig, alpha_iter_),
  };
  HierarchySparsingThetaConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HierarchySparsingThetaConfig_descriptor_,
      HierarchySparsingThetaConfig::default_instance_,
      HierarchySparsingThetaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchySparsingThetaConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(HierarchySparsingThetaConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchySparsingThetaConfig, _internal_metadata_),
      -1);
  TopicSegmentationPtdwConfig_descriptor_ = file->message_type(20);
  static const int TopicSegmentationPtdwConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSegmentationPtdwConfig, background_topic_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSegmentationPtdwConfig, window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSegmentationPtdwConfig, threshold_),
  };
  TopicSegmentationPtdwConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicSegmentationPtdwConfig_descriptor_,
      TopicSegmentationPtdwConfig::default_instance_,
      TopicSegmentationPtdwConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSegmentationPtdwConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopicSegmentationPtdwConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSegmentationPtdwConfig, _internal_metadata_),
      -1);
  SmoothTimeInTopicsPhiConfig_descriptor_ = file->message_type(21);
  static const int SmoothTimeInTopicsPhiConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothTimeInTopicsPhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothTimeInTopicsPhiConfig, class_id_),
  };
  SmoothTimeInTopicsPhiConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SmoothTimeInTopicsPhiConfig_descriptor_,
      SmoothTimeInTopicsPhiConfig::default_instance_,
      SmoothTimeInTopicsPhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothTimeInTopicsPhiConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SmoothTimeInTopicsPhiConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothTimeInTopicsPhiConfig, _internal_metadata_),
      -1);
  NetPlsaPhiConfig_descriptor_ = file->message_type(22);
  static const int NetPlsaPhiConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPlsaPhiConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPlsaPhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPlsaPhiConfig, vertex_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPlsaPhiConfig, vertex_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPlsaPhiConfig, first_vertex_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPlsaPhiConfig, second_vertex_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPlsaPhiConfig, edge_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPlsaPhiConfig, symmetric_edge_weights_),
  };
  NetPlsaPhiConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetPlsaPhiConfig_descriptor_,
      NetPlsaPhiConfig::default_instance_,
      NetPlsaPhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPlsaPhiConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(NetPlsaPhiConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPlsaPhiConfig, _internal_metadata_),
      -1);
  TransformConfig_descriptor_ = file->message_type(23);
  static const int TransformConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, a_),
  };
  TransformConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformConfig_descriptor_,
      TransformConfig::default_instance_,
      TransformConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransformConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, _internal_metadata_),
      -1);
  TransformConfig_TransformType_descriptor_ = TransformConfig_descriptor_->enum_type(0);
  ScoreConfig_descriptor_ = file->message_type(24);
  static const int ScoreConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, config_json_),
  };
  ScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScoreConfig_descriptor_,
      ScoreConfig::default_instance_,
      ScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, _internal_metadata_),
      -1);
  ScoreData_descriptor_ = file->message_type(25);
  static const int ScoreData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreData, data_json_),
  };
  ScoreData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScoreData_descriptor_,
      ScoreData::default_instance_,
      ScoreData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ScoreData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreData, _internal_metadata_),
      -1);
  ScoreArray_descriptor_ = file->message_type(26);
  static const int ScoreArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreArray, score_),
  };
  ScoreArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScoreArray_descriptor_,
      ScoreArray::default_instance_,
      ScoreArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreArray, _has_bits_[0]),
      -1,
      -1,
      sizeof(ScoreArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreArray, _internal_metadata_),
      -1);
  PerplexityScoreConfig_descriptor_ = file->message_type(27);
  static const int PerplexityScoreConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, model_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, dictionary_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, transaction_typename_),
  };
  PerplexityScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PerplexityScoreConfig_descriptor_,
      PerplexityScoreConfig::default_instance_,
      PerplexityScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(PerplexityScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, _internal_metadata_),
      -1);
  PerplexityScoreConfig_Type_descriptor_ = PerplexityScoreConfig_descriptor_->enum_type(0);
  PerplexityScore_descriptor_ = file->message_type(28);
  static const int PerplexityScore_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, normalizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, zero_words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, transaction_typename_info_),
  };
  PerplexityScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PerplexityScore_descriptor_,
      PerplexityScore::default_instance_,
      PerplexityScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(PerplexityScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, _internal_metadata_),
      -1);
  PerplexityScore_TransactionNameInfo_descriptor_ = PerplexityScore_descriptor_->nested_type(0);
  static const int PerplexityScore_TransactionNameInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore_TransactionNameInfo, transaction_typename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore_TransactionNameInfo, raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore_TransactionNameInfo, normalizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore_TransactionNameInfo, zero_words_),
  };
  PerplexityScore_TransactionNameInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PerplexityScore_TransactionNameInfo_descriptor_,
      PerplexityScore_TransactionNameInfo::default_instance_,
      PerplexityScore_TransactionNameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore_TransactionNameInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PerplexityScore_TransactionNameInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore_TransactionNameInfo, _internal_metadata_),
      -1);
  SparsityThetaScoreConfig_descriptor_ = file->message_type(29);
  static const int SparsityThetaScoreConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScoreConfig, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScoreConfig, topic_name_),
  };
  SparsityThetaScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SparsityThetaScoreConfig_descriptor_,
      SparsityThetaScoreConfig::default_instance_,
      SparsityThetaScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SparsityThetaScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScoreConfig, _internal_metadata_),
      -1);
  SparsityThetaScore_descriptor_ = file->message_type(30);
  static const int SparsityThetaScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScore, zero_topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScore, total_topics_),
  };
  SparsityThetaScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SparsityThetaScore_descriptor_,
      SparsityThetaScore::default_instance_,
      SparsityThetaScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(SparsityThetaScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScore, _internal_metadata_),
      -1);
  SparsityPhiScoreConfig_descriptor_ = file->message_type(31);
  static const int SparsityPhiScoreConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScoreConfig, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScoreConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScoreConfig, topic_name_),
  };
  SparsityPhiScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SparsityPhiScoreConfig_descriptor_,
      SparsityPhiScoreConfig::default_instance_,
      SparsityPhiScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(SparsityPhiScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScoreConfig, _internal_metadata_),
      -1);
  SparsityPhiScore_descriptor_ = file->message_type(32);
  static const int SparsityPhiScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScore, zero_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScore, total_tokens_),
  };
  SparsityPhiScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SparsityPhiScore_descriptor_,
      SparsityPhiScore::default_instance_,
      SparsityPhiScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(SparsityPhiScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScore, _internal_metadata_),
      -1);
  ItemsProcessedScoreConfig_descriptor_ = file->message_type(33);
  static const int ItemsProcessedScoreConfig_offsets_[1] = {
  };
  ItemsProcessedScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemsProcessedScoreConfig_descriptor_,
      ItemsProcessedScoreConfig::default_instance_,
      ItemsProcessedScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ItemsProcessedScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScoreConfig, _internal_metadata_),
      -1);
  ItemsProcessedScore_descriptor_ = file->message_type(34);
  static const int ItemsProcessedScore_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScore, num_batches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScore, token_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScore, token_weight_in_effect_),
  };
  ItemsProcessedScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemsProcessedScore_descriptor_,
      ItemsProcessedScore::default_instance_,
      ItemsProcessedScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(ItemsProcessedScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScore, _internal_metadata_),
      -1);
  TopTokensScoreConfig_descriptor_ = file->message_type(35);
  static const int TopTokensScoreConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, num_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, cooccurrence_dictionary_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, eps_),
  };
  TopTokensScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopTokensScoreConfig_descriptor_,
      TopTokensScoreConfig::default_instance_,
      TopTokensScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopTokensScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, _internal_metadata_),
      -1);
  TopTokensScore_descriptor_ = file->message_type(36);
  static const int TopTokensScore_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, num_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, topic_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, coherence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, average_coherence_),
  };
  TopTokensScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopTokensScore_descriptor_,
      TopTokensScore::default_instance_,
      TopTokensScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopTokensScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, _internal_metadata_),
      -1);
  ThetaSnippetScoreConfig_descriptor_ = file->message_type(37);
  static const int ThetaSnippetScoreConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScoreConfig, num_items_),
  };
  ThetaSnippetScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ThetaSnippetScoreConfig_descriptor_,
      ThetaSnippetScoreConfig::default_instance_,
      ThetaSnippetScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ThetaSnippetScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScoreConfig, _internal_metadata_),
      -1);
  ThetaSnippetScore_descriptor_ = file->message_type(38);
  static const int ThetaSnippetScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScore, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScore, values_),
  };
  ThetaSnippetScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ThetaSnippetScore_descriptor_,
      ThetaSnippetScore::default_instance_,
      ThetaSnippetScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(ThetaSnippetScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScore, _internal_metadata_),
      -1);
  TopicKernelScoreConfig_descriptor_ = file->message_type(39);
  static const int TopicKernelScoreConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, probability_mass_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, cooccurrence_dictionary_name_),
  };
  TopicKernelScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicKernelScoreConfig_descriptor_,
      TopicKernelScoreConfig::default_instance_,
      TopicKernelScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopicKernelScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, _internal_metadata_),
      -1);
  TopicKernelScore_descriptor_ = file->message_type(40);
  static const int TopicKernelScore_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, kernel_purity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, kernel_contrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, average_kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, average_kernel_purity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, average_kernel_contrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, coherence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, average_coherence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, kernel_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, topic_name_),
  };
  TopicKernelScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicKernelScore_descriptor_,
      TopicKernelScore::default_instance_,
      TopicKernelScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopicKernelScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, _internal_metadata_),
      -1);
  TopicMassPhiScoreConfig_descriptor_ = file->message_type(41);
  static const int TopicMassPhiScoreConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScoreConfig, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScoreConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScoreConfig, topic_name_),
  };
  TopicMassPhiScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicMassPhiScoreConfig_descriptor_,
      TopicMassPhiScoreConfig::default_instance_,
      TopicMassPhiScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopicMassPhiScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScoreConfig, _internal_metadata_),
      -1);
  TopicMassPhiScore_descriptor_ = file->message_type(42);
  static const int TopicMassPhiScore_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, topic_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, topic_mass_),
  };
  TopicMassPhiScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicMassPhiScore_descriptor_,
      TopicMassPhiScore::default_instance_,
      TopicMassPhiScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopicMassPhiScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, _internal_metadata_),
      -1);
  ClassPrecisionScoreConfig_descriptor_ = file->message_type(43);
  static const int ClassPrecisionScoreConfig_offsets_[1] = {
  };
  ClassPrecisionScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClassPrecisionScoreConfig_descriptor_,
      ClassPrecisionScoreConfig::default_instance_,
      ClassPrecisionScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClassPrecisionScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScoreConfig, _internal_metadata_),
      -1);
  ClassPrecisionScore_descriptor_ = file->message_type(44);
  static const int ClassPrecisionScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScore, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScore, total_),
  };
  ClassPrecisionScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClassPrecisionScore_descriptor_,
      ClassPrecisionScore::default_instance_,
      ClassPrecisionScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClassPrecisionScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScore, _internal_metadata_),
      -1);
  PeakMemoryScoreConfig_descriptor_ = file->message_type(45);
  static const int PeakMemoryScoreConfig_offsets_[1] = {
  };
  PeakMemoryScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeakMemoryScoreConfig_descriptor_,
      PeakMemoryScoreConfig::default_instance_,
      PeakMemoryScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeakMemoryScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(PeakMemoryScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeakMemoryScoreConfig, _internal_metadata_),
      -1);
  PeakMemoryScore_descriptor_ = file->message_type(46);
  static const int PeakMemoryScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeakMemoryScore, value_),
  };
  PeakMemoryScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeakMemoryScore_descriptor_,
      PeakMemoryScore::default_instance_,
      PeakMemoryScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeakMemoryScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(PeakMemoryScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeakMemoryScore, _internal_metadata_),
      -1);
  BackgroundTokensRatioScoreConfig_descriptor_ = file->message_type(47);
  static const int BackgroundTokensRatioScoreConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackgroundTokensRatioScoreConfig, delta_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackgroundTokensRatioScoreConfig, save_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackgroundTokensRatioScoreConfig, direct_kl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackgroundTokensRatioScoreConfig, class_id_),
  };
  BackgroundTokensRatioScoreConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BackgroundTokensRatioScoreConfig_descriptor_,
      BackgroundTokensRatioScoreConfig::default_instance_,
      BackgroundTokensRatioScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackgroundTokensRatioScoreConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(BackgroundTokensRatioScoreConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackgroundTokensRatioScoreConfig, _internal_metadata_),
      -1);
  BackgroundTokensRatioScore_descriptor_ = file->message_type(48);
  static const int BackgroundTokensRatioScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackgroundTokensRatioScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackgroundTokensRatioScore, token_),
  };
  BackgroundTokensRatioScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BackgroundTokensRatioScore_descriptor_,
      BackgroundTokensRatioScore::default_instance_,
      BackgroundTokensRatioScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackgroundTokensRatioScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(BackgroundTokensRatioScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackgroundTokensRatioScore, _internal_metadata_),
      -1);
  TopicModel_descriptor_ = file->message_type(49);
  static const int TopicModel_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, num_topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, token_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, topic_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, num_values_),
  };
  TopicModel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicModel_descriptor_,
      TopicModel::default_instance_,
      TopicModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopicModel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, _internal_metadata_),
      -1);
  ThetaMatrix_descriptor_ = file->message_type(50);
  static const int ThetaMatrix_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, item_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, num_topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, item_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, topic_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, num_values_),
  };
  ThetaMatrix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ThetaMatrix_descriptor_,
      ThetaMatrix::default_instance_,
      ThetaMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, _has_bits_[0]),
      -1,
      -1,
      sizeof(ThetaMatrix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, _internal_metadata_),
      -1);
  CollectionParserConfig_descriptor_ = file->message_type(51);
  static const int CollectionParserConfig_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, docword_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, vocab_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, target_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, num_items_per_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, use_unity_based_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, name_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, num_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, cooc_tf_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, cooc_df_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, ppmi_tf_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, ppmi_df_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, gather_cooc_tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, gather_cooc_df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, gather_cooc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, cooc_window_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, cooc_min_tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, cooc_min_df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, store_symmetric_cooc_values_),
  };
  CollectionParserConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CollectionParserConfig_descriptor_,
      CollectionParserConfig::default_instance_,
      CollectionParserConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(CollectionParserConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, _internal_metadata_),
      -1);
  CollectionParserConfig_CollectionFormat_descriptor_ = CollectionParserConfig_descriptor_->enum_type(0);
  CollectionParserConfig_BatchNameType_descriptor_ = CollectionParserConfig_descriptor_->enum_type(1);
  CollectionParserInfo_descriptor_ = file->message_type(52);
  static const int CollectionParserInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserInfo, num_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserInfo, num_batches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserInfo, dictionary_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserInfo, num_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserInfo, total_token_weight_),
  };
  CollectionParserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CollectionParserInfo_descriptor_,
      CollectionParserInfo::default_instance_,
      CollectionParserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CollectionParserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserInfo, _internal_metadata_),
      -1);
  CooccurrenceCollectorConfig_descriptor_ = file->message_type(53);
  static const int CooccurrenceCollectorConfig_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, gather_cooc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, gather_cooc_tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, gather_cooc_df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, store_symmetric_cooc_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, calculate_ppmi_tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, calculate_ppmi_df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, vw_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, vocab_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, target_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, cooc_tf_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, cooc_df_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, ppmi_tf_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, ppmi_df_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, cooc_window_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, cooc_min_tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, cooc_min_df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, max_num_of_open_files_in_a_thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, num_items_per_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, num_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, total_num_of_pairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, total_num_of_documents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, max_num_of_open_files_in_a_process_),
  };
  CooccurrenceCollectorConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CooccurrenceCollectorConfig_descriptor_,
      CooccurrenceCollectorConfig::default_instance_,
      CooccurrenceCollectorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(CooccurrenceCollectorConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooccurrenceCollectorConfig, _internal_metadata_),
      -1);
  InitializeModelArgs_descriptor_ = file->message_type(54);
  static const int InitializeModelArgs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, dictionary_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, seed_),
  };
  InitializeModelArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitializeModelArgs_descriptor_,
      InitializeModelArgs::default_instance_,
      InitializeModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(InitializeModelArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, _internal_metadata_),
      -1);
  DictionaryData_descriptor_ = file->message_type(55);
  static const int DictionaryData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, token_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, token_tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, token_df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, cooc_first_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, cooc_second_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, cooc_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, num_items_in_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, cooc_tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, cooc_df_),
  };
  DictionaryData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DictionaryData_descriptor_,
      DictionaryData::default_instance_,
      DictionaryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, _has_bits_[0]),
      -1,
      -1,
      sizeof(DictionaryData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, _internal_metadata_),
      -1);
  FilterDictionaryArgs_descriptor_ = file->message_type(56);
  static const int FilterDictionaryArgs_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, dictionary_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, dictionary_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, min_df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, max_df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, min_df_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, max_df_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, min_tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, max_tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, max_dictionary_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, recalculate_value_),
  };
  FilterDictionaryArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FilterDictionaryArgs_descriptor_,
      FilterDictionaryArgs::default_instance_,
      FilterDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(FilterDictionaryArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, _internal_metadata_),
      -1);
  GatherDictionaryArgs_descriptor_ = file->message_type(57);
  static const int GatherDictionaryArgs_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, dictionary_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, data_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, cooc_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, vocab_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, symmetric_cooc_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, batch_path_),
  };
  GatherDictionaryArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GatherDictionaryArgs_descriptor_,
      GatherDictionaryArgs::default_instance_,
      GatherDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(GatherDictionaryArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, _internal_metadata_),
      -1);
  GetDictionaryArgs_descriptor_ = file->message_type(58);
  static const int GetDictionaryArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDictionaryArgs, dictionary_name_),
  };
  GetDictionaryArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetDictionaryArgs_descriptor_,
      GetDictionaryArgs::default_instance_,
      GetDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDictionaryArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetDictionaryArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDictionaryArgs, _internal_metadata_),
      -1);
  GetTopicModelArgs_descriptor_ = file->message_type(59);
  static const int GetTopicModelArgs_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, use_sparse_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, matrix_layout_),
  };
  GetTopicModelArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetTopicModelArgs_descriptor_,
      GetTopicModelArgs::default_instance_,
      GetTopicModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetTopicModelArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, _internal_metadata_),
      -1);
  GetThetaMatrixArgs_descriptor_ = file->message_type(60);
  static const int GetThetaMatrixArgs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, use_sparse_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, matrix_layout_),
  };
  GetThetaMatrixArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetThetaMatrixArgs_descriptor_,
      GetThetaMatrixArgs::default_instance_,
      GetThetaMatrixArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetThetaMatrixArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, _internal_metadata_),
      -1);
  GetScoreValueArgs_descriptor_ = file->message_type(61);
  static const int GetScoreValueArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreValueArgs, score_name_),
  };
  GetScoreValueArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetScoreValueArgs_descriptor_,
      GetScoreValueArgs::default_instance_,
      GetScoreValueArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreValueArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetScoreValueArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreValueArgs, _internal_metadata_),
      -1);
  GetScoreArrayArgs_descriptor_ = file->message_type(62);
  static const int GetScoreArrayArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreArrayArgs, score_name_),
  };
  GetScoreArrayArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetScoreArrayArgs_descriptor_,
      GetScoreArrayArgs::default_instance_,
      GetScoreArrayArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreArrayArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetScoreArrayArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreArrayArgs, _internal_metadata_),
      -1);
  ExportModelArgs_descriptor_ = file->message_type(63);
  static const int ExportModelArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportModelArgs, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportModelArgs, model_name_),
  };
  ExportModelArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExportModelArgs_descriptor_,
      ExportModelArgs::default_instance_,
      ExportModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportModelArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExportModelArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportModelArgs, _internal_metadata_),
      -1);
  ImportModelArgs_descriptor_ = file->message_type(64);
  static const int ImportModelArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportModelArgs, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportModelArgs, model_name_),
  };
  ImportModelArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImportModelArgs_descriptor_,
      ImportModelArgs::default_instance_,
      ImportModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportModelArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImportModelArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportModelArgs, _internal_metadata_),
      -1);
  ExportScoreTrackerArgs_descriptor_ = file->message_type(65);
  static const int ExportScoreTrackerArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportScoreTrackerArgs, file_name_),
  };
  ExportScoreTrackerArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExportScoreTrackerArgs_descriptor_,
      ExportScoreTrackerArgs::default_instance_,
      ExportScoreTrackerArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportScoreTrackerArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExportScoreTrackerArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportScoreTrackerArgs, _internal_metadata_),
      -1);
  ImportScoreTrackerArgs_descriptor_ = file->message_type(66);
  static const int ImportScoreTrackerArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportScoreTrackerArgs, file_name_),
  };
  ImportScoreTrackerArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImportScoreTrackerArgs_descriptor_,
      ImportScoreTrackerArgs::default_instance_,
      ImportScoreTrackerArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportScoreTrackerArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImportScoreTrackerArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportScoreTrackerArgs, _internal_metadata_),
      -1);
  AttachModelArgs_descriptor_ = file->message_type(67);
  static const int AttachModelArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachModelArgs, model_name_),
  };
  AttachModelArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AttachModelArgs_descriptor_,
      AttachModelArgs::default_instance_,
      AttachModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachModelArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(AttachModelArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachModelArgs, _internal_metadata_),
      -1);
  ProcessBatchesArgs_descriptor_ = file->message_type(68);
  static const int ProcessBatchesArgs_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, nwt_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, batch_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, pwt_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, num_document_passes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, regularizer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, regularizer_tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, class_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, reuse_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, opt_for_avx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, theta_matrix_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, batch_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, predict_class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, use_random_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, transaction_typename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, transaction_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, reset_nwt_),
  };
  ProcessBatchesArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProcessBatchesArgs_descriptor_,
      ProcessBatchesArgs::default_instance_,
      ProcessBatchesArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProcessBatchesArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, _internal_metadata_),
      -1);
  ProcessBatchesResult_descriptor_ = file->message_type(69);
  static const int ProcessBatchesResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesResult, score_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesResult, theta_matrix_),
  };
  ProcessBatchesResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProcessBatchesResult_descriptor_,
      ProcessBatchesResult::default_instance_,
      ProcessBatchesResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProcessBatchesResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesResult, _internal_metadata_),
      -1);
  MergeModelArgs_descriptor_ = file->message_type(70);
  static const int MergeModelArgs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, nwt_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, nwt_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, source_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, dictionary_name_),
  };
  MergeModelArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MergeModelArgs_descriptor_,
      MergeModelArgs::default_instance_,
      MergeModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(MergeModelArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, _internal_metadata_),
      -1);
  RegularizeModelArgs_descriptor_ = file->message_type(71);
  static const int RegularizeModelArgs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, rwt_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, pwt_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, nwt_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, regularizer_settings_),
  };
  RegularizeModelArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegularizeModelArgs_descriptor_,
      RegularizeModelArgs::default_instance_,
      RegularizeModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegularizeModelArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, _internal_metadata_),
      -1);
  NormalizeModelArgs_descriptor_ = file->message_type(72);
  static const int NormalizeModelArgs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeModelArgs, pwt_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeModelArgs, nwt_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeModelArgs, rwt_source_name_),
  };
  NormalizeModelArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NormalizeModelArgs_descriptor_,
      NormalizeModelArgs::default_instance_,
      NormalizeModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeModelArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(NormalizeModelArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeModelArgs, _internal_metadata_),
      -1);
  ImportDictionaryArgs_descriptor_ = file->message_type(73);
  static const int ImportDictionaryArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDictionaryArgs, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDictionaryArgs, dictionary_name_),
  };
  ImportDictionaryArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImportDictionaryArgs_descriptor_,
      ImportDictionaryArgs::default_instance_,
      ImportDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDictionaryArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImportDictionaryArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDictionaryArgs, _internal_metadata_),
      -1);
  ExportDictionaryArgs_descriptor_ = file->message_type(74);
  static const int ExportDictionaryArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportDictionaryArgs, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportDictionaryArgs, dictionary_name_),
  };
  ExportDictionaryArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExportDictionaryArgs_descriptor_,
      ExportDictionaryArgs::default_instance_,
      ExportDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportDictionaryArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExportDictionaryArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportDictionaryArgs, _internal_metadata_),
      -1);
  DuplicateMasterComponentArgs_descriptor_ = file->message_type(75);
  static const int DuplicateMasterComponentArgs_offsets_[1] = {
  };
  DuplicateMasterComponentArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DuplicateMasterComponentArgs_descriptor_,
      DuplicateMasterComponentArgs::default_instance_,
      DuplicateMasterComponentArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateMasterComponentArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(DuplicateMasterComponentArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateMasterComponentArgs, _internal_metadata_),
      -1);
  GetMasterComponentInfoArgs_descriptor_ = file->message_type(76);
  static const int GetMasterComponentInfoArgs_offsets_[1] = {
  };
  GetMasterComponentInfoArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetMasterComponentInfoArgs_descriptor_,
      GetMasterComponentInfoArgs::default_instance_,
      GetMasterComponentInfoArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMasterComponentInfoArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetMasterComponentInfoArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMasterComponentInfoArgs, _internal_metadata_),
      -1);
  MasterComponentInfo_descriptor_ = file->message_type(77);
  static const int MasterComponentInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, regularizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, dictionary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, cache_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, processor_queue_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, num_processors_),
  };
  MasterComponentInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterComponentInfo_descriptor_,
      MasterComponentInfo::default_instance_,
      MasterComponentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MasterComponentInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, _internal_metadata_),
      -1);
  MasterComponentInfo_RegularizerInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(0);
  static const int MasterComponentInfo_RegularizerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_RegularizerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_RegularizerInfo, type_),
  };
  MasterComponentInfo_RegularizerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterComponentInfo_RegularizerInfo_descriptor_,
      MasterComponentInfo_RegularizerInfo::default_instance_,
      MasterComponentInfo_RegularizerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_RegularizerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MasterComponentInfo_RegularizerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_RegularizerInfo, _internal_metadata_),
      -1);
  MasterComponentInfo_ScoreInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(1);
  static const int MasterComponentInfo_ScoreInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ScoreInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ScoreInfo, type_),
  };
  MasterComponentInfo_ScoreInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterComponentInfo_ScoreInfo_descriptor_,
      MasterComponentInfo_ScoreInfo::default_instance_,
      MasterComponentInfo_ScoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ScoreInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MasterComponentInfo_ScoreInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ScoreInfo, _internal_metadata_),
      -1);
  MasterComponentInfo_DictionaryInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(2);
  static const int MasterComponentInfo_DictionaryInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_DictionaryInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_DictionaryInfo, num_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_DictionaryInfo, byte_size_),
  };
  MasterComponentInfo_DictionaryInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterComponentInfo_DictionaryInfo_descriptor_,
      MasterComponentInfo_DictionaryInfo::default_instance_,
      MasterComponentInfo_DictionaryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_DictionaryInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MasterComponentInfo_DictionaryInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_DictionaryInfo, _internal_metadata_),
      -1);
  MasterComponentInfo_BatchInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(3);
  static const int MasterComponentInfo_BatchInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_BatchInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_BatchInfo, num_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_BatchInfo, num_tokens_),
  };
  MasterComponentInfo_BatchInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterComponentInfo_BatchInfo_descriptor_,
      MasterComponentInfo_BatchInfo::default_instance_,
      MasterComponentInfo_BatchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_BatchInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MasterComponentInfo_BatchInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_BatchInfo, _internal_metadata_),
      -1);
  MasterComponentInfo_ModelInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(4);
  static const int MasterComponentInfo_ModelInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, num_topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, num_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, byte_size_),
  };
  MasterComponentInfo_ModelInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterComponentInfo_ModelInfo_descriptor_,
      MasterComponentInfo_ModelInfo::default_instance_,
      MasterComponentInfo_ModelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MasterComponentInfo_ModelInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, _internal_metadata_),
      -1);
  MasterComponentInfo_CacheEntryInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(5);
  static const int MasterComponentInfo_CacheEntryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_CacheEntryInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_CacheEntryInfo, byte_size_),
  };
  MasterComponentInfo_CacheEntryInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterComponentInfo_CacheEntryInfo_descriptor_,
      MasterComponentInfo_CacheEntryInfo::default_instance_,
      MasterComponentInfo_CacheEntryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_CacheEntryInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(MasterComponentInfo_CacheEntryInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_CacheEntryInfo, _internal_metadata_),
      -1);
  ImportBatchesArgs_descriptor_ = file->message_type(78);
  static const int ImportBatchesArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportBatchesArgs, batch_),
  };
  ImportBatchesArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImportBatchesArgs_descriptor_,
      ImportBatchesArgs::default_instance_,
      ImportBatchesArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportBatchesArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImportBatchesArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportBatchesArgs, _internal_metadata_),
      -1);
  AwaitOperationArgs_descriptor_ = file->message_type(79);
  static const int AwaitOperationArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwaitOperationArgs, timeout_milliseconds_),
  };
  AwaitOperationArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AwaitOperationArgs_descriptor_,
      AwaitOperationArgs::default_instance_,
      AwaitOperationArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwaitOperationArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(AwaitOperationArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwaitOperationArgs, _internal_metadata_),
      -1);
  MasterModelConfig_descriptor_ = file->message_type(80);
  static const int MasterModelConfig_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, class_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, score_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, regularizer_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, num_processors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, pwt_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, nwt_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, num_document_passes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, reuse_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, opt_for_avx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, disk_cache_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, cache_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, ptd_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, transaction_typename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, transaction_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, parent_master_model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, parent_master_model_weight_),
  };
  MasterModelConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MasterModelConfig_descriptor_,
      MasterModelConfig::default_instance_,
      MasterModelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(MasterModelConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, _internal_metadata_),
      -1);
  FitOfflineMasterModelArgs_descriptor_ = file->message_type(81);
  static const int FitOfflineMasterModelArgs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, batch_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, batch_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, num_collection_passes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, batch_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, reset_nwt_),
  };
  FitOfflineMasterModelArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FitOfflineMasterModelArgs_descriptor_,
      FitOfflineMasterModelArgs::default_instance_,
      FitOfflineMasterModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(FitOfflineMasterModelArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, _internal_metadata_),
      -1);
  FitOnlineMasterModelArgs_descriptor_ = file->message_type(82);
  static const int FitOnlineMasterModelArgs_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, batch_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, batch_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, update_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, apply_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, decay_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, asynchronous_),
  };
  FitOnlineMasterModelArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FitOnlineMasterModelArgs_descriptor_,
      FitOnlineMasterModelArgs::default_instance_,
      FitOnlineMasterModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(FitOnlineMasterModelArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, _internal_metadata_),
      -1);
  TransformMasterModelArgs_descriptor_ = file->message_type(83);
  static const int TransformMasterModelArgs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, batch_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, theta_matrix_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, predict_class_id_),
  };
  TransformMasterModelArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformMasterModelArgs_descriptor_,
      TransformMasterModelArgs::default_instance_,
      TransformMasterModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransformMasterModelArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, _internal_metadata_),
      -1);
  ConfigureLoggingArgs_descriptor_ = file->message_type(84);
  static const int ConfigureLoggingArgs_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, log_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, minloglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, stderrthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, logtostderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, colorlogtostderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, alsologtostderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, logbufsecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, logbuflevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, max_log_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, stop_logging_if_full_disk_),
  };
  ConfigureLoggingArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigureLoggingArgs_descriptor_,
      ConfigureLoggingArgs::default_instance_,
      ConfigureLoggingArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConfigureLoggingArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, _internal_metadata_),
      -1);
  ClearThetaCacheArgs_descriptor_ = file->message_type(85);
  static const int ClearThetaCacheArgs_offsets_[1] = {
  };
  ClearThetaCacheArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClearThetaCacheArgs_descriptor_,
      ClearThetaCacheArgs::default_instance_,
      ClearThetaCacheArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearThetaCacheArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClearThetaCacheArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearThetaCacheArgs, _internal_metadata_),
      -1);
  ClearScoreCacheArgs_descriptor_ = file->message_type(86);
  static const int ClearScoreCacheArgs_offsets_[1] = {
  };
  ClearScoreCacheArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClearScoreCacheArgs_descriptor_,
      ClearScoreCacheArgs::default_instance_,
      ClearScoreCacheArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearScoreCacheArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClearScoreCacheArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearScoreCacheArgs, _internal_metadata_),
      -1);
  ClearScoreArrayCacheArgs_descriptor_ = file->message_type(87);
  static const int ClearScoreArrayCacheArgs_offsets_[1] = {
  };
  ClearScoreArrayCacheArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClearScoreArrayCacheArgs_descriptor_,
      ClearScoreArrayCacheArgs::default_instance_,
      ClearScoreArrayCacheArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearScoreArrayCacheArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClearScoreArrayCacheArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearScoreArrayCacheArgs, _internal_metadata_),
      -1);
  RegularizerType_descriptor_ = file->enum_type(0);
  ScoreType_descriptor_ = file->enum_type(1);
  MatrixLayout_descriptor_ = file->enum_type(2);
  ThetaMatrixType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_artm_2fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FloatArray_descriptor_, &FloatArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoolArray_descriptor_, &BoolArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IntArray_descriptor_, &IntArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StringArray_descriptor_, &StringArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Batch_descriptor_, &Batch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegularizerSettings_descriptor_, &RegularizerSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegularizerConfig_descriptor_, &RegularizerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SmoothSparseThetaConfig_descriptor_, &SmoothSparseThetaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SmoothSparsePhiConfig_descriptor_, &SmoothSparsePhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DecorrelatorPhiConfig_descriptor_, &DecorrelatorPhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiLanguagePhiConfig_descriptor_, &MultiLanguagePhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelRegularizationPhiConfig_descriptor_, &LabelRegularizationPhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpecifiedSparsePhiConfig_descriptor_, &SpecifiedSparsePhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImproveCoherencePhiConfig_descriptor_, &ImproveCoherencePhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SmoothPtdwConfig_descriptor_, &SmoothPtdwConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicSelectionThetaConfig_descriptor_, &TopicSelectionThetaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BitermsPhiConfig_descriptor_, &BitermsPhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HierarchySparsingThetaConfig_descriptor_, &HierarchySparsingThetaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicSegmentationPtdwConfig_descriptor_, &TopicSegmentationPtdwConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SmoothTimeInTopicsPhiConfig_descriptor_, &SmoothTimeInTopicsPhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetPlsaPhiConfig_descriptor_, &NetPlsaPhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformConfig_descriptor_, &TransformConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScoreConfig_descriptor_, &ScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScoreData_descriptor_, &ScoreData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScoreArray_descriptor_, &ScoreArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PerplexityScoreConfig_descriptor_, &PerplexityScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PerplexityScore_descriptor_, &PerplexityScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PerplexityScore_TransactionNameInfo_descriptor_, &PerplexityScore_TransactionNameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SparsityThetaScoreConfig_descriptor_, &SparsityThetaScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SparsityThetaScore_descriptor_, &SparsityThetaScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SparsityPhiScoreConfig_descriptor_, &SparsityPhiScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SparsityPhiScore_descriptor_, &SparsityPhiScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemsProcessedScoreConfig_descriptor_, &ItemsProcessedScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemsProcessedScore_descriptor_, &ItemsProcessedScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopTokensScoreConfig_descriptor_, &TopTokensScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopTokensScore_descriptor_, &TopTokensScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ThetaSnippetScoreConfig_descriptor_, &ThetaSnippetScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ThetaSnippetScore_descriptor_, &ThetaSnippetScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicKernelScoreConfig_descriptor_, &TopicKernelScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicKernelScore_descriptor_, &TopicKernelScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicMassPhiScoreConfig_descriptor_, &TopicMassPhiScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicMassPhiScore_descriptor_, &TopicMassPhiScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClassPrecisionScoreConfig_descriptor_, &ClassPrecisionScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClassPrecisionScore_descriptor_, &ClassPrecisionScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeakMemoryScoreConfig_descriptor_, &PeakMemoryScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeakMemoryScore_descriptor_, &PeakMemoryScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BackgroundTokensRatioScoreConfig_descriptor_, &BackgroundTokensRatioScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BackgroundTokensRatioScore_descriptor_, &BackgroundTokensRatioScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicModel_descriptor_, &TopicModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ThetaMatrix_descriptor_, &ThetaMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CollectionParserConfig_descriptor_, &CollectionParserConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CollectionParserInfo_descriptor_, &CollectionParserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CooccurrenceCollectorConfig_descriptor_, &CooccurrenceCollectorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitializeModelArgs_descriptor_, &InitializeModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DictionaryData_descriptor_, &DictionaryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FilterDictionaryArgs_descriptor_, &FilterDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GatherDictionaryArgs_descriptor_, &GatherDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetDictionaryArgs_descriptor_, &GetDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetTopicModelArgs_descriptor_, &GetTopicModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetThetaMatrixArgs_descriptor_, &GetThetaMatrixArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetScoreValueArgs_descriptor_, &GetScoreValueArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetScoreArrayArgs_descriptor_, &GetScoreArrayArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExportModelArgs_descriptor_, &ExportModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImportModelArgs_descriptor_, &ImportModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExportScoreTrackerArgs_descriptor_, &ExportScoreTrackerArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImportScoreTrackerArgs_descriptor_, &ImportScoreTrackerArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AttachModelArgs_descriptor_, &AttachModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProcessBatchesArgs_descriptor_, &ProcessBatchesArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProcessBatchesResult_descriptor_, &ProcessBatchesResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MergeModelArgs_descriptor_, &MergeModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegularizeModelArgs_descriptor_, &RegularizeModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NormalizeModelArgs_descriptor_, &NormalizeModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImportDictionaryArgs_descriptor_, &ImportDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExportDictionaryArgs_descriptor_, &ExportDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DuplicateMasterComponentArgs_descriptor_, &DuplicateMasterComponentArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMasterComponentInfoArgs_descriptor_, &GetMasterComponentInfoArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterComponentInfo_descriptor_, &MasterComponentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterComponentInfo_RegularizerInfo_descriptor_, &MasterComponentInfo_RegularizerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterComponentInfo_ScoreInfo_descriptor_, &MasterComponentInfo_ScoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterComponentInfo_DictionaryInfo_descriptor_, &MasterComponentInfo_DictionaryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterComponentInfo_BatchInfo_descriptor_, &MasterComponentInfo_BatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterComponentInfo_ModelInfo_descriptor_, &MasterComponentInfo_ModelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterComponentInfo_CacheEntryInfo_descriptor_, &MasterComponentInfo_CacheEntryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImportBatchesArgs_descriptor_, &ImportBatchesArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AwaitOperationArgs_descriptor_, &AwaitOperationArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MasterModelConfig_descriptor_, &MasterModelConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FitOfflineMasterModelArgs_descriptor_, &FitOfflineMasterModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FitOnlineMasterModelArgs_descriptor_, &FitOnlineMasterModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformMasterModelArgs_descriptor_, &TransformMasterModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigureLoggingArgs_descriptor_, &ConfigureLoggingArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClearThetaCacheArgs_descriptor_, &ClearThetaCacheArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClearScoreCacheArgs_descriptor_, &ClearScoreCacheArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClearScoreArrayCacheArgs_descriptor_, &ClearScoreArrayCacheArgs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_artm_2fmessages_2eproto() {
  delete FloatArray::default_instance_;
  delete FloatArray_reflection_;
  delete BoolArray::default_instance_;
  delete BoolArray_reflection_;
  delete IntArray::default_instance_;
  delete IntArray_reflection_;
  delete StringArray::default_instance_;
  delete StringArray_reflection_;
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete Field::_default_name_;
  delete Batch::default_instance_;
  delete Batch_reflection_;
  delete RegularizerSettings::default_instance_;
  delete RegularizerSettings_reflection_;
  delete RegularizerConfig::default_instance_;
  delete RegularizerConfig_reflection_;
  delete SmoothSparseThetaConfig::default_instance_;
  delete SmoothSparseThetaConfig_reflection_;
  delete SmoothSparsePhiConfig::default_instance_;
  delete SmoothSparsePhiConfig_reflection_;
  delete DecorrelatorPhiConfig::default_instance_;
  delete DecorrelatorPhiConfig_reflection_;
  delete MultiLanguagePhiConfig::default_instance_;
  delete MultiLanguagePhiConfig_reflection_;
  delete LabelRegularizationPhiConfig::default_instance_;
  delete LabelRegularizationPhiConfig_reflection_;
  delete SpecifiedSparsePhiConfig::default_instance_;
  delete SpecifiedSparsePhiConfig_reflection_;
  delete SpecifiedSparsePhiConfig::_default_class_id_;
  delete ImproveCoherencePhiConfig::default_instance_;
  delete ImproveCoherencePhiConfig_reflection_;
  delete SmoothPtdwConfig::default_instance_;
  delete SmoothPtdwConfig_reflection_;
  delete TopicSelectionThetaConfig::default_instance_;
  delete TopicSelectionThetaConfig_reflection_;
  delete BitermsPhiConfig::default_instance_;
  delete BitermsPhiConfig_reflection_;
  delete HierarchySparsingThetaConfig::default_instance_;
  delete HierarchySparsingThetaConfig_reflection_;
  delete TopicSegmentationPtdwConfig::default_instance_;
  delete TopicSegmentationPtdwConfig_reflection_;
  delete SmoothTimeInTopicsPhiConfig::default_instance_;
  delete SmoothTimeInTopicsPhiConfig_reflection_;
  delete SmoothTimeInTopicsPhiConfig::_default_class_id_;
  delete NetPlsaPhiConfig::default_instance_;
  delete NetPlsaPhiConfig_reflection_;
  delete TransformConfig::default_instance_;
  delete TransformConfig_reflection_;
  delete ScoreConfig::default_instance_;
  delete ScoreConfig_reflection_;
  delete ScoreData::default_instance_;
  delete ScoreData_reflection_;
  delete ScoreArray::default_instance_;
  delete ScoreArray_reflection_;
  delete PerplexityScoreConfig::default_instance_;
  delete PerplexityScoreConfig_reflection_;
  delete PerplexityScore::default_instance_;
  delete PerplexityScore_reflection_;
  delete PerplexityScore_TransactionNameInfo::default_instance_;
  delete PerplexityScore_TransactionNameInfo_reflection_;
  delete SparsityThetaScoreConfig::default_instance_;
  delete SparsityThetaScoreConfig_reflection_;
  delete SparsityThetaScore::default_instance_;
  delete SparsityThetaScore_reflection_;
  delete SparsityPhiScoreConfig::default_instance_;
  delete SparsityPhiScoreConfig_reflection_;
  delete SparsityPhiScoreConfig::_default_class_id_;
  delete SparsityPhiScore::default_instance_;
  delete SparsityPhiScore_reflection_;
  delete ItemsProcessedScoreConfig::default_instance_;
  delete ItemsProcessedScoreConfig_reflection_;
  delete ItemsProcessedScore::default_instance_;
  delete ItemsProcessedScore_reflection_;
  delete TopTokensScoreConfig::default_instance_;
  delete TopTokensScoreConfig_reflection_;
  delete TopTokensScoreConfig::_default_class_id_;
  delete TopTokensScore::default_instance_;
  delete TopTokensScore_reflection_;
  delete ThetaSnippetScoreConfig::default_instance_;
  delete ThetaSnippetScoreConfig_reflection_;
  delete ThetaSnippetScore::default_instance_;
  delete ThetaSnippetScore_reflection_;
  delete TopicKernelScoreConfig::default_instance_;
  delete TopicKernelScoreConfig_reflection_;
  delete TopicKernelScoreConfig::_default_class_id_;
  delete TopicKernelScore::default_instance_;
  delete TopicKernelScore_reflection_;
  delete TopicMassPhiScoreConfig::default_instance_;
  delete TopicMassPhiScoreConfig_reflection_;
  delete TopicMassPhiScore::default_instance_;
  delete TopicMassPhiScore_reflection_;
  delete ClassPrecisionScoreConfig::default_instance_;
  delete ClassPrecisionScoreConfig_reflection_;
  delete ClassPrecisionScore::default_instance_;
  delete ClassPrecisionScore_reflection_;
  delete PeakMemoryScoreConfig::default_instance_;
  delete PeakMemoryScoreConfig_reflection_;
  delete PeakMemoryScore::default_instance_;
  delete PeakMemoryScore_reflection_;
  delete BackgroundTokensRatioScoreConfig::default_instance_;
  delete BackgroundTokensRatioScoreConfig_reflection_;
  delete BackgroundTokensRatioScoreConfig::_default_class_id_;
  delete BackgroundTokensRatioScore::default_instance_;
  delete BackgroundTokensRatioScore_reflection_;
  delete TopicModel::default_instance_;
  delete TopicModel_reflection_;
  delete TopicModel::_default_name_;
  delete ThetaMatrix::default_instance_;
  delete ThetaMatrix_reflection_;
  delete CollectionParserConfig::default_instance_;
  delete CollectionParserConfig_reflection_;
  delete CollectionParserInfo::default_instance_;
  delete CollectionParserInfo_reflection_;
  delete CooccurrenceCollectorConfig::default_instance_;
  delete CooccurrenceCollectorConfig_reflection_;
  delete InitializeModelArgs::default_instance_;
  delete InitializeModelArgs_reflection_;
  delete DictionaryData::default_instance_;
  delete DictionaryData_reflection_;
  delete FilterDictionaryArgs::default_instance_;
  delete FilterDictionaryArgs_reflection_;
  delete GatherDictionaryArgs::default_instance_;
  delete GatherDictionaryArgs_reflection_;
  delete GetDictionaryArgs::default_instance_;
  delete GetDictionaryArgs_reflection_;
  delete GetTopicModelArgs::default_instance_;
  delete GetTopicModelArgs_reflection_;
  delete GetThetaMatrixArgs::default_instance_;
  delete GetThetaMatrixArgs_reflection_;
  delete GetScoreValueArgs::default_instance_;
  delete GetScoreValueArgs_reflection_;
  delete GetScoreArrayArgs::default_instance_;
  delete GetScoreArrayArgs_reflection_;
  delete ExportModelArgs::default_instance_;
  delete ExportModelArgs_reflection_;
  delete ImportModelArgs::default_instance_;
  delete ImportModelArgs_reflection_;
  delete ExportScoreTrackerArgs::default_instance_;
  delete ExportScoreTrackerArgs_reflection_;
  delete ImportScoreTrackerArgs::default_instance_;
  delete ImportScoreTrackerArgs_reflection_;
  delete AttachModelArgs::default_instance_;
  delete AttachModelArgs_reflection_;
  delete ProcessBatchesArgs::default_instance_;
  delete ProcessBatchesArgs_reflection_;
  delete ProcessBatchesResult::default_instance_;
  delete ProcessBatchesResult_reflection_;
  delete MergeModelArgs::default_instance_;
  delete MergeModelArgs_reflection_;
  delete RegularizeModelArgs::default_instance_;
  delete RegularizeModelArgs_reflection_;
  delete NormalizeModelArgs::default_instance_;
  delete NormalizeModelArgs_reflection_;
  delete ImportDictionaryArgs::default_instance_;
  delete ImportDictionaryArgs_reflection_;
  delete ExportDictionaryArgs::default_instance_;
  delete ExportDictionaryArgs_reflection_;
  delete DuplicateMasterComponentArgs::default_instance_;
  delete DuplicateMasterComponentArgs_reflection_;
  delete GetMasterComponentInfoArgs::default_instance_;
  delete GetMasterComponentInfoArgs_reflection_;
  delete MasterComponentInfo::default_instance_;
  delete MasterComponentInfo_reflection_;
  delete MasterComponentInfo_RegularizerInfo::default_instance_;
  delete MasterComponentInfo_RegularizerInfo_reflection_;
  delete MasterComponentInfo_ScoreInfo::default_instance_;
  delete MasterComponentInfo_ScoreInfo_reflection_;
  delete MasterComponentInfo_DictionaryInfo::default_instance_;
  delete MasterComponentInfo_DictionaryInfo_reflection_;
  delete MasterComponentInfo_BatchInfo::default_instance_;
  delete MasterComponentInfo_BatchInfo_reflection_;
  delete MasterComponentInfo_ModelInfo::default_instance_;
  delete MasterComponentInfo_ModelInfo_reflection_;
  delete MasterComponentInfo_CacheEntryInfo::default_instance_;
  delete MasterComponentInfo_CacheEntryInfo_reflection_;
  delete ImportBatchesArgs::default_instance_;
  delete ImportBatchesArgs_reflection_;
  delete AwaitOperationArgs::default_instance_;
  delete AwaitOperationArgs_reflection_;
  delete MasterModelConfig::default_instance_;
  delete MasterModelConfig_reflection_;
  delete MasterModelConfig::_default_pwt_name_;
  delete MasterModelConfig::_default_nwt_name_;
  delete FitOfflineMasterModelArgs::default_instance_;
  delete FitOfflineMasterModelArgs_reflection_;
  delete FitOnlineMasterModelArgs::default_instance_;
  delete FitOnlineMasterModelArgs_reflection_;
  delete TransformMasterModelArgs::default_instance_;
  delete TransformMasterModelArgs_reflection_;
  delete ConfigureLoggingArgs::default_instance_;
  delete ConfigureLoggingArgs_reflection_;
  delete ClearThetaCacheArgs::default_instance_;
  delete ClearThetaCacheArgs_reflection_;
  delete ClearScoreCacheArgs::default_instance_;
  delete ClearScoreCacheArgs_reflection_;
  delete ClearScoreArrayCacheArgs::default_instance_;
  delete ClearScoreArrayCacheArgs_reflection_;
}

void protobuf_AddDesc_artm_2fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_artm_2fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023artm/messages.proto\022\004artm\"\037\n\nFloatArra"
    "y\022\021\n\005value\030\001 \003(\002B\002\020\001\"\036\n\tBoolArray\022\021\n\005val"
    "ue\030\001 \003(\010B\002\020\001\"\035\n\010IntArray\022\021\n\005value\030\001 \003(\005B"
    "\002\020\001\"\034\n\013StringArray\022\r\n\005value\030\001 \003(\t\"\247\001\n\004It"
    "em\022\n\n\002id\030\001 \001(\005\022\032\n\005field\030\002 \003(\0132\013.artm.Fie"
    "ld\022\r\n\005title\030\003 \001(\t\022\020\n\010token_id\030\004 \003(\005\022\024\n\014t"
    "oken_weight\030\005 \003(\002\022\037\n\027transaction_start_i"
    "ndex\030\006 \003(\005\022\037\n\027transaction_typename_id\030\007 "
    "\003(\005\"\225\002\n\005Field\022\023\n\004name\030\001 \001(\t:\005@body\022\020\n\010to"
    "ken_id\030\002 \003(\005\022\023\n\013token_count\030\003 \003(\005\022\024\n\014tok"
    "en_offset\030\004 \003(\005\022\024\n\014string_value\030\005 \001(\t\022\021\n"
    "\tint_value\030\006 \001(\003\022\024\n\014double_value\030\007 \001(\001\022\022"
    "\n\ndate_value\030\010 \001(\t\022\024\n\014string_array\030\020 \003(\t"
    "\022\021\n\tint_array\030\021 \003(\003\022\024\n\014double_array\030\022 \003("
    "\001\022\022\n\ndate_array\030\023 \003(\t\022\024\n\014token_weight\030\024 "
    "\003(\002\"\201\001\n\005Batch\022\r\n\005token\030\001 \003(\t\022\020\n\010class_id"
    "\030\002 \003(\t\022\030\n\004item\030\003 \003(\0132\n.artm.Item\022\023\n\013desc"
    "ription\030\004 \001(\t\022\n\n\002id\030\005 \001(\t\022\034\n\024transaction"
    "_typename\030\006 \003(\t\"\?\n\023RegularizerSettings\022\014"
    "\n\004name\030\001 \001(\t\022\013\n\003tau\030\002 \001(\002\022\r\n\005gamma\030\003 \001(\002"
    "\"\240\001\n\021RegularizerConfig\022\014\n\004name\030\001 \001(\t\022<\n\004"
    "type\030\002 \001(\0162\025.artm.RegularizerType:\027Regul"
    "arizerType_Unknown\022\016\n\006config\030\003 \001(\014\022\013\n\003ta"
    "u\030\004 \001(\002\022\r\n\005gamma\030\005 \001(\002\022\023\n\013config_json\030\006 "
    "\001(\t\"\267\001\n\027SmoothSparseThetaConfig\022\022\n\ntopic"
    "_name\030\001 \003(\t\022\022\n\nalpha_iter\030\002 \003(\002\022/\n\020trans"
    "form_config\030\003 \001(\0132\025.artm.TransformConfig"
    "\022\022\n\nitem_title\030\004 \003(\t\022/\n\025item_topic_multi"
    "plier\030\005 \003(\0132\020.artm.FloatArray\"\207\001\n\025Smooth"
    "SparsePhiConfig\022\022\n\ntopic_name\030\001 \003(\t\022\020\n\010c"
    "lass_id\030\002 \003(\t\022\027\n\017dictionary_name\030\003 \001(\t\022/"
    "\n\020transform_config\030\004 \001(\0132\025.artm.Transfor"
    "mConfig\"\201\001\n\025DecorrelatorPhiConfig\022\022\n\ntop"
    "ic_name\030\001 \003(\t\022\020\n\010class_id\030\002 \003(\t\022\030\n\020first"
    "_topic_name\030\003 \003(\t\022\031\n\021second_topic_name\030\004"
    " \003(\t\022\r\n\005value\030\005 \003(\002\"\030\n\026MultiLanguagePhiC"
    "onfig\"]\n\034LabelRegularizationPhiConfig\022\022\n"
    "\ntopic_name\030\001 \003(\t\022\020\n\010class_id\030\002 \003(\t\022\027\n\017d"
    "ictionary_name\030\003 \001(\t\"\216\002\n\030SpecifiedSparse"
    "PhiConfig\022\022\n\ntopic_name\030\001 \003(\t\022 \n\010class_i"
    "d\030\002 \001(\t:\016@default_class\022\036\n\022max_elements_"
    "count\030\003 \001(\005:\00220\022#\n\025probability_threshold"
    "\030\004 \001(\002:\0040.99\022E\n\004mode\030\005 \001(\0162).artm.Specif"
    "iedSparsePhiConfig.SparseMode:\014SparseTop"
    "ics\"0\n\nSparseMode\022\020\n\014SparseTopics\020\000\022\020\n\014S"
    "parseTokens\020\001\"Z\n\031ImproveCoherencePhiConf"
    "ig\022\022\n\ntopic_name\030\001 \003(\t\022\020\n\010class_id\030\002 \003(\t"
    "\022\027\n\017dictionary_name\030\003 \001(\t\"\260\001\n\020SmoothPtdw"
    "Config\022>\n\004type\030\001 \001(\0162!.artm.SmoothPtdwCo"
    "nfig.SmoothType:\rMovingAverage\022\022\n\006window"
    "\030\003 \001(\005:\00210\022\024\n\tthreshold\030\004 \001(\002:\0011\"2\n\nSmoo"
    "thType\022\021\n\rMovingAverage\020\001\022\021\n\rMovingProdu"
    "ct\020\002\"X\n\031TopicSelectionThetaConfig\022\022\n\ntop"
    "ic_name\030\001 \003(\t\022\023\n\013topic_value\030\002 \003(\002\022\022\n\nal"
    "pha_iter\030\003 \003(\002\"Q\n\020BitermsPhiConfig\022\022\n\nto"
    "pic_name\030\001 \003(\t\022\020\n\010class_id\030\002 \003(\t\022\027\n\017dict"
    "ionary_name\030\003 \001(\t\"g\n\034HierarchySparsingTh"
    "etaConfig\022\022\n\ntopic_name\030\001 \003(\t\022\037\n\027parent_"
    "topic_proportion\030\002 \003(\002\022\022\n\nalpha_iter\030\003 \003"
    "(\002\"i\n\033TopicSegmentationPtdwConfig\022\036\n\026bac"
    "kground_topic_names\030\001 \003(\t\022\022\n\006window\030\003 \001("
    "\005:\00210\022\026\n\tthreshold\030\004 \001(\002:\0030.5\"S\n\033SmoothT"
    "imeInTopicsPhiConfig\022\022\n\ntopic_name\030\001 \003(\t"
    "\022 \n\010class_id\030\002 \001(\t:\016@default_class\"\331\001\n\020N"
    "etPlsaPhiConfig\022\020\n\010class_id\030\001 \001(\t\022\022\n\ntop"
    "ic_name\030\002 \003(\t\022\023\n\013vertex_name\030\003 \003(\t\022\025\n\rve"
    "rtex_weight\030\004 \003(\002\022\032\n\022first_vertex_index\030"
    "\005 \003(\005\022\033\n\023second_vertex_index\030\006 \003(\005\022\023\n\013ed"
    "ge_weight\030\007 \003(\002\022%\n\026symmetric_edge_weight"
    "s\030\010 \001(\010:\005false\"\250\001\n\017TransformConfig\022;\n\004ty"
    "pe\030\001 \001(\0162#.artm.TransformConfig.Transfor"
    "mType:\010Constant\022\014\n\001n\030\002 \001(\002:\0011\022\014\n\001a\030\003 \001(\002"
    ":\0011\"<\n\rTransformType\022\r\n\tLogarithm\020\000\022\016\n\nP"
    "olynomial\020\001\022\014\n\010Constant\020\002\"\206\001\n\013ScoreConfi"
    "g\022\014\n\004name\030\001 \001(\t\0220\n\004type\030\002 \001(\0162\017.artm.Sco"
    "reType:\021ScoreType_Unknown\022\016\n\006config\030\003 \001("
    "\014\022\022\n\nmodel_name\030\004 \001(\t\022\023\n\013config_json\030\005 \001"
    "(\t\"l\n\tScoreData\022\014\n\004name\030\001 \001(\t\0220\n\004type\030\002 "
    "\001(\0162\017.artm.ScoreType:\021ScoreType_Unknown\022"
    "\014\n\004data\030\003 \001(\014\022\021\n\tdata_json\030\004 \001(\t\",\n\nScor"
    "eArray\022\036\n\005score\030\001 \003(\0132\017.artm.ScoreData\"\352"
    "\001\n\025PerplexityScoreConfig\022J\n\nmodel_type\030\001"
    " \001(\0162 .artm.PerplexityScoreConfig.Type:\024"
    "UnigramDocumentModel\022\027\n\017dictionary_name\030"
    "\002 \001(\t\022\020\n\010class_id\030\003 \003(\t\022\034\n\024transaction_t"
    "ypename\030\004 \003(\t\"<\n\004Type\022\030\n\024UnigramDocument"
    "Model\020\000\022\032\n\026UnigramCollectionModel\020\001\"\215\002\n\017"
    "PerplexityScore\022\r\n\005value\030\001 \001(\002\022\013\n\003raw\030\002 "
    "\001(\001\022\022\n\nnormalizer\030\003 \001(\001\022\022\n\nzero_words\030\004 "
    "\001(\003\022L\n\031transaction_typename_info\030\005 \003(\0132)"
    ".artm.PerplexityScore.TransactionNameInf"
    "o\032h\n\023TransactionNameInfo\022\034\n\024transaction_"
    "typename\030\001 \001(\t\022\013\n\003raw\030\002 \001(\001\022\022\n\nnormalize"
    "r\030\003 \001(\001\022\022\n\nzero_words\030\004 \001(\003\"B\n\030SparsityT"
    "hetaScoreConfig\022\022\n\003eps\030\003 \001(\002:\0051e-37\022\022\n\nt"
    "opic_name\030\004 \003(\t\"N\n\022SparsityThetaScore\022\r\n"
    "\005value\030\001 \001(\002\022\023\n\013zero_topics\030\002 \001(\003\022\024\n\014tot"
    "al_topics\030\003 \001(\003\"b\n\026SparsityPhiScoreConfi"
    "g\022\022\n\003eps\030\001 \001(\002:\0051e-37\022 \n\010class_id\030\002 \001(\t:"
    "\016@default_class\022\022\n\ntopic_name\030\003 \003(\t\"L\n\020S"
    "parsityPhiScore\022\r\n\005value\030\001 \001(\002\022\023\n\013zero_t"
    "okens\030\002 \001(\003\022\024\n\014total_tokens\030\003 \001(\003\"\033\n\031Ite"
    "msProcessedScoreConfig\"{\n\023ItemsProcessed"
    "Score\022\020\n\005value\030\001 \001(\005:\0010\022\026\n\013num_batches\030\002"
    " \001(\005:\0010\022\027\n\014token_weight\030\003 \001(\002:\0010\022!\n\026toke"
    "n_weight_in_effect\030\004 \001(\002:\0010\"\236\001\n\024TopToken"
    "sScoreConfig\022\026\n\nnum_tokens\030\001 \001(\005:\00210\022 \n\010"
    "class_id\030\002 \001(\t:\016@default_class\022\022\n\ntopic_"
    "name\030\003 \003(\t\022$\n\034cooccurrence_dictionary_na"
    "me\030\004 \001(\t\022\022\n\003eps\030\005 \001(\002:\0051e-37\"\233\001\n\016TopToke"
    "nsScore\022\023\n\013num_entries\030\001 \001(\005\022\022\n\ntopic_na"
    "me\030\002 \003(\t\022\023\n\013topic_index\030\003 \003(\005\022\r\n\005token\030\004"
    " \003(\t\022\016\n\006weight\030\005 \003(\002\022\021\n\tcoherence\030\006 \003(\002\022"
    "\031\n\021average_coherence\030\007 \001(\002\"0\n\027ThetaSnipp"
    "etScoreConfig\022\025\n\tnum_items\030\004 \001(\005:\00210\"F\n\021"
    "ThetaSnippetScore\022\017\n\007item_id\030\001 \003(\005\022 \n\006va"
    "lues\030\002 \003(\0132\020.artm.FloatArray\"\261\001\n\026TopicKe"
    "rnelScoreConfig\022\022\n\003eps\030\001 \001(\002:\0051e-37\022 \n\010c"
    "lass_id\030\002 \001(\t:\016@default_class\022\022\n\ntopic_n"
    "ame\030\003 \003(\t\022\'\n\032probability_mass_threshold\030"
    "\004 \001(\002:\0030.1\022$\n\034cooccurrence_dictionary_na"
    "me\030\005 \001(\t\"\240\002\n\020TopicKernelScore\022\023\n\013kernel_"
    "size\030\001 \003(\002\022\025\n\rkernel_purity\030\002 \003(\002\022\027\n\017ker"
    "nel_contrast\030\003 \003(\002\022\033\n\023average_kernel_siz"
    "e\030\004 \001(\002\022\035\n\025average_kernel_purity\030\005 \001(\002\022\037"
    "\n\027average_kernel_contrast\030\006 \001(\002\022\021\n\tcoher"
    "ence\030\007 \003(\002\022\031\n\021average_coherence\030\010 \001(\002\022(\n"
    "\rkernel_tokens\030\t \003(\0132\021.artm.StringArray\022"
    "\022\n\ntopic_name\030\n \003(\t\"S\n\027TopicMassPhiScore"
    "Config\022\022\n\003eps\030\001 \001(\002:\0051e-37\022\020\n\010class_id\030\002"
    " \003(\t\022\022\n\ntopic_name\030\003 \003(\t\"_\n\021TopicMassPhi"
    "Score\022\r\n\005value\030\001 \001(\002\022\022\n\ntopic_name\030\002 \003(\t"
    "\022\023\n\013topic_ratio\030\003 \003(\002\022\022\n\ntopic_mass\030\004 \003("
    "\002\"\033\n\031ClassPrecisionScoreConfig\"B\n\023ClassP"
    "recisionScore\022\r\n\005value\030\001 \001(\002\022\r\n\005error\030\002 "
    "\001(\002\022\r\n\005total\030\003 \001(\002\"\027\n\025PeakMemoryScoreCon"
    "fig\" \n\017PeakMemoryScore\022\r\n\005value\030\001 \001(\003\"\226\001"
    "\n BackgroundTokensRatioScoreConfig\022\034\n\017de"
    "lta_threshold\030\001 \001(\002:\0030.5\022\031\n\013save_tokens\030"
    "\002 \001(\010:\004true\022\027\n\tdirect_kl\030\003 \001(\010:\004true\022 \n\010"
    "class_id\030\004 \001(\t:\016@default_class\":\n\032Backgr"
    "oundTokensRatioScore\022\r\n\005value\030\001 \001(\002\022\r\n\005t"
    "oken\030\002 \003(\t\"\317\001\n\nTopicModel\022\024\n\004name\030\001 \001(\t:"
    "\006@model\022\022\n\nnum_topics\030\002 \001(\005\022\022\n\ntopic_nam"
    "e\030\003 \003(\t\022\r\n\005token\030\004 \003(\t\022\'\n\rtoken_weights\030"
    "\005 \003(\0132\020.artm.FloatArray\022\020\n\010class_id\030\006 \003("
    "\t\022%\n\rtopic_indices\030\010 \003(\0132\016.artm.IntArray"
    "\022\022\n\nnum_values\030\t \001(\003\"\275\001\n\013ThetaMatrix\022\017\n\007"
    "item_id\030\002 \003(\005\022&\n\014item_weights\030\003 \003(\0132\020.ar"
    "tm.FloatArray\022\022\n\ntopic_name\030\004 \003(\t\022\022\n\nnum"
    "_topics\030\005 \001(\005\022\022\n\nitem_title\030\006 \003(\t\022%\n\rtop"
    "ic_indices\030\007 \003(\0132\016.artm.IntArray\022\022\n\nnum_"
    "values\030\010 \001(\003\"\203\006\n\026CollectionParserConfig\022"
    "L\n\006format\030\001 \001(\0162-.artm.CollectionParserC"
    "onfig.CollectionFormat:\rBagOfWordsUci\022\031\n"
    "\021docword_file_path\030\002 \001(\t\022\027\n\017vocab_file_p"
    "ath\030\003 \001(\t\022\025\n\rtarget_folder\030\004 \001(\t\022!\n\023num_"
    "items_per_batch\030\005 \001(\005:\0041000\022%\n\027use_unity"
    "_based_indices\030\006 \001(\010:\004true\022C\n\tname_type\030"
    "\007 \001(\0162*.artm.CollectionParserConfig.Batc"
    "hNameType:\004Guid\022\023\n\013num_threads\030\010 \001(\005\022\020\n\010"
    "class_id\030\t \003(\t\022\031\n\021cooc_tf_file_path\030\n \001("
    "\t\022\031\n\021cooc_df_file_path\030\013 \001(\t\022\031\n\021ppmi_tf_"
    "file_path\030\014 \001(\t\022\031\n\021ppmi_df_file_path\030\r \001"
    "(\t\022\026\n\016gather_cooc_tf\030\016 \001(\010\022\026\n\016gather_coo"
    "c_df\030\017 \001(\010\022\023\n\013gather_cooc\030\020 \001(\010\022\035\n\021cooc_"
    "window_width\030\021 \001(\005:\00210\022\026\n\013cooc_min_tf\030\022 "
    "\001(\005:\0011\022\026\n\013cooc_min_df\030\023 \001(\005:\0011\022*\n\033store_"
    "symmetric_cooc_values\030\024 \001(\010:\005false\"I\n\020Co"
    "llectionFormat\022\021\n\rBagOfWordsUci\020\000\022\020\n\014Mat"
    "rixMarket\020\001\022\020\n\014VowpalWabbit\020\002\"#\n\rBatchNa"
    "meType\022\010\n\004Guid\020\000\022\010\n\004Code\020\001\"\207\001\n\024Collectio"
    "nParserInfo\022\021\n\tnum_items\030\001 \001(\003\022\023\n\013num_ba"
    "tches\030\002 \001(\003\022\027\n\017dictionary_size\030\003 \001(\003\022\022\n\n"
    "num_tokens\030\004 \001(\003\022\032\n\022total_token_weight\030\005"
    " \001(\002\"\233\005\n\033CooccurrenceCollectorConfig\022\023\n\013"
    "gather_cooc\030\001 \001(\010\022\026\n\016gather_cooc_tf\030\002 \001("
    "\010\022\026\n\016gather_cooc_df\030\003 \001(\010\022#\n\033store_symme"
    "tric_cooc_values\030\004 \001(\010\022\031\n\021calculate_ppmi"
    "_tf\030\005 \001(\010\022\031\n\021calculate_ppmi_df\030\006 \001(\010\022\024\n\014"
    "vw_file_path\030\007 \001(\t\022\027\n\017vocab_file_path\030\010 "
    "\001(\t\022\025\n\rtarget_folder\030\t \001(\t\022\031\n\021cooc_tf_fi"
    "le_path\030\n \001(\t\022\031\n\021cooc_df_file_path\030\013 \001(\t"
    "\022\031\n\021ppmi_tf_file_path\030\014 \001(\t\022\031\n\021ppmi_df_f"
    "ile_path\030\r \001(\t\022\035\n\021cooc_window_width\030\016 \001("
    "\005:\00210\022\026\n\013cooc_min_tf\030\017 \001(\005:\0011\022\026\n\013cooc_mi"
    "n_df\030\020 \001(\005:\0011\022)\n!max_num_of_open_files_i"
    "n_a_thread\030\021 \001(\005\022!\n\023num_items_per_batch\030"
    "\022 \001(\005:\0041000\022\023\n\013num_threads\030\023 \001(\005\022\032\n\022tota"
    "l_num_of_pairs\030\024 \001(\003\022\036\n\026total_num_of_doc"
    "uments\030\025 \001(\005\022\020\n\010class_id\030\026 \003(\t\022*\n\"max_nu"
    "m_of_open_files_in_a_process\030\027 \001(\005\"h\n\023In"
    "itializeModelArgs\022\022\n\nmodel_name\030\001 \001(\t\022\027\n"
    "\017dictionary_name\030\002 \001(\t\022\022\n\ntopic_name\030\004 \003"
    "(\t\022\020\n\004seed\030\005 \001(\005:\002-1\"\204\002\n\016DictionaryData\022"
    "\014\n\004name\030\001 \001(\t\022\r\n\005token\030\002 \003(\t\022\020\n\010class_id"
    "\030\003 \003(\t\022\023\n\013token_value\030\004 \003(\002\022\020\n\010token_tf\030"
    "\005 \003(\002\022\020\n\010token_df\030\006 \003(\002\022\030\n\020cooc_first_in"
    "dex\030\007 \003(\005\022\031\n\021cooc_second_index\030\010 \003(\005\022\022\n\n"
    "cooc_value\030\t \003(\002\022\037\n\027num_items_in_collect"
    "ion\030\n \001(\003\022\017\n\007cooc_tf\030\013 \003(\002\022\017\n\007cooc_df\030\014 "
    "\003(\002\"\212\002\n\024FilterDictionaryArgs\022\027\n\017dictiona"
    "ry_name\030\001 \001(\t\022\036\n\026dictionary_target_name\030"
    "\002 \001(\t\022\020\n\010class_id\030\003 \001(\t\022\016\n\006min_df\030\004 \001(\002\022"
    "\016\n\006max_df\030\005 \001(\002\022\023\n\013min_df_rate\030\006 \001(\002\022\023\n\013"
    "max_df_rate\030\007 \001(\002\022\016\n\006min_tf\030\010 \001(\002\022\016\n\006max"
    "_tf\030\t \001(\002\022\033\n\023max_dictionary_size\030\n \001(\003\022 "
    "\n\021recalculate_value\030\013 \001(\010:\005false\"\264\001\n\024Gat"
    "herDictionaryArgs\022\036\n\026dictionary_target_n"
    "ame\030\001 \001(\t\022\021\n\tdata_path\030\002 \001(\t\022\026\n\016cooc_fil"
    "e_path\030\003 \001(\t\022\027\n\017vocab_file_path\030\004 \001(\t\022$\n"
    "\025symmetric_cooc_values\030\005 \001(\010:\005false\022\022\n\nb"
    "atch_path\030\006 \003(\t\",\n\021GetDictionaryArgs\022\027\n\017"
    "dictionary_name\030\001 \001(\t\"\312\001\n\021GetTopicModelA"
    "rgs\022\022\n\nmodel_name\030\001 \001(\t\022\022\n\ntopic_name\030\002 "
    "\003(\t\022\r\n\005token\030\003 \003(\t\022\020\n\010class_id\030\004 \003(\t\022\031\n\021"
    "use_sparse_format\030\005 \001(\010\022\022\n\003eps\030\006 \001(\002:\0051e"
    "-37\022=\n\rmatrix_layout\030\010 \001(\0162\022.artm.Matrix"
    "Layout:\022MatrixLayout_Dense\"\226\001\n\022GetThetaM"
    "atrixArgs\022\022\n\ntopic_name\030\003 \003(\t\022\031\n\021use_spa"
    "rse_format\030\006 \001(\010\022\022\n\003eps\030\007 \001(\002:\0051e-37\022=\n\r"
    "matrix_layout\030\010 \001(\0162\022.artm.MatrixLayout:"
    "\022MatrixLayout_Dense\"\'\n\021GetScoreValueArgs"
    "\022\022\n\nscore_name\030\002 \001(\t\"\'\n\021GetScoreArrayArg"
    "s\022\022\n\nscore_name\030\002 \001(\t\"8\n\017ExportModelArgs"
    "\022\021\n\tfile_name\030\001 \001(\t\022\022\n\nmodel_name\030\002 \001(\t\""
    "8\n\017ImportModelArgs\022\021\n\tfile_name\030\001 \001(\t\022\022\n"
    "\nmodel_name\030\002 \001(\t\"+\n\026ExportScoreTrackerA"
    "rgs\022\021\n\tfile_name\030\001 \001(\t\"+\n\026ImportScoreTra"
    "ckerArgs\022\021\n\tfile_name\030\001 \001(\t\"%\n\017AttachMod"
    "elArgs\022\022\n\nmodel_name\030\001 \001(\t\"\256\004\n\022ProcessBa"
    "tchesArgs\022\027\n\017nwt_target_name\030\001 \001(\t\022\026\n\016ba"
    "tch_filename\030\002 \003(\t\022\027\n\017pwt_source_name\030\003 "
    "\001(\t\022\037\n\023num_document_passes\030\004 \001(\005:\00210\022\030\n\020"
    "regularizer_name\030\006 \003(\t\022\027\n\017regularizer_ta"
    "u\030\007 \003(\002\022\020\n\010class_id\030\010 \003(\t\022\024\n\014class_weigh"
    "t\030\t \003(\002\022\032\n\013reuse_theta\030\n \001(\010:\005false\022\031\n\013o"
    "pt_for_avx\030\013 \001(\010:\004true\022G\n\021theta_matrix_t"
    "ype\030\016 \001(\0162\025.artm.ThetaMatrixType:\025ThetaM"
    "atrixType_Cache\022\024\n\014batch_weight\030\017 \003(\002\022\030\n"
    "\020predict_class_id\030\021 \001(\t\022\032\n\005batch\030\022 \003(\0132\013"
    ".artm.Batch\022\037\n\020use_random_theta\030\023 \001(\010:\005f"
    "alse\022\022\n\ntopic_name\030\024 \003(\t\022\034\n\024transaction_"
    "typename\030\025 \003(\t\022\032\n\022transaction_weight\030\026 \003"
    "(\002\022\027\n\treset_nwt\030\027 \001(\010:\004true\"d\n\024ProcessBa"
    "tchesResult\022#\n\nscore_data\030\001 \003(\0132\017.artm.S"
    "coreData\022\'\n\014theta_matrix\030\002 \001(\0132\021.artm.Th"
    "etaMatrix\"\206\001\n\016MergeModelArgs\022\027\n\017nwt_targ"
    "et_name\030\001 \001(\t\022\027\n\017nwt_source_name\030\002 \003(\t\022\025"
    "\n\rsource_weight\030\003 \003(\002\022\022\n\ntopic_name\030\004 \003("
    "\t\022\027\n\017dictionary_name\030\005 \001(\t\"\231\001\n\023Regulariz"
    "eModelArgs\022\027\n\017rwt_target_name\030\001 \001(\t\022\027\n\017p"
    "wt_source_name\030\002 \001(\t\022\027\n\017nwt_source_name\030"
    "\003 \001(\t\0227\n\024regularizer_settings\030\004 \003(\0132\031.ar"
    "tm.RegularizerSettings\"_\n\022NormalizeModel"
    "Args\022\027\n\017pwt_target_name\030\001 \001(\t\022\027\n\017nwt_sou"
    "rce_name\030\002 \001(\t\022\027\n\017rwt_source_name\030\003 \001(\t\""
    "B\n\024ImportDictionaryArgs\022\021\n\tfile_name\030\001 \001"
    "(\t\022\027\n\017dictionary_name\030\002 \001(\t\"B\n\024ExportDic"
    "tionaryArgs\022\021\n\tfile_name\030\001 \001(\t\022\027\n\017dictio"
    "nary_name\030\002 \001(\t\"\036\n\034DuplicateMasterCompon"
    "entArgs\"\034\n\032GetMasterComponentInfoArgs\"\305\006"
    "\n\023MasterComponentInfo\022\'\n\006config\030\002 \001(\0132\027."
    "artm.MasterModelConfig\022>\n\013regularizer\030\003 "
    "\003(\0132).artm.MasterComponentInfo.Regulariz"
    "erInfo\0222\n\005score\030\004 \003(\0132#.artm.MasterCompo"
    "nentInfo.ScoreInfo\022<\n\ndictionary\030\005 \003(\0132("
    ".artm.MasterComponentInfo.DictionaryInfo"
    "\0222\n\005model\030\006 \003(\0132#.artm.MasterComponentIn"
    "fo.ModelInfo\022=\n\013cache_entry\030\007 \003(\0132(.artm"
    ".MasterComponentInfo.CacheEntryInfo\022\034\n\024p"
    "rocessor_queue_size\030\t \001(\005\0222\n\005batch\030\n \003(\013"
    "2#.artm.MasterComponentInfo.BatchInfo\022\026\n"
    "\016num_processors\030\013 \001(\005\032-\n\017RegularizerInfo"
    "\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\032\'\n\tScoreInf"
    "o\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\032F\n\016Diction"
    "aryInfo\022\014\n\004name\030\001 \001(\t\022\023\n\013num_entries\030\002 \001"
    "(\003\022\021\n\tbyte_size\030\003 \001(\003\032@\n\tBatchInfo\022\014\n\004na"
    "me\030\001 \001(\t\022\021\n\tnum_items\030\002 \001(\005\022\022\n\nnum_token"
    "s\030\003 \001(\005\032b\n\tModelInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004ty"
    "pe\030\002 \001(\t\022\022\n\nnum_topics\030\003 \001(\005\022\022\n\nnum_toke"
    "ns\030\004 \001(\005\022\021\n\tbyte_size\030\005 \001(\003\0320\n\016CacheEntr"
    "yInfo\022\013\n\003key\030\001 \001(\t\022\021\n\tbyte_size\030\002 \001(\005\"/\n"
    "\021ImportBatchesArgs\022\032\n\005batch\030\003 \003(\0132\013.artm"
    ".Batch\"6\n\022AwaitOperationArgs\022 \n\024timeout_"
    "milliseconds\030\001 \001(\005:\002-1\"\221\004\n\021MasterModelCo"
    "nfig\022\022\n\ntopic_name\030\001 \003(\t\022\020\n\010class_id\030\002 \003"
    "(\t\022\024\n\014class_weight\030\003 \003(\002\022\'\n\014score_config"
    "\030\004 \003(\0132\021.artm.ScoreConfig\0223\n\022regularizer"
    "_config\030\005 \003(\0132\027.artm.RegularizerConfig\022\026"
    "\n\016num_processors\030\006 \001(\005\022\025\n\010pwt_name\030\007 \001(\t"
    ":\003pwt\022\025\n\010nwt_name\030\010 \001(\t:\003nwt\022\033\n\023num_docu"
    "ment_passes\030\t \001(\005\022\032\n\013reuse_theta\030\n \001(\010:\005"
    "false\022\031\n\013opt_for_avx\030\013 \001(\010:\004true\022\027\n\017disk"
    "_cache_path\030\r \001(\t\022\032\n\013cache_theta\030\017 \001(\010:\005"
    "false\022\022\n\010ptd_name\030\020 \001(\t:\000\022\034\n\024transaction"
    "_typename\030\021 \003(\t\022\032\n\022transaction_weight\030\022 "
    "\003(\002\022\036\n\026parent_master_model_id\030\023 \001(\005\022%\n\032p"
    "arent_master_model_weight\030\024 \001(\002:\0011\"\232\001\n\031F"
    "itOfflineMasterModelArgs\022\026\n\016batch_filena"
    "me\030\001 \003(\t\022\024\n\014batch_weight\030\002 \003(\002\022 \n\025num_co"
    "llection_passes\030\003 \001(\005:\0011\022\024\n\014batch_folder"
    "\030\004 \001(\t\022\027\n\treset_nwt\030\005 \001(\010:\004true\"\247\001\n\030FitO"
    "nlineMasterModelArgs\022\026\n\016batch_filename\030\001"
    " \003(\t\022\024\n\014batch_weight\030\002 \003(\002\022\024\n\014update_aft"
    "er\030\003 \003(\005\022\024\n\014apply_weight\030\004 \003(\002\022\024\n\014decay_"
    "weight\030\005 \003(\002\022\033\n\014asynchronous\030\006 \001(\010:\005fals"
    "e\"\261\001\n\030TransformMasterModelArgs\022\032\n\005batch\030"
    "\001 \003(\0132\013.artm.Batch\022\026\n\016batch_filename\030\002 \003"
    "(\t\022G\n\021theta_matrix_type\030\003 \001(\0162\025.artm.The"
    "taMatrixType:\025ThetaMatrixType_Dense\022\030\n\020p"
    "redict_class_id\030\004 \001(\t\"\377\001\n\024ConfigureLoggi"
    "ngArgs\022\017\n\007log_dir\030\001 \001(\t\022\023\n\013minloglevel\030\002"
    " \001(\005\022\027\n\017stderrthreshold\030\003 \001(\005\022\023\n\013logtost"
    "derr\030\004 \001(\010\022\030\n\020colorlogtostderr\030\005 \001(\010\022\027\n\017"
    "alsologtostderr\030\006 \001(\010\022\022\n\nlogbufsecs\030\007 \001("
    "\005\022\023\n\013logbuflevel\030\010 \001(\005\022\024\n\014max_log_size\030\t"
    " \001(\005\022!\n\031stop_logging_if_full_disk\030\n \001(\010\""
    "\025\n\023ClearThetaCacheArgs\"\025\n\023ClearScoreCach"
    "eArgs\"\032\n\030ClearScoreArrayCacheArgs*\316\004\n\017Re"
    "gularizerType\022%\n!RegularizerType_SmoothS"
    "parseTheta\020\000\022#\n\037RegularizerType_SmoothSp"
    "arsePhi\020\001\022#\n\037RegularizerType_Decorrelato"
    "rPhi\020\002\022$\n RegularizerType_MultiLanguageP"
    "hi\020\003\022*\n&RegularizerType_LabelRegularizat"
    "ionPhi\020\004\022&\n\"RegularizerType_SpecifiedSpa"
    "rsePhi\020\005\022\'\n#RegularizerType_ImproveCoher"
    "encePhi\020\006\022\036\n\032RegularizerType_SmoothPtdw\020"
    "\007\022\'\n#RegularizerType_TopicSelectionTheta"
    "\020\010\022\036\n\032RegularizerType_BitermsPhi\020\t\022*\n&Re"
    "gularizerType_HierarchySparsingTheta\020\n\022)"
    "\n%RegularizerType_TopicSegmentationPtdw\020"
    "\013\022)\n%RegularizerType_SmoothTimeInTopicsP"
    "hi\020\014\022\036\n\032RegularizerType_NetPlsaPhi\020\r\022\034\n\027"
    "RegularizerType_Unknown\020\217N*\334\002\n\tScoreType"
    "\022\030\n\024ScoreType_Perplexity\020\000\022\033\n\027ScoreType_"
    "SparsityTheta\020\001\022\031\n\025ScoreType_SparsityPhi"
    "\020\002\022\034\n\030ScoreType_ItemsProcessed\020\003\022\027\n\023Scor"
    "eType_TopTokens\020\004\022\032\n\026ScoreType_ThetaSnip"
    "pet\020\005\022\031\n\025ScoreType_TopicKernel\020\006\022\032\n\026Scor"
    "eType_TopicMassPhi\020\007\022\034\n\030ScoreType_ClassP"
    "recision\020\010\022\030\n\024ScoreType_PeakMemory\020\t\022#\n\037"
    "ScoreType_BackgroundTokensRatio\020\n\022\026\n\021Sco"
    "reType_Unknown\020\217N*\?\n\014MatrixLayout\022\026\n\022Mat"
    "rixLayout_Dense\020\000\022\027\n\023MatrixLayout_Sparse"
    "\020\001*\274\001\n\017ThetaMatrixType\022\030\n\024ThetaMatrixTyp"
    "e_None\020\000\022\031\n\025ThetaMatrixType_Dense\020\001\022\032\n\026T"
    "hetaMatrixType_Sparse\020\002\022\031\n\025ThetaMatrixTy"
    "pe_Cache\020\003\022\035\n\031ThetaMatrixType_DensePtdw\020"
    "\004\022\036\n\032ThetaMatrixType_SparsePtdw\020\005", 13993);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "artm/messages.proto", &protobuf_RegisterTypes);
  FloatArray::default_instance_ = new FloatArray();
  BoolArray::default_instance_ = new BoolArray();
  IntArray::default_instance_ = new IntArray();
  StringArray::default_instance_ = new StringArray();
  Item::default_instance_ = new Item();
  Field::_default_name_ =
      new ::std::string("@body", 5);
  Field::default_instance_ = new Field();
  Batch::default_instance_ = new Batch();
  RegularizerSettings::default_instance_ = new RegularizerSettings();
  RegularizerConfig::default_instance_ = new RegularizerConfig();
  SmoothSparseThetaConfig::default_instance_ = new SmoothSparseThetaConfig();
  SmoothSparsePhiConfig::default_instance_ = new SmoothSparsePhiConfig();
  DecorrelatorPhiConfig::default_instance_ = new DecorrelatorPhiConfig();
  MultiLanguagePhiConfig::default_instance_ = new MultiLanguagePhiConfig();
  LabelRegularizationPhiConfig::default_instance_ = new LabelRegularizationPhiConfig();
  SpecifiedSparsePhiConfig::_default_class_id_ =
      new ::std::string("@default_class", 14);
  SpecifiedSparsePhiConfig::default_instance_ = new SpecifiedSparsePhiConfig();
  ImproveCoherencePhiConfig::default_instance_ = new ImproveCoherencePhiConfig();
  SmoothPtdwConfig::default_instance_ = new SmoothPtdwConfig();
  TopicSelectionThetaConfig::default_instance_ = new TopicSelectionThetaConfig();
  BitermsPhiConfig::default_instance_ = new BitermsPhiConfig();
  HierarchySparsingThetaConfig::default_instance_ = new HierarchySparsingThetaConfig();
  TopicSegmentationPtdwConfig::default_instance_ = new TopicSegmentationPtdwConfig();
  SmoothTimeInTopicsPhiConfig::_default_class_id_ =
      new ::std::string("@default_class", 14);
  SmoothTimeInTopicsPhiConfig::default_instance_ = new SmoothTimeInTopicsPhiConfig();
  NetPlsaPhiConfig::default_instance_ = new NetPlsaPhiConfig();
  TransformConfig::default_instance_ = new TransformConfig();
  ScoreConfig::default_instance_ = new ScoreConfig();
  ScoreData::default_instance_ = new ScoreData();
  ScoreArray::default_instance_ = new ScoreArray();
  PerplexityScoreConfig::default_instance_ = new PerplexityScoreConfig();
  PerplexityScore::default_instance_ = new PerplexityScore();
  PerplexityScore_TransactionNameInfo::default_instance_ = new PerplexityScore_TransactionNameInfo();
  SparsityThetaScoreConfig::default_instance_ = new SparsityThetaScoreConfig();
  SparsityThetaScore::default_instance_ = new SparsityThetaScore();
  SparsityPhiScoreConfig::_default_class_id_ =
      new ::std::string("@default_class", 14);
  SparsityPhiScoreConfig::default_instance_ = new SparsityPhiScoreConfig();
  SparsityPhiScore::default_instance_ = new SparsityPhiScore();
  ItemsProcessedScoreConfig::default_instance_ = new ItemsProcessedScoreConfig();
  ItemsProcessedScore::default_instance_ = new ItemsProcessedScore();
  TopTokensScoreConfig::_default_class_id_ =
      new ::std::string("@default_class", 14);
  TopTokensScoreConfig::default_instance_ = new TopTokensScoreConfig();
  TopTokensScore::default_instance_ = new TopTokensScore();
  ThetaSnippetScoreConfig::default_instance_ = new ThetaSnippetScoreConfig();
  ThetaSnippetScore::default_instance_ = new ThetaSnippetScore();
  TopicKernelScoreConfig::_default_class_id_ =
      new ::std::string("@default_class", 14);
  TopicKernelScoreConfig::default_instance_ = new TopicKernelScoreConfig();
  TopicKernelScore::default_instance_ = new TopicKernelScore();
  TopicMassPhiScoreConfig::default_instance_ = new TopicMassPhiScoreConfig();
  TopicMassPhiScore::default_instance_ = new TopicMassPhiScore();
  ClassPrecisionScoreConfig::default_instance_ = new ClassPrecisionScoreConfig();
  ClassPrecisionScore::default_instance_ = new ClassPrecisionScore();
  PeakMemoryScoreConfig::default_instance_ = new PeakMemoryScoreConfig();
  PeakMemoryScore::default_instance_ = new PeakMemoryScore();
  BackgroundTokensRatioScoreConfig::_default_class_id_ =
      new ::std::string("@default_class", 14);
  BackgroundTokensRatioScoreConfig::default_instance_ = new BackgroundTokensRatioScoreConfig();
  BackgroundTokensRatioScore::default_instance_ = new BackgroundTokensRatioScore();
  TopicModel::_default_name_ =
      new ::std::string("@model", 6);
  TopicModel::default_instance_ = new TopicModel();
  ThetaMatrix::default_instance_ = new ThetaMatrix();
  CollectionParserConfig::default_instance_ = new CollectionParserConfig();
  CollectionParserInfo::default_instance_ = new CollectionParserInfo();
  CooccurrenceCollectorConfig::default_instance_ = new CooccurrenceCollectorConfig();
  InitializeModelArgs::default_instance_ = new InitializeModelArgs();
  DictionaryData::default_instance_ = new DictionaryData();
  FilterDictionaryArgs::default_instance_ = new FilterDictionaryArgs();
  GatherDictionaryArgs::default_instance_ = new GatherDictionaryArgs();
  GetDictionaryArgs::default_instance_ = new GetDictionaryArgs();
  GetTopicModelArgs::default_instance_ = new GetTopicModelArgs();
  GetThetaMatrixArgs::default_instance_ = new GetThetaMatrixArgs();
  GetScoreValueArgs::default_instance_ = new GetScoreValueArgs();
  GetScoreArrayArgs::default_instance_ = new GetScoreArrayArgs();
  ExportModelArgs::default_instance_ = new ExportModelArgs();
  ImportModelArgs::default_instance_ = new ImportModelArgs();
  ExportScoreTrackerArgs::default_instance_ = new ExportScoreTrackerArgs();
  ImportScoreTrackerArgs::default_instance_ = new ImportScoreTrackerArgs();
  AttachModelArgs::default_instance_ = new AttachModelArgs();
  ProcessBatchesArgs::default_instance_ = new ProcessBatchesArgs();
  ProcessBatchesResult::default_instance_ = new ProcessBatchesResult();
  MergeModelArgs::default_instance_ = new MergeModelArgs();
  RegularizeModelArgs::default_instance_ = new RegularizeModelArgs();
  NormalizeModelArgs::default_instance_ = new NormalizeModelArgs();
  ImportDictionaryArgs::default_instance_ = new ImportDictionaryArgs();
  ExportDictionaryArgs::default_instance_ = new ExportDictionaryArgs();
  DuplicateMasterComponentArgs::default_instance_ = new DuplicateMasterComponentArgs();
  GetMasterComponentInfoArgs::default_instance_ = new GetMasterComponentInfoArgs();
  MasterComponentInfo::default_instance_ = new MasterComponentInfo();
  MasterComponentInfo_RegularizerInfo::default_instance_ = new MasterComponentInfo_RegularizerInfo();
  MasterComponentInfo_ScoreInfo::default_instance_ = new MasterComponentInfo_ScoreInfo();
  MasterComponentInfo_DictionaryInfo::default_instance_ = new MasterComponentInfo_DictionaryInfo();
  MasterComponentInfo_BatchInfo::default_instance_ = new MasterComponentInfo_BatchInfo();
  MasterComponentInfo_ModelInfo::default_instance_ = new MasterComponentInfo_ModelInfo();
  MasterComponentInfo_CacheEntryInfo::default_instance_ = new MasterComponentInfo_CacheEntryInfo();
  ImportBatchesArgs::default_instance_ = new ImportBatchesArgs();
  AwaitOperationArgs::default_instance_ = new AwaitOperationArgs();
  MasterModelConfig::_default_pwt_name_ =
      new ::std::string("pwt", 3);
  MasterModelConfig::_default_nwt_name_ =
      new ::std::string("nwt", 3);
  MasterModelConfig::default_instance_ = new MasterModelConfig();
  FitOfflineMasterModelArgs::default_instance_ = new FitOfflineMasterModelArgs();
  FitOnlineMasterModelArgs::default_instance_ = new FitOnlineMasterModelArgs();
  TransformMasterModelArgs::default_instance_ = new TransformMasterModelArgs();
  ConfigureLoggingArgs::default_instance_ = new ConfigureLoggingArgs();
  ClearThetaCacheArgs::default_instance_ = new ClearThetaCacheArgs();
  ClearScoreCacheArgs::default_instance_ = new ClearScoreCacheArgs();
  ClearScoreArrayCacheArgs::default_instance_ = new ClearScoreArrayCacheArgs();
  FloatArray::default_instance_->InitAsDefaultInstance();
  BoolArray::default_instance_->InitAsDefaultInstance();
  IntArray::default_instance_->InitAsDefaultInstance();
  StringArray::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  Field::default_instance_->InitAsDefaultInstance();
  Batch::default_instance_->InitAsDefaultInstance();
  RegularizerSettings::default_instance_->InitAsDefaultInstance();
  RegularizerConfig::default_instance_->InitAsDefaultInstance();
  SmoothSparseThetaConfig::default_instance_->InitAsDefaultInstance();
  SmoothSparsePhiConfig::default_instance_->InitAsDefaultInstance();
  DecorrelatorPhiConfig::default_instance_->InitAsDefaultInstance();
  MultiLanguagePhiConfig::default_instance_->InitAsDefaultInstance();
  LabelRegularizationPhiConfig::default_instance_->InitAsDefaultInstance();
  SpecifiedSparsePhiConfig::default_instance_->InitAsDefaultInstance();
  ImproveCoherencePhiConfig::default_instance_->InitAsDefaultInstance();
  SmoothPtdwConfig::default_instance_->InitAsDefaultInstance();
  TopicSelectionThetaConfig::default_instance_->InitAsDefaultInstance();
  BitermsPhiConfig::default_instance_->InitAsDefaultInstance();
  HierarchySparsingThetaConfig::default_instance_->InitAsDefaultInstance();
  TopicSegmentationPtdwConfig::default_instance_->InitAsDefaultInstance();
  SmoothTimeInTopicsPhiConfig::default_instance_->InitAsDefaultInstance();
  NetPlsaPhiConfig::default_instance_->InitAsDefaultInstance();
  TransformConfig::default_instance_->InitAsDefaultInstance();
  ScoreConfig::default_instance_->InitAsDefaultInstance();
  ScoreData::default_instance_->InitAsDefaultInstance();
  ScoreArray::default_instance_->InitAsDefaultInstance();
  PerplexityScoreConfig::default_instance_->InitAsDefaultInstance();
  PerplexityScore::default_instance_->InitAsDefaultInstance();
  PerplexityScore_TransactionNameInfo::default_instance_->InitAsDefaultInstance();
  SparsityThetaScoreConfig::default_instance_->InitAsDefaultInstance();
  SparsityThetaScore::default_instance_->InitAsDefaultInstance();
  SparsityPhiScoreConfig::default_instance_->InitAsDefaultInstance();
  SparsityPhiScore::default_instance_->InitAsDefaultInstance();
  ItemsProcessedScoreConfig::default_instance_->InitAsDefaultInstance();
  ItemsProcessedScore::default_instance_->InitAsDefaultInstance();
  TopTokensScoreConfig::default_instance_->InitAsDefaultInstance();
  TopTokensScore::default_instance_->InitAsDefaultInstance();
  ThetaSnippetScoreConfig::default_instance_->InitAsDefaultInstance();
  ThetaSnippetScore::default_instance_->InitAsDefaultInstance();
  TopicKernelScoreConfig::default_instance_->InitAsDefaultInstance();
  TopicKernelScore::default_instance_->InitAsDefaultInstance();
  TopicMassPhiScoreConfig::default_instance_->InitAsDefaultInstance();
  TopicMassPhiScore::default_instance_->InitAsDefaultInstance();
  ClassPrecisionScoreConfig::default_instance_->InitAsDefaultInstance();
  ClassPrecisionScore::default_instance_->InitAsDefaultInstance();
  PeakMemoryScoreConfig::default_instance_->InitAsDefaultInstance();
  PeakMemoryScore::default_instance_->InitAsDefaultInstance();
  BackgroundTokensRatioScoreConfig::default_instance_->InitAsDefaultInstance();
  BackgroundTokensRatioScore::default_instance_->InitAsDefaultInstance();
  TopicModel::default_instance_->InitAsDefaultInstance();
  ThetaMatrix::default_instance_->InitAsDefaultInstance();
  CollectionParserConfig::default_instance_->InitAsDefaultInstance();
  CollectionParserInfo::default_instance_->InitAsDefaultInstance();
  CooccurrenceCollectorConfig::default_instance_->InitAsDefaultInstance();
  InitializeModelArgs::default_instance_->InitAsDefaultInstance();
  DictionaryData::default_instance_->InitAsDefaultInstance();
  FilterDictionaryArgs::default_instance_->InitAsDefaultInstance();
  GatherDictionaryArgs::default_instance_->InitAsDefaultInstance();
  GetDictionaryArgs::default_instance_->InitAsDefaultInstance();
  GetTopicModelArgs::default_instance_->InitAsDefaultInstance();
  GetThetaMatrixArgs::default_instance_->InitAsDefaultInstance();
  GetScoreValueArgs::default_instance_->InitAsDefaultInstance();
  GetScoreArrayArgs::default_instance_->InitAsDefaultInstance();
  ExportModelArgs::default_instance_->InitAsDefaultInstance();
  ImportModelArgs::default_instance_->InitAsDefaultInstance();
  ExportScoreTrackerArgs::default_instance_->InitAsDefaultInstance();
  ImportScoreTrackerArgs::default_instance_->InitAsDefaultInstance();
  AttachModelArgs::default_instance_->InitAsDefaultInstance();
  ProcessBatchesArgs::default_instance_->InitAsDefaultInstance();
  ProcessBatchesResult::default_instance_->InitAsDefaultInstance();
  MergeModelArgs::default_instance_->InitAsDefaultInstance();
  RegularizeModelArgs::default_instance_->InitAsDefaultInstance();
  NormalizeModelArgs::default_instance_->InitAsDefaultInstance();
  ImportDictionaryArgs::default_instance_->InitAsDefaultInstance();
  ExportDictionaryArgs::default_instance_->InitAsDefaultInstance();
  DuplicateMasterComponentArgs::default_instance_->InitAsDefaultInstance();
  GetMasterComponentInfoArgs::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_RegularizerInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_ScoreInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_DictionaryInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_BatchInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_ModelInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_CacheEntryInfo::default_instance_->InitAsDefaultInstance();
  ImportBatchesArgs::default_instance_->InitAsDefaultInstance();
  AwaitOperationArgs::default_instance_->InitAsDefaultInstance();
  MasterModelConfig::default_instance_->InitAsDefaultInstance();
  FitOfflineMasterModelArgs::default_instance_->InitAsDefaultInstance();
  FitOnlineMasterModelArgs::default_instance_->InitAsDefaultInstance();
  TransformMasterModelArgs::default_instance_->InitAsDefaultInstance();
  ConfigureLoggingArgs::default_instance_->InitAsDefaultInstance();
  ClearThetaCacheArgs::default_instance_->InitAsDefaultInstance();
  ClearScoreCacheArgs::default_instance_->InitAsDefaultInstance();
  ClearScoreArrayCacheArgs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_artm_2fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_artm_2fmessages_2eproto {
  StaticDescriptorInitializer_artm_2fmessages_2eproto() {
    protobuf_AddDesc_artm_2fmessages_2eproto();
  }
} static_descriptor_initializer_artm_2fmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* RegularizerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizerType_descriptor_;
}
bool RegularizerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 9999:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScoreType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreType_descriptor_;
}
bool ScoreType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 9999:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatrixLayout_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixLayout_descriptor_;
}
bool MatrixLayout_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ThetaMatrixType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThetaMatrixType_descriptor_;
}
bool ThetaMatrixType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatArray::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatArray::FloatArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.FloatArray)
}

void FloatArray::InitAsDefaultInstance() {
}

FloatArray::FloatArray(const FloatArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.FloatArray)
}

void FloatArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatArray::~FloatArray() {
  // @@protoc_insertion_point(destructor:artm.FloatArray)
  SharedDtor();
}

void FloatArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatArray_descriptor_;
}

const FloatArray& FloatArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

FloatArray* FloatArray::default_instance_ = NULL;

FloatArray* FloatArray::New(::google::protobuf::Arena* arena) const {
  FloatArray* n = new FloatArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FloatArray::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.FloatArray)
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FloatArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.FloatArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.FloatArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.FloatArray)
  return false;
#undef DO_
}

void FloatArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.FloatArray)
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.FloatArray)
}

::google::protobuf::uint8* FloatArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.FloatArray)
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.FloatArray)
  return target;
}

int FloatArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.FloatArray)
  int total_size = 0;

  // repeated float value = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.FloatArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FloatArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.FloatArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.FloatArray)
    MergeFrom(*source);
  }
}

void FloatArray::MergeFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.FloatArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FloatArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.FloatArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatArray::CopyFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.FloatArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatArray::IsInitialized() const {

  return true;
}

void FloatArray::Swap(FloatArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatArray::InternalSwap(FloatArray* other) {
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FloatArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatArray_descriptor_;
  metadata.reflection = FloatArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatArray

// repeated float value = 1 [packed = true];
int FloatArray::value_size() const {
  return value_.size();
}
void FloatArray::clear_value() {
  value_.Clear();
}
 float FloatArray::value(int index) const {
  // @@protoc_insertion_point(field_get:artm.FloatArray.value)
  return value_.Get(index);
}
 void FloatArray::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FloatArray.value)
}
 void FloatArray::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FloatArray.value)
}
 const ::google::protobuf::RepeatedField< float >&
FloatArray::value() const {
  // @@protoc_insertion_point(field_list:artm.FloatArray.value)
  return value_;
}
 ::google::protobuf::RepeatedField< float >*
FloatArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.FloatArray.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolArray::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolArray::BoolArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.BoolArray)
}

void BoolArray::InitAsDefaultInstance() {
}

BoolArray::BoolArray(const BoolArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.BoolArray)
}

void BoolArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoolArray::~BoolArray() {
  // @@protoc_insertion_point(destructor:artm.BoolArray)
  SharedDtor();
}

void BoolArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoolArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoolArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoolArray_descriptor_;
}

const BoolArray& BoolArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

BoolArray* BoolArray::default_instance_ = NULL;

BoolArray* BoolArray::New(::google::protobuf::Arena* arena) const {
  BoolArray* n = new BoolArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoolArray::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.BoolArray)
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BoolArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.BoolArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool value = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_value())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.BoolArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.BoolArray)
  return false;
#undef DO_
}

void BoolArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.BoolArray)
  // repeated bool value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.BoolArray)
}

::google::protobuf::uint8* BoolArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.BoolArray)
  // repeated bool value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.BoolArray)
  return target;
}

int BoolArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.BoolArray)
  int total_size = 0;

  // repeated bool value = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoolArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.BoolArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BoolArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoolArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.BoolArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.BoolArray)
    MergeFrom(*source);
  }
}

void BoolArray::MergeFrom(const BoolArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.BoolArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BoolArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.BoolArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolArray::CopyFrom(const BoolArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.BoolArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolArray::IsInitialized() const {

  return true;
}

void BoolArray::Swap(BoolArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolArray::InternalSwap(BoolArray* other) {
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoolArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoolArray_descriptor_;
  metadata.reflection = BoolArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoolArray

// repeated bool value = 1 [packed = true];
int BoolArray::value_size() const {
  return value_.size();
}
void BoolArray::clear_value() {
  value_.Clear();
}
 bool BoolArray::value(int index) const {
  // @@protoc_insertion_point(field_get:artm.BoolArray.value)
  return value_.Get(index);
}
 void BoolArray::set_value(int index, bool value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.BoolArray.value)
}
 void BoolArray::add_value(bool value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.BoolArray.value)
}
 const ::google::protobuf::RepeatedField< bool >&
BoolArray::value() const {
  // @@protoc_insertion_point(field_list:artm.BoolArray.value)
  return value_;
}
 ::google::protobuf::RepeatedField< bool >*
BoolArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.BoolArray.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntArray::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntArray::IntArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.IntArray)
}

void IntArray::InitAsDefaultInstance() {
}

IntArray::IntArray(const IntArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.IntArray)
}

void IntArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntArray::~IntArray() {
  // @@protoc_insertion_point(destructor:artm.IntArray)
  SharedDtor();
}

void IntArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntArray_descriptor_;
}

const IntArray& IntArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

IntArray* IntArray::default_instance_ = NULL;

IntArray* IntArray::New(::google::protobuf::Arena* arena) const {
  IntArray* n = new IntArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntArray::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.IntArray)
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IntArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.IntArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 value = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.IntArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.IntArray)
  return false;
#undef DO_
}

void IntArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.IntArray)
  // repeated int32 value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.IntArray)
}

::google::protobuf::uint8* IntArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.IntArray)
  // repeated int32 value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.IntArray)
  return target;
}

int IntArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.IntArray)
  int total_size = 0;

  // repeated int32 value = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.IntArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IntArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IntArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.IntArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.IntArray)
    MergeFrom(*source);
  }
}

void IntArray::MergeFrom(const IntArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.IntArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IntArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.IntArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntArray::CopyFrom(const IntArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.IntArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntArray::IsInitialized() const {

  return true;
}

void IntArray::Swap(IntArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntArray::InternalSwap(IntArray* other) {
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntArray_descriptor_;
  metadata.reflection = IntArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntArray

// repeated int32 value = 1 [packed = true];
int IntArray::value_size() const {
  return value_.size();
}
void IntArray::clear_value() {
  value_.Clear();
}
 ::google::protobuf::int32 IntArray::value(int index) const {
  // @@protoc_insertion_point(field_get:artm.IntArray.value)
  return value_.Get(index);
}
 void IntArray::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.IntArray.value)
}
 void IntArray::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.IntArray.value)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IntArray::value() const {
  // @@protoc_insertion_point(field_list:artm.IntArray.value)
  return value_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IntArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.IntArray.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringArray::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringArray::StringArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.StringArray)
}

void StringArray::InitAsDefaultInstance() {
}

StringArray::StringArray(const StringArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.StringArray)
}

void StringArray::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringArray::~StringArray() {
  // @@protoc_insertion_point(destructor:artm.StringArray)
  SharedDtor();
}

void StringArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringArray_descriptor_;
}

const StringArray& StringArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

StringArray* StringArray::default_instance_ = NULL;

StringArray* StringArray::New(::google::protobuf::Arena* arena) const {
  StringArray* n = new StringArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringArray::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.StringArray)
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StringArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.StringArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string value = 1;
      case 1: {
        if (tag == 10) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value(this->value_size() - 1).data(),
            this->value(this->value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.StringArray.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.StringArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.StringArray)
  return false;
#undef DO_
}

void StringArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.StringArray)
  // repeated string value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.StringArray.value");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.StringArray)
}

::google::protobuf::uint8* StringArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.StringArray)
  // repeated string value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.StringArray.value");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.StringArray)
  return target;
}

int StringArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.StringArray)
  int total_size = 0;

  // repeated string value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.StringArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StringArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StringArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.StringArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.StringArray)
    MergeFrom(*source);
  }
}

void StringArray::MergeFrom(const StringArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.StringArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StringArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.StringArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringArray::CopyFrom(const StringArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.StringArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringArray::IsInitialized() const {

  return true;
}

void StringArray::Swap(StringArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringArray::InternalSwap(StringArray* other) {
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringArray_descriptor_;
  metadata.reflection = StringArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringArray

// repeated string value = 1;
int StringArray::value_size() const {
  return value_.size();
}
void StringArray::clear_value() {
  value_.Clear();
}
 const ::std::string& StringArray::value(int index) const {
  // @@protoc_insertion_point(field_get:artm.StringArray.value)
  return value_.Get(index);
}
 ::std::string* StringArray::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:artm.StringArray.value)
  return value_.Mutable(index);
}
 void StringArray::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.StringArray.value)
  value_.Mutable(index)->assign(value);
}
 void StringArray::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.StringArray.value)
}
 void StringArray::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.StringArray.value)
}
 ::std::string* StringArray::add_value() {
  // @@protoc_insertion_point(field_add_mutable:artm.StringArray.value)
  return value_.Add();
}
 void StringArray::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.StringArray.value)
}
 void StringArray::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.StringArray.value)
}
 void StringArray::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.StringArray.value)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringArray::value() const {
  // @@protoc_insertion_point(field_list:artm.StringArray.value)
  return value_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
StringArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.StringArray.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Item::kIdFieldNumber;
const int Item::kFieldFieldNumber;
const int Item::kTitleFieldNumber;
const int Item::kTokenIdFieldNumber;
const int Item::kTokenWeightFieldNumber;
const int Item::kTransactionStartIndexFieldNumber;
const int Item::kTransactionTypenameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Item::Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.Item)
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.Item)
}

void Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:artm.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New(::google::protobuf::Arena* arena) const {
  Item* n = new Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.Item)
  if (_has_bits_[0 / 32] & 5u) {
    id_ = 0;
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  field_.Clear();
  token_id_.Clear();
  token_weight_.Clear();
  transaction_start_index_.Clear();
  transaction_typename_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_field;
        break;
      }

      // repeated .artm.Field field = 2;
      case 2: {
        if (tag == 18) {
         parse_field:
          DO_(input->IncrementRecursionDepth());
         parse_loop_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_field;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.Item.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_token_id;
        break;
      }

      // repeated int32 token_id = 4;
      case 4: {
        if (tag == 32) {
         parse_token_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_token_id())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_token_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_token_id;
        if (input->ExpectTag(45)) goto parse_token_weight;
        break;
      }

      // repeated float token_weight = 5;
      case 5: {
        if (tag == 45) {
         parse_token_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_token_weight())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_token_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_token_weight;
        if (input->ExpectTag(48)) goto parse_transaction_start_index;
        break;
      }

      // repeated int32 transaction_start_index = 6;
      case 6: {
        if (tag == 48) {
         parse_transaction_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_transaction_start_index())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_transaction_start_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_transaction_start_index;
        if (input->ExpectTag(56)) goto parse_transaction_typename_id;
        break;
      }

      // repeated int32 transaction_typename_id = 7;
      case 7: {
        if (tag == 56) {
         parse_transaction_typename_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_transaction_typename_id())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_transaction_typename_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_transaction_typename_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.Item)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .artm.Field field = 2;
  for (unsigned int i = 0, n = this->field_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->field(i), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Item.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // repeated int32 token_id = 4;
  for (int i = 0; i < this->token_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->token_id(i), output);
  }

  // repeated float token_weight = 5;
  for (int i = 0; i < this->token_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->token_weight(i), output);
  }

  // repeated int32 transaction_start_index = 6;
  for (int i = 0; i < this->transaction_start_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->transaction_start_index(i), output);
  }

  // repeated int32 transaction_typename_id = 7;
  for (int i = 0; i < this->transaction_typename_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->transaction_typename_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.Item)
}

::google::protobuf::uint8* Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.Item)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .artm.Field field = 2;
  for (unsigned int i = 0, n = this->field_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->field(i), false, target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Item.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // repeated int32 token_id = 4;
  for (int i = 0; i < this->token_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->token_id(i), target);
  }

  // repeated float token_weight = 5;
  for (int i = 0; i < this->token_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->token_weight(i), target);
  }

  // repeated int32 transaction_start_index = 6;
  for (int i = 0; i < this->transaction_start_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->transaction_start_index(i), target);
  }

  // repeated int32 transaction_typename_id = 7;
  for (int i = 0; i < this->transaction_typename_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->transaction_typename_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.Item)
  return target;
}

int Item::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.Item)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  // repeated .artm.Field field = 2;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }

  // repeated int32 token_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->token_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->token_id(i));
    }
    total_size += 1 * this->token_id_size() + data_size;
  }

  // repeated float token_weight = 5;
  {
    int data_size = 0;
    data_size = 4 * this->token_weight_size();
    total_size += 1 * this->token_weight_size() + data_size;
  }

  // repeated int32 transaction_start_index = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->transaction_start_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->transaction_start_index(i));
    }
    total_size += 1 * this->transaction_start_index_size() + data_size;
  }

  // repeated int32 transaction_typename_id = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->transaction_typename_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->transaction_typename_id(i));
    }
    total_size += 1 * this->transaction_typename_id_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.Item)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Item* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.Item)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  field_.MergeFrom(from.field_);
  token_id_.MergeFrom(from.token_id_);
  token_weight_.MergeFrom(from.token_weight_);
  transaction_start_index_.MergeFrom(from.transaction_start_index_);
  transaction_typename_id_.MergeFrom(from.transaction_typename_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {

  return true;
}

void Item::Swap(Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Item::InternalSwap(Item* other) {
  std::swap(id_, other->id_);
  field_.UnsafeArenaSwap(&other->field_);
  title_.Swap(&other->title_);
  token_id_.UnsafeArenaSwap(&other->token_id_);
  token_weight_.UnsafeArenaSwap(&other->token_weight_);
  transaction_start_index_.UnsafeArenaSwap(&other->transaction_start_index_);
  transaction_typename_id_.UnsafeArenaSwap(&other->transaction_typename_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Item

// optional int32 id = 1;
bool Item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Item::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Item::id() const {
  // @@protoc_insertion_point(field_get:artm.Item.id)
  return id_;
}
 void Item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:artm.Item.id)
}

// repeated .artm.Field field = 2;
int Item::field_size() const {
  return field_.size();
}
void Item::clear_field() {
  field_.Clear();
}
const ::artm::Field& Item::field(int index) const {
  // @@protoc_insertion_point(field_get:artm.Item.field)
  return field_.Get(index);
}
::artm::Field* Item::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Item.field)
  return field_.Mutable(index);
}
::artm::Field* Item::add_field() {
  // @@protoc_insertion_point(field_add:artm.Item.field)
  return field_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::Field >*
Item::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:artm.Item.field)
  return &field_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::Field >&
Item::field() const {
  // @@protoc_insertion_point(field_list:artm.Item.field)
  return field_;
}

// optional string title = 3;
bool Item::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Item::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void Item::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void Item::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& Item::title() const {
  // @@protoc_insertion_point(field_get:artm.Item.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Item::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.Item.title)
}
 void Item::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Item.title)
}
 void Item::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Item.title)
}
 ::std::string* Item::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:artm.Item.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Item::release_title() {
  // @@protoc_insertion_point(field_release:artm.Item.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Item::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:artm.Item.title)
}

// repeated int32 token_id = 4;
int Item::token_id_size() const {
  return token_id_.size();
}
void Item::clear_token_id() {
  token_id_.Clear();
}
 ::google::protobuf::int32 Item::token_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.Item.token_id)
  return token_id_.Get(index);
}
 void Item::set_token_id(int index, ::google::protobuf::int32 value) {
  token_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Item.token_id)
}
 void Item::add_token_id(::google::protobuf::int32 value) {
  token_id_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Item.token_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item::token_id() const {
  // @@protoc_insertion_point(field_list:artm.Item.token_id)
  return token_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item::mutable_token_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.Item.token_id)
  return &token_id_;
}

// repeated float token_weight = 5;
int Item::token_weight_size() const {
  return token_weight_.size();
}
void Item::clear_token_weight() {
  token_weight_.Clear();
}
 float Item::token_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.Item.token_weight)
  return token_weight_.Get(index);
}
 void Item::set_token_weight(int index, float value) {
  token_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Item.token_weight)
}
 void Item::add_token_weight(float value) {
  token_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Item.token_weight)
}
 const ::google::protobuf::RepeatedField< float >&
Item::token_weight() const {
  // @@protoc_insertion_point(field_list:artm.Item.token_weight)
  return token_weight_;
}
 ::google::protobuf::RepeatedField< float >*
Item::mutable_token_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.Item.token_weight)
  return &token_weight_;
}

// repeated int32 transaction_start_index = 6;
int Item::transaction_start_index_size() const {
  return transaction_start_index_.size();
}
void Item::clear_transaction_start_index() {
  transaction_start_index_.Clear();
}
 ::google::protobuf::int32 Item::transaction_start_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.Item.transaction_start_index)
  return transaction_start_index_.Get(index);
}
 void Item::set_transaction_start_index(int index, ::google::protobuf::int32 value) {
  transaction_start_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Item.transaction_start_index)
}
 void Item::add_transaction_start_index(::google::protobuf::int32 value) {
  transaction_start_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Item.transaction_start_index)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item::transaction_start_index() const {
  // @@protoc_insertion_point(field_list:artm.Item.transaction_start_index)
  return transaction_start_index_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item::mutable_transaction_start_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.Item.transaction_start_index)
  return &transaction_start_index_;
}

// repeated int32 transaction_typename_id = 7;
int Item::transaction_typename_id_size() const {
  return transaction_typename_id_.size();
}
void Item::clear_transaction_typename_id() {
  transaction_typename_id_.Clear();
}
 ::google::protobuf::int32 Item::transaction_typename_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.Item.transaction_typename_id)
  return transaction_typename_id_.Get(index);
}
 void Item::set_transaction_typename_id(int index, ::google::protobuf::int32 value) {
  transaction_typename_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Item.transaction_typename_id)
}
 void Item::add_transaction_typename_id(::google::protobuf::int32 value) {
  transaction_typename_id_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Item.transaction_typename_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item::transaction_typename_id() const {
  // @@protoc_insertion_point(field_list:artm.Item.transaction_typename_id)
  return transaction_typename_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item::mutable_transaction_typename_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.Item.transaction_typename_id)
  return &transaction_typename_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* Field::_default_name_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Field::kNameFieldNumber;
const int Field::kTokenIdFieldNumber;
const int Field::kTokenCountFieldNumber;
const int Field::kTokenOffsetFieldNumber;
const int Field::kStringValueFieldNumber;
const int Field::kIntValueFieldNumber;
const int Field::kDoubleValueFieldNumber;
const int Field::kDateValueFieldNumber;
const int Field::kStringArrayFieldNumber;
const int Field::kIntArrayFieldNumber;
const int Field::kDoubleArrayFieldNumber;
const int Field::kDateArrayFieldNumber;
const int Field::kTokenWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Field::Field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.Field)
}

void Field::InitAsDefaultInstance() {
}

Field::Field(const Field& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.Field)
}

void Field::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(_default_name_);
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  int_value_ = GOOGLE_LONGLONG(0);
  double_value_ = 0;
  date_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:artm.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  name_.DestroyNoArena(_default_name_);
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New(::google::protobuf::Arena* arena) const {
  Field* n = new Field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.Field)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Field, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Field*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 241u) {
    ZR_(int_value_, double_value_);
    if (has_name()) {
      name_.ClearToDefaultNoArena(_default_name_);
    }
    if (has_string_value()) {
      string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_date_value()) {
      date_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  token_id_.Clear();
  token_count_.Clear();
  token_offset_.Clear();
  string_array_.Clear();
  int_array_.Clear();
  double_array_.Clear();
  date_array_.Clear();
  token_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "@body"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.Field.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_token_id;
        break;
      }

      // repeated int32 token_id = 2;
      case 2: {
        if (tag == 16) {
         parse_token_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_token_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_token_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_token_id;
        if (input->ExpectTag(24)) goto parse_token_count;
        break;
      }

      // repeated int32 token_count = 3;
      case 3: {
        if (tag == 24) {
         parse_token_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_token_count())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_token_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_token_count;
        if (input->ExpectTag(32)) goto parse_token_offset;
        break;
      }

      // repeated int32 token_offset = 4;
      case 4: {
        if (tag == 32) {
         parse_token_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_token_offset())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_token_offset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_token_offset;
        if (input->ExpectTag(42)) goto parse_string_value;
        break;
      }

      // optional string string_value = 5;
      case 5: {
        if (tag == 42) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.Field.string_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_int_value;
        break;
      }

      // optional int64 int_value = 6;
      case 6: {
        if (tag == 48) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_double_value;
        break;
      }

      // optional double double_value = 7;
      case 7: {
        if (tag == 57) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_date_value;
        break;
      }

      // optional string date_value = 8;
      case 8: {
        if (tag == 66) {
         parse_date_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date_value().data(), this->date_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.Field.date_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_string_array;
        break;
      }

      // repeated string string_array = 16;
      case 16: {
        if (tag == 130) {
         parse_string_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_array()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_array(this->string_array_size() - 1).data(),
            this->string_array(this->string_array_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.Field.string_array");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_string_array;
        if (input->ExpectTag(136)) goto parse_int_array;
        break;
      }

      // repeated int64 int_array = 17;
      case 17: {
        if (tag == 136) {
         parse_int_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 136, input, this->mutable_int_array())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_int_array())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_int_array;
        if (input->ExpectTag(145)) goto parse_double_array;
        break;
      }

      // repeated double double_array = 18;
      case 18: {
        if (tag == 145) {
         parse_double_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 145, input, this->mutable_double_array())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_array())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_double_array;
        if (input->ExpectTag(154)) goto parse_date_array;
        break;
      }

      // repeated string date_array = 19;
      case 19: {
        if (tag == 154) {
         parse_date_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_date_array()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date_array(this->date_array_size() - 1).data(),
            this->date_array(this->date_array_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.Field.date_array");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_date_array;
        if (input->ExpectTag(165)) goto parse_token_weight;
        break;
      }

      // repeated float token_weight = 20;
      case 20: {
        if (tag == 165) {
         parse_token_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 165, input, this->mutable_token_weight())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_token_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_token_weight;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.Field)
  // optional string name = 1 [default = "@body"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Field.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated int32 token_id = 2;
  for (int i = 0; i < this->token_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->token_id(i), output);
  }

  // repeated int32 token_count = 3;
  for (int i = 0; i < this->token_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->token_count(i), output);
  }

  // repeated int32 token_offset = 4;
  for (int i = 0; i < this->token_offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->token_offset(i), output);
  }

  // optional string string_value = 5;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Field.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->string_value(), output);
  }

  // optional int64 int_value = 6;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->int_value(), output);
  }

  // optional double double_value = 7;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->double_value(), output);
  }

  // optional string date_value = 8;
  if (has_date_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date_value().data(), this->date_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Field.date_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->date_value(), output);
  }

  // repeated string string_array = 16;
  for (int i = 0; i < this->string_array_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_array(i).data(), this->string_array(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Field.string_array");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->string_array(i), output);
  }

  // repeated int64 int_array = 17;
  for (int i = 0; i < this->int_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      17, this->int_array(i), output);
  }

  // repeated double double_array = 18;
  for (int i = 0; i < this->double_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      18, this->double_array(i), output);
  }

  // repeated string date_array = 19;
  for (int i = 0; i < this->date_array_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date_array(i).data(), this->date_array(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Field.date_array");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->date_array(i), output);
  }

  // repeated float token_weight = 20;
  for (int i = 0; i < this->token_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      20, this->token_weight(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.Field)
}

::google::protobuf::uint8* Field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.Field)
  // optional string name = 1 [default = "@body"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Field.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int32 token_id = 2;
  for (int i = 0; i < this->token_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->token_id(i), target);
  }

  // repeated int32 token_count = 3;
  for (int i = 0; i < this->token_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->token_count(i), target);
  }

  // repeated int32 token_offset = 4;
  for (int i = 0; i < this->token_offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->token_offset(i), target);
  }

  // optional string string_value = 5;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Field.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->string_value(), target);
  }

  // optional int64 int_value = 6;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->int_value(), target);
  }

  // optional double double_value = 7;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->double_value(), target);
  }

  // optional string date_value = 8;
  if (has_date_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date_value().data(), this->date_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Field.date_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->date_value(), target);
  }

  // repeated string string_array = 16;
  for (int i = 0; i < this->string_array_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_array(i).data(), this->string_array(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Field.string_array");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->string_array(i), target);
  }

  // repeated int64 int_array = 17;
  for (int i = 0; i < this->int_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(17, this->int_array(i), target);
  }

  // repeated double double_array = 18;
  for (int i = 0; i < this->double_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(18, this->double_array(i), target);
  }

  // repeated string date_array = 19;
  for (int i = 0; i < this->date_array_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date_array(i).data(), this->date_array(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Field.date_array");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->date_array(i), target);
  }

  // repeated float token_weight = 20;
  for (int i = 0; i < this->token_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(20, this->token_weight(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.Field)
  return target;
}

int Field::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.Field)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 241u) {
    // optional string name = 1 [default = "@body"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string string_value = 5;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional int64 int_value = 6;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
    }

    // optional double double_value = 7;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

    // optional string date_value = 8;
    if (has_date_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_value());
    }

  }
  // repeated int32 token_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->token_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->token_id(i));
    }
    total_size += 1 * this->token_id_size() + data_size;
  }

  // repeated int32 token_count = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->token_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->token_count(i));
    }
    total_size += 1 * this->token_count_size() + data_size;
  }

  // repeated int32 token_offset = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->token_offset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->token_offset(i));
    }
    total_size += 1 * this->token_offset_size() + data_size;
  }

  // repeated string string_array = 16;
  total_size += 2 * this->string_array_size();
  for (int i = 0; i < this->string_array_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_array(i));
  }

  // repeated int64 int_array = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->int_array_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->int_array(i));
    }
    total_size += 2 * this->int_array_size() + data_size;
  }

  // repeated double double_array = 18;
  {
    int data_size = 0;
    data_size = 8 * this->double_array_size();
    total_size += 2 * this->double_array_size() + data_size;
  }

  // repeated string date_array = 19;
  total_size += 2 * this->date_array_size();
  for (int i = 0; i < this->date_array_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->date_array(i));
  }

  // repeated float token_weight = 20;
  {
    int data_size = 0;
    data_size = 4 * this->token_weight_size();
    total_size += 2 * this->token_weight_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.Field)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Field* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.Field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.Field)
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.Field)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  token_id_.MergeFrom(from.token_id_);
  token_count_.MergeFrom(from.token_count_);
  token_offset_.MergeFrom(from.token_offset_);
  string_array_.MergeFrom(from.string_array_);
  int_array_.MergeFrom(from.int_array_);
  double_array_.MergeFrom(from.double_array_);
  date_array_.MergeFrom(from.date_array_);
  token_weight_.MergeFrom(from.token_weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(_default_name_, from.name_);
    }
    if (from.has_string_value()) {
      set_has_string_value();
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_date_value()) {
      set_has_date_value();
      date_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {

  return true;
}

void Field::Swap(Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Field::InternalSwap(Field* other) {
  name_.Swap(&other->name_);
  token_id_.UnsafeArenaSwap(&other->token_id_);
  token_count_.UnsafeArenaSwap(&other->token_count_);
  token_offset_.UnsafeArenaSwap(&other->token_offset_);
  string_value_.Swap(&other->string_value_);
  std::swap(int_value_, other->int_value_);
  std::swap(double_value_, other->double_value_);
  date_value_.Swap(&other->date_value_);
  string_array_.UnsafeArenaSwap(&other->string_array_);
  int_array_.UnsafeArenaSwap(&other->int_array_);
  double_array_.UnsafeArenaSwap(&other->double_array_);
  date_array_.UnsafeArenaSwap(&other->date_array_);
  token_weight_.UnsafeArenaSwap(&other->token_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Field

// optional string name = 1 [default = "@body"];
bool Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Field::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
 const ::std::string& Field::name() const {
  // @@protoc_insertion_point(field_get:artm.Field.name)
  return name_.GetNoArena(_default_name_);
}
 void Field::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:artm.Field.name)
}
 void Field::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Field.name)
}
 void Field::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Field.name)
}
 ::std::string* Field::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.Field.name)
  return name_.MutableNoArena(_default_name_);
}
 ::std::string* Field::release_name() {
  // @@protoc_insertion_point(field_release:artm.Field.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
 void Field::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:artm.Field.name)
}

// repeated int32 token_id = 2;
int Field::token_id_size() const {
  return token_id_.size();
}
void Field::clear_token_id() {
  token_id_.Clear();
}
 ::google::protobuf::int32 Field::token_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.token_id)
  return token_id_.Get(index);
}
 void Field::set_token_id(int index, ::google::protobuf::int32 value) {
  token_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.token_id)
}
 void Field::add_token_id(::google::protobuf::int32 value) {
  token_id_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.token_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Field::token_id() const {
  // @@protoc_insertion_point(field_list:artm.Field.token_id)
  return token_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Field::mutable_token_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.token_id)
  return &token_id_;
}

// repeated int32 token_count = 3;
int Field::token_count_size() const {
  return token_count_.size();
}
void Field::clear_token_count() {
  token_count_.Clear();
}
 ::google::protobuf::int32 Field::token_count(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.token_count)
  return token_count_.Get(index);
}
 void Field::set_token_count(int index, ::google::protobuf::int32 value) {
  token_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.token_count)
}
 void Field::add_token_count(::google::protobuf::int32 value) {
  token_count_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.token_count)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Field::token_count() const {
  // @@protoc_insertion_point(field_list:artm.Field.token_count)
  return token_count_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Field::mutable_token_count() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.token_count)
  return &token_count_;
}

// repeated int32 token_offset = 4;
int Field::token_offset_size() const {
  return token_offset_.size();
}
void Field::clear_token_offset() {
  token_offset_.Clear();
}
 ::google::protobuf::int32 Field::token_offset(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.token_offset)
  return token_offset_.Get(index);
}
 void Field::set_token_offset(int index, ::google::protobuf::int32 value) {
  token_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.token_offset)
}
 void Field::add_token_offset(::google::protobuf::int32 value) {
  token_offset_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.token_offset)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Field::token_offset() const {
  // @@protoc_insertion_point(field_list:artm.Field.token_offset)
  return token_offset_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Field::mutable_token_offset() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.token_offset)
  return &token_offset_;
}

// optional string string_value = 5;
bool Field::has_string_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Field::set_has_string_value() {
  _has_bits_[0] |= 0x00000010u;
}
void Field::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void Field::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
 const ::std::string& Field::string_value() const {
  // @@protoc_insertion_point(field_get:artm.Field.string_value)
  return string_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.Field.string_value)
}
 void Field::set_string_value(const char* value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Field.string_value)
}
 void Field::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Field.string_value)
}
 ::std::string* Field::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:artm.Field.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Field::release_string_value() {
  // @@protoc_insertion_point(field_release:artm.Field.string_value)
  clear_has_string_value();
  return string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:artm.Field.string_value)
}

// optional int64 int_value = 6;
bool Field::has_int_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Field::set_has_int_value() {
  _has_bits_[0] |= 0x00000020u;
}
void Field::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void Field::clear_int_value() {
  int_value_ = GOOGLE_LONGLONG(0);
  clear_has_int_value();
}
 ::google::protobuf::int64 Field::int_value() const {
  // @@protoc_insertion_point(field_get:artm.Field.int_value)
  return int_value_;
}
 void Field::set_int_value(::google::protobuf::int64 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:artm.Field.int_value)
}

// optional double double_value = 7;
bool Field::has_double_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Field::set_has_double_value() {
  _has_bits_[0] |= 0x00000040u;
}
void Field::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000040u;
}
void Field::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
 double Field::double_value() const {
  // @@protoc_insertion_point(field_get:artm.Field.double_value)
  return double_value_;
}
 void Field::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:artm.Field.double_value)
}

// optional string date_value = 8;
bool Field::has_date_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Field::set_has_date_value() {
  _has_bits_[0] |= 0x00000080u;
}
void Field::clear_has_date_value() {
  _has_bits_[0] &= ~0x00000080u;
}
void Field::clear_date_value() {
  date_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date_value();
}
 const ::std::string& Field::date_value() const {
  // @@protoc_insertion_point(field_get:artm.Field.date_value)
  return date_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_date_value(const ::std::string& value) {
  set_has_date_value();
  date_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.Field.date_value)
}
 void Field::set_date_value(const char* value) {
  set_has_date_value();
  date_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Field.date_value)
}
 void Field::set_date_value(const char* value, size_t size) {
  set_has_date_value();
  date_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Field.date_value)
}
 ::std::string* Field::mutable_date_value() {
  set_has_date_value();
  // @@protoc_insertion_point(field_mutable:artm.Field.date_value)
  return date_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Field::release_date_value() {
  // @@protoc_insertion_point(field_release:artm.Field.date_value)
  clear_has_date_value();
  return date_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_allocated_date_value(::std::string* date_value) {
  if (date_value != NULL) {
    set_has_date_value();
  } else {
    clear_has_date_value();
  }
  date_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date_value);
  // @@protoc_insertion_point(field_set_allocated:artm.Field.date_value)
}

// repeated string string_array = 16;
int Field::string_array_size() const {
  return string_array_.size();
}
void Field::clear_string_array() {
  string_array_.Clear();
}
 const ::std::string& Field::string_array(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.string_array)
  return string_array_.Get(index);
}
 ::std::string* Field::mutable_string_array(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Field.string_array)
  return string_array_.Mutable(index);
}
 void Field::set_string_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.Field.string_array)
  string_array_.Mutable(index)->assign(value);
}
 void Field::set_string_array(int index, const char* value) {
  string_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.Field.string_array)
}
 void Field::set_string_array(int index, const char* value, size_t size) {
  string_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.Field.string_array)
}
 ::std::string* Field::add_string_array() {
  // @@protoc_insertion_point(field_add_mutable:artm.Field.string_array)
  return string_array_.Add();
}
 void Field::add_string_array(const ::std::string& value) {
  string_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.Field.string_array)
}
 void Field::add_string_array(const char* value) {
  string_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.Field.string_array)
}
 void Field::add_string_array(const char* value, size_t size) {
  string_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.Field.string_array)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Field::string_array() const {
  // @@protoc_insertion_point(field_list:artm.Field.string_array)
  return string_array_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Field::mutable_string_array() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.string_array)
  return &string_array_;
}

// repeated int64 int_array = 17;
int Field::int_array_size() const {
  return int_array_.size();
}
void Field::clear_int_array() {
  int_array_.Clear();
}
 ::google::protobuf::int64 Field::int_array(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.int_array)
  return int_array_.Get(index);
}
 void Field::set_int_array(int index, ::google::protobuf::int64 value) {
  int_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.int_array)
}
 void Field::add_int_array(::google::protobuf::int64 value) {
  int_array_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.int_array)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Field::int_array() const {
  // @@protoc_insertion_point(field_list:artm.Field.int_array)
  return int_array_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Field::mutable_int_array() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.int_array)
  return &int_array_;
}

// repeated double double_array = 18;
int Field::double_array_size() const {
  return double_array_.size();
}
void Field::clear_double_array() {
  double_array_.Clear();
}
 double Field::double_array(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.double_array)
  return double_array_.Get(index);
}
 void Field::set_double_array(int index, double value) {
  double_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.double_array)
}
 void Field::add_double_array(double value) {
  double_array_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.double_array)
}
 const ::google::protobuf::RepeatedField< double >&
Field::double_array() const {
  // @@protoc_insertion_point(field_list:artm.Field.double_array)
  return double_array_;
}
 ::google::protobuf::RepeatedField< double >*
Field::mutable_double_array() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.double_array)
  return &double_array_;
}

// repeated string date_array = 19;
int Field::date_array_size() const {
  return date_array_.size();
}
void Field::clear_date_array() {
  date_array_.Clear();
}
 const ::std::string& Field::date_array(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.date_array)
  return date_array_.Get(index);
}
 ::std::string* Field::mutable_date_array(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Field.date_array)
  return date_array_.Mutable(index);
}
 void Field::set_date_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.Field.date_array)
  date_array_.Mutable(index)->assign(value);
}
 void Field::set_date_array(int index, const char* value) {
  date_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.Field.date_array)
}
 void Field::set_date_array(int index, const char* value, size_t size) {
  date_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.Field.date_array)
}
 ::std::string* Field::add_date_array() {
  // @@protoc_insertion_point(field_add_mutable:artm.Field.date_array)
  return date_array_.Add();
}
 void Field::add_date_array(const ::std::string& value) {
  date_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.Field.date_array)
}
 void Field::add_date_array(const char* value) {
  date_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.Field.date_array)
}
 void Field::add_date_array(const char* value, size_t size) {
  date_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.Field.date_array)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Field::date_array() const {
  // @@protoc_insertion_point(field_list:artm.Field.date_array)
  return date_array_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Field::mutable_date_array() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.date_array)
  return &date_array_;
}

// repeated float token_weight = 20;
int Field::token_weight_size() const {
  return token_weight_.size();
}
void Field::clear_token_weight() {
  token_weight_.Clear();
}
 float Field::token_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.token_weight)
  return token_weight_.Get(index);
}
 void Field::set_token_weight(int index, float value) {
  token_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.token_weight)
}
 void Field::add_token_weight(float value) {
  token_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.token_weight)
}
 const ::google::protobuf::RepeatedField< float >&
Field::token_weight() const {
  // @@protoc_insertion_point(field_list:artm.Field.token_weight)
  return token_weight_;
}
 ::google::protobuf::RepeatedField< float >*
Field::mutable_token_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.token_weight)
  return &token_weight_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Batch::kTokenFieldNumber;
const int Batch::kClassIdFieldNumber;
const int Batch::kItemFieldNumber;
const int Batch::kDescriptionFieldNumber;
const int Batch::kIdFieldNumber;
const int Batch::kTransactionTypenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Batch::Batch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.Batch)
}

void Batch::InitAsDefaultInstance() {
}

Batch::Batch(const Batch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.Batch)
}

void Batch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Batch::~Batch() {
  // @@protoc_insertion_point(destructor:artm.Batch)
  SharedDtor();
}

void Batch::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Batch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Batch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Batch_descriptor_;
}

const Batch& Batch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

Batch* Batch::default_instance_ = NULL;

Batch* Batch::New(::google::protobuf::Arena* arena) const {
  Batch* n = new Batch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Batch::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.Batch)
  if (_has_bits_[0 / 32] & 24u) {
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  token_.Clear();
  class_id_.Clear();
  item_.Clear();
  transaction_typename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Batch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.Batch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string token = 1;
      case 1: {
        if (tag == 10) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.Batch.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_token;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.Batch.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .artm.Item item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(input->IncrementRecursionDepth());
         parse_loop_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_item;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.Batch.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_id;
        break;
      }

      // optional string id = 5;
      case 5: {
        if (tag == 42) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.Batch.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_transaction_typename;
        break;
      }

      // repeated string transaction_typename = 6;
      case 6: {
        if (tag == 50) {
         parse_transaction_typename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_transaction_typename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transaction_typename(this->transaction_typename_size() - 1).data(),
            this->transaction_typename(this->transaction_typename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.Batch.transaction_typename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_transaction_typename;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.Batch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.Batch)
  return false;
#undef DO_
}

void Batch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.Batch)
  // repeated string token = 1;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Batch.token");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Batch.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // repeated .artm.Item item = 3;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Batch.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional string id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Batch.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->id(), output);
  }

  // repeated string transaction_typename = 6;
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_typename(i).data(), this->transaction_typename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Batch.transaction_typename");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->transaction_typename(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.Batch)
}

::google::protobuf::uint8* Batch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.Batch)
  // repeated string token = 1;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Batch.token");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->token(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Batch.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // repeated .artm.Item item = 3;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->item(i), false, target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Batch.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional string id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Batch.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->id(), target);
  }

  // repeated string transaction_typename = 6;
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_typename(i).data(), this->transaction_typename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.Batch.transaction_typename");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->transaction_typename(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.Batch)
  return target;
}

int Batch::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.Batch)
  int total_size = 0;

  if (_has_bits_[3 / 32] & 24u) {
    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated string token = 1;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated .artm.Item item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated string transaction_typename = 6;
  total_size += 1 * this->transaction_typename_size();
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->transaction_typename(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Batch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.Batch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Batch* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Batch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.Batch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.Batch)
    MergeFrom(*source);
  }
}

void Batch::MergeFrom(const Batch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.Batch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  token_.MergeFrom(from.token_);
  class_id_.MergeFrom(from.class_id_);
  item_.MergeFrom(from.item_);
  transaction_typename_.MergeFrom(from.transaction_typename_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Batch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.Batch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Batch::CopyFrom(const Batch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.Batch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Batch::IsInitialized() const {

  return true;
}

void Batch::Swap(Batch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Batch::InternalSwap(Batch* other) {
  token_.UnsafeArenaSwap(&other->token_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  item_.UnsafeArenaSwap(&other->item_);
  description_.Swap(&other->description_);
  id_.Swap(&other->id_);
  transaction_typename_.UnsafeArenaSwap(&other->transaction_typename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Batch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Batch_descriptor_;
  metadata.reflection = Batch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Batch

// repeated string token = 1;
int Batch::token_size() const {
  return token_.size();
}
void Batch::clear_token() {
  token_.Clear();
}
 const ::std::string& Batch::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.Batch.token)
  return token_.Get(index);
}
 ::std::string* Batch::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Batch.token)
  return token_.Mutable(index);
}
 void Batch::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.Batch.token)
  token_.Mutable(index)->assign(value);
}
 void Batch::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.Batch.token)
}
 void Batch::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.Batch.token)
}
 ::std::string* Batch::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.Batch.token)
  return token_.Add();
}
 void Batch::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.Batch.token)
}
 void Batch::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.Batch.token)
}
 void Batch::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.Batch.token)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Batch::token() const {
  // @@protoc_insertion_point(field_list:artm.Batch.token)
  return token_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Batch::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.Batch.token)
  return &token_;
}

// repeated string class_id = 2;
int Batch::class_id_size() const {
  return class_id_.size();
}
void Batch::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& Batch::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.Batch.class_id)
  return class_id_.Get(index);
}
 ::std::string* Batch::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Batch.class_id)
  return class_id_.Mutable(index);
}
 void Batch::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.Batch.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void Batch::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.Batch.class_id)
}
 void Batch::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.Batch.class_id)
}
 ::std::string* Batch::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.Batch.class_id)
  return class_id_.Add();
}
 void Batch::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.Batch.class_id)
}
 void Batch::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.Batch.class_id)
}
 void Batch::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.Batch.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Batch::class_id() const {
  // @@protoc_insertion_point(field_list:artm.Batch.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Batch::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.Batch.class_id)
  return &class_id_;
}

// repeated .artm.Item item = 3;
int Batch::item_size() const {
  return item_.size();
}
void Batch::clear_item() {
  item_.Clear();
}
const ::artm::Item& Batch::item(int index) const {
  // @@protoc_insertion_point(field_get:artm.Batch.item)
  return item_.Get(index);
}
::artm::Item* Batch::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Batch.item)
  return item_.Mutable(index);
}
::artm::Item* Batch::add_item() {
  // @@protoc_insertion_point(field_add:artm.Batch.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::Item >*
Batch::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:artm.Batch.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::Item >&
Batch::item() const {
  // @@protoc_insertion_point(field_list:artm.Batch.item)
  return item_;
}

// optional string description = 4;
bool Batch::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Batch::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
void Batch::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
void Batch::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& Batch::description() const {
  // @@protoc_insertion_point(field_get:artm.Batch.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Batch::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.Batch.description)
}
 void Batch::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Batch.description)
}
 void Batch::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Batch.description)
}
 ::std::string* Batch::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:artm.Batch.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Batch::release_description() {
  // @@protoc_insertion_point(field_release:artm.Batch.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Batch::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:artm.Batch.description)
}

// optional string id = 5;
bool Batch::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Batch::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Batch::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Batch::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Batch::id() const {
  // @@protoc_insertion_point(field_get:artm.Batch.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Batch::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.Batch.id)
}
 void Batch::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Batch.id)
}
 void Batch::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Batch.id)
}
 ::std::string* Batch::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:artm.Batch.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Batch::release_id() {
  // @@protoc_insertion_point(field_release:artm.Batch.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Batch::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:artm.Batch.id)
}

// repeated string transaction_typename = 6;
int Batch::transaction_typename_size() const {
  return transaction_typename_.size();
}
void Batch::clear_transaction_typename() {
  transaction_typename_.Clear();
}
 const ::std::string& Batch::transaction_typename(int index) const {
  // @@protoc_insertion_point(field_get:artm.Batch.transaction_typename)
  return transaction_typename_.Get(index);
}
 ::std::string* Batch::mutable_transaction_typename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Batch.transaction_typename)
  return transaction_typename_.Mutable(index);
}
 void Batch::set_transaction_typename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.Batch.transaction_typename)
  transaction_typename_.Mutable(index)->assign(value);
}
 void Batch::set_transaction_typename(int index, const char* value) {
  transaction_typename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.Batch.transaction_typename)
}
 void Batch::set_transaction_typename(int index, const char* value, size_t size) {
  transaction_typename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.Batch.transaction_typename)
}
 ::std::string* Batch::add_transaction_typename() {
  // @@protoc_insertion_point(field_add_mutable:artm.Batch.transaction_typename)
  return transaction_typename_.Add();
}
 void Batch::add_transaction_typename(const ::std::string& value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.Batch.transaction_typename)
}
 void Batch::add_transaction_typename(const char* value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.Batch.transaction_typename)
}
 void Batch::add_transaction_typename(const char* value, size_t size) {
  transaction_typename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.Batch.transaction_typename)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Batch::transaction_typename() const {
  // @@protoc_insertion_point(field_list:artm.Batch.transaction_typename)
  return transaction_typename_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Batch::mutable_transaction_typename() {
  // @@protoc_insertion_point(field_mutable_list:artm.Batch.transaction_typename)
  return &transaction_typename_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegularizerSettings::kNameFieldNumber;
const int RegularizerSettings::kTauFieldNumber;
const int RegularizerSettings::kGammaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegularizerSettings::RegularizerSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.RegularizerSettings)
}

void RegularizerSettings::InitAsDefaultInstance() {
}

RegularizerSettings::RegularizerSettings(const RegularizerSettings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.RegularizerSettings)
}

void RegularizerSettings::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tau_ = 0;
  gamma_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegularizerSettings::~RegularizerSettings() {
  // @@protoc_insertion_point(destructor:artm.RegularizerSettings)
  SharedDtor();
}

void RegularizerSettings::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RegularizerSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegularizerSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizerSettings_descriptor_;
}

const RegularizerSettings& RegularizerSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

RegularizerSettings* RegularizerSettings::default_instance_ = NULL;

RegularizerSettings* RegularizerSettings::New(::google::protobuf::Arena* arena) const {
  RegularizerSettings* n = new RegularizerSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegularizerSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.RegularizerSettings)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RegularizerSettings, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RegularizerSettings*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(tau_, gamma_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegularizerSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.RegularizerSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.RegularizerSettings.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_tau;
        break;
      }

      // optional float tau = 2;
      case 2: {
        if (tag == 21) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_gamma;
        break;
      }

      // optional float gamma = 3;
      case 3: {
        if (tag == 29) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.RegularizerSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.RegularizerSettings)
  return false;
#undef DO_
}

void RegularizerSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.RegularizerSettings)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizerSettings.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float tau = 2;
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->tau(), output);
  }

  // optional float gamma = 3;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gamma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.RegularizerSettings)
}

::google::protobuf::uint8* RegularizerSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.RegularizerSettings)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizerSettings.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float tau = 2;
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->tau(), target);
  }

  // optional float gamma = 3;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gamma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.RegularizerSettings)
  return target;
}

int RegularizerSettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.RegularizerSettings)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float tau = 2;
    if (has_tau()) {
      total_size += 1 + 4;
    }

    // optional float gamma = 3;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegularizerSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.RegularizerSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegularizerSettings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegularizerSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.RegularizerSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.RegularizerSettings)
    MergeFrom(*source);
  }
}

void RegularizerSettings::MergeFrom(const RegularizerSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.RegularizerSettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_tau()) {
      set_tau(from.tau());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegularizerSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.RegularizerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegularizerSettings::CopyFrom(const RegularizerSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.RegularizerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegularizerSettings::IsInitialized() const {

  return true;
}

void RegularizerSettings::Swap(RegularizerSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegularizerSettings::InternalSwap(RegularizerSettings* other) {
  name_.Swap(&other->name_);
  std::swap(tau_, other->tau_);
  std::swap(gamma_, other->gamma_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegularizerSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegularizerSettings_descriptor_;
  metadata.reflection = RegularizerSettings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegularizerSettings

// optional string name = 1;
bool RegularizerSettings::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegularizerSettings::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RegularizerSettings::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegularizerSettings::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& RegularizerSettings::name() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerSettings.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizerSettings::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizerSettings.name)
}
 void RegularizerSettings::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizerSettings.name)
}
 void RegularizerSettings::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizerSettings.name)
}
 ::std::string* RegularizerSettings::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.RegularizerSettings.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegularizerSettings::release_name() {
  // @@protoc_insertion_point(field_release:artm.RegularizerSettings.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizerSettings::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizerSettings.name)
}

// optional float tau = 2;
bool RegularizerSettings::has_tau() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegularizerSettings::set_has_tau() {
  _has_bits_[0] |= 0x00000002u;
}
void RegularizerSettings::clear_has_tau() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegularizerSettings::clear_tau() {
  tau_ = 0;
  clear_has_tau();
}
 float RegularizerSettings::tau() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerSettings.tau)
  return tau_;
}
 void RegularizerSettings::set_tau(float value) {
  set_has_tau();
  tau_ = value;
  // @@protoc_insertion_point(field_set:artm.RegularizerSettings.tau)
}

// optional float gamma = 3;
bool RegularizerSettings::has_gamma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RegularizerSettings::set_has_gamma() {
  _has_bits_[0] |= 0x00000004u;
}
void RegularizerSettings::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000004u;
}
void RegularizerSettings::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
 float RegularizerSettings::gamma() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerSettings.gamma)
  return gamma_;
}
 void RegularizerSettings::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:artm.RegularizerSettings.gamma)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegularizerConfig::kNameFieldNumber;
const int RegularizerConfig::kTypeFieldNumber;
const int RegularizerConfig::kConfigFieldNumber;
const int RegularizerConfig::kTauFieldNumber;
const int RegularizerConfig::kGammaFieldNumber;
const int RegularizerConfig::kConfigJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegularizerConfig::RegularizerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.RegularizerConfig)
}

void RegularizerConfig::InitAsDefaultInstance() {
}

RegularizerConfig::RegularizerConfig(const RegularizerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.RegularizerConfig)
}

void RegularizerConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 9999;
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tau_ = 0;
  gamma_ = 0;
  config_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegularizerConfig::~RegularizerConfig() {
  // @@protoc_insertion_point(destructor:artm.RegularizerConfig)
  SharedDtor();
}

void RegularizerConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RegularizerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegularizerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizerConfig_descriptor_;
}

const RegularizerConfig& RegularizerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

RegularizerConfig* RegularizerConfig::default_instance_ = NULL;

RegularizerConfig* RegularizerConfig::New(::google::protobuf::Arena* arena) const {
  RegularizerConfig* n = new RegularizerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegularizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.RegularizerConfig)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 9999;
    if (has_config()) {
      config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tau_ = 0;
    gamma_ = 0;
    if (has_config_json()) {
      config_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegularizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.RegularizerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.RegularizerConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .artm.RegularizerType type = 2 [default = RegularizerType_Unknown];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::RegularizerType_IsValid(value)) {
            set_type(static_cast< ::artm::RegularizerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // optional bytes config = 3;
      case 3: {
        if (tag == 26) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_tau;
        break;
      }

      // optional float tau = 4;
      case 4: {
        if (tag == 37) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_gamma;
        break;
      }

      // optional float gamma = 5;
      case 5: {
        if (tag == 45) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_config_json;
        break;
      }

      // optional string config_json = 6;
      case 6: {
        if (tag == 50) {
         parse_config_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_json().data(), this->config_json().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.RegularizerConfig.config_json");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.RegularizerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.RegularizerConfig)
  return false;
#undef DO_
}

void RegularizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.RegularizerConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizerConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .artm.RegularizerType type = 2 [default = RegularizerType_Unknown];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->config(), output);
  }

  // optional float tau = 4;
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->tau(), output);
  }

  // optional float gamma = 5;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gamma(), output);
  }

  // optional string config_json = 6;
  if (has_config_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_json().data(), this->config_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizerConfig.config_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->config_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.RegularizerConfig)
}

::google::protobuf::uint8* RegularizerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.RegularizerConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizerConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .artm.RegularizerType type = 2 [default = RegularizerType_Unknown];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes config = 3;
  if (has_config()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->config(), target);
  }

  // optional float tau = 4;
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->tau(), target);
  }

  // optional float gamma = 5;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gamma(), target);
  }

  // optional string config_json = 6;
  if (has_config_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_json().data(), this->config_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizerConfig.config_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->config_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.RegularizerConfig)
  return target;
}

int RegularizerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.RegularizerConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .artm.RegularizerType type = 2 [default = RegularizerType_Unknown];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config());
    }

    // optional float tau = 4;
    if (has_tau()) {
      total_size += 1 + 4;
    }

    // optional float gamma = 5;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional string config_json = 6;
    if (has_config_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_json());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegularizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.RegularizerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegularizerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegularizerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.RegularizerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.RegularizerConfig)
    MergeFrom(*source);
  }
}

void RegularizerConfig::MergeFrom(const RegularizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.RegularizerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_config()) {
      set_has_config();
      config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
    }
    if (from.has_tau()) {
      set_tau(from.tau());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_config_json()) {
      set_has_config_json();
      config_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_json_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegularizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.RegularizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegularizerConfig::CopyFrom(const RegularizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.RegularizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegularizerConfig::IsInitialized() const {

  return true;
}

void RegularizerConfig::Swap(RegularizerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegularizerConfig::InternalSwap(RegularizerConfig* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  config_.Swap(&other->config_);
  std::swap(tau_, other->tau_);
  std::swap(gamma_, other->gamma_);
  config_json_.Swap(&other->config_json_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegularizerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegularizerConfig_descriptor_;
  metadata.reflection = RegularizerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegularizerConfig

// optional string name = 1;
bool RegularizerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegularizerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RegularizerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegularizerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& RegularizerConfig::name() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.name)
}
 void RegularizerConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizerConfig.name)
}
 void RegularizerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizerConfig.name)
}
 ::std::string* RegularizerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.RegularizerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegularizerConfig::release_name() {
  // @@protoc_insertion_point(field_release:artm.RegularizerConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizerConfig.name)
}

// optional .artm.RegularizerType type = 2 [default = RegularizerType_Unknown];
bool RegularizerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegularizerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void RegularizerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegularizerConfig::clear_type() {
  type_ = 9999;
  clear_has_type();
}
 ::artm::RegularizerType RegularizerConfig::type() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.type)
  return static_cast< ::artm::RegularizerType >(type_);
}
 void RegularizerConfig::set_type(::artm::RegularizerType value) {
  assert(::artm::RegularizerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.type)
}

// optional bytes config = 3;
bool RegularizerConfig::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RegularizerConfig::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
void RegularizerConfig::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void RegularizerConfig::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config();
}
 const ::std::string& RegularizerConfig::config() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.config)
  return config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizerConfig::set_config(const ::std::string& value) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.config)
}
 void RegularizerConfig::set_config(const char* value) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizerConfig.config)
}
 void RegularizerConfig::set_config(const void* value, size_t size) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizerConfig.config)
}
 ::std::string* RegularizerConfig::mutable_config() {
  set_has_config();
  // @@protoc_insertion_point(field_mutable:artm.RegularizerConfig.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegularizerConfig::release_config() {
  // @@protoc_insertion_point(field_release:artm.RegularizerConfig.config)
  clear_has_config();
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizerConfig::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    set_has_config();
  } else {
    clear_has_config();
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizerConfig.config)
}

// optional float tau = 4;
bool RegularizerConfig::has_tau() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RegularizerConfig::set_has_tau() {
  _has_bits_[0] |= 0x00000008u;
}
void RegularizerConfig::clear_has_tau() {
  _has_bits_[0] &= ~0x00000008u;
}
void RegularizerConfig::clear_tau() {
  tau_ = 0;
  clear_has_tau();
}
 float RegularizerConfig::tau() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.tau)
  return tau_;
}
 void RegularizerConfig::set_tau(float value) {
  set_has_tau();
  tau_ = value;
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.tau)
}

// optional float gamma = 5;
bool RegularizerConfig::has_gamma() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RegularizerConfig::set_has_gamma() {
  _has_bits_[0] |= 0x00000010u;
}
void RegularizerConfig::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000010u;
}
void RegularizerConfig::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
 float RegularizerConfig::gamma() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.gamma)
  return gamma_;
}
 void RegularizerConfig::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.gamma)
}

// optional string config_json = 6;
bool RegularizerConfig::has_config_json() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RegularizerConfig::set_has_config_json() {
  _has_bits_[0] |= 0x00000020u;
}
void RegularizerConfig::clear_has_config_json() {
  _has_bits_[0] &= ~0x00000020u;
}
void RegularizerConfig::clear_config_json() {
  config_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_json();
}
 const ::std::string& RegularizerConfig::config_json() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.config_json)
  return config_json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizerConfig::set_config_json(const ::std::string& value) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.config_json)
}
 void RegularizerConfig::set_config_json(const char* value) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizerConfig.config_json)
}
 void RegularizerConfig::set_config_json(const char* value, size_t size) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizerConfig.config_json)
}
 ::std::string* RegularizerConfig::mutable_config_json() {
  set_has_config_json();
  // @@protoc_insertion_point(field_mutable:artm.RegularizerConfig.config_json)
  return config_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegularizerConfig::release_config_json() {
  // @@protoc_insertion_point(field_release:artm.RegularizerConfig.config_json)
  clear_has_config_json();
  return config_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizerConfig::set_allocated_config_json(::std::string* config_json) {
  if (config_json != NULL) {
    set_has_config_json();
  } else {
    clear_has_config_json();
  }
  config_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_json);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizerConfig.config_json)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmoothSparseThetaConfig::kTopicNameFieldNumber;
const int SmoothSparseThetaConfig::kAlphaIterFieldNumber;
const int SmoothSparseThetaConfig::kTransformConfigFieldNumber;
const int SmoothSparseThetaConfig::kItemTitleFieldNumber;
const int SmoothSparseThetaConfig::kItemTopicMultiplierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmoothSparseThetaConfig::SmoothSparseThetaConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.SmoothSparseThetaConfig)
}

void SmoothSparseThetaConfig::InitAsDefaultInstance() {
  transform_config_ = const_cast< ::artm::TransformConfig*>(&::artm::TransformConfig::default_instance());
}

SmoothSparseThetaConfig::SmoothSparseThetaConfig(const SmoothSparseThetaConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.SmoothSparseThetaConfig)
}

void SmoothSparseThetaConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  transform_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothSparseThetaConfig::~SmoothSparseThetaConfig() {
  // @@protoc_insertion_point(destructor:artm.SmoothSparseThetaConfig)
  SharedDtor();
}

void SmoothSparseThetaConfig::SharedDtor() {
  if (this != default_instance_) {
    delete transform_config_;
  }
}

void SmoothSparseThetaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothSparseThetaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothSparseThetaConfig_descriptor_;
}

const SmoothSparseThetaConfig& SmoothSparseThetaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SmoothSparseThetaConfig* SmoothSparseThetaConfig::default_instance_ = NULL;

SmoothSparseThetaConfig* SmoothSparseThetaConfig::New(::google::protobuf::Arena* arena) const {
  SmoothSparseThetaConfig* n = new SmoothSparseThetaConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmoothSparseThetaConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.SmoothSparseThetaConfig)
  if (has_transform_config()) {
    if (transform_config_ != NULL) transform_config_->::artm::TransformConfig::Clear();
  }
  topic_name_.Clear();
  alpha_iter_.Clear();
  item_title_.Clear();
  item_topic_multiplier_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SmoothSparseThetaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.SmoothSparseThetaConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (tag == 10) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SmoothSparseThetaConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(21)) goto parse_alpha_iter;
        break;
      }

      // repeated float alpha_iter = 2;
      case 2: {
        if (tag == 21) {
         parse_alpha_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_alpha_iter())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_alpha_iter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_alpha_iter;
        if (input->ExpectTag(26)) goto parse_transform_config;
        break;
      }

      // optional .artm.TransformConfig transform_config = 3;
      case 3: {
        if (tag == 26) {
         parse_transform_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item_title;
        break;
      }

      // repeated string item_title = 4;
      case 4: {
        if (tag == 34) {
         parse_item_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_item_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_title(this->item_title_size() - 1).data(),
            this->item_title(this->item_title_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SmoothSparseThetaConfig.item_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item_title;
        if (input->ExpectTag(42)) goto parse_item_topic_multiplier;
        break;
      }

      // repeated .artm.FloatArray item_topic_multiplier = 5;
      case 5: {
        if (tag == 42) {
         parse_item_topic_multiplier:
          DO_(input->IncrementRecursionDepth());
         parse_loop_item_topic_multiplier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item_topic_multiplier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_item_topic_multiplier;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.SmoothSparseThetaConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.SmoothSparseThetaConfig)
  return false;
#undef DO_
}

void SmoothSparseThetaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.SmoothSparseThetaConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothSparseThetaConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated float alpha_iter = 2;
  for (int i = 0; i < this->alpha_iter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->alpha_iter(i), output);
  }

  // optional .artm.TransformConfig transform_config = 3;
  if (has_transform_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->transform_config_, output);
  }

  // repeated string item_title = 4;
  for (int i = 0; i < this->item_title_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_title(i).data(), this->item_title(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothSparseThetaConfig.item_title");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->item_title(i), output);
  }

  // repeated .artm.FloatArray item_topic_multiplier = 5;
  for (unsigned int i = 0, n = this->item_topic_multiplier_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item_topic_multiplier(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.SmoothSparseThetaConfig)
}

::google::protobuf::uint8* SmoothSparseThetaConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.SmoothSparseThetaConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothSparseThetaConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated float alpha_iter = 2;
  for (int i = 0; i < this->alpha_iter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->alpha_iter(i), target);
  }

  // optional .artm.TransformConfig transform_config = 3;
  if (has_transform_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->transform_config_, false, target);
  }

  // repeated string item_title = 4;
  for (int i = 0; i < this->item_title_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_title(i).data(), this->item_title(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothSparseThetaConfig.item_title");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->item_title(i), target);
  }

  // repeated .artm.FloatArray item_topic_multiplier = 5;
  for (unsigned int i = 0, n = this->item_topic_multiplier_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->item_topic_multiplier(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.SmoothSparseThetaConfig)
  return target;
}

int SmoothSparseThetaConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.SmoothSparseThetaConfig)
  int total_size = 0;

  // optional .artm.TransformConfig transform_config = 3;
  if (has_transform_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_config_);
  }

  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated float alpha_iter = 2;
  {
    int data_size = 0;
    data_size = 4 * this->alpha_iter_size();
    total_size += 1 * this->alpha_iter_size() + data_size;
  }

  // repeated string item_title = 4;
  total_size += 1 * this->item_title_size();
  for (int i = 0; i < this->item_title_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->item_title(i));
  }

  // repeated .artm.FloatArray item_topic_multiplier = 5;
  total_size += 1 * this->item_topic_multiplier_size();
  for (int i = 0; i < this->item_topic_multiplier_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_topic_multiplier(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothSparseThetaConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.SmoothSparseThetaConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SmoothSparseThetaConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SmoothSparseThetaConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.SmoothSparseThetaConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.SmoothSparseThetaConfig)
    MergeFrom(*source);
  }
}

void SmoothSparseThetaConfig::MergeFrom(const SmoothSparseThetaConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.SmoothSparseThetaConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  alpha_iter_.MergeFrom(from.alpha_iter_);
  item_title_.MergeFrom(from.item_title_);
  item_topic_multiplier_.MergeFrom(from.item_topic_multiplier_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_transform_config()) {
      mutable_transform_config()->::artm::TransformConfig::MergeFrom(from.transform_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SmoothSparseThetaConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.SmoothSparseThetaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothSparseThetaConfig::CopyFrom(const SmoothSparseThetaConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.SmoothSparseThetaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothSparseThetaConfig::IsInitialized() const {

  return true;
}

void SmoothSparseThetaConfig::Swap(SmoothSparseThetaConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmoothSparseThetaConfig::InternalSwap(SmoothSparseThetaConfig* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  alpha_iter_.UnsafeArenaSwap(&other->alpha_iter_);
  std::swap(transform_config_, other->transform_config_);
  item_title_.UnsafeArenaSwap(&other->item_title_);
  item_topic_multiplier_.UnsafeArenaSwap(&other->item_topic_multiplier_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmoothSparseThetaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothSparseThetaConfig_descriptor_;
  metadata.reflection = SmoothSparseThetaConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SmoothSparseThetaConfig

// repeated string topic_name = 1;
int SmoothSparseThetaConfig::topic_name_size() const {
  return topic_name_.size();
}
void SmoothSparseThetaConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& SmoothSparseThetaConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparseThetaConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* SmoothSparseThetaConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparseThetaConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void SmoothSparseThetaConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SmoothSparseThetaConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void SmoothSparseThetaConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SmoothSparseThetaConfig.topic_name)
}
 void SmoothSparseThetaConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothSparseThetaConfig.topic_name)
}
 ::std::string* SmoothSparseThetaConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SmoothSparseThetaConfig.topic_name)
  return topic_name_.Add();
}
 void SmoothSparseThetaConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SmoothSparseThetaConfig.topic_name)
}
 void SmoothSparseThetaConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SmoothSparseThetaConfig.topic_name)
}
 void SmoothSparseThetaConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SmoothSparseThetaConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothSparseThetaConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparseThetaConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothSparseThetaConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparseThetaConfig.topic_name)
  return &topic_name_;
}

// repeated float alpha_iter = 2;
int SmoothSparseThetaConfig::alpha_iter_size() const {
  return alpha_iter_.size();
}
void SmoothSparseThetaConfig::clear_alpha_iter() {
  alpha_iter_.Clear();
}
 float SmoothSparseThetaConfig::alpha_iter(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparseThetaConfig.alpha_iter)
  return alpha_iter_.Get(index);
}
 void SmoothSparseThetaConfig::set_alpha_iter(int index, float value) {
  alpha_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.SmoothSparseThetaConfig.alpha_iter)
}
 void SmoothSparseThetaConfig::add_alpha_iter(float value) {
  alpha_iter_.Add(value);
  // @@protoc_insertion_point(field_add:artm.SmoothSparseThetaConfig.alpha_iter)
}
 const ::google::protobuf::RepeatedField< float >&
SmoothSparseThetaConfig::alpha_iter() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparseThetaConfig.alpha_iter)
  return alpha_iter_;
}
 ::google::protobuf::RepeatedField< float >*
SmoothSparseThetaConfig::mutable_alpha_iter() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparseThetaConfig.alpha_iter)
  return &alpha_iter_;
}

// optional .artm.TransformConfig transform_config = 3;
bool SmoothSparseThetaConfig::has_transform_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SmoothSparseThetaConfig::set_has_transform_config() {
  _has_bits_[0] |= 0x00000004u;
}
void SmoothSparseThetaConfig::clear_has_transform_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void SmoothSparseThetaConfig::clear_transform_config() {
  if (transform_config_ != NULL) transform_config_->::artm::TransformConfig::Clear();
  clear_has_transform_config();
}
const ::artm::TransformConfig& SmoothSparseThetaConfig::transform_config() const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparseThetaConfig.transform_config)
  return transform_config_ != NULL ? *transform_config_ : *default_instance_->transform_config_;
}
::artm::TransformConfig* SmoothSparseThetaConfig::mutable_transform_config() {
  set_has_transform_config();
  if (transform_config_ == NULL) {
    transform_config_ = new ::artm::TransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparseThetaConfig.transform_config)
  return transform_config_;
}
::artm::TransformConfig* SmoothSparseThetaConfig::release_transform_config() {
  // @@protoc_insertion_point(field_release:artm.SmoothSparseThetaConfig.transform_config)
  clear_has_transform_config();
  ::artm::TransformConfig* temp = transform_config_;
  transform_config_ = NULL;
  return temp;
}
void SmoothSparseThetaConfig::set_allocated_transform_config(::artm::TransformConfig* transform_config) {
  delete transform_config_;
  transform_config_ = transform_config;
  if (transform_config) {
    set_has_transform_config();
  } else {
    clear_has_transform_config();
  }
  // @@protoc_insertion_point(field_set_allocated:artm.SmoothSparseThetaConfig.transform_config)
}

// repeated string item_title = 4;
int SmoothSparseThetaConfig::item_title_size() const {
  return item_title_.size();
}
void SmoothSparseThetaConfig::clear_item_title() {
  item_title_.Clear();
}
 const ::std::string& SmoothSparseThetaConfig::item_title(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparseThetaConfig.item_title)
  return item_title_.Get(index);
}
 ::std::string* SmoothSparseThetaConfig::mutable_item_title(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparseThetaConfig.item_title)
  return item_title_.Mutable(index);
}
 void SmoothSparseThetaConfig::set_item_title(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SmoothSparseThetaConfig.item_title)
  item_title_.Mutable(index)->assign(value);
}
 void SmoothSparseThetaConfig::set_item_title(int index, const char* value) {
  item_title_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SmoothSparseThetaConfig.item_title)
}
 void SmoothSparseThetaConfig::set_item_title(int index, const char* value, size_t size) {
  item_title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothSparseThetaConfig.item_title)
}
 ::std::string* SmoothSparseThetaConfig::add_item_title() {
  // @@protoc_insertion_point(field_add_mutable:artm.SmoothSparseThetaConfig.item_title)
  return item_title_.Add();
}
 void SmoothSparseThetaConfig::add_item_title(const ::std::string& value) {
  item_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SmoothSparseThetaConfig.item_title)
}
 void SmoothSparseThetaConfig::add_item_title(const char* value) {
  item_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SmoothSparseThetaConfig.item_title)
}
 void SmoothSparseThetaConfig::add_item_title(const char* value, size_t size) {
  item_title_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SmoothSparseThetaConfig.item_title)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothSparseThetaConfig::item_title() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparseThetaConfig.item_title)
  return item_title_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothSparseThetaConfig::mutable_item_title() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparseThetaConfig.item_title)
  return &item_title_;
}

// repeated .artm.FloatArray item_topic_multiplier = 5;
int SmoothSparseThetaConfig::item_topic_multiplier_size() const {
  return item_topic_multiplier_.size();
}
void SmoothSparseThetaConfig::clear_item_topic_multiplier() {
  item_topic_multiplier_.Clear();
}
const ::artm::FloatArray& SmoothSparseThetaConfig::item_topic_multiplier(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparseThetaConfig.item_topic_multiplier)
  return item_topic_multiplier_.Get(index);
}
::artm::FloatArray* SmoothSparseThetaConfig::mutable_item_topic_multiplier(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparseThetaConfig.item_topic_multiplier)
  return item_topic_multiplier_.Mutable(index);
}
::artm::FloatArray* SmoothSparseThetaConfig::add_item_topic_multiplier() {
  // @@protoc_insertion_point(field_add:artm.SmoothSparseThetaConfig.item_topic_multiplier)
  return item_topic_multiplier_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
SmoothSparseThetaConfig::mutable_item_topic_multiplier() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparseThetaConfig.item_topic_multiplier)
  return &item_topic_multiplier_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
SmoothSparseThetaConfig::item_topic_multiplier() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparseThetaConfig.item_topic_multiplier)
  return item_topic_multiplier_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmoothSparsePhiConfig::kTopicNameFieldNumber;
const int SmoothSparsePhiConfig::kClassIdFieldNumber;
const int SmoothSparsePhiConfig::kDictionaryNameFieldNumber;
const int SmoothSparsePhiConfig::kTransformConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmoothSparsePhiConfig::SmoothSparsePhiConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.SmoothSparsePhiConfig)
}

void SmoothSparsePhiConfig::InitAsDefaultInstance() {
  transform_config_ = const_cast< ::artm::TransformConfig*>(&::artm::TransformConfig::default_instance());
}

SmoothSparsePhiConfig::SmoothSparsePhiConfig(const SmoothSparsePhiConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.SmoothSparsePhiConfig)
}

void SmoothSparsePhiConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothSparsePhiConfig::~SmoothSparsePhiConfig() {
  // @@protoc_insertion_point(destructor:artm.SmoothSparsePhiConfig)
  SharedDtor();
}

void SmoothSparsePhiConfig::SharedDtor() {
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete transform_config_;
  }
}

void SmoothSparsePhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothSparsePhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothSparsePhiConfig_descriptor_;
}

const SmoothSparsePhiConfig& SmoothSparsePhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SmoothSparsePhiConfig* SmoothSparsePhiConfig::default_instance_ = NULL;

SmoothSparsePhiConfig* SmoothSparsePhiConfig::New(::google::protobuf::Arena* arena) const {
  SmoothSparsePhiConfig* n = new SmoothSparsePhiConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmoothSparsePhiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.SmoothSparsePhiConfig)
  if (_has_bits_[0 / 32] & 12u) {
    if (has_dictionary_name()) {
      dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_transform_config()) {
      if (transform_config_ != NULL) transform_config_->::artm::TransformConfig::Clear();
    }
  }
  topic_name_.Clear();
  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SmoothSparsePhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.SmoothSparsePhiConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (tag == 10) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SmoothSparsePhiConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SmoothSparsePhiConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(26)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 3;
      case 3: {
        if (tag == 26) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SmoothSparsePhiConfig.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transform_config;
        break;
      }

      // optional .artm.TransformConfig transform_config = 4;
      case 4: {
        if (tag == 34) {
         parse_transform_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.SmoothSparsePhiConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.SmoothSparsePhiConfig)
  return false;
#undef DO_
}

void SmoothSparsePhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.SmoothSparsePhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothSparsePhiConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothSparsePhiConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothSparsePhiConfig.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dictionary_name(), output);
  }

  // optional .artm.TransformConfig transform_config = 4;
  if (has_transform_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->transform_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.SmoothSparsePhiConfig)
}

::google::protobuf::uint8* SmoothSparsePhiConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.SmoothSparsePhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothSparsePhiConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothSparsePhiConfig.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothSparsePhiConfig.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dictionary_name(), target);
  }

  // optional .artm.TransformConfig transform_config = 4;
  if (has_transform_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->transform_config_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.SmoothSparsePhiConfig)
  return target;
}

int SmoothSparsePhiConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.SmoothSparsePhiConfig)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 12u) {
    // optional string dictionary_name = 3;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

    // optional .artm.TransformConfig transform_config = 4;
    if (has_transform_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_config_);
    }

  }
  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothSparsePhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.SmoothSparsePhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SmoothSparsePhiConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SmoothSparsePhiConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.SmoothSparsePhiConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.SmoothSparsePhiConfig)
    MergeFrom(*source);
  }
}

void SmoothSparsePhiConfig::MergeFrom(const SmoothSparsePhiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.SmoothSparsePhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
    if (from.has_transform_config()) {
      mutable_transform_config()->::artm::TransformConfig::MergeFrom(from.transform_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SmoothSparsePhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.SmoothSparsePhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothSparsePhiConfig::CopyFrom(const SmoothSparsePhiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.SmoothSparsePhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothSparsePhiConfig::IsInitialized() const {

  return true;
}

void SmoothSparsePhiConfig::Swap(SmoothSparsePhiConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmoothSparsePhiConfig::InternalSwap(SmoothSparsePhiConfig* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  dictionary_name_.Swap(&other->dictionary_name_);
  std::swap(transform_config_, other->transform_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmoothSparsePhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothSparsePhiConfig_descriptor_;
  metadata.reflection = SmoothSparsePhiConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SmoothSparsePhiConfig

// repeated string topic_name = 1;
int SmoothSparsePhiConfig::topic_name_size() const {
  return topic_name_.size();
}
void SmoothSparsePhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& SmoothSparsePhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparsePhiConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* SmoothSparsePhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparsePhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void SmoothSparsePhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SmoothSparsePhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void SmoothSparsePhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SmoothSparsePhiConfig.topic_name)
}
 void SmoothSparsePhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothSparsePhiConfig.topic_name)
}
 ::std::string* SmoothSparsePhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SmoothSparsePhiConfig.topic_name)
  return topic_name_.Add();
}
 void SmoothSparsePhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SmoothSparsePhiConfig.topic_name)
}
 void SmoothSparsePhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SmoothSparsePhiConfig.topic_name)
}
 void SmoothSparsePhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SmoothSparsePhiConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothSparsePhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparsePhiConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothSparsePhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparsePhiConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
int SmoothSparsePhiConfig::class_id_size() const {
  return class_id_.size();
}
void SmoothSparsePhiConfig::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& SmoothSparsePhiConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparsePhiConfig.class_id)
  return class_id_.Get(index);
}
 ::std::string* SmoothSparsePhiConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparsePhiConfig.class_id)
  return class_id_.Mutable(index);
}
 void SmoothSparsePhiConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SmoothSparsePhiConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void SmoothSparsePhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SmoothSparsePhiConfig.class_id)
}
 void SmoothSparsePhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothSparsePhiConfig.class_id)
}
 ::std::string* SmoothSparsePhiConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.SmoothSparsePhiConfig.class_id)
  return class_id_.Add();
}
 void SmoothSparsePhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SmoothSparsePhiConfig.class_id)
}
 void SmoothSparsePhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SmoothSparsePhiConfig.class_id)
}
 void SmoothSparsePhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SmoothSparsePhiConfig.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothSparsePhiConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparsePhiConfig.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothSparsePhiConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparsePhiConfig.class_id)
  return &class_id_;
}

// optional string dictionary_name = 3;
bool SmoothSparsePhiConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SmoothSparsePhiConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
void SmoothSparsePhiConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void SmoothSparsePhiConfig::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& SmoothSparsePhiConfig::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparsePhiConfig.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SmoothSparsePhiConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.SmoothSparsePhiConfig.dictionary_name)
}
 void SmoothSparsePhiConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.SmoothSparsePhiConfig.dictionary_name)
}
 void SmoothSparsePhiConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothSparsePhiConfig.dictionary_name)
}
 ::std::string* SmoothSparsePhiConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparsePhiConfig.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SmoothSparsePhiConfig::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.SmoothSparsePhiConfig.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SmoothSparsePhiConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.SmoothSparsePhiConfig.dictionary_name)
}

// optional .artm.TransformConfig transform_config = 4;
bool SmoothSparsePhiConfig::has_transform_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SmoothSparsePhiConfig::set_has_transform_config() {
  _has_bits_[0] |= 0x00000008u;
}
void SmoothSparsePhiConfig::clear_has_transform_config() {
  _has_bits_[0] &= ~0x00000008u;
}
void SmoothSparsePhiConfig::clear_transform_config() {
  if (transform_config_ != NULL) transform_config_->::artm::TransformConfig::Clear();
  clear_has_transform_config();
}
const ::artm::TransformConfig& SmoothSparsePhiConfig::transform_config() const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparsePhiConfig.transform_config)
  return transform_config_ != NULL ? *transform_config_ : *default_instance_->transform_config_;
}
::artm::TransformConfig* SmoothSparsePhiConfig::mutable_transform_config() {
  set_has_transform_config();
  if (transform_config_ == NULL) {
    transform_config_ = new ::artm::TransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparsePhiConfig.transform_config)
  return transform_config_;
}
::artm::TransformConfig* SmoothSparsePhiConfig::release_transform_config() {
  // @@protoc_insertion_point(field_release:artm.SmoothSparsePhiConfig.transform_config)
  clear_has_transform_config();
  ::artm::TransformConfig* temp = transform_config_;
  transform_config_ = NULL;
  return temp;
}
void SmoothSparsePhiConfig::set_allocated_transform_config(::artm::TransformConfig* transform_config) {
  delete transform_config_;
  transform_config_ = transform_config;
  if (transform_config) {
    set_has_transform_config();
  } else {
    clear_has_transform_config();
  }
  // @@protoc_insertion_point(field_set_allocated:artm.SmoothSparsePhiConfig.transform_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecorrelatorPhiConfig::kTopicNameFieldNumber;
const int DecorrelatorPhiConfig::kClassIdFieldNumber;
const int DecorrelatorPhiConfig::kFirstTopicNameFieldNumber;
const int DecorrelatorPhiConfig::kSecondTopicNameFieldNumber;
const int DecorrelatorPhiConfig::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecorrelatorPhiConfig::DecorrelatorPhiConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.DecorrelatorPhiConfig)
}

void DecorrelatorPhiConfig::InitAsDefaultInstance() {
}

DecorrelatorPhiConfig::DecorrelatorPhiConfig(const DecorrelatorPhiConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.DecorrelatorPhiConfig)
}

void DecorrelatorPhiConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecorrelatorPhiConfig::~DecorrelatorPhiConfig() {
  // @@protoc_insertion_point(destructor:artm.DecorrelatorPhiConfig)
  SharedDtor();
}

void DecorrelatorPhiConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DecorrelatorPhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecorrelatorPhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecorrelatorPhiConfig_descriptor_;
}

const DecorrelatorPhiConfig& DecorrelatorPhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DecorrelatorPhiConfig* DecorrelatorPhiConfig::default_instance_ = NULL;

DecorrelatorPhiConfig* DecorrelatorPhiConfig::New(::google::protobuf::Arena* arena) const {
  DecorrelatorPhiConfig* n = new DecorrelatorPhiConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecorrelatorPhiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.DecorrelatorPhiConfig)
  topic_name_.Clear();
  class_id_.Clear();
  first_topic_name_.Clear();
  second_topic_name_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DecorrelatorPhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.DecorrelatorPhiConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (tag == 10) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.DecorrelatorPhiConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.DecorrelatorPhiConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(26)) goto parse_first_topic_name;
        break;
      }

      // repeated string first_topic_name = 3;
      case 3: {
        if (tag == 26) {
         parse_first_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_first_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first_topic_name(this->first_topic_name_size() - 1).data(),
            this->first_topic_name(this->first_topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.DecorrelatorPhiConfig.first_topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_first_topic_name;
        if (input->ExpectTag(34)) goto parse_second_topic_name;
        break;
      }

      // repeated string second_topic_name = 4;
      case 4: {
        if (tag == 34) {
         parse_second_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_second_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->second_topic_name(this->second_topic_name_size() - 1).data(),
            this->second_topic_name(this->second_topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.DecorrelatorPhiConfig.second_topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_second_topic_name;
        if (input->ExpectTag(45)) goto parse_value;
        break;
      }

      // repeated float value = 5;
      case 5: {
        if (tag == 45) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_value())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.DecorrelatorPhiConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.DecorrelatorPhiConfig)
  return false;
#undef DO_
}

void DecorrelatorPhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.DecorrelatorPhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DecorrelatorPhiConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DecorrelatorPhiConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // repeated string first_topic_name = 3;
  for (int i = 0; i < this->first_topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_topic_name(i).data(), this->first_topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DecorrelatorPhiConfig.first_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->first_topic_name(i), output);
  }

  // repeated string second_topic_name = 4;
  for (int i = 0; i < this->second_topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->second_topic_name(i).data(), this->second_topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DecorrelatorPhiConfig.second_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->second_topic_name(i), output);
  }

  // repeated float value = 5;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.DecorrelatorPhiConfig)
}

::google::protobuf::uint8* DecorrelatorPhiConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.DecorrelatorPhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DecorrelatorPhiConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DecorrelatorPhiConfig.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // repeated string first_topic_name = 3;
  for (int i = 0; i < this->first_topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_topic_name(i).data(), this->first_topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DecorrelatorPhiConfig.first_topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->first_topic_name(i), target);
  }

  // repeated string second_topic_name = 4;
  for (int i = 0; i < this->second_topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->second_topic_name(i).data(), this->second_topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DecorrelatorPhiConfig.second_topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->second_topic_name(i), target);
  }

  // repeated float value = 5;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.DecorrelatorPhiConfig)
  return target;
}

int DecorrelatorPhiConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.DecorrelatorPhiConfig)
  int total_size = 0;

  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated string first_topic_name = 3;
  total_size += 1 * this->first_topic_name_size();
  for (int i = 0; i < this->first_topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->first_topic_name(i));
  }

  // repeated string second_topic_name = 4;
  total_size += 1 * this->second_topic_name_size();
  for (int i = 0; i < this->second_topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->second_topic_name(i));
  }

  // repeated float value = 5;
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecorrelatorPhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.DecorrelatorPhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DecorrelatorPhiConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DecorrelatorPhiConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.DecorrelatorPhiConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.DecorrelatorPhiConfig)
    MergeFrom(*source);
  }
}

void DecorrelatorPhiConfig::MergeFrom(const DecorrelatorPhiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.DecorrelatorPhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  class_id_.MergeFrom(from.class_id_);
  first_topic_name_.MergeFrom(from.first_topic_name_);
  second_topic_name_.MergeFrom(from.second_topic_name_);
  value_.MergeFrom(from.value_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DecorrelatorPhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.DecorrelatorPhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecorrelatorPhiConfig::CopyFrom(const DecorrelatorPhiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.DecorrelatorPhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecorrelatorPhiConfig::IsInitialized() const {

  return true;
}

void DecorrelatorPhiConfig::Swap(DecorrelatorPhiConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecorrelatorPhiConfig::InternalSwap(DecorrelatorPhiConfig* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  first_topic_name_.UnsafeArenaSwap(&other->first_topic_name_);
  second_topic_name_.UnsafeArenaSwap(&other->second_topic_name_);
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecorrelatorPhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecorrelatorPhiConfig_descriptor_;
  metadata.reflection = DecorrelatorPhiConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecorrelatorPhiConfig

// repeated string topic_name = 1;
int DecorrelatorPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
void DecorrelatorPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& DecorrelatorPhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.DecorrelatorPhiConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* DecorrelatorPhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DecorrelatorPhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void DecorrelatorPhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DecorrelatorPhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void DecorrelatorPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DecorrelatorPhiConfig.topic_name)
}
 void DecorrelatorPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DecorrelatorPhiConfig.topic_name)
}
 ::std::string* DecorrelatorPhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.DecorrelatorPhiConfig.topic_name)
  return topic_name_.Add();
}
 void DecorrelatorPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DecorrelatorPhiConfig.topic_name)
}
 void DecorrelatorPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DecorrelatorPhiConfig.topic_name)
}
 void DecorrelatorPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DecorrelatorPhiConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecorrelatorPhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.DecorrelatorPhiConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DecorrelatorPhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.DecorrelatorPhiConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
int DecorrelatorPhiConfig::class_id_size() const {
  return class_id_.size();
}
void DecorrelatorPhiConfig::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& DecorrelatorPhiConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.DecorrelatorPhiConfig.class_id)
  return class_id_.Get(index);
}
 ::std::string* DecorrelatorPhiConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DecorrelatorPhiConfig.class_id)
  return class_id_.Mutable(index);
}
 void DecorrelatorPhiConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DecorrelatorPhiConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void DecorrelatorPhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DecorrelatorPhiConfig.class_id)
}
 void DecorrelatorPhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DecorrelatorPhiConfig.class_id)
}
 ::std::string* DecorrelatorPhiConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.DecorrelatorPhiConfig.class_id)
  return class_id_.Add();
}
 void DecorrelatorPhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DecorrelatorPhiConfig.class_id)
}
 void DecorrelatorPhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DecorrelatorPhiConfig.class_id)
}
 void DecorrelatorPhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DecorrelatorPhiConfig.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecorrelatorPhiConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.DecorrelatorPhiConfig.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DecorrelatorPhiConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.DecorrelatorPhiConfig.class_id)
  return &class_id_;
}

// repeated string first_topic_name = 3;
int DecorrelatorPhiConfig::first_topic_name_size() const {
  return first_topic_name_.size();
}
void DecorrelatorPhiConfig::clear_first_topic_name() {
  first_topic_name_.Clear();
}
 const ::std::string& DecorrelatorPhiConfig::first_topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.DecorrelatorPhiConfig.first_topic_name)
  return first_topic_name_.Get(index);
}
 ::std::string* DecorrelatorPhiConfig::mutable_first_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DecorrelatorPhiConfig.first_topic_name)
  return first_topic_name_.Mutable(index);
}
 void DecorrelatorPhiConfig::set_first_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DecorrelatorPhiConfig.first_topic_name)
  first_topic_name_.Mutable(index)->assign(value);
}
 void DecorrelatorPhiConfig::set_first_topic_name(int index, const char* value) {
  first_topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DecorrelatorPhiConfig.first_topic_name)
}
 void DecorrelatorPhiConfig::set_first_topic_name(int index, const char* value, size_t size) {
  first_topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DecorrelatorPhiConfig.first_topic_name)
}
 ::std::string* DecorrelatorPhiConfig::add_first_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.DecorrelatorPhiConfig.first_topic_name)
  return first_topic_name_.Add();
}
 void DecorrelatorPhiConfig::add_first_topic_name(const ::std::string& value) {
  first_topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DecorrelatorPhiConfig.first_topic_name)
}
 void DecorrelatorPhiConfig::add_first_topic_name(const char* value) {
  first_topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DecorrelatorPhiConfig.first_topic_name)
}
 void DecorrelatorPhiConfig::add_first_topic_name(const char* value, size_t size) {
  first_topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DecorrelatorPhiConfig.first_topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecorrelatorPhiConfig::first_topic_name() const {
  // @@protoc_insertion_point(field_list:artm.DecorrelatorPhiConfig.first_topic_name)
  return first_topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DecorrelatorPhiConfig::mutable_first_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.DecorrelatorPhiConfig.first_topic_name)
  return &first_topic_name_;
}

// repeated string second_topic_name = 4;
int DecorrelatorPhiConfig::second_topic_name_size() const {
  return second_topic_name_.size();
}
void DecorrelatorPhiConfig::clear_second_topic_name() {
  second_topic_name_.Clear();
}
 const ::std::string& DecorrelatorPhiConfig::second_topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.DecorrelatorPhiConfig.second_topic_name)
  return second_topic_name_.Get(index);
}
 ::std::string* DecorrelatorPhiConfig::mutable_second_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DecorrelatorPhiConfig.second_topic_name)
  return second_topic_name_.Mutable(index);
}
 void DecorrelatorPhiConfig::set_second_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DecorrelatorPhiConfig.second_topic_name)
  second_topic_name_.Mutable(index)->assign(value);
}
 void DecorrelatorPhiConfig::set_second_topic_name(int index, const char* value) {
  second_topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DecorrelatorPhiConfig.second_topic_name)
}
 void DecorrelatorPhiConfig::set_second_topic_name(int index, const char* value, size_t size) {
  second_topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DecorrelatorPhiConfig.second_topic_name)
}
 ::std::string* DecorrelatorPhiConfig::add_second_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.DecorrelatorPhiConfig.second_topic_name)
  return second_topic_name_.Add();
}
 void DecorrelatorPhiConfig::add_second_topic_name(const ::std::string& value) {
  second_topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DecorrelatorPhiConfig.second_topic_name)
}
 void DecorrelatorPhiConfig::add_second_topic_name(const char* value) {
  second_topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DecorrelatorPhiConfig.second_topic_name)
}
 void DecorrelatorPhiConfig::add_second_topic_name(const char* value, size_t size) {
  second_topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DecorrelatorPhiConfig.second_topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecorrelatorPhiConfig::second_topic_name() const {
  // @@protoc_insertion_point(field_list:artm.DecorrelatorPhiConfig.second_topic_name)
  return second_topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DecorrelatorPhiConfig::mutable_second_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.DecorrelatorPhiConfig.second_topic_name)
  return &second_topic_name_;
}

// repeated float value = 5;
int DecorrelatorPhiConfig::value_size() const {
  return value_.size();
}
void DecorrelatorPhiConfig::clear_value() {
  value_.Clear();
}
 float DecorrelatorPhiConfig::value(int index) const {
  // @@protoc_insertion_point(field_get:artm.DecorrelatorPhiConfig.value)
  return value_.Get(index);
}
 void DecorrelatorPhiConfig::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DecorrelatorPhiConfig.value)
}
 void DecorrelatorPhiConfig::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DecorrelatorPhiConfig.value)
}
 const ::google::protobuf::RepeatedField< float >&
DecorrelatorPhiConfig::value() const {
  // @@protoc_insertion_point(field_list:artm.DecorrelatorPhiConfig.value)
  return value_;
}
 ::google::protobuf::RepeatedField< float >*
DecorrelatorPhiConfig::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.DecorrelatorPhiConfig.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiLanguagePhiConfig::MultiLanguagePhiConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.MultiLanguagePhiConfig)
}

void MultiLanguagePhiConfig::InitAsDefaultInstance() {
}

MultiLanguagePhiConfig::MultiLanguagePhiConfig(const MultiLanguagePhiConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.MultiLanguagePhiConfig)
}

void MultiLanguagePhiConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiLanguagePhiConfig::~MultiLanguagePhiConfig() {
  // @@protoc_insertion_point(destructor:artm.MultiLanguagePhiConfig)
  SharedDtor();
}

void MultiLanguagePhiConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiLanguagePhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiLanguagePhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiLanguagePhiConfig_descriptor_;
}

const MultiLanguagePhiConfig& MultiLanguagePhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MultiLanguagePhiConfig* MultiLanguagePhiConfig::default_instance_ = NULL;

MultiLanguagePhiConfig* MultiLanguagePhiConfig::New(::google::protobuf::Arena* arena) const {
  MultiLanguagePhiConfig* n = new MultiLanguagePhiConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiLanguagePhiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.MultiLanguagePhiConfig)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MultiLanguagePhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.MultiLanguagePhiConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:artm.MultiLanguagePhiConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.MultiLanguagePhiConfig)
  return false;
#undef DO_
}

void MultiLanguagePhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.MultiLanguagePhiConfig)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.MultiLanguagePhiConfig)
}

::google::protobuf::uint8* MultiLanguagePhiConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.MultiLanguagePhiConfig)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.MultiLanguagePhiConfig)
  return target;
}

int MultiLanguagePhiConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.MultiLanguagePhiConfig)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiLanguagePhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.MultiLanguagePhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiLanguagePhiConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiLanguagePhiConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.MultiLanguagePhiConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.MultiLanguagePhiConfig)
    MergeFrom(*source);
  }
}

void MultiLanguagePhiConfig::MergeFrom(const MultiLanguagePhiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.MultiLanguagePhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MultiLanguagePhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.MultiLanguagePhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiLanguagePhiConfig::CopyFrom(const MultiLanguagePhiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.MultiLanguagePhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiLanguagePhiConfig::IsInitialized() const {

  return true;
}

void MultiLanguagePhiConfig::Swap(MultiLanguagePhiConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiLanguagePhiConfig::InternalSwap(MultiLanguagePhiConfig* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiLanguagePhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiLanguagePhiConfig_descriptor_;
  metadata.reflection = MultiLanguagePhiConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiLanguagePhiConfig

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelRegularizationPhiConfig::kTopicNameFieldNumber;
const int LabelRegularizationPhiConfig::kClassIdFieldNumber;
const int LabelRegularizationPhiConfig::kDictionaryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelRegularizationPhiConfig::LabelRegularizationPhiConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.LabelRegularizationPhiConfig)
}

void LabelRegularizationPhiConfig::InitAsDefaultInstance() {
}

LabelRegularizationPhiConfig::LabelRegularizationPhiConfig(const LabelRegularizationPhiConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.LabelRegularizationPhiConfig)
}

void LabelRegularizationPhiConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelRegularizationPhiConfig::~LabelRegularizationPhiConfig() {
  // @@protoc_insertion_point(destructor:artm.LabelRegularizationPhiConfig)
  SharedDtor();
}

void LabelRegularizationPhiConfig::SharedDtor() {
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LabelRegularizationPhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelRegularizationPhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelRegularizationPhiConfig_descriptor_;
}

const LabelRegularizationPhiConfig& LabelRegularizationPhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

LabelRegularizationPhiConfig* LabelRegularizationPhiConfig::default_instance_ = NULL;

LabelRegularizationPhiConfig* LabelRegularizationPhiConfig::New(::google::protobuf::Arena* arena) const {
  LabelRegularizationPhiConfig* n = new LabelRegularizationPhiConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelRegularizationPhiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.LabelRegularizationPhiConfig)
  if (has_dictionary_name()) {
    dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  topic_name_.Clear();
  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LabelRegularizationPhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.LabelRegularizationPhiConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (tag == 10) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.LabelRegularizationPhiConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.LabelRegularizationPhiConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(26)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 3;
      case 3: {
        if (tag == 26) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.LabelRegularizationPhiConfig.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.LabelRegularizationPhiConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.LabelRegularizationPhiConfig)
  return false;
#undef DO_
}

void LabelRegularizationPhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.LabelRegularizationPhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.LabelRegularizationPhiConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.LabelRegularizationPhiConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.LabelRegularizationPhiConfig.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dictionary_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.LabelRegularizationPhiConfig)
}

::google::protobuf::uint8* LabelRegularizationPhiConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.LabelRegularizationPhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.LabelRegularizationPhiConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.LabelRegularizationPhiConfig.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.LabelRegularizationPhiConfig.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dictionary_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.LabelRegularizationPhiConfig)
  return target;
}

int LabelRegularizationPhiConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.LabelRegularizationPhiConfig)
  int total_size = 0;

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dictionary_name());
  }

  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelRegularizationPhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.LabelRegularizationPhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LabelRegularizationPhiConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelRegularizationPhiConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.LabelRegularizationPhiConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.LabelRegularizationPhiConfig)
    MergeFrom(*source);
  }
}

void LabelRegularizationPhiConfig::MergeFrom(const LabelRegularizationPhiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.LabelRegularizationPhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LabelRegularizationPhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.LabelRegularizationPhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelRegularizationPhiConfig::CopyFrom(const LabelRegularizationPhiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.LabelRegularizationPhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelRegularizationPhiConfig::IsInitialized() const {

  return true;
}

void LabelRegularizationPhiConfig::Swap(LabelRegularizationPhiConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelRegularizationPhiConfig::InternalSwap(LabelRegularizationPhiConfig* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  dictionary_name_.Swap(&other->dictionary_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelRegularizationPhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelRegularizationPhiConfig_descriptor_;
  metadata.reflection = LabelRegularizationPhiConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelRegularizationPhiConfig

// repeated string topic_name = 1;
int LabelRegularizationPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
void LabelRegularizationPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& LabelRegularizationPhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.LabelRegularizationPhiConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* LabelRegularizationPhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.LabelRegularizationPhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void LabelRegularizationPhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.LabelRegularizationPhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void LabelRegularizationPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.LabelRegularizationPhiConfig.topic_name)
}
 void LabelRegularizationPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.LabelRegularizationPhiConfig.topic_name)
}
 ::std::string* LabelRegularizationPhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.LabelRegularizationPhiConfig.topic_name)
  return topic_name_.Add();
}
 void LabelRegularizationPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.LabelRegularizationPhiConfig.topic_name)
}
 void LabelRegularizationPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.LabelRegularizationPhiConfig.topic_name)
}
 void LabelRegularizationPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.LabelRegularizationPhiConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LabelRegularizationPhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.LabelRegularizationPhiConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LabelRegularizationPhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.LabelRegularizationPhiConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
int LabelRegularizationPhiConfig::class_id_size() const {
  return class_id_.size();
}
void LabelRegularizationPhiConfig::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& LabelRegularizationPhiConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.LabelRegularizationPhiConfig.class_id)
  return class_id_.Get(index);
}
 ::std::string* LabelRegularizationPhiConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.LabelRegularizationPhiConfig.class_id)
  return class_id_.Mutable(index);
}
 void LabelRegularizationPhiConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.LabelRegularizationPhiConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void LabelRegularizationPhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.LabelRegularizationPhiConfig.class_id)
}
 void LabelRegularizationPhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.LabelRegularizationPhiConfig.class_id)
}
 ::std::string* LabelRegularizationPhiConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.LabelRegularizationPhiConfig.class_id)
  return class_id_.Add();
}
 void LabelRegularizationPhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.LabelRegularizationPhiConfig.class_id)
}
 void LabelRegularizationPhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.LabelRegularizationPhiConfig.class_id)
}
 void LabelRegularizationPhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.LabelRegularizationPhiConfig.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LabelRegularizationPhiConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.LabelRegularizationPhiConfig.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LabelRegularizationPhiConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.LabelRegularizationPhiConfig.class_id)
  return &class_id_;
}

// optional string dictionary_name = 3;
bool LabelRegularizationPhiConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LabelRegularizationPhiConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
void LabelRegularizationPhiConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void LabelRegularizationPhiConfig::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& LabelRegularizationPhiConfig::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.LabelRegularizationPhiConfig.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LabelRegularizationPhiConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.LabelRegularizationPhiConfig.dictionary_name)
}
 void LabelRegularizationPhiConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.LabelRegularizationPhiConfig.dictionary_name)
}
 void LabelRegularizationPhiConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.LabelRegularizationPhiConfig.dictionary_name)
}
 ::std::string* LabelRegularizationPhiConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.LabelRegularizationPhiConfig.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LabelRegularizationPhiConfig::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.LabelRegularizationPhiConfig.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LabelRegularizationPhiConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.LabelRegularizationPhiConfig.dictionary_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SpecifiedSparsePhiConfig_SparseMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecifiedSparsePhiConfig_SparseMode_descriptor_;
}
bool SpecifiedSparsePhiConfig_SparseMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SpecifiedSparsePhiConfig_SparseMode SpecifiedSparsePhiConfig::SparseTopics;
const SpecifiedSparsePhiConfig_SparseMode SpecifiedSparsePhiConfig::SparseTokens;
const SpecifiedSparsePhiConfig_SparseMode SpecifiedSparsePhiConfig::SparseMode_MIN;
const SpecifiedSparsePhiConfig_SparseMode SpecifiedSparsePhiConfig::SparseMode_MAX;
const int SpecifiedSparsePhiConfig::SparseMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
::std::string* SpecifiedSparsePhiConfig::_default_class_id_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpecifiedSparsePhiConfig::kTopicNameFieldNumber;
const int SpecifiedSparsePhiConfig::kClassIdFieldNumber;
const int SpecifiedSparsePhiConfig::kMaxElementsCountFieldNumber;
const int SpecifiedSparsePhiConfig::kProbabilityThresholdFieldNumber;
const int SpecifiedSparsePhiConfig::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpecifiedSparsePhiConfig::SpecifiedSparsePhiConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.SpecifiedSparsePhiConfig)
}

void SpecifiedSparsePhiConfig::InitAsDefaultInstance() {
}

SpecifiedSparsePhiConfig::SpecifiedSparsePhiConfig(const SpecifiedSparsePhiConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.SpecifiedSparsePhiConfig)
}

void SpecifiedSparsePhiConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  class_id_.UnsafeSetDefault(_default_class_id_);
  max_elements_count_ = 20;
  probability_threshold_ = 0.99f;
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecifiedSparsePhiConfig::~SpecifiedSparsePhiConfig() {
  // @@protoc_insertion_point(destructor:artm.SpecifiedSparsePhiConfig)
  SharedDtor();
}

void SpecifiedSparsePhiConfig::SharedDtor() {
  class_id_.DestroyNoArena(_default_class_id_);
  if (this != default_instance_) {
  }
}

void SpecifiedSparsePhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecifiedSparsePhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecifiedSparsePhiConfig_descriptor_;
}

const SpecifiedSparsePhiConfig& SpecifiedSparsePhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SpecifiedSparsePhiConfig* SpecifiedSparsePhiConfig::default_instance_ = NULL;

SpecifiedSparsePhiConfig* SpecifiedSparsePhiConfig::New(::google::protobuf::Arena* arena) const {
  SpecifiedSparsePhiConfig* n = new SpecifiedSparsePhiConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpecifiedSparsePhiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.SpecifiedSparsePhiConfig)
  if (_has_bits_[0 / 32] & 30u) {
    if (has_class_id()) {
      class_id_.ClearToDefaultNoArena(_default_class_id_);
    }
    max_elements_count_ = 20;
    probability_threshold_ = 0.99f;
    mode_ = 0;
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpecifiedSparsePhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.SpecifiedSparsePhiConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (tag == 10) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SpecifiedSparsePhiConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // optional string class_id = 2 [default = "@default_class"];
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SpecifiedSparsePhiConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_elements_count;
        break;
      }

      // optional int32 max_elements_count = 3 [default = 20];
      case 3: {
        if (tag == 24) {
         parse_max_elements_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_elements_count_)));
          set_has_max_elements_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_probability_threshold;
        break;
      }

      // optional float probability_threshold = 4 [default = 0.99];
      case 4: {
        if (tag == 37) {
         parse_probability_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_threshold_)));
          set_has_probability_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mode;
        break;
      }

      // optional .artm.SpecifiedSparsePhiConfig.SparseMode mode = 5 [default = SparseTopics];
      case 5: {
        if (tag == 40) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::SpecifiedSparsePhiConfig_SparseMode_IsValid(value)) {
            set_mode(static_cast< ::artm::SpecifiedSparsePhiConfig_SparseMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.SpecifiedSparsePhiConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.SpecifiedSparsePhiConfig)
  return false;
#undef DO_
}

void SpecifiedSparsePhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.SpecifiedSparsePhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SpecifiedSparsePhiConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SpecifiedSparsePhiConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->class_id(), output);
  }

  // optional int32 max_elements_count = 3 [default = 20];
  if (has_max_elements_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_elements_count(), output);
  }

  // optional float probability_threshold = 4 [default = 0.99];
  if (has_probability_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->probability_threshold(), output);
  }

  // optional .artm.SpecifiedSparsePhiConfig.SparseMode mode = 5 [default = SparseTopics];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.SpecifiedSparsePhiConfig)
}

::google::protobuf::uint8* SpecifiedSparsePhiConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.SpecifiedSparsePhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SpecifiedSparsePhiConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SpecifiedSparsePhiConfig.class_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_id(), target);
  }

  // optional int32 max_elements_count = 3 [default = 20];
  if (has_max_elements_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_elements_count(), target);
  }

  // optional float probability_threshold = 4 [default = 0.99];
  if (has_probability_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->probability_threshold(), target);
  }

  // optional .artm.SpecifiedSparsePhiConfig.SparseMode mode = 5 [default = SparseTopics];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.SpecifiedSparsePhiConfig)
  return target;
}

int SpecifiedSparsePhiConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.SpecifiedSparsePhiConfig)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 30u) {
    // optional string class_id = 2 [default = "@default_class"];
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

    // optional int32 max_elements_count = 3 [default = 20];
    if (has_max_elements_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_elements_count());
    }

    // optional float probability_threshold = 4 [default = 0.99];
    if (has_probability_threshold()) {
      total_size += 1 + 4;
    }

    // optional .artm.SpecifiedSparsePhiConfig.SparseMode mode = 5 [default = SparseTopics];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecifiedSparsePhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.SpecifiedSparsePhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpecifiedSparsePhiConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpecifiedSparsePhiConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.SpecifiedSparsePhiConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.SpecifiedSparsePhiConfig)
    MergeFrom(*source);
  }
}

void SpecifiedSparsePhiConfig::MergeFrom(const SpecifiedSparsePhiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.SpecifiedSparsePhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_class_id()) {
      set_has_class_id();
      class_id_.AssignWithDefault(_default_class_id_, from.class_id_);
    }
    if (from.has_max_elements_count()) {
      set_max_elements_count(from.max_elements_count());
    }
    if (from.has_probability_threshold()) {
      set_probability_threshold(from.probability_threshold());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpecifiedSparsePhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.SpecifiedSparsePhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecifiedSparsePhiConfig::CopyFrom(const SpecifiedSparsePhiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.SpecifiedSparsePhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecifiedSparsePhiConfig::IsInitialized() const {

  return true;
}

void SpecifiedSparsePhiConfig::Swap(SpecifiedSparsePhiConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpecifiedSparsePhiConfig::InternalSwap(SpecifiedSparsePhiConfig* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  class_id_.Swap(&other->class_id_);
  std::swap(max_elements_count_, other->max_elements_count_);
  std::swap(probability_threshold_, other->probability_threshold_);
  std::swap(mode_, other->mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpecifiedSparsePhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecifiedSparsePhiConfig_descriptor_;
  metadata.reflection = SpecifiedSparsePhiConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpecifiedSparsePhiConfig

// repeated string topic_name = 1;
int SpecifiedSparsePhiConfig::topic_name_size() const {
  return topic_name_.size();
}
void SpecifiedSparsePhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& SpecifiedSparsePhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SpecifiedSparsePhiConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* SpecifiedSparsePhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SpecifiedSparsePhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void SpecifiedSparsePhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SpecifiedSparsePhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void SpecifiedSparsePhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SpecifiedSparsePhiConfig.topic_name)
}
 void SpecifiedSparsePhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SpecifiedSparsePhiConfig.topic_name)
}
 ::std::string* SpecifiedSparsePhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SpecifiedSparsePhiConfig.topic_name)
  return topic_name_.Add();
}
 void SpecifiedSparsePhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SpecifiedSparsePhiConfig.topic_name)
}
 void SpecifiedSparsePhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SpecifiedSparsePhiConfig.topic_name)
}
 void SpecifiedSparsePhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SpecifiedSparsePhiConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SpecifiedSparsePhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SpecifiedSparsePhiConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SpecifiedSparsePhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SpecifiedSparsePhiConfig.topic_name)
  return &topic_name_;
}

// optional string class_id = 2 [default = "@default_class"];
bool SpecifiedSparsePhiConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpecifiedSparsePhiConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SpecifiedSparsePhiConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpecifiedSparsePhiConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
 const ::std::string& SpecifiedSparsePhiConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.SpecifiedSparsePhiConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
 void SpecifiedSparsePhiConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.SpecifiedSparsePhiConfig.class_id)
}
 void SpecifiedSparsePhiConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.SpecifiedSparsePhiConfig.class_id)
}
 void SpecifiedSparsePhiConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.SpecifiedSparsePhiConfig.class_id)
}
 ::std::string* SpecifiedSparsePhiConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.SpecifiedSparsePhiConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
 ::std::string* SpecifiedSparsePhiConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.SpecifiedSparsePhiConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
 void SpecifiedSparsePhiConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.SpecifiedSparsePhiConfig.class_id)
}

// optional int32 max_elements_count = 3 [default = 20];
bool SpecifiedSparsePhiConfig::has_max_elements_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpecifiedSparsePhiConfig::set_has_max_elements_count() {
  _has_bits_[0] |= 0x00000004u;
}
void SpecifiedSparsePhiConfig::clear_has_max_elements_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpecifiedSparsePhiConfig::clear_max_elements_count() {
  max_elements_count_ = 20;
  clear_has_max_elements_count();
}
 ::google::protobuf::int32 SpecifiedSparsePhiConfig::max_elements_count() const {
  // @@protoc_insertion_point(field_get:artm.SpecifiedSparsePhiConfig.max_elements_count)
  return max_elements_count_;
}
 void SpecifiedSparsePhiConfig::set_max_elements_count(::google::protobuf::int32 value) {
  set_has_max_elements_count();
  max_elements_count_ = value;
  // @@protoc_insertion_point(field_set:artm.SpecifiedSparsePhiConfig.max_elements_count)
}

// optional float probability_threshold = 4 [default = 0.99];
bool SpecifiedSparsePhiConfig::has_probability_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpecifiedSparsePhiConfig::set_has_probability_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void SpecifiedSparsePhiConfig::clear_has_probability_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpecifiedSparsePhiConfig::clear_probability_threshold() {
  probability_threshold_ = 0.99f;
  clear_has_probability_threshold();
}
 float SpecifiedSparsePhiConfig::probability_threshold() const {
  // @@protoc_insertion_point(field_get:artm.SpecifiedSparsePhiConfig.probability_threshold)
  return probability_threshold_;
}
 void SpecifiedSparsePhiConfig::set_probability_threshold(float value) {
  set_has_probability_threshold();
  probability_threshold_ = value;
  // @@protoc_insertion_point(field_set:artm.SpecifiedSparsePhiConfig.probability_threshold)
}

// optional .artm.SpecifiedSparsePhiConfig.SparseMode mode = 5 [default = SparseTopics];
bool SpecifiedSparsePhiConfig::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpecifiedSparsePhiConfig::set_has_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void SpecifiedSparsePhiConfig::clear_has_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpecifiedSparsePhiConfig::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::artm::SpecifiedSparsePhiConfig_SparseMode SpecifiedSparsePhiConfig::mode() const {
  // @@protoc_insertion_point(field_get:artm.SpecifiedSparsePhiConfig.mode)
  return static_cast< ::artm::SpecifiedSparsePhiConfig_SparseMode >(mode_);
}
 void SpecifiedSparsePhiConfig::set_mode(::artm::SpecifiedSparsePhiConfig_SparseMode value) {
  assert(::artm::SpecifiedSparsePhiConfig_SparseMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:artm.SpecifiedSparsePhiConfig.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImproveCoherencePhiConfig::kTopicNameFieldNumber;
const int ImproveCoherencePhiConfig::kClassIdFieldNumber;
const int ImproveCoherencePhiConfig::kDictionaryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImproveCoherencePhiConfig::ImproveCoherencePhiConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ImproveCoherencePhiConfig)
}

void ImproveCoherencePhiConfig::InitAsDefaultInstance() {
}

ImproveCoherencePhiConfig::ImproveCoherencePhiConfig(const ImproveCoherencePhiConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ImproveCoherencePhiConfig)
}

void ImproveCoherencePhiConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImproveCoherencePhiConfig::~ImproveCoherencePhiConfig() {
  // @@protoc_insertion_point(destructor:artm.ImproveCoherencePhiConfig)
  SharedDtor();
}

void ImproveCoherencePhiConfig::SharedDtor() {
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ImproveCoherencePhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImproveCoherencePhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImproveCoherencePhiConfig_descriptor_;
}

const ImproveCoherencePhiConfig& ImproveCoherencePhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ImproveCoherencePhiConfig* ImproveCoherencePhiConfig::default_instance_ = NULL;

ImproveCoherencePhiConfig* ImproveCoherencePhiConfig::New(::google::protobuf::Arena* arena) const {
  ImproveCoherencePhiConfig* n = new ImproveCoherencePhiConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImproveCoherencePhiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ImproveCoherencePhiConfig)
  if (has_dictionary_name()) {
    dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  topic_name_.Clear();
  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImproveCoherencePhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ImproveCoherencePhiConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (tag == 10) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ImproveCoherencePhiConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ImproveCoherencePhiConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(26)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 3;
      case 3: {
        if (tag == 26) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ImproveCoherencePhiConfig.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ImproveCoherencePhiConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ImproveCoherencePhiConfig)
  return false;
#undef DO_
}

void ImproveCoherencePhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ImproveCoherencePhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImproveCoherencePhiConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImproveCoherencePhiConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImproveCoherencePhiConfig.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dictionary_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ImproveCoherencePhiConfig)
}

::google::protobuf::uint8* ImproveCoherencePhiConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ImproveCoherencePhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImproveCoherencePhiConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImproveCoherencePhiConfig.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImproveCoherencePhiConfig.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dictionary_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ImproveCoherencePhiConfig)
  return target;
}

int ImproveCoherencePhiConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ImproveCoherencePhiConfig)
  int total_size = 0;

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dictionary_name());
  }

  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImproveCoherencePhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ImproveCoherencePhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImproveCoherencePhiConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImproveCoherencePhiConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ImproveCoherencePhiConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ImproveCoherencePhiConfig)
    MergeFrom(*source);
  }
}

void ImproveCoherencePhiConfig::MergeFrom(const ImproveCoherencePhiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ImproveCoherencePhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImproveCoherencePhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ImproveCoherencePhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImproveCoherencePhiConfig::CopyFrom(const ImproveCoherencePhiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ImproveCoherencePhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImproveCoherencePhiConfig::IsInitialized() const {

  return true;
}

void ImproveCoherencePhiConfig::Swap(ImproveCoherencePhiConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImproveCoherencePhiConfig::InternalSwap(ImproveCoherencePhiConfig* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  dictionary_name_.Swap(&other->dictionary_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImproveCoherencePhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImproveCoherencePhiConfig_descriptor_;
  metadata.reflection = ImproveCoherencePhiConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImproveCoherencePhiConfig

// repeated string topic_name = 1;
int ImproveCoherencePhiConfig::topic_name_size() const {
  return topic_name_.size();
}
void ImproveCoherencePhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& ImproveCoherencePhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.ImproveCoherencePhiConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* ImproveCoherencePhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ImproveCoherencePhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void ImproveCoherencePhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ImproveCoherencePhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void ImproveCoherencePhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ImproveCoherencePhiConfig.topic_name)
}
 void ImproveCoherencePhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ImproveCoherencePhiConfig.topic_name)
}
 ::std::string* ImproveCoherencePhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.ImproveCoherencePhiConfig.topic_name)
  return topic_name_.Add();
}
 void ImproveCoherencePhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ImproveCoherencePhiConfig.topic_name)
}
 void ImproveCoherencePhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ImproveCoherencePhiConfig.topic_name)
}
 void ImproveCoherencePhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ImproveCoherencePhiConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImproveCoherencePhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.ImproveCoherencePhiConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ImproveCoherencePhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.ImproveCoherencePhiConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
int ImproveCoherencePhiConfig::class_id_size() const {
  return class_id_.size();
}
void ImproveCoherencePhiConfig::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& ImproveCoherencePhiConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.ImproveCoherencePhiConfig.class_id)
  return class_id_.Get(index);
}
 ::std::string* ImproveCoherencePhiConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ImproveCoherencePhiConfig.class_id)
  return class_id_.Mutable(index);
}
 void ImproveCoherencePhiConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ImproveCoherencePhiConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void ImproveCoherencePhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ImproveCoherencePhiConfig.class_id)
}
 void ImproveCoherencePhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ImproveCoherencePhiConfig.class_id)
}
 ::std::string* ImproveCoherencePhiConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.ImproveCoherencePhiConfig.class_id)
  return class_id_.Add();
}
 void ImproveCoherencePhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ImproveCoherencePhiConfig.class_id)
}
 void ImproveCoherencePhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ImproveCoherencePhiConfig.class_id)
}
 void ImproveCoherencePhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ImproveCoherencePhiConfig.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImproveCoherencePhiConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.ImproveCoherencePhiConfig.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ImproveCoherencePhiConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.ImproveCoherencePhiConfig.class_id)
  return &class_id_;
}

// optional string dictionary_name = 3;
bool ImproveCoherencePhiConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImproveCoherencePhiConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ImproveCoherencePhiConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImproveCoherencePhiConfig::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& ImproveCoherencePhiConfig::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.ImproveCoherencePhiConfig.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImproveCoherencePhiConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImproveCoherencePhiConfig.dictionary_name)
}
 void ImproveCoherencePhiConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImproveCoherencePhiConfig.dictionary_name)
}
 void ImproveCoherencePhiConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImproveCoherencePhiConfig.dictionary_name)
}
 ::std::string* ImproveCoherencePhiConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.ImproveCoherencePhiConfig.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImproveCoherencePhiConfig::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.ImproveCoherencePhiConfig.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImproveCoherencePhiConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImproveCoherencePhiConfig.dictionary_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SmoothPtdwConfig_SmoothType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothPtdwConfig_SmoothType_descriptor_;
}
bool SmoothPtdwConfig_SmoothType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SmoothPtdwConfig_SmoothType SmoothPtdwConfig::MovingAverage;
const SmoothPtdwConfig_SmoothType SmoothPtdwConfig::MovingProduct;
const SmoothPtdwConfig_SmoothType SmoothPtdwConfig::SmoothType_MIN;
const SmoothPtdwConfig_SmoothType SmoothPtdwConfig::SmoothType_MAX;
const int SmoothPtdwConfig::SmoothType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmoothPtdwConfig::kTypeFieldNumber;
const int SmoothPtdwConfig::kWindowFieldNumber;
const int SmoothPtdwConfig::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmoothPtdwConfig::SmoothPtdwConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.SmoothPtdwConfig)
}

void SmoothPtdwConfig::InitAsDefaultInstance() {
}

SmoothPtdwConfig::SmoothPtdwConfig(const SmoothPtdwConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.SmoothPtdwConfig)
}

void SmoothPtdwConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  window_ = 10;
  threshold_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothPtdwConfig::~SmoothPtdwConfig() {
  // @@protoc_insertion_point(destructor:artm.SmoothPtdwConfig)
  SharedDtor();
}

void SmoothPtdwConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmoothPtdwConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothPtdwConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothPtdwConfig_descriptor_;
}

const SmoothPtdwConfig& SmoothPtdwConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SmoothPtdwConfig* SmoothPtdwConfig::default_instance_ = NULL;

SmoothPtdwConfig* SmoothPtdwConfig::New(::google::protobuf::Arena* arena) const {
  SmoothPtdwConfig* n = new SmoothPtdwConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmoothPtdwConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.SmoothPtdwConfig)
  if (_has_bits_[0 / 32] & 7u) {
    type_ = 1;
    window_ = 10;
    threshold_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SmoothPtdwConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.SmoothPtdwConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.SmoothPtdwConfig.SmoothType type = 1 [default = MovingAverage];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::SmoothPtdwConfig_SmoothType_IsValid(value)) {
            set_type(static_cast< ::artm::SmoothPtdwConfig_SmoothType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_window;
        break;
      }

      // optional int32 window = 3 [default = 10];
      case 3: {
        if (tag == 24) {
         parse_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_)));
          set_has_window();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_threshold;
        break;
      }

      // optional float threshold = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.SmoothPtdwConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.SmoothPtdwConfig)
  return false;
#undef DO_
}

void SmoothPtdwConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.SmoothPtdwConfig)
  // optional .artm.SmoothPtdwConfig.SmoothType type = 1 [default = MovingAverage];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 window = 3 [default = 10];
  if (has_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->window(), output);
  }

  // optional float threshold = 4 [default = 1];
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.SmoothPtdwConfig)
}

::google::protobuf::uint8* SmoothPtdwConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.SmoothPtdwConfig)
  // optional .artm.SmoothPtdwConfig.SmoothType type = 1 [default = MovingAverage];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 window = 3 [default = 10];
  if (has_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->window(), target);
  }

  // optional float threshold = 4 [default = 1];
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.SmoothPtdwConfig)
  return target;
}

int SmoothPtdwConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.SmoothPtdwConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .artm.SmoothPtdwConfig.SmoothType type = 1 [default = MovingAverage];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 window = 3 [default = 10];
    if (has_window()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window());
    }

    // optional float threshold = 4 [default = 1];
    if (has_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothPtdwConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.SmoothPtdwConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SmoothPtdwConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SmoothPtdwConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.SmoothPtdwConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.SmoothPtdwConfig)
    MergeFrom(*source);
  }
}

void SmoothPtdwConfig::MergeFrom(const SmoothPtdwConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.SmoothPtdwConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_window()) {
      set_window(from.window());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SmoothPtdwConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.SmoothPtdwConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothPtdwConfig::CopyFrom(const SmoothPtdwConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.SmoothPtdwConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothPtdwConfig::IsInitialized() const {

  return true;
}

void SmoothPtdwConfig::Swap(SmoothPtdwConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmoothPtdwConfig::InternalSwap(SmoothPtdwConfig* other) {
  std::swap(type_, other->type_);
  std::swap(window_, other->window_);
  std::swap(threshold_, other->threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmoothPtdwConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothPtdwConfig_descriptor_;
  metadata.reflection = SmoothPtdwConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SmoothPtdwConfig

// optional .artm.SmoothPtdwConfig.SmoothType type = 1 [default = MovingAverage];
bool SmoothPtdwConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SmoothPtdwConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SmoothPtdwConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SmoothPtdwConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::artm::SmoothPtdwConfig_SmoothType SmoothPtdwConfig::type() const {
  // @@protoc_insertion_point(field_get:artm.SmoothPtdwConfig.type)
  return static_cast< ::artm::SmoothPtdwConfig_SmoothType >(type_);
}
 void SmoothPtdwConfig::set_type(::artm::SmoothPtdwConfig_SmoothType value) {
  assert(::artm::SmoothPtdwConfig_SmoothType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:artm.SmoothPtdwConfig.type)
}

// optional int32 window = 3 [default = 10];
bool SmoothPtdwConfig::has_window() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SmoothPtdwConfig::set_has_window() {
  _has_bits_[0] |= 0x00000002u;
}
void SmoothPtdwConfig::clear_has_window() {
  _has_bits_[0] &= ~0x00000002u;
}
void SmoothPtdwConfig::clear_window() {
  window_ = 10;
  clear_has_window();
}
 ::google::protobuf::int32 SmoothPtdwConfig::window() const {
  // @@protoc_insertion_point(field_get:artm.SmoothPtdwConfig.window)
  return window_;
}
 void SmoothPtdwConfig::set_window(::google::protobuf::int32 value) {
  set_has_window();
  window_ = value;
  // @@protoc_insertion_point(field_set:artm.SmoothPtdwConfig.window)
}

// optional float threshold = 4 [default = 1];
bool SmoothPtdwConfig::has_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SmoothPtdwConfig::set_has_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
void SmoothPtdwConfig::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
void SmoothPtdwConfig::clear_threshold() {
  threshold_ = 1;
  clear_has_threshold();
}
 float SmoothPtdwConfig::threshold() const {
  // @@protoc_insertion_point(field_get:artm.SmoothPtdwConfig.threshold)
  return threshold_;
}
 void SmoothPtdwConfig::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:artm.SmoothPtdwConfig.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicSelectionThetaConfig::kTopicNameFieldNumber;
const int TopicSelectionThetaConfig::kTopicValueFieldNumber;
const int TopicSelectionThetaConfig::kAlphaIterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicSelectionThetaConfig::TopicSelectionThetaConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.TopicSelectionThetaConfig)
}

void TopicSelectionThetaConfig::InitAsDefaultInstance() {
}

TopicSelectionThetaConfig::TopicSelectionThetaConfig(const TopicSelectionThetaConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.TopicSelectionThetaConfig)
}

void TopicSelectionThetaConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicSelectionThetaConfig::~TopicSelectionThetaConfig() {
  // @@protoc_insertion_point(destructor:artm.TopicSelectionThetaConfig)
  SharedDtor();
}

void TopicSelectionThetaConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicSelectionThetaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicSelectionThetaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicSelectionThetaConfig_descriptor_;
}

const TopicSelectionThetaConfig& TopicSelectionThetaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicSelectionThetaConfig* TopicSelectionThetaConfig::default_instance_ = NULL;

TopicSelectionThetaConfig* TopicSelectionThetaConfig::New(::google::protobuf::Arena* arena) const {
  TopicSelectionThetaConfig* n = new TopicSelectionThetaConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicSelectionThetaConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.TopicSelectionThetaConfig)
  topic_name_.Clear();
  topic_value_.Clear();
  alpha_iter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopicSelectionThetaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.TopicSelectionThetaConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (tag == 10) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicSelectionThetaConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(21)) goto parse_topic_value;
        break;
      }

      // repeated float topic_value = 2;
      case 2: {
        if (tag == 21) {
         parse_topic_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_topic_value())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_topic_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_topic_value;
        if (input->ExpectTag(29)) goto parse_alpha_iter;
        break;
      }

      // repeated float alpha_iter = 3;
      case 3: {
        if (tag == 29) {
         parse_alpha_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_alpha_iter())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_alpha_iter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_alpha_iter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.TopicSelectionThetaConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.TopicSelectionThetaConfig)
  return false;
#undef DO_
}

void TopicSelectionThetaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.TopicSelectionThetaConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicSelectionThetaConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated float topic_value = 2;
  for (int i = 0; i < this->topic_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->topic_value(i), output);
  }

  // repeated float alpha_iter = 3;
  for (int i = 0; i < this->alpha_iter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->alpha_iter(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.TopicSelectionThetaConfig)
}

::google::protobuf::uint8* TopicSelectionThetaConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.TopicSelectionThetaConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicSelectionThetaConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated float topic_value = 2;
  for (int i = 0; i < this->topic_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->topic_value(i), target);
  }

  // repeated float alpha_iter = 3;
  for (int i = 0; i < this->alpha_iter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->alpha_iter(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.TopicSelectionThetaConfig)
  return target;
}

int TopicSelectionThetaConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.TopicSelectionThetaConfig)
  int total_size = 0;

  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated float topic_value = 2;
  {
    int data_size = 0;
    data_size = 4 * this->topic_value_size();
    total_size += 1 * this->topic_value_size() + data_size;
  }

  // repeated float alpha_iter = 3;
  {
    int data_size = 0;
    data_size = 4 * this->alpha_iter_size();
    total_size += 1 * this->alpha_iter_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicSelectionThetaConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.TopicSelectionThetaConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicSelectionThetaConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicSelectionThetaConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.TopicSelectionThetaConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.TopicSelectionThetaConfig)
    MergeFrom(*source);
  }
}

void TopicSelectionThetaConfig::MergeFrom(const TopicSelectionThetaConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.TopicSelectionThetaConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  topic_value_.MergeFrom(from.topic_value_);
  alpha_iter_.MergeFrom(from.alpha_iter_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopicSelectionThetaConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.TopicSelectionThetaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicSelectionThetaConfig::CopyFrom(const TopicSelectionThetaConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.TopicSelectionThetaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicSelectionThetaConfig::IsInitialized() const {

  return true;
}

void TopicSelectionThetaConfig::Swap(TopicSelectionThetaConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicSelectionThetaConfig::InternalSwap(TopicSelectionThetaConfig* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  topic_value_.UnsafeArenaSwap(&other->topic_value_);
  alpha_iter_.UnsafeArenaSwap(&other->alpha_iter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicSelectionThetaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicSelectionThetaConfig_descriptor_;
  metadata.reflection = TopicSelectionThetaConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicSelectionThetaConfig

// repeated string topic_name = 1;
int TopicSelectionThetaConfig::topic_name_size() const {
  return topic_name_.size();
}
void TopicSelectionThetaConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& TopicSelectionThetaConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicSelectionThetaConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* TopicSelectionThetaConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicSelectionThetaConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void TopicSelectionThetaConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicSelectionThetaConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void TopicSelectionThetaConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicSelectionThetaConfig.topic_name)
}
 void TopicSelectionThetaConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicSelectionThetaConfig.topic_name)
}
 ::std::string* TopicSelectionThetaConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicSelectionThetaConfig.topic_name)
  return topic_name_.Add();
}
 void TopicSelectionThetaConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicSelectionThetaConfig.topic_name)
}
 void TopicSelectionThetaConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicSelectionThetaConfig.topic_name)
}
 void TopicSelectionThetaConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicSelectionThetaConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSelectionThetaConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicSelectionThetaConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSelectionThetaConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicSelectionThetaConfig.topic_name)
  return &topic_name_;
}

// repeated float topic_value = 2;
int TopicSelectionThetaConfig::topic_value_size() const {
  return topic_value_.size();
}
void TopicSelectionThetaConfig::clear_topic_value() {
  topic_value_.Clear();
}
 float TopicSelectionThetaConfig::topic_value(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicSelectionThetaConfig.topic_value)
  return topic_value_.Get(index);
}
 void TopicSelectionThetaConfig::set_topic_value(int index, float value) {
  topic_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicSelectionThetaConfig.topic_value)
}
 void TopicSelectionThetaConfig::add_topic_value(float value) {
  topic_value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicSelectionThetaConfig.topic_value)
}
 const ::google::protobuf::RepeatedField< float >&
TopicSelectionThetaConfig::topic_value() const {
  // @@protoc_insertion_point(field_list:artm.TopicSelectionThetaConfig.topic_value)
  return topic_value_;
}
 ::google::protobuf::RepeatedField< float >*
TopicSelectionThetaConfig::mutable_topic_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicSelectionThetaConfig.topic_value)
  return &topic_value_;
}

// repeated float alpha_iter = 3;
int TopicSelectionThetaConfig::alpha_iter_size() const {
  return alpha_iter_.size();
}
void TopicSelectionThetaConfig::clear_alpha_iter() {
  alpha_iter_.Clear();
}
 float TopicSelectionThetaConfig::alpha_iter(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicSelectionThetaConfig.alpha_iter)
  return alpha_iter_.Get(index);
}
 void TopicSelectionThetaConfig::set_alpha_iter(int index, float value) {
  alpha_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicSelectionThetaConfig.alpha_iter)
}
 void TopicSelectionThetaConfig::add_alpha_iter(float value) {
  alpha_iter_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicSelectionThetaConfig.alpha_iter)
}
 const ::google::protobuf::RepeatedField< float >&
TopicSelectionThetaConfig::alpha_iter() const {
  // @@protoc_insertion_point(field_list:artm.TopicSelectionThetaConfig.alpha_iter)
  return alpha_iter_;
}
 ::google::protobuf::RepeatedField< float >*
TopicSelectionThetaConfig::mutable_alpha_iter() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicSelectionThetaConfig.alpha_iter)
  return &alpha_iter_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitermsPhiConfig::kTopicNameFieldNumber;
const int BitermsPhiConfig::kClassIdFieldNumber;
const int BitermsPhiConfig::kDictionaryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitermsPhiConfig::BitermsPhiConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.BitermsPhiConfig)
}

void BitermsPhiConfig::InitAsDefaultInstance() {
}

BitermsPhiConfig::BitermsPhiConfig(const BitermsPhiConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.BitermsPhiConfig)
}

void BitermsPhiConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitermsPhiConfig::~BitermsPhiConfig() {
  // @@protoc_insertion_point(destructor:artm.BitermsPhiConfig)
  SharedDtor();
}

void BitermsPhiConfig::SharedDtor() {
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BitermsPhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitermsPhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitermsPhiConfig_descriptor_;
}

const BitermsPhiConfig& BitermsPhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

BitermsPhiConfig* BitermsPhiConfig::default_instance_ = NULL;

BitermsPhiConfig* BitermsPhiConfig::New(::google::protobuf::Arena* arena) const {
  BitermsPhiConfig* n = new BitermsPhiConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BitermsPhiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.BitermsPhiConfig)
  if (has_dictionary_name()) {
    dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  topic_name_.Clear();
  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BitermsPhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.BitermsPhiConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (tag == 10) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.BitermsPhiConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.BitermsPhiConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(26)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 3;
      case 3: {
        if (tag == 26) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.BitermsPhiConfig.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.BitermsPhiConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.BitermsPhiConfig)
  return false;
#undef DO_
}

void BitermsPhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.BitermsPhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.BitermsPhiConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.BitermsPhiConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.BitermsPhiConfig.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dictionary_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.BitermsPhiConfig)
}

::google::protobuf::uint8* BitermsPhiConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.BitermsPhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.BitermsPhiConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.BitermsPhiConfig.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.BitermsPhiConfig.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dictionary_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.BitermsPhiConfig)
  return target;
}

int BitermsPhiConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.BitermsPhiConfig)
  int total_size = 0;

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dictionary_name());
  }

  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitermsPhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.BitermsPhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BitermsPhiConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BitermsPhiConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.BitermsPhiConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.BitermsPhiConfig)
    MergeFrom(*source);
  }
}

void BitermsPhiConfig::MergeFrom(const BitermsPhiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.BitermsPhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BitermsPhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.BitermsPhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitermsPhiConfig::CopyFrom(const BitermsPhiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.BitermsPhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitermsPhiConfig::IsInitialized() const {

  return true;
}

void BitermsPhiConfig::Swap(BitermsPhiConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitermsPhiConfig::InternalSwap(BitermsPhiConfig* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  dictionary_name_.Swap(&other->dictionary_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BitermsPhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitermsPhiConfig_descriptor_;
  metadata.reflection = BitermsPhiConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BitermsPhiConfig

// repeated string topic_name = 1;
int BitermsPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
void BitermsPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& BitermsPhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.BitermsPhiConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* BitermsPhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.BitermsPhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void BitermsPhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.BitermsPhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void BitermsPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.BitermsPhiConfig.topic_name)
}
 void BitermsPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.BitermsPhiConfig.topic_name)
}
 ::std::string* BitermsPhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.BitermsPhiConfig.topic_name)
  return topic_name_.Add();
}
 void BitermsPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.BitermsPhiConfig.topic_name)
}
 void BitermsPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.BitermsPhiConfig.topic_name)
}
 void BitermsPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.BitermsPhiConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BitermsPhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.BitermsPhiConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BitermsPhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.BitermsPhiConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
int BitermsPhiConfig::class_id_size() const {
  return class_id_.size();
}
void BitermsPhiConfig::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& BitermsPhiConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.BitermsPhiConfig.class_id)
  return class_id_.Get(index);
}
 ::std::string* BitermsPhiConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.BitermsPhiConfig.class_id)
  return class_id_.Mutable(index);
}
 void BitermsPhiConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.BitermsPhiConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void BitermsPhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.BitermsPhiConfig.class_id)
}
 void BitermsPhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.BitermsPhiConfig.class_id)
}
 ::std::string* BitermsPhiConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.BitermsPhiConfig.class_id)
  return class_id_.Add();
}
 void BitermsPhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.BitermsPhiConfig.class_id)
}
 void BitermsPhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.BitermsPhiConfig.class_id)
}
 void BitermsPhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.BitermsPhiConfig.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BitermsPhiConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.BitermsPhiConfig.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BitermsPhiConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.BitermsPhiConfig.class_id)
  return &class_id_;
}

// optional string dictionary_name = 3;
bool BitermsPhiConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BitermsPhiConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
void BitermsPhiConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void BitermsPhiConfig::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& BitermsPhiConfig::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.BitermsPhiConfig.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BitermsPhiConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.BitermsPhiConfig.dictionary_name)
}
 void BitermsPhiConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.BitermsPhiConfig.dictionary_name)
}
 void BitermsPhiConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.BitermsPhiConfig.dictionary_name)
}
 ::std::string* BitermsPhiConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.BitermsPhiConfig.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BitermsPhiConfig::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.BitermsPhiConfig.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BitermsPhiConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.BitermsPhiConfig.dictionary_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HierarchySparsingThetaConfig::kTopicNameFieldNumber;
const int HierarchySparsingThetaConfig::kParentTopicProportionFieldNumber;
const int HierarchySparsingThetaConfig::kAlphaIterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HierarchySparsingThetaConfig::HierarchySparsingThetaConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.HierarchySparsingThetaConfig)
}

void HierarchySparsingThetaConfig::InitAsDefaultInstance() {
}

HierarchySparsingThetaConfig::HierarchySparsingThetaConfig(const HierarchySparsingThetaConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.HierarchySparsingThetaConfig)
}

void HierarchySparsingThetaConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HierarchySparsingThetaConfig::~HierarchySparsingThetaConfig() {
  // @@protoc_insertion_point(destructor:artm.HierarchySparsingThetaConfig)
  SharedDtor();
}

void HierarchySparsingThetaConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HierarchySparsingThetaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HierarchySparsingThetaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HierarchySparsingThetaConfig_descriptor_;
}

const HierarchySparsingThetaConfig& HierarchySparsingThetaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

HierarchySparsingThetaConfig* HierarchySparsingThetaConfig::default_instance_ = NULL;

HierarchySparsingThetaConfig* HierarchySparsingThetaConfig::New(::google::protobuf::Arena* arena) const {
  HierarchySparsingThetaConfig* n = new HierarchySparsingThetaConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HierarchySparsingThetaConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.HierarchySparsingThetaConfig)
  topic_name_.Clear();
  parent_topic_proportion_.Clear();
  alpha_iter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HierarchySparsingThetaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.HierarchySparsingThetaConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (tag == 10) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.HierarchySparsingThetaConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(21)) goto parse_parent_topic_proportion;
        break;
      }

      // repeated float parent_topic_proportion = 2;
      case 2: {
        if (tag == 21) {
         parse_parent_topic_proportion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_parent_topic_proportion())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_parent_topic_proportion())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_parent_topic_proportion;
        if (input->ExpectTag(29)) goto parse_alpha_iter;
        break;
      }

      // repeated float alpha_iter = 3;
      case 3: {
        if (tag == 29) {
         parse_alpha_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_alpha_iter())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_alpha_iter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_alpha_iter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.HierarchySparsingThetaConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.HierarchySparsingThetaConfig)
  return false;
#undef DO_
}

void HierarchySparsingThetaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.HierarchySparsingThetaConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.HierarchySparsingThetaConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated float parent_topic_proportion = 2;
  for (int i = 0; i < this->parent_topic_proportion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->parent_topic_proportion(i), output);
  }

  // repeated float alpha_iter = 3;
  for (int i = 0; i < this->alpha_iter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->alpha_iter(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.HierarchySparsingThetaConfig)
}

::google::protobuf::uint8* HierarchySparsingThetaConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.HierarchySparsingThetaConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.HierarchySparsingThetaConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated float parent_topic_proportion = 2;
  for (int i = 0; i < this->parent_topic_proportion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->parent_topic_proportion(i), target);
  }

  // repeated float alpha_iter = 3;
  for (int i = 0; i < this->alpha_iter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->alpha_iter(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.HierarchySparsingThetaConfig)
  return target;
}

int HierarchySparsingThetaConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.HierarchySparsingThetaConfig)
  int total_size = 0;

  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated float parent_topic_proportion = 2;
  {
    int data_size = 0;
    data_size = 4 * this->parent_topic_proportion_size();
    total_size += 1 * this->parent_topic_proportion_size() + data_size;
  }

  // repeated float alpha_iter = 3;
  {
    int data_size = 0;
    data_size = 4 * this->alpha_iter_size();
    total_size += 1 * this->alpha_iter_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HierarchySparsingThetaConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.HierarchySparsingThetaConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HierarchySparsingThetaConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HierarchySparsingThetaConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.HierarchySparsingThetaConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.HierarchySparsingThetaConfig)
    MergeFrom(*source);
  }
}

void HierarchySparsingThetaConfig::MergeFrom(const HierarchySparsingThetaConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.HierarchySparsingThetaConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  parent_topic_proportion_.MergeFrom(from.parent_topic_proportion_);
  alpha_iter_.MergeFrom(from.alpha_iter_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HierarchySparsingThetaConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.HierarchySparsingThetaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HierarchySparsingThetaConfig::CopyFrom(const HierarchySparsingThetaConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.HierarchySparsingThetaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchySparsingThetaConfig::IsInitialized() const {

  return true;
}

void HierarchySparsingThetaConfig::Swap(HierarchySparsingThetaConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HierarchySparsingThetaConfig::InternalSwap(HierarchySparsingThetaConfig* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  parent_topic_proportion_.UnsafeArenaSwap(&other->parent_topic_proportion_);
  alpha_iter_.UnsafeArenaSwap(&other->alpha_iter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HierarchySparsingThetaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HierarchySparsingThetaConfig_descriptor_;
  metadata.reflection = HierarchySparsingThetaConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HierarchySparsingThetaConfig

// repeated string topic_name = 1;
int HierarchySparsingThetaConfig::topic_name_size() const {
  return topic_name_.size();
}
void HierarchySparsingThetaConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& HierarchySparsingThetaConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.HierarchySparsingThetaConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* HierarchySparsingThetaConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.HierarchySparsingThetaConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void HierarchySparsingThetaConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.HierarchySparsingThetaConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void HierarchySparsingThetaConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.HierarchySparsingThetaConfig.topic_name)
}
 void HierarchySparsingThetaConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.HierarchySparsingThetaConfig.topic_name)
}
 ::std::string* HierarchySparsingThetaConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.HierarchySparsingThetaConfig.topic_name)
  return topic_name_.Add();
}
 void HierarchySparsingThetaConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.HierarchySparsingThetaConfig.topic_name)
}
 void HierarchySparsingThetaConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.HierarchySparsingThetaConfig.topic_name)
}
 void HierarchySparsingThetaConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.HierarchySparsingThetaConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
HierarchySparsingThetaConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.HierarchySparsingThetaConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
HierarchySparsingThetaConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.HierarchySparsingThetaConfig.topic_name)
  return &topic_name_;
}

// repeated float parent_topic_proportion = 2;
int HierarchySparsingThetaConfig::parent_topic_proportion_size() const {
  return parent_topic_proportion_.size();
}
void HierarchySparsingThetaConfig::clear_parent_topic_proportion() {
  parent_topic_proportion_.Clear();
}
 float HierarchySparsingThetaConfig::parent_topic_proportion(int index) const {
  // @@protoc_insertion_point(field_get:artm.HierarchySparsingThetaConfig.parent_topic_proportion)
  return parent_topic_proportion_.Get(index);
}
 void HierarchySparsingThetaConfig::set_parent_topic_proportion(int index, float value) {
  parent_topic_proportion_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.HierarchySparsingThetaConfig.parent_topic_proportion)
}
 void HierarchySparsingThetaConfig::add_parent_topic_proportion(float value) {
  parent_topic_proportion_.Add(value);
  // @@protoc_insertion_point(field_add:artm.HierarchySparsingThetaConfig.parent_topic_proportion)
}
 const ::google::protobuf::RepeatedField< float >&
HierarchySparsingThetaConfig::parent_topic_proportion() const {
  // @@protoc_insertion_point(field_list:artm.HierarchySparsingThetaConfig.parent_topic_proportion)
  return parent_topic_proportion_;
}
 ::google::protobuf::RepeatedField< float >*
HierarchySparsingThetaConfig::mutable_parent_topic_proportion() {
  // @@protoc_insertion_point(field_mutable_list:artm.HierarchySparsingThetaConfig.parent_topic_proportion)
  return &parent_topic_proportion_;
}

// repeated float alpha_iter = 3;
int HierarchySparsingThetaConfig::alpha_iter_size() const {
  return alpha_iter_.size();
}
void HierarchySparsingThetaConfig::clear_alpha_iter() {
  alpha_iter_.Clear();
}
 float HierarchySparsingThetaConfig::alpha_iter(int index) const {
  // @@protoc_insertion_point(field_get:artm.HierarchySparsingThetaConfig.alpha_iter)
  return alpha_iter_.Get(index);
}
 void HierarchySparsingThetaConfig::set_alpha_iter(int index, float value) {
  alpha_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.HierarchySparsingThetaConfig.alpha_iter)
}
 void HierarchySparsingThetaConfig::add_alpha_iter(float value) {
  alpha_iter_.Add(value);
  // @@protoc_insertion_point(field_add:artm.HierarchySparsingThetaConfig.alpha_iter)
}
 const ::google::protobuf::RepeatedField< float >&
HierarchySparsingThetaConfig::alpha_iter() const {
  // @@protoc_insertion_point(field_list:artm.HierarchySparsingThetaConfig.alpha_iter)
  return alpha_iter_;
}
 ::google::protobuf::RepeatedField< float >*
HierarchySparsingThetaConfig::mutable_alpha_iter() {
  // @@protoc_insertion_point(field_mutable_list:artm.HierarchySparsingThetaConfig.alpha_iter)
  return &alpha_iter_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicSegmentationPtdwConfig::kBackgroundTopicNamesFieldNumber;
const int TopicSegmentationPtdwConfig::kWindowFieldNumber;
const int TopicSegmentationPtdwConfig::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicSegmentationPtdwConfig::TopicSegmentationPtdwConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.TopicSegmentationPtdwConfig)
}

void TopicSegmentationPtdwConfig::InitAsDefaultInstance() {
}

TopicSegmentationPtdwConfig::TopicSegmentationPtdwConfig(const TopicSegmentationPtdwConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.TopicSegmentationPtdwConfig)
}

void TopicSegmentationPtdwConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  window_ = 10;
  threshold_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicSegmentationPtdwConfig::~TopicSegmentationPtdwConfig() {
  // @@protoc_insertion_point(destructor:artm.TopicSegmentationPtdwConfig)
  SharedDtor();
}

void TopicSegmentationPtdwConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicSegmentationPtdwConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicSegmentationPtdwConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicSegmentationPtdwConfig_descriptor_;
}

const TopicSegmentationPtdwConfig& TopicSegmentationPtdwConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicSegmentationPtdwConfig* TopicSegmentationPtdwConfig::default_instance_ = NULL;

TopicSegmentationPtdwConfig* TopicSegmentationPtdwConfig::New(::google::protobuf::Arena* arena) const {
  TopicSegmentationPtdwConfig* n = new TopicSegmentationPtdwConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicSegmentationPtdwConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.TopicSegmentationPtdwConfig)
  if (_has_bits_[0 / 32] & 6u) {
    window_ = 10;
    threshold_ = 0.5f;
  }
  background_topic_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopicSegmentationPtdwConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.TopicSegmentationPtdwConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string background_topic_names = 1;
      case 1: {
        if (tag == 10) {
         parse_background_topic_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_background_topic_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->background_topic_names(this->background_topic_names_size() - 1).data(),
            this->background_topic_names(this->background_topic_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicSegmentationPtdwConfig.background_topic_names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_background_topic_names;
        if (input->ExpectTag(24)) goto parse_window;
        break;
      }

      // optional int32 window = 3 [default = 10];
      case 3: {
        if (tag == 24) {
         parse_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_)));
          set_has_window();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_threshold;
        break;
      }

      // optional float threshold = 4 [default = 0.5];
      case 4: {
        if (tag == 37) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.TopicSegmentationPtdwConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.TopicSegmentationPtdwConfig)
  return false;
#undef DO_
}

void TopicSegmentationPtdwConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.TopicSegmentationPtdwConfig)
  // repeated string background_topic_names = 1;
  for (int i = 0; i < this->background_topic_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->background_topic_names(i).data(), this->background_topic_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicSegmentationPtdwConfig.background_topic_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->background_topic_names(i), output);
  }

  // optional int32 window = 3 [default = 10];
  if (has_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->window(), output);
  }

  // optional float threshold = 4 [default = 0.5];
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.TopicSegmentationPtdwConfig)
}

::google::protobuf::uint8* TopicSegmentationPtdwConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.TopicSegmentationPtdwConfig)
  // repeated string background_topic_names = 1;
  for (int i = 0; i < this->background_topic_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->background_topic_names(i).data(), this->background_topic_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicSegmentationPtdwConfig.background_topic_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->background_topic_names(i), target);
  }

  // optional int32 window = 3 [default = 10];
  if (has_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->window(), target);
  }

  // optional float threshold = 4 [default = 0.5];
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.TopicSegmentationPtdwConfig)
  return target;
}

int TopicSegmentationPtdwConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.TopicSegmentationPtdwConfig)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 window = 3 [default = 10];
    if (has_window()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window());
    }

    // optional float threshold = 4 [default = 0.5];
    if (has_threshold()) {
      total_size += 1 + 4;
    }

  }
  // repeated string background_topic_names = 1;
  total_size += 1 * this->background_topic_names_size();
  for (int i = 0; i < this->background_topic_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->background_topic_names(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicSegmentationPtdwConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.TopicSegmentationPtdwConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicSegmentationPtdwConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicSegmentationPtdwConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.TopicSegmentationPtdwConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.TopicSegmentationPtdwConfig)
    MergeFrom(*source);
  }
}

void TopicSegmentationPtdwConfig::MergeFrom(const TopicSegmentationPtdwConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.TopicSegmentationPtdwConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  background_topic_names_.MergeFrom(from.background_topic_names_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_window()) {
      set_window(from.window());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopicSegmentationPtdwConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.TopicSegmentationPtdwConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicSegmentationPtdwConfig::CopyFrom(const TopicSegmentationPtdwConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.TopicSegmentationPtdwConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicSegmentationPtdwConfig::IsInitialized() const {

  return true;
}

void TopicSegmentationPtdwConfig::Swap(TopicSegmentationPtdwConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicSegmentationPtdwConfig::InternalSwap(TopicSegmentationPtdwConfig* other) {
  background_topic_names_.UnsafeArenaSwap(&other->background_topic_names_);
  std::swap(window_, other->window_);
  std::swap(threshold_, other->threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicSegmentationPtdwConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicSegmentationPtdwConfig_descriptor_;
  metadata.reflection = TopicSegmentationPtdwConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicSegmentationPtdwConfig

// repeated string background_topic_names = 1;
int TopicSegmentationPtdwConfig::background_topic_names_size() const {
  return background_topic_names_.size();
}
void TopicSegmentationPtdwConfig::clear_background_topic_names() {
  background_topic_names_.Clear();
}
 const ::std::string& TopicSegmentationPtdwConfig::background_topic_names(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicSegmentationPtdwConfig.background_topic_names)
  return background_topic_names_.Get(index);
}
 ::std::string* TopicSegmentationPtdwConfig::mutable_background_topic_names(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicSegmentationPtdwConfig.background_topic_names)
  return background_topic_names_.Mutable(index);
}
 void TopicSegmentationPtdwConfig::set_background_topic_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicSegmentationPtdwConfig.background_topic_names)
  background_topic_names_.Mutable(index)->assign(value);
}
 void TopicSegmentationPtdwConfig::set_background_topic_names(int index, const char* value) {
  background_topic_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicSegmentationPtdwConfig.background_topic_names)
}
 void TopicSegmentationPtdwConfig::set_background_topic_names(int index, const char* value, size_t size) {
  background_topic_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicSegmentationPtdwConfig.background_topic_names)
}
 ::std::string* TopicSegmentationPtdwConfig::add_background_topic_names() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicSegmentationPtdwConfig.background_topic_names)
  return background_topic_names_.Add();
}
 void TopicSegmentationPtdwConfig::add_background_topic_names(const ::std::string& value) {
  background_topic_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicSegmentationPtdwConfig.background_topic_names)
}
 void TopicSegmentationPtdwConfig::add_background_topic_names(const char* value) {
  background_topic_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicSegmentationPtdwConfig.background_topic_names)
}
 void TopicSegmentationPtdwConfig::add_background_topic_names(const char* value, size_t size) {
  background_topic_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicSegmentationPtdwConfig.background_topic_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSegmentationPtdwConfig::background_topic_names() const {
  // @@protoc_insertion_point(field_list:artm.TopicSegmentationPtdwConfig.background_topic_names)
  return background_topic_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSegmentationPtdwConfig::mutable_background_topic_names() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicSegmentationPtdwConfig.background_topic_names)
  return &background_topic_names_;
}

// optional int32 window = 3 [default = 10];
bool TopicSegmentationPtdwConfig::has_window() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopicSegmentationPtdwConfig::set_has_window() {
  _has_bits_[0] |= 0x00000002u;
}
void TopicSegmentationPtdwConfig::clear_has_window() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopicSegmentationPtdwConfig::clear_window() {
  window_ = 10;
  clear_has_window();
}
 ::google::protobuf::int32 TopicSegmentationPtdwConfig::window() const {
  // @@protoc_insertion_point(field_get:artm.TopicSegmentationPtdwConfig.window)
  return window_;
}
 void TopicSegmentationPtdwConfig::set_window(::google::protobuf::int32 value) {
  set_has_window();
  window_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicSegmentationPtdwConfig.window)
}

// optional float threshold = 4 [default = 0.5];
bool TopicSegmentationPtdwConfig::has_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TopicSegmentationPtdwConfig::set_has_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
void TopicSegmentationPtdwConfig::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
void TopicSegmentationPtdwConfig::clear_threshold() {
  threshold_ = 0.5f;
  clear_has_threshold();
}
 float TopicSegmentationPtdwConfig::threshold() const {
  // @@protoc_insertion_point(field_get:artm.TopicSegmentationPtdwConfig.threshold)
  return threshold_;
}
 void TopicSegmentationPtdwConfig::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicSegmentationPtdwConfig.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* SmoothTimeInTopicsPhiConfig::_default_class_id_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmoothTimeInTopicsPhiConfig::kTopicNameFieldNumber;
const int SmoothTimeInTopicsPhiConfig::kClassIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmoothTimeInTopicsPhiConfig::SmoothTimeInTopicsPhiConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.SmoothTimeInTopicsPhiConfig)
}

void SmoothTimeInTopicsPhiConfig::InitAsDefaultInstance() {
}

SmoothTimeInTopicsPhiConfig::SmoothTimeInTopicsPhiConfig(const SmoothTimeInTopicsPhiConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.SmoothTimeInTopicsPhiConfig)
}

void SmoothTimeInTopicsPhiConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  class_id_.UnsafeSetDefault(_default_class_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothTimeInTopicsPhiConfig::~SmoothTimeInTopicsPhiConfig() {
  // @@protoc_insertion_point(destructor:artm.SmoothTimeInTopicsPhiConfig)
  SharedDtor();
}

void SmoothTimeInTopicsPhiConfig::SharedDtor() {
  class_id_.DestroyNoArena(_default_class_id_);
  if (this != default_instance_) {
  }
}

void SmoothTimeInTopicsPhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothTimeInTopicsPhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothTimeInTopicsPhiConfig_descriptor_;
}

const SmoothTimeInTopicsPhiConfig& SmoothTimeInTopicsPhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SmoothTimeInTopicsPhiConfig* SmoothTimeInTopicsPhiConfig::default_instance_ = NULL;

SmoothTimeInTopicsPhiConfig* SmoothTimeInTopicsPhiConfig::New(::google::protobuf::Arena* arena) const {
  SmoothTimeInTopicsPhiConfig* n = new SmoothTimeInTopicsPhiConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmoothTimeInTopicsPhiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.SmoothTimeInTopicsPhiConfig)
  if (has_class_id()) {
    class_id_.ClearToDefaultNoArena(_default_class_id_);
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SmoothTimeInTopicsPhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.SmoothTimeInTopicsPhiConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (tag == 10) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SmoothTimeInTopicsPhiConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // optional string class_id = 2 [default = "@default_class"];
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SmoothTimeInTopicsPhiConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.SmoothTimeInTopicsPhiConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.SmoothTimeInTopicsPhiConfig)
  return false;
#undef DO_
}

void SmoothTimeInTopicsPhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.SmoothTimeInTopicsPhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothTimeInTopicsPhiConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothTimeInTopicsPhiConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->class_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.SmoothTimeInTopicsPhiConfig)
}

::google::protobuf::uint8* SmoothTimeInTopicsPhiConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.SmoothTimeInTopicsPhiConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothTimeInTopicsPhiConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SmoothTimeInTopicsPhiConfig.class_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.SmoothTimeInTopicsPhiConfig)
  return target;
}

int SmoothTimeInTopicsPhiConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.SmoothTimeInTopicsPhiConfig)
  int total_size = 0;

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_id());
  }

  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothTimeInTopicsPhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.SmoothTimeInTopicsPhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SmoothTimeInTopicsPhiConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SmoothTimeInTopicsPhiConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.SmoothTimeInTopicsPhiConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.SmoothTimeInTopicsPhiConfig)
    MergeFrom(*source);
  }
}

void SmoothTimeInTopicsPhiConfig::MergeFrom(const SmoothTimeInTopicsPhiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.SmoothTimeInTopicsPhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_class_id()) {
      set_has_class_id();
      class_id_.AssignWithDefault(_default_class_id_, from.class_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SmoothTimeInTopicsPhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.SmoothTimeInTopicsPhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothTimeInTopicsPhiConfig::CopyFrom(const SmoothTimeInTopicsPhiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.SmoothTimeInTopicsPhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothTimeInTopicsPhiConfig::IsInitialized() const {

  return true;
}

void SmoothTimeInTopicsPhiConfig::Swap(SmoothTimeInTopicsPhiConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmoothTimeInTopicsPhiConfig::InternalSwap(SmoothTimeInTopicsPhiConfig* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  class_id_.Swap(&other->class_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmoothTimeInTopicsPhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothTimeInTopicsPhiConfig_descriptor_;
  metadata.reflection = SmoothTimeInTopicsPhiConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SmoothTimeInTopicsPhiConfig

// repeated string topic_name = 1;
int SmoothTimeInTopicsPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
void SmoothTimeInTopicsPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& SmoothTimeInTopicsPhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* SmoothTimeInTopicsPhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void SmoothTimeInTopicsPhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void SmoothTimeInTopicsPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SmoothTimeInTopicsPhiConfig.topic_name)
}
 void SmoothTimeInTopicsPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothTimeInTopicsPhiConfig.topic_name)
}
 ::std::string* SmoothTimeInTopicsPhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  return topic_name_.Add();
}
 void SmoothTimeInTopicsPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SmoothTimeInTopicsPhiConfig.topic_name)
}
 void SmoothTimeInTopicsPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SmoothTimeInTopicsPhiConfig.topic_name)
}
 void SmoothTimeInTopicsPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SmoothTimeInTopicsPhiConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothTimeInTopicsPhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothTimeInTopicsPhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  return &topic_name_;
}

// optional string class_id = 2 [default = "@default_class"];
bool SmoothTimeInTopicsPhiConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SmoothTimeInTopicsPhiConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SmoothTimeInTopicsPhiConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SmoothTimeInTopicsPhiConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
 const ::std::string& SmoothTimeInTopicsPhiConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.SmoothTimeInTopicsPhiConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
 void SmoothTimeInTopicsPhiConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.SmoothTimeInTopicsPhiConfig.class_id)
}
 void SmoothTimeInTopicsPhiConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.SmoothTimeInTopicsPhiConfig.class_id)
}
 void SmoothTimeInTopicsPhiConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothTimeInTopicsPhiConfig.class_id)
}
 ::std::string* SmoothTimeInTopicsPhiConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.SmoothTimeInTopicsPhiConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
 ::std::string* SmoothTimeInTopicsPhiConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.SmoothTimeInTopicsPhiConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
 void SmoothTimeInTopicsPhiConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.SmoothTimeInTopicsPhiConfig.class_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetPlsaPhiConfig::kClassIdFieldNumber;
const int NetPlsaPhiConfig::kTopicNameFieldNumber;
const int NetPlsaPhiConfig::kVertexNameFieldNumber;
const int NetPlsaPhiConfig::kVertexWeightFieldNumber;
const int NetPlsaPhiConfig::kFirstVertexIndexFieldNumber;
const int NetPlsaPhiConfig::kSecondVertexIndexFieldNumber;
const int NetPlsaPhiConfig::kEdgeWeightFieldNumber;
const int NetPlsaPhiConfig::kSymmetricEdgeWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetPlsaPhiConfig::NetPlsaPhiConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.NetPlsaPhiConfig)
}

void NetPlsaPhiConfig::InitAsDefaultInstance() {
}

NetPlsaPhiConfig::NetPlsaPhiConfig(const NetPlsaPhiConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.NetPlsaPhiConfig)
}

void NetPlsaPhiConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symmetric_edge_weights_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetPlsaPhiConfig::~NetPlsaPhiConfig() {
  // @@protoc_insertion_point(destructor:artm.NetPlsaPhiConfig)
  SharedDtor();
}

void NetPlsaPhiConfig::SharedDtor() {
  class_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NetPlsaPhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetPlsaPhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetPlsaPhiConfig_descriptor_;
}

const NetPlsaPhiConfig& NetPlsaPhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

NetPlsaPhiConfig* NetPlsaPhiConfig::default_instance_ = NULL;

NetPlsaPhiConfig* NetPlsaPhiConfig::New(::google::protobuf::Arena* arena) const {
  NetPlsaPhiConfig* n = new NetPlsaPhiConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetPlsaPhiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.NetPlsaPhiConfig)
  if (_has_bits_[0 / 32] & 129u) {
    if (has_class_id()) {
      class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    symmetric_edge_weights_ = false;
  }
  topic_name_.Clear();
  vertex_name_.Clear();
  vertex_weight_.Clear();
  first_vertex_index_.Clear();
  second_vertex_index_.Clear();
  edge_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetPlsaPhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.NetPlsaPhiConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string class_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.NetPlsaPhiConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 2;
      case 2: {
        if (tag == 18) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.NetPlsaPhiConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        if (input->ExpectTag(26)) goto parse_vertex_name;
        break;
      }

      // repeated string vertex_name = 3;
      case 3: {
        if (tag == 26) {
         parse_vertex_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vertex_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vertex_name(this->vertex_name_size() - 1).data(),
            this->vertex_name(this->vertex_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.NetPlsaPhiConfig.vertex_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vertex_name;
        if (input->ExpectTag(37)) goto parse_vertex_weight;
        break;
      }

      // repeated float vertex_weight = 4;
      case 4: {
        if (tag == 37) {
         parse_vertex_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_vertex_weight())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vertex_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_vertex_weight;
        if (input->ExpectTag(40)) goto parse_first_vertex_index;
        break;
      }

      // repeated int32 first_vertex_index = 5;
      case 5: {
        if (tag == 40) {
         parse_first_vertex_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_first_vertex_index())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first_vertex_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_first_vertex_index;
        if (input->ExpectTag(48)) goto parse_second_vertex_index;
        break;
      }

      // repeated int32 second_vertex_index = 6;
      case 6: {
        if (tag == 48) {
         parse_second_vertex_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_second_vertex_index())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_second_vertex_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_second_vertex_index;
        if (input->ExpectTag(61)) goto parse_edge_weight;
        break;
      }

      // repeated float edge_weight = 7;
      case 7: {
        if (tag == 61) {
         parse_edge_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_edge_weight())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_edge_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_edge_weight;
        if (input->ExpectTag(64)) goto parse_symmetric_edge_weights;
        break;
      }

      // optional bool symmetric_edge_weights = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_symmetric_edge_weights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &symmetric_edge_weights_)));
          set_has_symmetric_edge_weights();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.NetPlsaPhiConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.NetPlsaPhiConfig)
  return false;
#undef DO_
}

void NetPlsaPhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.NetPlsaPhiConfig)
  // optional string class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NetPlsaPhiConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->class_id(), output);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NetPlsaPhiConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->topic_name(i), output);
  }

  // repeated string vertex_name = 3;
  for (int i = 0; i < this->vertex_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vertex_name(i).data(), this->vertex_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NetPlsaPhiConfig.vertex_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vertex_name(i), output);
  }

  // repeated float vertex_weight = 4;
  for (int i = 0; i < this->vertex_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->vertex_weight(i), output);
  }

  // repeated int32 first_vertex_index = 5;
  for (int i = 0; i < this->first_vertex_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->first_vertex_index(i), output);
  }

  // repeated int32 second_vertex_index = 6;
  for (int i = 0; i < this->second_vertex_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->second_vertex_index(i), output);
  }

  // repeated float edge_weight = 7;
  for (int i = 0; i < this->edge_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->edge_weight(i), output);
  }

  // optional bool symmetric_edge_weights = 8 [default = false];
  if (has_symmetric_edge_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->symmetric_edge_weights(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.NetPlsaPhiConfig)
}

::google::protobuf::uint8* NetPlsaPhiConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.NetPlsaPhiConfig)
  // optional string class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NetPlsaPhiConfig.class_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->class_id(), target);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NetPlsaPhiConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->topic_name(i), target);
  }

  // repeated string vertex_name = 3;
  for (int i = 0; i < this->vertex_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vertex_name(i).data(), this->vertex_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NetPlsaPhiConfig.vertex_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->vertex_name(i), target);
  }

  // repeated float vertex_weight = 4;
  for (int i = 0; i < this->vertex_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->vertex_weight(i), target);
  }

  // repeated int32 first_vertex_index = 5;
  for (int i = 0; i < this->first_vertex_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->first_vertex_index(i), target);
  }

  // repeated int32 second_vertex_index = 6;
  for (int i = 0; i < this->second_vertex_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->second_vertex_index(i), target);
  }

  // repeated float edge_weight = 7;
  for (int i = 0; i < this->edge_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->edge_weight(i), target);
  }

  // optional bool symmetric_edge_weights = 8 [default = false];
  if (has_symmetric_edge_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->symmetric_edge_weights(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.NetPlsaPhiConfig)
  return target;
}

int NetPlsaPhiConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.NetPlsaPhiConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 129u) {
    // optional string class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

    // optional bool symmetric_edge_weights = 8 [default = false];
    if (has_symmetric_edge_weights()) {
      total_size += 1 + 1;
    }

  }
  // repeated string topic_name = 2;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string vertex_name = 3;
  total_size += 1 * this->vertex_name_size();
  for (int i = 0; i < this->vertex_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vertex_name(i));
  }

  // repeated float vertex_weight = 4;
  {
    int data_size = 0;
    data_size = 4 * this->vertex_weight_size();
    total_size += 1 * this->vertex_weight_size() + data_size;
  }

  // repeated int32 first_vertex_index = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_vertex_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->first_vertex_index(i));
    }
    total_size += 1 * this->first_vertex_index_size() + data_size;
  }

  // repeated int32 second_vertex_index = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->second_vertex_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->second_vertex_index(i));
    }
    total_size += 1 * this->second_vertex_index_size() + data_size;
  }

  // repeated float edge_weight = 7;
  {
    int data_size = 0;
    data_size = 4 * this->edge_weight_size();
    total_size += 1 * this->edge_weight_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetPlsaPhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.NetPlsaPhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NetPlsaPhiConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetPlsaPhiConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.NetPlsaPhiConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.NetPlsaPhiConfig)
    MergeFrom(*source);
  }
}

void NetPlsaPhiConfig::MergeFrom(const NetPlsaPhiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.NetPlsaPhiConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  vertex_name_.MergeFrom(from.vertex_name_);
  vertex_weight_.MergeFrom(from.vertex_weight_);
  first_vertex_index_.MergeFrom(from.first_vertex_index_);
  second_vertex_index_.MergeFrom(from.second_vertex_index_);
  edge_weight_.MergeFrom(from.edge_weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_has_class_id();
      class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_id_);
    }
    if (from.has_symmetric_edge_weights()) {
      set_symmetric_edge_weights(from.symmetric_edge_weights());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NetPlsaPhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.NetPlsaPhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetPlsaPhiConfig::CopyFrom(const NetPlsaPhiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.NetPlsaPhiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetPlsaPhiConfig::IsInitialized() const {

  return true;
}

void NetPlsaPhiConfig::Swap(NetPlsaPhiConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetPlsaPhiConfig::InternalSwap(NetPlsaPhiConfig* other) {
  class_id_.Swap(&other->class_id_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  vertex_name_.UnsafeArenaSwap(&other->vertex_name_);
  vertex_weight_.UnsafeArenaSwap(&other->vertex_weight_);
  first_vertex_index_.UnsafeArenaSwap(&other->first_vertex_index_);
  second_vertex_index_.UnsafeArenaSwap(&other->second_vertex_index_);
  edge_weight_.UnsafeArenaSwap(&other->edge_weight_);
  std::swap(symmetric_edge_weights_, other->symmetric_edge_weights_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetPlsaPhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetPlsaPhiConfig_descriptor_;
  metadata.reflection = NetPlsaPhiConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetPlsaPhiConfig

// optional string class_id = 1;
bool NetPlsaPhiConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetPlsaPhiConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NetPlsaPhiConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetPlsaPhiConfig::clear_class_id() {
  class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_id();
}
 const ::std::string& NetPlsaPhiConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.class_id)
  return class_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetPlsaPhiConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.class_id)
}
 void NetPlsaPhiConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.NetPlsaPhiConfig.class_id)
}
 void NetPlsaPhiConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.NetPlsaPhiConfig.class_id)
}
 ::std::string* NetPlsaPhiConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.NetPlsaPhiConfig.class_id)
  return class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NetPlsaPhiConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.NetPlsaPhiConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetPlsaPhiConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.NetPlsaPhiConfig.class_id)
}

// repeated string topic_name = 2;
int NetPlsaPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
void NetPlsaPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& NetPlsaPhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* NetPlsaPhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.NetPlsaPhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void NetPlsaPhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void NetPlsaPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.NetPlsaPhiConfig.topic_name)
}
 void NetPlsaPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.NetPlsaPhiConfig.topic_name)
}
 ::std::string* NetPlsaPhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.NetPlsaPhiConfig.topic_name)
  return topic_name_.Add();
}
 void NetPlsaPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.topic_name)
}
 void NetPlsaPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.NetPlsaPhiConfig.topic_name)
}
 void NetPlsaPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.NetPlsaPhiConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetPlsaPhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NetPlsaPhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.topic_name)
  return &topic_name_;
}

// repeated string vertex_name = 3;
int NetPlsaPhiConfig::vertex_name_size() const {
  return vertex_name_.size();
}
void NetPlsaPhiConfig::clear_vertex_name() {
  vertex_name_.Clear();
}
 const ::std::string& NetPlsaPhiConfig::vertex_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.vertex_name)
  return vertex_name_.Get(index);
}
 ::std::string* NetPlsaPhiConfig::mutable_vertex_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.NetPlsaPhiConfig.vertex_name)
  return vertex_name_.Mutable(index);
}
 void NetPlsaPhiConfig::set_vertex_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.vertex_name)
  vertex_name_.Mutable(index)->assign(value);
}
 void NetPlsaPhiConfig::set_vertex_name(int index, const char* value) {
  vertex_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.NetPlsaPhiConfig.vertex_name)
}
 void NetPlsaPhiConfig::set_vertex_name(int index, const char* value, size_t size) {
  vertex_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.NetPlsaPhiConfig.vertex_name)
}
 ::std::string* NetPlsaPhiConfig::add_vertex_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.NetPlsaPhiConfig.vertex_name)
  return vertex_name_.Add();
}
 void NetPlsaPhiConfig::add_vertex_name(const ::std::string& value) {
  vertex_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.vertex_name)
}
 void NetPlsaPhiConfig::add_vertex_name(const char* value) {
  vertex_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.NetPlsaPhiConfig.vertex_name)
}
 void NetPlsaPhiConfig::add_vertex_name(const char* value, size_t size) {
  vertex_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.NetPlsaPhiConfig.vertex_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetPlsaPhiConfig::vertex_name() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.vertex_name)
  return vertex_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NetPlsaPhiConfig::mutable_vertex_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.vertex_name)
  return &vertex_name_;
}

// repeated float vertex_weight = 4;
int NetPlsaPhiConfig::vertex_weight_size() const {
  return vertex_weight_.size();
}
void NetPlsaPhiConfig::clear_vertex_weight() {
  vertex_weight_.Clear();
}
 float NetPlsaPhiConfig::vertex_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.vertex_weight)
  return vertex_weight_.Get(index);
}
 void NetPlsaPhiConfig::set_vertex_weight(int index, float value) {
  vertex_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.vertex_weight)
}
 void NetPlsaPhiConfig::add_vertex_weight(float value) {
  vertex_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.vertex_weight)
}
 const ::google::protobuf::RepeatedField< float >&
NetPlsaPhiConfig::vertex_weight() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.vertex_weight)
  return vertex_weight_;
}
 ::google::protobuf::RepeatedField< float >*
NetPlsaPhiConfig::mutable_vertex_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.vertex_weight)
  return &vertex_weight_;
}

// repeated int32 first_vertex_index = 5;
int NetPlsaPhiConfig::first_vertex_index_size() const {
  return first_vertex_index_.size();
}
void NetPlsaPhiConfig::clear_first_vertex_index() {
  first_vertex_index_.Clear();
}
 ::google::protobuf::int32 NetPlsaPhiConfig::first_vertex_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.first_vertex_index)
  return first_vertex_index_.Get(index);
}
 void NetPlsaPhiConfig::set_first_vertex_index(int index, ::google::protobuf::int32 value) {
  first_vertex_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.first_vertex_index)
}
 void NetPlsaPhiConfig::add_first_vertex_index(::google::protobuf::int32 value) {
  first_vertex_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.first_vertex_index)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetPlsaPhiConfig::first_vertex_index() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.first_vertex_index)
  return first_vertex_index_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetPlsaPhiConfig::mutable_first_vertex_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.first_vertex_index)
  return &first_vertex_index_;
}

// repeated int32 second_vertex_index = 6;
int NetPlsaPhiConfig::second_vertex_index_size() const {
  return second_vertex_index_.size();
}
void NetPlsaPhiConfig::clear_second_vertex_index() {
  second_vertex_index_.Clear();
}
 ::google::protobuf::int32 NetPlsaPhiConfig::second_vertex_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.second_vertex_index)
  return second_vertex_index_.Get(index);
}
 void NetPlsaPhiConfig::set_second_vertex_index(int index, ::google::protobuf::int32 value) {
  second_vertex_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.second_vertex_index)
}
 void NetPlsaPhiConfig::add_second_vertex_index(::google::protobuf::int32 value) {
  second_vertex_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.second_vertex_index)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetPlsaPhiConfig::second_vertex_index() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.second_vertex_index)
  return second_vertex_index_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetPlsaPhiConfig::mutable_second_vertex_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.second_vertex_index)
  return &second_vertex_index_;
}

// repeated float edge_weight = 7;
int NetPlsaPhiConfig::edge_weight_size() const {
  return edge_weight_.size();
}
void NetPlsaPhiConfig::clear_edge_weight() {
  edge_weight_.Clear();
}
 float NetPlsaPhiConfig::edge_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.edge_weight)
  return edge_weight_.Get(index);
}
 void NetPlsaPhiConfig::set_edge_weight(int index, float value) {
  edge_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.edge_weight)
}
 void NetPlsaPhiConfig::add_edge_weight(float value) {
  edge_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.edge_weight)
}
 const ::google::protobuf::RepeatedField< float >&
NetPlsaPhiConfig::edge_weight() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.edge_weight)
  return edge_weight_;
}
 ::google::protobuf::RepeatedField< float >*
NetPlsaPhiConfig::mutable_edge_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.edge_weight)
  return &edge_weight_;
}

// optional bool symmetric_edge_weights = 8 [default = false];
bool NetPlsaPhiConfig::has_symmetric_edge_weights() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NetPlsaPhiConfig::set_has_symmetric_edge_weights() {
  _has_bits_[0] |= 0x00000080u;
}
void NetPlsaPhiConfig::clear_has_symmetric_edge_weights() {
  _has_bits_[0] &= ~0x00000080u;
}
void NetPlsaPhiConfig::clear_symmetric_edge_weights() {
  symmetric_edge_weights_ = false;
  clear_has_symmetric_edge_weights();
}
 bool NetPlsaPhiConfig::symmetric_edge_weights() const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.symmetric_edge_weights)
  return symmetric_edge_weights_;
}
 void NetPlsaPhiConfig::set_symmetric_edge_weights(bool value) {
  set_has_symmetric_edge_weights();
  symmetric_edge_weights_ = value;
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.symmetric_edge_weights)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TransformConfig_TransformType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformConfig_TransformType_descriptor_;
}
bool TransformConfig_TransformType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransformConfig_TransformType TransformConfig::Logarithm;
const TransformConfig_TransformType TransformConfig::Polynomial;
const TransformConfig_TransformType TransformConfig::Constant;
const TransformConfig_TransformType TransformConfig::TransformType_MIN;
const TransformConfig_TransformType TransformConfig::TransformType_MAX;
const int TransformConfig::TransformType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformConfig::kTypeFieldNumber;
const int TransformConfig::kNFieldNumber;
const int TransformConfig::kAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformConfig::TransformConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.TransformConfig)
}

void TransformConfig::InitAsDefaultInstance() {
}

TransformConfig::TransformConfig(const TransformConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.TransformConfig)
}

void TransformConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  n_ = 1;
  a_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformConfig::~TransformConfig() {
  // @@protoc_insertion_point(destructor:artm.TransformConfig)
  SharedDtor();
}

void TransformConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransformConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformConfig_descriptor_;
}

const TransformConfig& TransformConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TransformConfig* TransformConfig::default_instance_ = NULL;

TransformConfig* TransformConfig::New(::google::protobuf::Arena* arena) const {
  TransformConfig* n = new TransformConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.TransformConfig)
  if (_has_bits_[0 / 32] & 7u) {
    type_ = 2;
    n_ = 1;
    a_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransformConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.TransformConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.TransformConfig.TransformType type = 1 [default = Constant];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::TransformConfig_TransformType_IsValid(value)) {
            set_type(static_cast< ::artm::TransformConfig_TransformType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_n;
        break;
      }

      // optional float n = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_a;
        break;
      }

      // optional float a = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.TransformConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.TransformConfig)
  return false;
#undef DO_
}

void TransformConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.TransformConfig)
  // optional .artm.TransformConfig.TransformType type = 1 [default = Constant];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float n = 2 [default = 1];
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->n(), output);
  }

  // optional float a = 3 [default = 1];
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->a(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.TransformConfig)
}

::google::protobuf::uint8* TransformConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.TransformConfig)
  // optional .artm.TransformConfig.TransformType type = 1 [default = Constant];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float n = 2 [default = 1];
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->n(), target);
  }

  // optional float a = 3 [default = 1];
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->a(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.TransformConfig)
  return target;
}

int TransformConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.TransformConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .artm.TransformConfig.TransformType type = 1 [default = Constant];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float n = 2 [default = 1];
    if (has_n()) {
      total_size += 1 + 4;
    }

    // optional float a = 3 [default = 1];
    if (has_a()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.TransformConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransformConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.TransformConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.TransformConfig)
    MergeFrom(*source);
  }
}

void TransformConfig::MergeFrom(const TransformConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.TransformConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransformConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.TransformConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformConfig::CopyFrom(const TransformConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.TransformConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformConfig::IsInitialized() const {

  return true;
}

void TransformConfig::Swap(TransformConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformConfig::InternalSwap(TransformConfig* other) {
  std::swap(type_, other->type_);
  std::swap(n_, other->n_);
  std::swap(a_, other->a_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformConfig_descriptor_;
  metadata.reflection = TransformConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformConfig

// optional .artm.TransformConfig.TransformType type = 1 [default = Constant];
bool TransformConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransformConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void TransformConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransformConfig::clear_type() {
  type_ = 2;
  clear_has_type();
}
 ::artm::TransformConfig_TransformType TransformConfig::type() const {
  // @@protoc_insertion_point(field_get:artm.TransformConfig.type)
  return static_cast< ::artm::TransformConfig_TransformType >(type_);
}
 void TransformConfig::set_type(::artm::TransformConfig_TransformType value) {
  assert(::artm::TransformConfig_TransformType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:artm.TransformConfig.type)
}

// optional float n = 2 [default = 1];
bool TransformConfig::has_n() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransformConfig::set_has_n() {
  _has_bits_[0] |= 0x00000002u;
}
void TransformConfig::clear_has_n() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransformConfig::clear_n() {
  n_ = 1;
  clear_has_n();
}
 float TransformConfig::n() const {
  // @@protoc_insertion_point(field_get:artm.TransformConfig.n)
  return n_;
}
 void TransformConfig::set_n(float value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:artm.TransformConfig.n)
}

// optional float a = 3 [default = 1];
bool TransformConfig::has_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransformConfig::set_has_a() {
  _has_bits_[0] |= 0x00000004u;
}
void TransformConfig::clear_has_a() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransformConfig::clear_a() {
  a_ = 1;
  clear_has_a();
}
 float TransformConfig::a() const {
  // @@protoc_insertion_point(field_get:artm.TransformConfig.a)
  return a_;
}
 void TransformConfig::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:artm.TransformConfig.a)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreConfig::kNameFieldNumber;
const int ScoreConfig::kTypeFieldNumber;
const int ScoreConfig::kConfigFieldNumber;
const int ScoreConfig::kModelNameFieldNumber;
const int ScoreConfig::kConfigJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreConfig::ScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ScoreConfig)
}

void ScoreConfig::InitAsDefaultInstance() {
}

ScoreConfig::ScoreConfig(const ScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ScoreConfig)
}

void ScoreConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 9999;
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreConfig::~ScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.ScoreConfig)
  SharedDtor();
}

void ScoreConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreConfig_descriptor_;
}

const ScoreConfig& ScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ScoreConfig* ScoreConfig::default_instance_ = NULL;

ScoreConfig* ScoreConfig::New(::google::protobuf::Arena* arena) const {
  ScoreConfig* n = new ScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ScoreConfig)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 9999;
    if (has_config()) {
      config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model_name()) {
      model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_config_json()) {
      config_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ScoreConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::ScoreType_IsValid(value)) {
            set_type(static_cast< ::artm::ScoreType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // optional bytes config = 3;
      case 3: {
        if (tag == 26) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model_name;
        break;
      }

      // optional string model_name = 4;
      case 4: {
        if (tag == 34) {
         parse_model_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ScoreConfig.model_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_config_json;
        break;
      }

      // optional string config_json = 5;
      case 5: {
        if (tag == 42) {
         parse_config_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_json().data(), this->config_json().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ScoreConfig.config_json");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ScoreConfig)
  return false;
#undef DO_
}

void ScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ScoreConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ScoreConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->config(), output);
  }

  // optional string model_name = 4;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ScoreConfig.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model_name(), output);
  }

  // optional string config_json = 5;
  if (has_config_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_json().data(), this->config_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ScoreConfig.config_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->config_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ScoreConfig)
}

::google::protobuf::uint8* ScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ScoreConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ScoreConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes config = 3;
  if (has_config()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->config(), target);
  }

  // optional string model_name = 4;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ScoreConfig.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model_name(), target);
  }

  // optional string config_json = 5;
  if (has_config_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_json().data(), this->config_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ScoreConfig.config_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->config_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ScoreConfig)
  return target;
}

int ScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ScoreConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config());
    }

    // optional string model_name = 4;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string config_json = 5;
    if (has_config_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_json());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ScoreConfig)
    MergeFrom(*source);
  }
}

void ScoreConfig::MergeFrom(const ScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_config()) {
      set_has_config();
      config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
    }
    if (from.has_model_name()) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (from.has_config_json()) {
      set_has_config_json();
      config_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_json_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreConfig::CopyFrom(const ScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreConfig::IsInitialized() const {

  return true;
}

void ScoreConfig::Swap(ScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreConfig::InternalSwap(ScoreConfig* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  config_.Swap(&other->config_);
  model_name_.Swap(&other->model_name_);
  config_json_.Swap(&other->config_json_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreConfig_descriptor_;
  metadata.reflection = ScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScoreConfig

// optional string name = 1;
bool ScoreConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScoreConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ScoreConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScoreConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ScoreConfig::name() const {
  // @@protoc_insertion_point(field_get:artm.ScoreConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreConfig.name)
}
 void ScoreConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreConfig.name)
}
 void ScoreConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreConfig.name)
}
 ::std::string* ScoreConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.ScoreConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScoreConfig::release_name() {
  // @@protoc_insertion_point(field_release:artm.ScoreConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreConfig.name)
}

// optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
bool ScoreConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScoreConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ScoreConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScoreConfig::clear_type() {
  type_ = 9999;
  clear_has_type();
}
 ::artm::ScoreType ScoreConfig::type() const {
  // @@protoc_insertion_point(field_get:artm.ScoreConfig.type)
  return static_cast< ::artm::ScoreType >(type_);
}
 void ScoreConfig::set_type(::artm::ScoreType value) {
  assert(::artm::ScoreType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:artm.ScoreConfig.type)
}

// optional bytes config = 3;
bool ScoreConfig::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScoreConfig::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
void ScoreConfig::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScoreConfig::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config();
}
 const ::std::string& ScoreConfig::config() const {
  // @@protoc_insertion_point(field_get:artm.ScoreConfig.config)
  return config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreConfig::set_config(const ::std::string& value) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreConfig.config)
}
 void ScoreConfig::set_config(const char* value) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreConfig.config)
}
 void ScoreConfig::set_config(const void* value, size_t size) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreConfig.config)
}
 ::std::string* ScoreConfig::mutable_config() {
  set_has_config();
  // @@protoc_insertion_point(field_mutable:artm.ScoreConfig.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScoreConfig::release_config() {
  // @@protoc_insertion_point(field_release:artm.ScoreConfig.config)
  clear_has_config();
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreConfig::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    set_has_config();
  } else {
    clear_has_config();
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreConfig.config)
}

// optional string model_name = 4;
bool ScoreConfig::has_model_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScoreConfig::set_has_model_name() {
  _has_bits_[0] |= 0x00000008u;
}
void ScoreConfig::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScoreConfig::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
 const ::std::string& ScoreConfig::model_name() const {
  // @@protoc_insertion_point(field_get:artm.ScoreConfig.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreConfig::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreConfig.model_name)
}
 void ScoreConfig::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreConfig.model_name)
}
 void ScoreConfig::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreConfig.model_name)
}
 ::std::string* ScoreConfig::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.ScoreConfig.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScoreConfig::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.ScoreConfig.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreConfig::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreConfig.model_name)
}

// optional string config_json = 5;
bool ScoreConfig::has_config_json() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScoreConfig::set_has_config_json() {
  _has_bits_[0] |= 0x00000010u;
}
void ScoreConfig::clear_has_config_json() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScoreConfig::clear_config_json() {
  config_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_json();
}
 const ::std::string& ScoreConfig::config_json() const {
  // @@protoc_insertion_point(field_get:artm.ScoreConfig.config_json)
  return config_json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreConfig::set_config_json(const ::std::string& value) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreConfig.config_json)
}
 void ScoreConfig::set_config_json(const char* value) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreConfig.config_json)
}
 void ScoreConfig::set_config_json(const char* value, size_t size) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreConfig.config_json)
}
 ::std::string* ScoreConfig::mutable_config_json() {
  set_has_config_json();
  // @@protoc_insertion_point(field_mutable:artm.ScoreConfig.config_json)
  return config_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScoreConfig::release_config_json() {
  // @@protoc_insertion_point(field_release:artm.ScoreConfig.config_json)
  clear_has_config_json();
  return config_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreConfig::set_allocated_config_json(::std::string* config_json) {
  if (config_json != NULL) {
    set_has_config_json();
  } else {
    clear_has_config_json();
  }
  config_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_json);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreConfig.config_json)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreData::kNameFieldNumber;
const int ScoreData::kTypeFieldNumber;
const int ScoreData::kDataFieldNumber;
const int ScoreData::kDataJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreData::ScoreData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ScoreData)
}

void ScoreData::InitAsDefaultInstance() {
}

ScoreData::ScoreData(const ScoreData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ScoreData)
}

void ScoreData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 9999;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreData::~ScoreData() {
  // @@protoc_insertion_point(destructor:artm.ScoreData)
  SharedDtor();
}

void ScoreData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ScoreData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreData_descriptor_;
}

const ScoreData& ScoreData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ScoreData* ScoreData::default_instance_ = NULL;

ScoreData* ScoreData::New(::google::protobuf::Arena* arena) const {
  ScoreData* n = new ScoreData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScoreData::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ScoreData)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 9999;
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data_json()) {
      data_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ScoreData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ScoreData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ScoreData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::ScoreType_IsValid(value)) {
            set_type(static_cast< ::artm::ScoreType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data_json;
        break;
      }

      // optional string data_json = 4;
      case 4: {
        if (tag == 34) {
         parse_data_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_json().data(), this->data_json().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ScoreData.data_json");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ScoreData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ScoreData)
  return false;
#undef DO_
}

void ScoreData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ScoreData)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ScoreData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional string data_json = 4;
  if (has_data_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_json().data(), this->data_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ScoreData.data_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data_json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ScoreData)
}

::google::protobuf::uint8* ScoreData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ScoreData)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ScoreData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional string data_json = 4;
  if (has_data_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_json().data(), this->data_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ScoreData.data_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data_json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ScoreData)
  return target;
}

int ScoreData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ScoreData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string data_json = 4;
    if (has_data_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_json());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ScoreData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScoreData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScoreData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ScoreData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ScoreData)
    MergeFrom(*source);
  }
}

void ScoreData::MergeFrom(const ScoreData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ScoreData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_data_json()) {
      set_has_data_json();
      data_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_json_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ScoreData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ScoreData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreData::CopyFrom(const ScoreData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ScoreData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreData::IsInitialized() const {

  return true;
}

void ScoreData::Swap(ScoreData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreData::InternalSwap(ScoreData* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  data_.Swap(&other->data_);
  data_json_.Swap(&other->data_json_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScoreData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreData_descriptor_;
  metadata.reflection = ScoreData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScoreData

// optional string name = 1;
bool ScoreData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScoreData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ScoreData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScoreData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ScoreData::name() const {
  // @@protoc_insertion_point(field_get:artm.ScoreData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreData.name)
}
 void ScoreData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreData.name)
}
 void ScoreData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreData.name)
}
 ::std::string* ScoreData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.ScoreData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScoreData::release_name() {
  // @@protoc_insertion_point(field_release:artm.ScoreData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreData.name)
}

// optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
bool ScoreData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScoreData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ScoreData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScoreData::clear_type() {
  type_ = 9999;
  clear_has_type();
}
 ::artm::ScoreType ScoreData::type() const {
  // @@protoc_insertion_point(field_get:artm.ScoreData.type)
  return static_cast< ::artm::ScoreType >(type_);
}
 void ScoreData::set_type(::artm::ScoreType value) {
  assert(::artm::ScoreType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:artm.ScoreData.type)
}

// optional bytes data = 3;
bool ScoreData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScoreData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void ScoreData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScoreData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& ScoreData::data() const {
  // @@protoc_insertion_point(field_get:artm.ScoreData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreData.data)
}
 void ScoreData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreData.data)
}
 void ScoreData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreData.data)
}
 ::std::string* ScoreData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:artm.ScoreData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScoreData::release_data() {
  // @@protoc_insertion_point(field_release:artm.ScoreData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreData.data)
}

// optional string data_json = 4;
bool ScoreData::has_data_json() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScoreData::set_has_data_json() {
  _has_bits_[0] |= 0x00000008u;
}
void ScoreData::clear_has_data_json() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScoreData::clear_data_json() {
  data_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_json();
}
 const ::std::string& ScoreData::data_json() const {
  // @@protoc_insertion_point(field_get:artm.ScoreData.data_json)
  return data_json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreData::set_data_json(const ::std::string& value) {
  set_has_data_json();
  data_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreData.data_json)
}
 void ScoreData::set_data_json(const char* value) {
  set_has_data_json();
  data_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreData.data_json)
}
 void ScoreData::set_data_json(const char* value, size_t size) {
  set_has_data_json();
  data_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreData.data_json)
}
 ::std::string* ScoreData::mutable_data_json() {
  set_has_data_json();
  // @@protoc_insertion_point(field_mutable:artm.ScoreData.data_json)
  return data_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScoreData::release_data_json() {
  // @@protoc_insertion_point(field_release:artm.ScoreData.data_json)
  clear_has_data_json();
  return data_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScoreData::set_allocated_data_json(::std::string* data_json) {
  if (data_json != NULL) {
    set_has_data_json();
  } else {
    clear_has_data_json();
  }
  data_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_json);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreData.data_json)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreArray::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreArray::ScoreArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ScoreArray)
}

void ScoreArray::InitAsDefaultInstance() {
}

ScoreArray::ScoreArray(const ScoreArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ScoreArray)
}

void ScoreArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreArray::~ScoreArray() {
  // @@protoc_insertion_point(destructor:artm.ScoreArray)
  SharedDtor();
}

void ScoreArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreArray_descriptor_;
}

const ScoreArray& ScoreArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ScoreArray* ScoreArray::default_instance_ = NULL;

ScoreArray* ScoreArray::New(::google::protobuf::Arena* arena) const {
  ScoreArray* n = new ScoreArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScoreArray::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ScoreArray)
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ScoreArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ScoreArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.ScoreData score = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_score;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ScoreArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ScoreArray)
  return false;
#undef DO_
}

void ScoreArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ScoreArray)
  // repeated .artm.ScoreData score = 1;
  for (unsigned int i = 0, n = this->score_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ScoreArray)
}

::google::protobuf::uint8* ScoreArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ScoreArray)
  // repeated .artm.ScoreData score = 1;
  for (unsigned int i = 0, n = this->score_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->score(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ScoreArray)
  return target;
}

int ScoreArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ScoreArray)
  int total_size = 0;

  // repeated .artm.ScoreData score = 1;
  total_size += 1 * this->score_size();
  for (int i = 0; i < this->score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ScoreArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScoreArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScoreArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ScoreArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ScoreArray)
    MergeFrom(*source);
  }
}

void ScoreArray::MergeFrom(const ScoreArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ScoreArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  score_.MergeFrom(from.score_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ScoreArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ScoreArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreArray::CopyFrom(const ScoreArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ScoreArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreArray::IsInitialized() const {

  return true;
}

void ScoreArray::Swap(ScoreArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreArray::InternalSwap(ScoreArray* other) {
  score_.UnsafeArenaSwap(&other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScoreArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreArray_descriptor_;
  metadata.reflection = ScoreArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScoreArray

// repeated .artm.ScoreData score = 1;
int ScoreArray::score_size() const {
  return score_.size();
}
void ScoreArray::clear_score() {
  score_.Clear();
}
const ::artm::ScoreData& ScoreArray::score(int index) const {
  // @@protoc_insertion_point(field_get:artm.ScoreArray.score)
  return score_.Get(index);
}
::artm::ScoreData* ScoreArray::mutable_score(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ScoreArray.score)
  return score_.Mutable(index);
}
::artm::ScoreData* ScoreArray::add_score() {
  // @@protoc_insertion_point(field_add:artm.ScoreArray.score)
  return score_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::ScoreData >*
ScoreArray::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:artm.ScoreArray.score)
  return &score_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >&
ScoreArray::score() const {
  // @@protoc_insertion_point(field_list:artm.ScoreArray.score)
  return score_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PerplexityScoreConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerplexityScoreConfig_Type_descriptor_;
}
bool PerplexityScoreConfig_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerplexityScoreConfig_Type PerplexityScoreConfig::UnigramDocumentModel;
const PerplexityScoreConfig_Type PerplexityScoreConfig::UnigramCollectionModel;
const PerplexityScoreConfig_Type PerplexityScoreConfig::Type_MIN;
const PerplexityScoreConfig_Type PerplexityScoreConfig::Type_MAX;
const int PerplexityScoreConfig::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerplexityScoreConfig::kModelTypeFieldNumber;
const int PerplexityScoreConfig::kDictionaryNameFieldNumber;
const int PerplexityScoreConfig::kClassIdFieldNumber;
const int PerplexityScoreConfig::kTransactionTypenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerplexityScoreConfig::PerplexityScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.PerplexityScoreConfig)
}

void PerplexityScoreConfig::InitAsDefaultInstance() {
}

PerplexityScoreConfig::PerplexityScoreConfig(const PerplexityScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.PerplexityScoreConfig)
}

void PerplexityScoreConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_type_ = 0;
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerplexityScoreConfig::~PerplexityScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.PerplexityScoreConfig)
  SharedDtor();
}

void PerplexityScoreConfig::SharedDtor() {
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PerplexityScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerplexityScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerplexityScoreConfig_descriptor_;
}

const PerplexityScoreConfig& PerplexityScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

PerplexityScoreConfig* PerplexityScoreConfig::default_instance_ = NULL;

PerplexityScoreConfig* PerplexityScoreConfig::New(::google::protobuf::Arena* arena) const {
  PerplexityScoreConfig* n = new PerplexityScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerplexityScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.PerplexityScoreConfig)
  if (_has_bits_[0 / 32] & 3u) {
    model_type_ = 0;
    if (has_dictionary_name()) {
      dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  class_id_.Clear();
  transaction_typename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PerplexityScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.PerplexityScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.PerplexityScoreConfig.Type model_type = 1 [default = UnigramDocumentModel];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::PerplexityScoreConfig_Type_IsValid(value)) {
            set_model_type(static_cast< ::artm::PerplexityScoreConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 2;
      case 2: {
        if (tag == 18) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.PerplexityScoreConfig.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 3;
      case 3: {
        if (tag == 26) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.PerplexityScoreConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_class_id;
        if (input->ExpectTag(34)) goto parse_transaction_typename;
        break;
      }

      // repeated string transaction_typename = 4;
      case 4: {
        if (tag == 34) {
         parse_transaction_typename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_transaction_typename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transaction_typename(this->transaction_typename_size() - 1).data(),
            this->transaction_typename(this->transaction_typename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.PerplexityScoreConfig.transaction_typename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transaction_typename;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.PerplexityScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.PerplexityScoreConfig)
  return false;
#undef DO_
}

void PerplexityScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.PerplexityScoreConfig)
  // optional .artm.PerplexityScoreConfig.Type model_type = 1 [default = UnigramDocumentModel];
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->model_type(), output);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.PerplexityScoreConfig.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dictionary_name(), output);
  }

  // repeated string class_id = 3;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.PerplexityScoreConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->class_id(i), output);
  }

  // repeated string transaction_typename = 4;
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_typename(i).data(), this->transaction_typename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.PerplexityScoreConfig.transaction_typename");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->transaction_typename(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.PerplexityScoreConfig)
}

::google::protobuf::uint8* PerplexityScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.PerplexityScoreConfig)
  // optional .artm.PerplexityScoreConfig.Type model_type = 1 [default = UnigramDocumentModel];
  if (has_model_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->model_type(), target);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.PerplexityScoreConfig.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dictionary_name(), target);
  }

  // repeated string class_id = 3;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.PerplexityScoreConfig.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->class_id(i), target);
  }

  // repeated string transaction_typename = 4;
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_typename(i).data(), this->transaction_typename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.PerplexityScoreConfig.transaction_typename");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->transaction_typename(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.PerplexityScoreConfig)
  return target;
}

int PerplexityScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.PerplexityScoreConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .artm.PerplexityScoreConfig.Type model_type = 1 [default = UnigramDocumentModel];
    if (has_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model_type());
    }

    // optional string dictionary_name = 2;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  // repeated string class_id = 3;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated string transaction_typename = 4;
  total_size += 1 * this->transaction_typename_size();
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->transaction_typename(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerplexityScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.PerplexityScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PerplexityScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PerplexityScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.PerplexityScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.PerplexityScoreConfig)
    MergeFrom(*source);
  }
}

void PerplexityScoreConfig::MergeFrom(const PerplexityScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.PerplexityScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  class_id_.MergeFrom(from.class_id_);
  transaction_typename_.MergeFrom(from.transaction_typename_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_type()) {
      set_model_type(from.model_type());
    }
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PerplexityScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.PerplexityScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerplexityScoreConfig::CopyFrom(const PerplexityScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.PerplexityScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerplexityScoreConfig::IsInitialized() const {

  return true;
}

void PerplexityScoreConfig::Swap(PerplexityScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerplexityScoreConfig::InternalSwap(PerplexityScoreConfig* other) {
  std::swap(model_type_, other->model_type_);
  dictionary_name_.Swap(&other->dictionary_name_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  transaction_typename_.UnsafeArenaSwap(&other->transaction_typename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerplexityScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerplexityScoreConfig_descriptor_;
  metadata.reflection = PerplexityScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerplexityScoreConfig

// optional .artm.PerplexityScoreConfig.Type model_type = 1 [default = UnigramDocumentModel];
bool PerplexityScoreConfig::has_model_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerplexityScoreConfig::set_has_model_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PerplexityScoreConfig::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerplexityScoreConfig::clear_model_type() {
  model_type_ = 0;
  clear_has_model_type();
}
 ::artm::PerplexityScoreConfig_Type PerplexityScoreConfig::model_type() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScoreConfig.model_type)
  return static_cast< ::artm::PerplexityScoreConfig_Type >(model_type_);
}
 void PerplexityScoreConfig::set_model_type(::artm::PerplexityScoreConfig_Type value) {
  assert(::artm::PerplexityScoreConfig_Type_IsValid(value));
  set_has_model_type();
  model_type_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScoreConfig.model_type)
}

// optional string dictionary_name = 2;
bool PerplexityScoreConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerplexityScoreConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
void PerplexityScoreConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerplexityScoreConfig::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& PerplexityScoreConfig::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScoreConfig.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PerplexityScoreConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.PerplexityScoreConfig.dictionary_name)
}
 void PerplexityScoreConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.PerplexityScoreConfig.dictionary_name)
}
 void PerplexityScoreConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.PerplexityScoreConfig.dictionary_name)
}
 ::std::string* PerplexityScoreConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.PerplexityScoreConfig.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PerplexityScoreConfig::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.PerplexityScoreConfig.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PerplexityScoreConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.PerplexityScoreConfig.dictionary_name)
}

// repeated string class_id = 3;
int PerplexityScoreConfig::class_id_size() const {
  return class_id_.size();
}
void PerplexityScoreConfig::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& PerplexityScoreConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScoreConfig.class_id)
  return class_id_.Get(index);
}
 ::std::string* PerplexityScoreConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.PerplexityScoreConfig.class_id)
  return class_id_.Mutable(index);
}
 void PerplexityScoreConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.PerplexityScoreConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void PerplexityScoreConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.PerplexityScoreConfig.class_id)
}
 void PerplexityScoreConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.PerplexityScoreConfig.class_id)
}
 ::std::string* PerplexityScoreConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.PerplexityScoreConfig.class_id)
  return class_id_.Add();
}
 void PerplexityScoreConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.PerplexityScoreConfig.class_id)
}
 void PerplexityScoreConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.PerplexityScoreConfig.class_id)
}
 void PerplexityScoreConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.PerplexityScoreConfig.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PerplexityScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.PerplexityScoreConfig.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PerplexityScoreConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.PerplexityScoreConfig.class_id)
  return &class_id_;
}

// repeated string transaction_typename = 4;
int PerplexityScoreConfig::transaction_typename_size() const {
  return transaction_typename_.size();
}
void PerplexityScoreConfig::clear_transaction_typename() {
  transaction_typename_.Clear();
}
 const ::std::string& PerplexityScoreConfig::transaction_typename(int index) const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScoreConfig.transaction_typename)
  return transaction_typename_.Get(index);
}
 ::std::string* PerplexityScoreConfig::mutable_transaction_typename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.PerplexityScoreConfig.transaction_typename)
  return transaction_typename_.Mutable(index);
}
 void PerplexityScoreConfig::set_transaction_typename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.PerplexityScoreConfig.transaction_typename)
  transaction_typename_.Mutable(index)->assign(value);
}
 void PerplexityScoreConfig::set_transaction_typename(int index, const char* value) {
  transaction_typename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.PerplexityScoreConfig.transaction_typename)
}
 void PerplexityScoreConfig::set_transaction_typename(int index, const char* value, size_t size) {
  transaction_typename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.PerplexityScoreConfig.transaction_typename)
}
 ::std::string* PerplexityScoreConfig::add_transaction_typename() {
  // @@protoc_insertion_point(field_add_mutable:artm.PerplexityScoreConfig.transaction_typename)
  return transaction_typename_.Add();
}
 void PerplexityScoreConfig::add_transaction_typename(const ::std::string& value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.PerplexityScoreConfig.transaction_typename)
}
 void PerplexityScoreConfig::add_transaction_typename(const char* value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.PerplexityScoreConfig.transaction_typename)
}
 void PerplexityScoreConfig::add_transaction_typename(const char* value, size_t size) {
  transaction_typename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.PerplexityScoreConfig.transaction_typename)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PerplexityScoreConfig::transaction_typename() const {
  // @@protoc_insertion_point(field_list:artm.PerplexityScoreConfig.transaction_typename)
  return transaction_typename_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PerplexityScoreConfig::mutable_transaction_typename() {
  // @@protoc_insertion_point(field_mutable_list:artm.PerplexityScoreConfig.transaction_typename)
  return &transaction_typename_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerplexityScore_TransactionNameInfo::kTransactionTypenameFieldNumber;
const int PerplexityScore_TransactionNameInfo::kRawFieldNumber;
const int PerplexityScore_TransactionNameInfo::kNormalizerFieldNumber;
const int PerplexityScore_TransactionNameInfo::kZeroWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerplexityScore_TransactionNameInfo::PerplexityScore_TransactionNameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.PerplexityScore.TransactionNameInfo)
}

void PerplexityScore_TransactionNameInfo::InitAsDefaultInstance() {
}

PerplexityScore_TransactionNameInfo::PerplexityScore_TransactionNameInfo(const PerplexityScore_TransactionNameInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.PerplexityScore.TransactionNameInfo)
}

void PerplexityScore_TransactionNameInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  transaction_typename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_ = 0;
  normalizer_ = 0;
  zero_words_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerplexityScore_TransactionNameInfo::~PerplexityScore_TransactionNameInfo() {
  // @@protoc_insertion_point(destructor:artm.PerplexityScore.TransactionNameInfo)
  SharedDtor();
}

void PerplexityScore_TransactionNameInfo::SharedDtor() {
  transaction_typename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PerplexityScore_TransactionNameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerplexityScore_TransactionNameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerplexityScore_TransactionNameInfo_descriptor_;
}

const PerplexityScore_TransactionNameInfo& PerplexityScore_TransactionNameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

PerplexityScore_TransactionNameInfo* PerplexityScore_TransactionNameInfo::default_instance_ = NULL;

PerplexityScore_TransactionNameInfo* PerplexityScore_TransactionNameInfo::New(::google::protobuf::Arena* arena) const {
  PerplexityScore_TransactionNameInfo* n = new PerplexityScore_TransactionNameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerplexityScore_TransactionNameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.PerplexityScore.TransactionNameInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PerplexityScore_TransactionNameInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PerplexityScore_TransactionNameInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(raw_, zero_words_);
    if (has_transaction_typename()) {
      transaction_typename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PerplexityScore_TransactionNameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.PerplexityScore.TransactionNameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string transaction_typename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_typename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transaction_typename().data(), this->transaction_typename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.PerplexityScore.TransactionNameInfo.transaction_typename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_raw;
        break;
      }

      // optional double raw = 2;
      case 2: {
        if (tag == 17) {
         parse_raw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &raw_)));
          set_has_raw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_normalizer;
        break;
      }

      // optional double normalizer = 3;
      case 3: {
        if (tag == 25) {
         parse_normalizer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &normalizer_)));
          set_has_normalizer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zero_words;
        break;
      }

      // optional int64 zero_words = 4;
      case 4: {
        if (tag == 32) {
         parse_zero_words:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &zero_words_)));
          set_has_zero_words();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.PerplexityScore.TransactionNameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.PerplexityScore.TransactionNameInfo)
  return false;
#undef DO_
}

void PerplexityScore_TransactionNameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.PerplexityScore.TransactionNameInfo)
  // optional string transaction_typename = 1;
  if (has_transaction_typename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_typename().data(), this->transaction_typename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.PerplexityScore.TransactionNameInfo.transaction_typename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transaction_typename(), output);
  }

  // optional double raw = 2;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->raw(), output);
  }

  // optional double normalizer = 3;
  if (has_normalizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->normalizer(), output);
  }

  // optional int64 zero_words = 4;
  if (has_zero_words()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->zero_words(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.PerplexityScore.TransactionNameInfo)
}

::google::protobuf::uint8* PerplexityScore_TransactionNameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.PerplexityScore.TransactionNameInfo)
  // optional string transaction_typename = 1;
  if (has_transaction_typename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_typename().data(), this->transaction_typename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.PerplexityScore.TransactionNameInfo.transaction_typename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->transaction_typename(), target);
  }

  // optional double raw = 2;
  if (has_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->raw(), target);
  }

  // optional double normalizer = 3;
  if (has_normalizer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->normalizer(), target);
  }

  // optional int64 zero_words = 4;
  if (has_zero_words()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->zero_words(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.PerplexityScore.TransactionNameInfo)
  return target;
}

int PerplexityScore_TransactionNameInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.PerplexityScore.TransactionNameInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string transaction_typename = 1;
    if (has_transaction_typename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_typename());
    }

    // optional double raw = 2;
    if (has_raw()) {
      total_size += 1 + 8;
    }

    // optional double normalizer = 3;
    if (has_normalizer()) {
      total_size += 1 + 8;
    }

    // optional int64 zero_words = 4;
    if (has_zero_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->zero_words());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerplexityScore_TransactionNameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.PerplexityScore.TransactionNameInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PerplexityScore_TransactionNameInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PerplexityScore_TransactionNameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.PerplexityScore.TransactionNameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.PerplexityScore.TransactionNameInfo)
    MergeFrom(*source);
  }
}

void PerplexityScore_TransactionNameInfo::MergeFrom(const PerplexityScore_TransactionNameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.PerplexityScore.TransactionNameInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_typename()) {
      set_has_transaction_typename();
      transaction_typename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_typename_);
    }
    if (from.has_raw()) {
      set_raw(from.raw());
    }
    if (from.has_normalizer()) {
      set_normalizer(from.normalizer());
    }
    if (from.has_zero_words()) {
      set_zero_words(from.zero_words());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PerplexityScore_TransactionNameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.PerplexityScore.TransactionNameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerplexityScore_TransactionNameInfo::CopyFrom(const PerplexityScore_TransactionNameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.PerplexityScore.TransactionNameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerplexityScore_TransactionNameInfo::IsInitialized() const {

  return true;
}

void PerplexityScore_TransactionNameInfo::Swap(PerplexityScore_TransactionNameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerplexityScore_TransactionNameInfo::InternalSwap(PerplexityScore_TransactionNameInfo* other) {
  transaction_typename_.Swap(&other->transaction_typename_);
  std::swap(raw_, other->raw_);
  std::swap(normalizer_, other->normalizer_);
  std::swap(zero_words_, other->zero_words_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerplexityScore_TransactionNameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerplexityScore_TransactionNameInfo_descriptor_;
  metadata.reflection = PerplexityScore_TransactionNameInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerplexityScore::kValueFieldNumber;
const int PerplexityScore::kRawFieldNumber;
const int PerplexityScore::kNormalizerFieldNumber;
const int PerplexityScore::kZeroWordsFieldNumber;
const int PerplexityScore::kTransactionTypenameInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerplexityScore::PerplexityScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.PerplexityScore)
}

void PerplexityScore::InitAsDefaultInstance() {
}

PerplexityScore::PerplexityScore(const PerplexityScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.PerplexityScore)
}

void PerplexityScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  raw_ = 0;
  normalizer_ = 0;
  zero_words_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerplexityScore::~PerplexityScore() {
  // @@protoc_insertion_point(destructor:artm.PerplexityScore)
  SharedDtor();
}

void PerplexityScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PerplexityScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerplexityScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerplexityScore_descriptor_;
}

const PerplexityScore& PerplexityScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

PerplexityScore* PerplexityScore::default_instance_ = NULL;

PerplexityScore* PerplexityScore::New(::google::protobuf::Arena* arena) const {
  PerplexityScore* n = new PerplexityScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerplexityScore::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.PerplexityScore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PerplexityScore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PerplexityScore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(raw_, zero_words_);
    value_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  transaction_typename_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PerplexityScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.PerplexityScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_raw;
        break;
      }

      // optional double raw = 2;
      case 2: {
        if (tag == 17) {
         parse_raw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &raw_)));
          set_has_raw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_normalizer;
        break;
      }

      // optional double normalizer = 3;
      case 3: {
        if (tag == 25) {
         parse_normalizer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &normalizer_)));
          set_has_normalizer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zero_words;
        break;
      }

      // optional int64 zero_words = 4;
      case 4: {
        if (tag == 32) {
         parse_zero_words:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &zero_words_)));
          set_has_zero_words();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transaction_typename_info;
        break;
      }

      // repeated .artm.PerplexityScore.TransactionNameInfo transaction_typename_info = 5;
      case 5: {
        if (tag == 42) {
         parse_transaction_typename_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_transaction_typename_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_transaction_typename_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_transaction_typename_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.PerplexityScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.PerplexityScore)
  return false;
#undef DO_
}

void PerplexityScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.PerplexityScore)
  // optional float value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // optional double raw = 2;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->raw(), output);
  }

  // optional double normalizer = 3;
  if (has_normalizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->normalizer(), output);
  }

  // optional int64 zero_words = 4;
  if (has_zero_words()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->zero_words(), output);
  }

  // repeated .artm.PerplexityScore.TransactionNameInfo transaction_typename_info = 5;
  for (unsigned int i = 0, n = this->transaction_typename_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->transaction_typename_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.PerplexityScore)
}

::google::protobuf::uint8* PerplexityScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.PerplexityScore)
  // optional float value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // optional double raw = 2;
  if (has_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->raw(), target);
  }

  // optional double normalizer = 3;
  if (has_normalizer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->normalizer(), target);
  }

  // optional int64 zero_words = 4;
  if (has_zero_words()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->zero_words(), target);
  }

  // repeated .artm.PerplexityScore.TransactionNameInfo transaction_typename_info = 5;
  for (unsigned int i = 0, n = this->transaction_typename_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->transaction_typename_info(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.PerplexityScore)
  return target;
}

int PerplexityScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.PerplexityScore)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional float value = 1;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional double raw = 2;
    if (has_raw()) {
      total_size += 1 + 8;
    }

    // optional double normalizer = 3;
    if (has_normalizer()) {
      total_size += 1 + 8;
    }

    // optional int64 zero_words = 4;
    if (has_zero_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->zero_words());
    }

  }
  // repeated .artm.PerplexityScore.TransactionNameInfo transaction_typename_info = 5;
  total_size += 1 * this->transaction_typename_info_size();
  for (int i = 0; i < this->transaction_typename_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transaction_typename_info(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerplexityScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.PerplexityScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PerplexityScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PerplexityScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.PerplexityScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.PerplexityScore)
    MergeFrom(*source);
  }
}

void PerplexityScore::MergeFrom(const PerplexityScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.PerplexityScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  transaction_typename_info_.MergeFrom(from.transaction_typename_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_raw()) {
      set_raw(from.raw());
    }
    if (from.has_normalizer()) {
      set_normalizer(from.normalizer());
    }
    if (from.has_zero_words()) {
      set_zero_words(from.zero_words());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PerplexityScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.PerplexityScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerplexityScore::CopyFrom(const PerplexityScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.PerplexityScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerplexityScore::IsInitialized() const {

  return true;
}

void PerplexityScore::Swap(PerplexityScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerplexityScore::InternalSwap(PerplexityScore* other) {
  std::swap(value_, other->value_);
  std::swap(raw_, other->raw_);
  std::swap(normalizer_, other->normalizer_);
  std::swap(zero_words_, other->zero_words_);
  transaction_typename_info_.UnsafeArenaSwap(&other->transaction_typename_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerplexityScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerplexityScore_descriptor_;
  metadata.reflection = PerplexityScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerplexityScore_TransactionNameInfo

// optional string transaction_typename = 1;
bool PerplexityScore_TransactionNameInfo::has_transaction_typename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerplexityScore_TransactionNameInfo::set_has_transaction_typename() {
  _has_bits_[0] |= 0x00000001u;
}
void PerplexityScore_TransactionNameInfo::clear_has_transaction_typename() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerplexityScore_TransactionNameInfo::clear_transaction_typename() {
  transaction_typename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction_typename();
}
 const ::std::string& PerplexityScore_TransactionNameInfo::transaction_typename() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
  return transaction_typename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PerplexityScore_TransactionNameInfo::set_transaction_typename(const ::std::string& value) {
  set_has_transaction_typename();
  transaction_typename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
}
 void PerplexityScore_TransactionNameInfo::set_transaction_typename(const char* value) {
  set_has_transaction_typename();
  transaction_typename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
}
 void PerplexityScore_TransactionNameInfo::set_transaction_typename(const char* value, size_t size) {
  set_has_transaction_typename();
  transaction_typename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
}
 ::std::string* PerplexityScore_TransactionNameInfo::mutable_transaction_typename() {
  set_has_transaction_typename();
  // @@protoc_insertion_point(field_mutable:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
  return transaction_typename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PerplexityScore_TransactionNameInfo::release_transaction_typename() {
  // @@protoc_insertion_point(field_release:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
  clear_has_transaction_typename();
  return transaction_typename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PerplexityScore_TransactionNameInfo::set_allocated_transaction_typename(::std::string* transaction_typename) {
  if (transaction_typename != NULL) {
    set_has_transaction_typename();
  } else {
    clear_has_transaction_typename();
  }
  transaction_typename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_typename);
  // @@protoc_insertion_point(field_set_allocated:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
}

// optional double raw = 2;
bool PerplexityScore_TransactionNameInfo::has_raw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerplexityScore_TransactionNameInfo::set_has_raw() {
  _has_bits_[0] |= 0x00000002u;
}
void PerplexityScore_TransactionNameInfo::clear_has_raw() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerplexityScore_TransactionNameInfo::clear_raw() {
  raw_ = 0;
  clear_has_raw();
}
 double PerplexityScore_TransactionNameInfo::raw() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.TransactionNameInfo.raw)
  return raw_;
}
 void PerplexityScore_TransactionNameInfo::set_raw(double value) {
  set_has_raw();
  raw_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.TransactionNameInfo.raw)
}

// optional double normalizer = 3;
bool PerplexityScore_TransactionNameInfo::has_normalizer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerplexityScore_TransactionNameInfo::set_has_normalizer() {
  _has_bits_[0] |= 0x00000004u;
}
void PerplexityScore_TransactionNameInfo::clear_has_normalizer() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerplexityScore_TransactionNameInfo::clear_normalizer() {
  normalizer_ = 0;
  clear_has_normalizer();
}
 double PerplexityScore_TransactionNameInfo::normalizer() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.TransactionNameInfo.normalizer)
  return normalizer_;
}
 void PerplexityScore_TransactionNameInfo::set_normalizer(double value) {
  set_has_normalizer();
  normalizer_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.TransactionNameInfo.normalizer)
}

// optional int64 zero_words = 4;
bool PerplexityScore_TransactionNameInfo::has_zero_words() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerplexityScore_TransactionNameInfo::set_has_zero_words() {
  _has_bits_[0] |= 0x00000008u;
}
void PerplexityScore_TransactionNameInfo::clear_has_zero_words() {
  _has_bits_[0] &= ~0x00000008u;
}
void PerplexityScore_TransactionNameInfo::clear_zero_words() {
  zero_words_ = GOOGLE_LONGLONG(0);
  clear_has_zero_words();
}
 ::google::protobuf::int64 PerplexityScore_TransactionNameInfo::zero_words() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.TransactionNameInfo.zero_words)
  return zero_words_;
}
 void PerplexityScore_TransactionNameInfo::set_zero_words(::google::protobuf::int64 value) {
  set_has_zero_words();
  zero_words_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.TransactionNameInfo.zero_words)
}

// -------------------------------------------------------------------

// PerplexityScore

// optional float value = 1;
bool PerplexityScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerplexityScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void PerplexityScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerplexityScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
 float PerplexityScore::value() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.value)
  return value_;
}
 void PerplexityScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.value)
}

// optional double raw = 2;
bool PerplexityScore::has_raw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerplexityScore::set_has_raw() {
  _has_bits_[0] |= 0x00000002u;
}
void PerplexityScore::clear_has_raw() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerplexityScore::clear_raw() {
  raw_ = 0;
  clear_has_raw();
}
 double PerplexityScore::raw() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.raw)
  return raw_;
}
 void PerplexityScore::set_raw(double value) {
  set_has_raw();
  raw_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.raw)
}

// optional double normalizer = 3;
bool PerplexityScore::has_normalizer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerplexityScore::set_has_normalizer() {
  _has_bits_[0] |= 0x00000004u;
}
void PerplexityScore::clear_has_normalizer() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerplexityScore::clear_normalizer() {
  normalizer_ = 0;
  clear_has_normalizer();
}
 double PerplexityScore::normalizer() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.normalizer)
  return normalizer_;
}
 void PerplexityScore::set_normalizer(double value) {
  set_has_normalizer();
  normalizer_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.normalizer)
}

// optional int64 zero_words = 4;
bool PerplexityScore::has_zero_words() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerplexityScore::set_has_zero_words() {
  _has_bits_[0] |= 0x00000008u;
}
void PerplexityScore::clear_has_zero_words() {
  _has_bits_[0] &= ~0x00000008u;
}
void PerplexityScore::clear_zero_words() {
  zero_words_ = GOOGLE_LONGLONG(0);
  clear_has_zero_words();
}
 ::google::protobuf::int64 PerplexityScore::zero_words() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.zero_words)
  return zero_words_;
}
 void PerplexityScore::set_zero_words(::google::protobuf::int64 value) {
  set_has_zero_words();
  zero_words_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.zero_words)
}

// repeated .artm.PerplexityScore.TransactionNameInfo transaction_typename_info = 5;
int PerplexityScore::transaction_typename_info_size() const {
  return transaction_typename_info_.size();
}
void PerplexityScore::clear_transaction_typename_info() {
  transaction_typename_info_.Clear();
}
const ::artm::PerplexityScore_TransactionNameInfo& PerplexityScore::transaction_typename_info(int index) const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.transaction_typename_info)
  return transaction_typename_info_.Get(index);
}
::artm::PerplexityScore_TransactionNameInfo* PerplexityScore::mutable_transaction_typename_info(int index) {
  // @@protoc_insertion_point(field_mutable:artm.PerplexityScore.transaction_typename_info)
  return transaction_typename_info_.Mutable(index);
}
::artm::PerplexityScore_TransactionNameInfo* PerplexityScore::add_transaction_typename_info() {
  // @@protoc_insertion_point(field_add:artm.PerplexityScore.transaction_typename_info)
  return transaction_typename_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::PerplexityScore_TransactionNameInfo >*
PerplexityScore::mutable_transaction_typename_info() {
  // @@protoc_insertion_point(field_mutable_list:artm.PerplexityScore.transaction_typename_info)
  return &transaction_typename_info_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::PerplexityScore_TransactionNameInfo >&
PerplexityScore::transaction_typename_info() const {
  // @@protoc_insertion_point(field_list:artm.PerplexityScore.transaction_typename_info)
  return transaction_typename_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparsityThetaScoreConfig::kEpsFieldNumber;
const int SparsityThetaScoreConfig::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparsityThetaScoreConfig::SparsityThetaScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.SparsityThetaScoreConfig)
}

void SparsityThetaScoreConfig::InitAsDefaultInstance() {
}

SparsityThetaScoreConfig::SparsityThetaScoreConfig(const SparsityThetaScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.SparsityThetaScoreConfig)
}

void SparsityThetaScoreConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eps_ = 1e-37f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsityThetaScoreConfig::~SparsityThetaScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.SparsityThetaScoreConfig)
  SharedDtor();
}

void SparsityThetaScoreConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparsityThetaScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsityThetaScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsityThetaScoreConfig_descriptor_;
}

const SparsityThetaScoreConfig& SparsityThetaScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SparsityThetaScoreConfig* SparsityThetaScoreConfig::default_instance_ = NULL;

SparsityThetaScoreConfig* SparsityThetaScoreConfig::New(::google::protobuf::Arena* arena) const {
  SparsityThetaScoreConfig* n = new SparsityThetaScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparsityThetaScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.SparsityThetaScoreConfig)
  eps_ = 1e-37f;
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SparsityThetaScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.SparsityThetaScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float eps = 3 [default = 1e-37];
      case 3: {
        if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 4;
      case 4: {
        if (tag == 34) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SparsityThetaScoreConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.SparsityThetaScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.SparsityThetaScoreConfig)
  return false;
#undef DO_
}

void SparsityThetaScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.SparsityThetaScoreConfig)
  // optional float eps = 3 [default = 1e-37];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SparsityThetaScoreConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topic_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.SparsityThetaScoreConfig)
}

::google::protobuf::uint8* SparsityThetaScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.SparsityThetaScoreConfig)
  // optional float eps = 3 [default = 1e-37];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SparsityThetaScoreConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topic_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.SparsityThetaScoreConfig)
  return target;
}

int SparsityThetaScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.SparsityThetaScoreConfig)
  int total_size = 0;

  // optional float eps = 3 [default = 1e-37];
  if (has_eps()) {
    total_size += 1 + 4;
  }

  // repeated string topic_name = 4;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsityThetaScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.SparsityThetaScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SparsityThetaScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SparsityThetaScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.SparsityThetaScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.SparsityThetaScoreConfig)
    MergeFrom(*source);
  }
}

void SparsityThetaScoreConfig::MergeFrom(const SparsityThetaScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.SparsityThetaScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SparsityThetaScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.SparsityThetaScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsityThetaScoreConfig::CopyFrom(const SparsityThetaScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.SparsityThetaScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsityThetaScoreConfig::IsInitialized() const {

  return true;
}

void SparsityThetaScoreConfig::Swap(SparsityThetaScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparsityThetaScoreConfig::InternalSwap(SparsityThetaScoreConfig* other) {
  std::swap(eps_, other->eps_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparsityThetaScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsityThetaScoreConfig_descriptor_;
  metadata.reflection = SparsityThetaScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparsityThetaScoreConfig

// optional float eps = 3 [default = 1e-37];
bool SparsityThetaScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SparsityThetaScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
void SparsityThetaScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
void SparsityThetaScoreConfig::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
 float SparsityThetaScoreConfig::eps() const {
  // @@protoc_insertion_point(field_get:artm.SparsityThetaScoreConfig.eps)
  return eps_;
}
 void SparsityThetaScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityThetaScoreConfig.eps)
}

// repeated string topic_name = 4;
int SparsityThetaScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
void SparsityThetaScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& SparsityThetaScoreConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SparsityThetaScoreConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* SparsityThetaScoreConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SparsityThetaScoreConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void SparsityThetaScoreConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SparsityThetaScoreConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void SparsityThetaScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SparsityThetaScoreConfig.topic_name)
}
 void SparsityThetaScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SparsityThetaScoreConfig.topic_name)
}
 ::std::string* SparsityThetaScoreConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SparsityThetaScoreConfig.topic_name)
  return topic_name_.Add();
}
 void SparsityThetaScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SparsityThetaScoreConfig.topic_name)
}
 void SparsityThetaScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SparsityThetaScoreConfig.topic_name)
}
 void SparsityThetaScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SparsityThetaScoreConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SparsityThetaScoreConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SparsityThetaScoreConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SparsityThetaScoreConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SparsityThetaScoreConfig.topic_name)
  return &topic_name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparsityThetaScore::kValueFieldNumber;
const int SparsityThetaScore::kZeroTopicsFieldNumber;
const int SparsityThetaScore::kTotalTopicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparsityThetaScore::SparsityThetaScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.SparsityThetaScore)
}

void SparsityThetaScore::InitAsDefaultInstance() {
}

SparsityThetaScore::SparsityThetaScore(const SparsityThetaScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.SparsityThetaScore)
}

void SparsityThetaScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  zero_topics_ = GOOGLE_LONGLONG(0);
  total_topics_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsityThetaScore::~SparsityThetaScore() {
  // @@protoc_insertion_point(destructor:artm.SparsityThetaScore)
  SharedDtor();
}

void SparsityThetaScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparsityThetaScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsityThetaScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsityThetaScore_descriptor_;
}

const SparsityThetaScore& SparsityThetaScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SparsityThetaScore* SparsityThetaScore::default_instance_ = NULL;

SparsityThetaScore* SparsityThetaScore::New(::google::protobuf::Arena* arena) const {
  SparsityThetaScore* n = new SparsityThetaScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparsityThetaScore::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.SparsityThetaScore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SparsityThetaScore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SparsityThetaScore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(zero_topics_, value_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SparsityThetaScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.SparsityThetaScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zero_topics;
        break;
      }

      // optional int64 zero_topics = 2;
      case 2: {
        if (tag == 16) {
         parse_zero_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &zero_topics_)));
          set_has_zero_topics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_topics;
        break;
      }

      // optional int64 total_topics = 3;
      case 3: {
        if (tag == 24) {
         parse_total_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_topics_)));
          set_has_total_topics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.SparsityThetaScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.SparsityThetaScore)
  return false;
#undef DO_
}

void SparsityThetaScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.SparsityThetaScore)
  // optional float value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // optional int64 zero_topics = 2;
  if (has_zero_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->zero_topics(), output);
  }

  // optional int64 total_topics = 3;
  if (has_total_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_topics(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.SparsityThetaScore)
}

::google::protobuf::uint8* SparsityThetaScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.SparsityThetaScore)
  // optional float value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // optional int64 zero_topics = 2;
  if (has_zero_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->zero_topics(), target);
  }

  // optional int64 total_topics = 3;
  if (has_total_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_topics(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.SparsityThetaScore)
  return target;
}

int SparsityThetaScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.SparsityThetaScore)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float value = 1;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional int64 zero_topics = 2;
    if (has_zero_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->zero_topics());
    }

    // optional int64 total_topics = 3;
    if (has_total_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_topics());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsityThetaScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.SparsityThetaScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SparsityThetaScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SparsityThetaScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.SparsityThetaScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.SparsityThetaScore)
    MergeFrom(*source);
  }
}

void SparsityThetaScore::MergeFrom(const SparsityThetaScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.SparsityThetaScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_zero_topics()) {
      set_zero_topics(from.zero_topics());
    }
    if (from.has_total_topics()) {
      set_total_topics(from.total_topics());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SparsityThetaScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.SparsityThetaScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsityThetaScore::CopyFrom(const SparsityThetaScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.SparsityThetaScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsityThetaScore::IsInitialized() const {

  return true;
}

void SparsityThetaScore::Swap(SparsityThetaScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparsityThetaScore::InternalSwap(SparsityThetaScore* other) {
  std::swap(value_, other->value_);
  std::swap(zero_topics_, other->zero_topics_);
  std::swap(total_topics_, other->total_topics_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparsityThetaScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsityThetaScore_descriptor_;
  metadata.reflection = SparsityThetaScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparsityThetaScore

// optional float value = 1;
bool SparsityThetaScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SparsityThetaScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void SparsityThetaScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void SparsityThetaScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
 float SparsityThetaScore::value() const {
  // @@protoc_insertion_point(field_get:artm.SparsityThetaScore.value)
  return value_;
}
 void SparsityThetaScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityThetaScore.value)
}

// optional int64 zero_topics = 2;
bool SparsityThetaScore::has_zero_topics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SparsityThetaScore::set_has_zero_topics() {
  _has_bits_[0] |= 0x00000002u;
}
void SparsityThetaScore::clear_has_zero_topics() {
  _has_bits_[0] &= ~0x00000002u;
}
void SparsityThetaScore::clear_zero_topics() {
  zero_topics_ = GOOGLE_LONGLONG(0);
  clear_has_zero_topics();
}
 ::google::protobuf::int64 SparsityThetaScore::zero_topics() const {
  // @@protoc_insertion_point(field_get:artm.SparsityThetaScore.zero_topics)
  return zero_topics_;
}
 void SparsityThetaScore::set_zero_topics(::google::protobuf::int64 value) {
  set_has_zero_topics();
  zero_topics_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityThetaScore.zero_topics)
}

// optional int64 total_topics = 3;
bool SparsityThetaScore::has_total_topics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SparsityThetaScore::set_has_total_topics() {
  _has_bits_[0] |= 0x00000004u;
}
void SparsityThetaScore::clear_has_total_topics() {
  _has_bits_[0] &= ~0x00000004u;
}
void SparsityThetaScore::clear_total_topics() {
  total_topics_ = GOOGLE_LONGLONG(0);
  clear_has_total_topics();
}
 ::google::protobuf::int64 SparsityThetaScore::total_topics() const {
  // @@protoc_insertion_point(field_get:artm.SparsityThetaScore.total_topics)
  return total_topics_;
}
 void SparsityThetaScore::set_total_topics(::google::protobuf::int64 value) {
  set_has_total_topics();
  total_topics_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityThetaScore.total_topics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* SparsityPhiScoreConfig::_default_class_id_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparsityPhiScoreConfig::kEpsFieldNumber;
const int SparsityPhiScoreConfig::kClassIdFieldNumber;
const int SparsityPhiScoreConfig::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparsityPhiScoreConfig::SparsityPhiScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.SparsityPhiScoreConfig)
}

void SparsityPhiScoreConfig::InitAsDefaultInstance() {
}

SparsityPhiScoreConfig::SparsityPhiScoreConfig(const SparsityPhiScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.SparsityPhiScoreConfig)
}

void SparsityPhiScoreConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eps_ = 1e-37f;
  class_id_.UnsafeSetDefault(_default_class_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsityPhiScoreConfig::~SparsityPhiScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.SparsityPhiScoreConfig)
  SharedDtor();
}

void SparsityPhiScoreConfig::SharedDtor() {
  class_id_.DestroyNoArena(_default_class_id_);
  if (this != default_instance_) {
  }
}

void SparsityPhiScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsityPhiScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsityPhiScoreConfig_descriptor_;
}

const SparsityPhiScoreConfig& SparsityPhiScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SparsityPhiScoreConfig* SparsityPhiScoreConfig::default_instance_ = NULL;

SparsityPhiScoreConfig* SparsityPhiScoreConfig::New(::google::protobuf::Arena* arena) const {
  SparsityPhiScoreConfig* n = new SparsityPhiScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparsityPhiScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.SparsityPhiScoreConfig)
  if (_has_bits_[0 / 32] & 3u) {
    eps_ = 1e-37f;
    if (has_class_id()) {
      class_id_.ClearToDefaultNoArena(_default_class_id_);
    }
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SparsityPhiScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.SparsityPhiScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float eps = 1 [default = 1e-37];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // optional string class_id = 2 [default = "@default_class"];
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SparsityPhiScoreConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 3;
      case 3: {
        if (tag == 26) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.SparsityPhiScoreConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.SparsityPhiScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.SparsityPhiScoreConfig)
  return false;
#undef DO_
}

void SparsityPhiScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.SparsityPhiScoreConfig)
  // optional float eps = 1 [default = 1e-37];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eps(), output);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SparsityPhiScoreConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->class_id(), output);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SparsityPhiScoreConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.SparsityPhiScoreConfig)
}

::google::protobuf::uint8* SparsityPhiScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.SparsityPhiScoreConfig)
  // optional float eps = 1 [default = 1e-37];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eps(), target);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SparsityPhiScoreConfig.class_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_id(), target);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.SparsityPhiScoreConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.SparsityPhiScoreConfig)
  return target;
}

int SparsityPhiScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.SparsityPhiScoreConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float eps = 1 [default = 1e-37];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional string class_id = 2 [default = "@default_class"];
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

  }
  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsityPhiScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.SparsityPhiScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SparsityPhiScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SparsityPhiScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.SparsityPhiScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.SparsityPhiScoreConfig)
    MergeFrom(*source);
  }
}

void SparsityPhiScoreConfig::MergeFrom(const SparsityPhiScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.SparsityPhiScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_class_id()) {
      set_has_class_id();
      class_id_.AssignWithDefault(_default_class_id_, from.class_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SparsityPhiScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.SparsityPhiScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsityPhiScoreConfig::CopyFrom(const SparsityPhiScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.SparsityPhiScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsityPhiScoreConfig::IsInitialized() const {

  return true;
}

void SparsityPhiScoreConfig::Swap(SparsityPhiScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparsityPhiScoreConfig::InternalSwap(SparsityPhiScoreConfig* other) {
  std::swap(eps_, other->eps_);
  class_id_.Swap(&other->class_id_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparsityPhiScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsityPhiScoreConfig_descriptor_;
  metadata.reflection = SparsityPhiScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparsityPhiScoreConfig

// optional float eps = 1 [default = 1e-37];
bool SparsityPhiScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SparsityPhiScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
void SparsityPhiScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
void SparsityPhiScoreConfig::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
 float SparsityPhiScoreConfig::eps() const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScoreConfig.eps)
  return eps_;
}
 void SparsityPhiScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScoreConfig.eps)
}

// optional string class_id = 2 [default = "@default_class"];
bool SparsityPhiScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SparsityPhiScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SparsityPhiScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SparsityPhiScoreConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
 const ::std::string& SparsityPhiScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScoreConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
 void SparsityPhiScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScoreConfig.class_id)
}
 void SparsityPhiScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.SparsityPhiScoreConfig.class_id)
}
 void SparsityPhiScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.SparsityPhiScoreConfig.class_id)
}
 ::std::string* SparsityPhiScoreConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.SparsityPhiScoreConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
 ::std::string* SparsityPhiScoreConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.SparsityPhiScoreConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
 void SparsityPhiScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.SparsityPhiScoreConfig.class_id)
}

// repeated string topic_name = 3;
int SparsityPhiScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
void SparsityPhiScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& SparsityPhiScoreConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScoreConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* SparsityPhiScoreConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SparsityPhiScoreConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void SparsityPhiScoreConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScoreConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void SparsityPhiScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SparsityPhiScoreConfig.topic_name)
}
 void SparsityPhiScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SparsityPhiScoreConfig.topic_name)
}
 ::std::string* SparsityPhiScoreConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SparsityPhiScoreConfig.topic_name)
  return topic_name_.Add();
}
 void SparsityPhiScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SparsityPhiScoreConfig.topic_name)
}
 void SparsityPhiScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SparsityPhiScoreConfig.topic_name)
}
 void SparsityPhiScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SparsityPhiScoreConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SparsityPhiScoreConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SparsityPhiScoreConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SparsityPhiScoreConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SparsityPhiScoreConfig.topic_name)
  return &topic_name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparsityPhiScore::kValueFieldNumber;
const int SparsityPhiScore::kZeroTokensFieldNumber;
const int SparsityPhiScore::kTotalTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparsityPhiScore::SparsityPhiScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.SparsityPhiScore)
}

void SparsityPhiScore::InitAsDefaultInstance() {
}

SparsityPhiScore::SparsityPhiScore(const SparsityPhiScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.SparsityPhiScore)
}

void SparsityPhiScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  zero_tokens_ = GOOGLE_LONGLONG(0);
  total_tokens_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsityPhiScore::~SparsityPhiScore() {
  // @@protoc_insertion_point(destructor:artm.SparsityPhiScore)
  SharedDtor();
}

void SparsityPhiScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparsityPhiScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsityPhiScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsityPhiScore_descriptor_;
}

const SparsityPhiScore& SparsityPhiScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SparsityPhiScore* SparsityPhiScore::default_instance_ = NULL;

SparsityPhiScore* SparsityPhiScore::New(::google::protobuf::Arena* arena) const {
  SparsityPhiScore* n = new SparsityPhiScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparsityPhiScore::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.SparsityPhiScore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SparsityPhiScore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SparsityPhiScore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(zero_tokens_, value_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SparsityPhiScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.SparsityPhiScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zero_tokens;
        break;
      }

      // optional int64 zero_tokens = 2;
      case 2: {
        if (tag == 16) {
         parse_zero_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &zero_tokens_)));
          set_has_zero_tokens();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_tokens;
        break;
      }

      // optional int64 total_tokens = 3;
      case 3: {
        if (tag == 24) {
         parse_total_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_tokens_)));
          set_has_total_tokens();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.SparsityPhiScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.SparsityPhiScore)
  return false;
#undef DO_
}

void SparsityPhiScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.SparsityPhiScore)
  // optional float value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // optional int64 zero_tokens = 2;
  if (has_zero_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->zero_tokens(), output);
  }

  // optional int64 total_tokens = 3;
  if (has_total_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_tokens(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.SparsityPhiScore)
}

::google::protobuf::uint8* SparsityPhiScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.SparsityPhiScore)
  // optional float value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // optional int64 zero_tokens = 2;
  if (has_zero_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->zero_tokens(), target);
  }

  // optional int64 total_tokens = 3;
  if (has_total_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_tokens(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.SparsityPhiScore)
  return target;
}

int SparsityPhiScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.SparsityPhiScore)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float value = 1;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional int64 zero_tokens = 2;
    if (has_zero_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->zero_tokens());
    }

    // optional int64 total_tokens = 3;
    if (has_total_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_tokens());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsityPhiScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.SparsityPhiScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SparsityPhiScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SparsityPhiScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.SparsityPhiScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.SparsityPhiScore)
    MergeFrom(*source);
  }
}

void SparsityPhiScore::MergeFrom(const SparsityPhiScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.SparsityPhiScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_zero_tokens()) {
      set_zero_tokens(from.zero_tokens());
    }
    if (from.has_total_tokens()) {
      set_total_tokens(from.total_tokens());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SparsityPhiScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.SparsityPhiScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsityPhiScore::CopyFrom(const SparsityPhiScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.SparsityPhiScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsityPhiScore::IsInitialized() const {

  return true;
}

void SparsityPhiScore::Swap(SparsityPhiScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparsityPhiScore::InternalSwap(SparsityPhiScore* other) {
  std::swap(value_, other->value_);
  std::swap(zero_tokens_, other->zero_tokens_);
  std::swap(total_tokens_, other->total_tokens_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparsityPhiScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsityPhiScore_descriptor_;
  metadata.reflection = SparsityPhiScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparsityPhiScore

// optional float value = 1;
bool SparsityPhiScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SparsityPhiScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void SparsityPhiScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void SparsityPhiScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
 float SparsityPhiScore::value() const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScore.value)
  return value_;
}
 void SparsityPhiScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScore.value)
}

// optional int64 zero_tokens = 2;
bool SparsityPhiScore::has_zero_tokens() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SparsityPhiScore::set_has_zero_tokens() {
  _has_bits_[0] |= 0x00000002u;
}
void SparsityPhiScore::clear_has_zero_tokens() {
  _has_bits_[0] &= ~0x00000002u;
}
void SparsityPhiScore::clear_zero_tokens() {
  zero_tokens_ = GOOGLE_LONGLONG(0);
  clear_has_zero_tokens();
}
 ::google::protobuf::int64 SparsityPhiScore::zero_tokens() const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScore.zero_tokens)
  return zero_tokens_;
}
 void SparsityPhiScore::set_zero_tokens(::google::protobuf::int64 value) {
  set_has_zero_tokens();
  zero_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScore.zero_tokens)
}

// optional int64 total_tokens = 3;
bool SparsityPhiScore::has_total_tokens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SparsityPhiScore::set_has_total_tokens() {
  _has_bits_[0] |= 0x00000004u;
}
void SparsityPhiScore::clear_has_total_tokens() {
  _has_bits_[0] &= ~0x00000004u;
}
void SparsityPhiScore::clear_total_tokens() {
  total_tokens_ = GOOGLE_LONGLONG(0);
  clear_has_total_tokens();
}
 ::google::protobuf::int64 SparsityPhiScore::total_tokens() const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScore.total_tokens)
  return total_tokens_;
}
 void SparsityPhiScore::set_total_tokens(::google::protobuf::int64 value) {
  set_has_total_tokens();
  total_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScore.total_tokens)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemsProcessedScoreConfig::ItemsProcessedScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ItemsProcessedScoreConfig)
}

void ItemsProcessedScoreConfig::InitAsDefaultInstance() {
}

ItemsProcessedScoreConfig::ItemsProcessedScoreConfig(const ItemsProcessedScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ItemsProcessedScoreConfig)
}

void ItemsProcessedScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemsProcessedScoreConfig::~ItemsProcessedScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.ItemsProcessedScoreConfig)
  SharedDtor();
}

void ItemsProcessedScoreConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemsProcessedScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemsProcessedScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemsProcessedScoreConfig_descriptor_;
}

const ItemsProcessedScoreConfig& ItemsProcessedScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ItemsProcessedScoreConfig* ItemsProcessedScoreConfig::default_instance_ = NULL;

ItemsProcessedScoreConfig* ItemsProcessedScoreConfig::New(::google::protobuf::Arena* arena) const {
  ItemsProcessedScoreConfig* n = new ItemsProcessedScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemsProcessedScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ItemsProcessedScoreConfig)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ItemsProcessedScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ItemsProcessedScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ItemsProcessedScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ItemsProcessedScoreConfig)
  return false;
#undef DO_
}

void ItemsProcessedScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ItemsProcessedScoreConfig)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ItemsProcessedScoreConfig)
}

::google::protobuf::uint8* ItemsProcessedScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ItemsProcessedScoreConfig)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ItemsProcessedScoreConfig)
  return target;
}

int ItemsProcessedScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ItemsProcessedScoreConfig)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemsProcessedScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ItemsProcessedScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ItemsProcessedScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemsProcessedScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ItemsProcessedScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ItemsProcessedScoreConfig)
    MergeFrom(*source);
  }
}

void ItemsProcessedScoreConfig::MergeFrom(const ItemsProcessedScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ItemsProcessedScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ItemsProcessedScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ItemsProcessedScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemsProcessedScoreConfig::CopyFrom(const ItemsProcessedScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ItemsProcessedScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemsProcessedScoreConfig::IsInitialized() const {

  return true;
}

void ItemsProcessedScoreConfig::Swap(ItemsProcessedScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemsProcessedScoreConfig::InternalSwap(ItemsProcessedScoreConfig* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemsProcessedScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemsProcessedScoreConfig_descriptor_;
  metadata.reflection = ItemsProcessedScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemsProcessedScoreConfig

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemsProcessedScore::kValueFieldNumber;
const int ItemsProcessedScore::kNumBatchesFieldNumber;
const int ItemsProcessedScore::kTokenWeightFieldNumber;
const int ItemsProcessedScore::kTokenWeightInEffectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemsProcessedScore::ItemsProcessedScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ItemsProcessedScore)
}

void ItemsProcessedScore::InitAsDefaultInstance() {
}

ItemsProcessedScore::ItemsProcessedScore(const ItemsProcessedScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ItemsProcessedScore)
}

void ItemsProcessedScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  num_batches_ = 0;
  token_weight_ = 0;
  token_weight_in_effect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemsProcessedScore::~ItemsProcessedScore() {
  // @@protoc_insertion_point(destructor:artm.ItemsProcessedScore)
  SharedDtor();
}

void ItemsProcessedScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemsProcessedScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemsProcessedScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemsProcessedScore_descriptor_;
}

const ItemsProcessedScore& ItemsProcessedScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ItemsProcessedScore* ItemsProcessedScore::default_instance_ = NULL;

ItemsProcessedScore* ItemsProcessedScore::New(::google::protobuf::Arena* arena) const {
  ItemsProcessedScore* n = new ItemsProcessedScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemsProcessedScore::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ItemsProcessedScore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ItemsProcessedScore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ItemsProcessedScore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, token_weight_in_effect_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ItemsProcessedScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ItemsProcessedScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_batches;
        break;
      }

      // optional int32 num_batches = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_num_batches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_batches_)));
          set_has_num_batches();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_token_weight;
        break;
      }

      // optional float token_weight = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_token_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &token_weight_)));
          set_has_token_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_token_weight_in_effect;
        break;
      }

      // optional float token_weight_in_effect = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_token_weight_in_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &token_weight_in_effect_)));
          set_has_token_weight_in_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ItemsProcessedScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ItemsProcessedScore)
  return false;
#undef DO_
}

void ItemsProcessedScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ItemsProcessedScore)
  // optional int32 value = 1 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  // optional int32 num_batches = 2 [default = 0];
  if (has_num_batches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_batches(), output);
  }

  // optional float token_weight = 3 [default = 0];
  if (has_token_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->token_weight(), output);
  }

  // optional float token_weight_in_effect = 4 [default = 0];
  if (has_token_weight_in_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->token_weight_in_effect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ItemsProcessedScore)
}

::google::protobuf::uint8* ItemsProcessedScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ItemsProcessedScore)
  // optional int32 value = 1 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  // optional int32 num_batches = 2 [default = 0];
  if (has_num_batches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_batches(), target);
  }

  // optional float token_weight = 3 [default = 0];
  if (has_token_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->token_weight(), target);
  }

  // optional float token_weight_in_effect = 4 [default = 0];
  if (has_token_weight_in_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->token_weight_in_effect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ItemsProcessedScore)
  return target;
}

int ItemsProcessedScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ItemsProcessedScore)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 value = 1 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 num_batches = 2 [default = 0];
    if (has_num_batches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_batches());
    }

    // optional float token_weight = 3 [default = 0];
    if (has_token_weight()) {
      total_size += 1 + 4;
    }

    // optional float token_weight_in_effect = 4 [default = 0];
    if (has_token_weight_in_effect()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemsProcessedScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ItemsProcessedScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ItemsProcessedScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemsProcessedScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ItemsProcessedScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ItemsProcessedScore)
    MergeFrom(*source);
  }
}

void ItemsProcessedScore::MergeFrom(const ItemsProcessedScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ItemsProcessedScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_num_batches()) {
      set_num_batches(from.num_batches());
    }
    if (from.has_token_weight()) {
      set_token_weight(from.token_weight());
    }
    if (from.has_token_weight_in_effect()) {
      set_token_weight_in_effect(from.token_weight_in_effect());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ItemsProcessedScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ItemsProcessedScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemsProcessedScore::CopyFrom(const ItemsProcessedScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ItemsProcessedScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemsProcessedScore::IsInitialized() const {

  return true;
}

void ItemsProcessedScore::Swap(ItemsProcessedScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemsProcessedScore::InternalSwap(ItemsProcessedScore* other) {
  std::swap(value_, other->value_);
  std::swap(num_batches_, other->num_batches_);
  std::swap(token_weight_, other->token_weight_);
  std::swap(token_weight_in_effect_, other->token_weight_in_effect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemsProcessedScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemsProcessedScore_descriptor_;
  metadata.reflection = ItemsProcessedScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemsProcessedScore

// optional int32 value = 1 [default = 0];
bool ItemsProcessedScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ItemsProcessedScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void ItemsProcessedScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void ItemsProcessedScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
 ::google::protobuf::int32 ItemsProcessedScore::value() const {
  // @@protoc_insertion_point(field_get:artm.ItemsProcessedScore.value)
  return value_;
}
 void ItemsProcessedScore::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.ItemsProcessedScore.value)
}

// optional int32 num_batches = 2 [default = 0];
bool ItemsProcessedScore::has_num_batches() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ItemsProcessedScore::set_has_num_batches() {
  _has_bits_[0] |= 0x00000002u;
}
void ItemsProcessedScore::clear_has_num_batches() {
  _has_bits_[0] &= ~0x00000002u;
}
void ItemsProcessedScore::clear_num_batches() {
  num_batches_ = 0;
  clear_has_num_batches();
}
 ::google::protobuf::int32 ItemsProcessedScore::num_batches() const {
  // @@protoc_insertion_point(field_get:artm.ItemsProcessedScore.num_batches)
  return num_batches_;
}
 void ItemsProcessedScore::set_num_batches(::google::protobuf::int32 value) {
  set_has_num_batches();
  num_batches_ = value;
  // @@protoc_insertion_point(field_set:artm.ItemsProcessedScore.num_batches)
}

// optional float token_weight = 3 [default = 0];
bool ItemsProcessedScore::has_token_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ItemsProcessedScore::set_has_token_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void ItemsProcessedScore::clear_has_token_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void ItemsProcessedScore::clear_token_weight() {
  token_weight_ = 0;
  clear_has_token_weight();
}
 float ItemsProcessedScore::token_weight() const {
  // @@protoc_insertion_point(field_get:artm.ItemsProcessedScore.token_weight)
  return token_weight_;
}
 void ItemsProcessedScore::set_token_weight(float value) {
  set_has_token_weight();
  token_weight_ = value;
  // @@protoc_insertion_point(field_set:artm.ItemsProcessedScore.token_weight)
}

// optional float token_weight_in_effect = 4 [default = 0];
bool ItemsProcessedScore::has_token_weight_in_effect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ItemsProcessedScore::set_has_token_weight_in_effect() {
  _has_bits_[0] |= 0x00000008u;
}
void ItemsProcessedScore::clear_has_token_weight_in_effect() {
  _has_bits_[0] &= ~0x00000008u;
}
void ItemsProcessedScore::clear_token_weight_in_effect() {
  token_weight_in_effect_ = 0;
  clear_has_token_weight_in_effect();
}
 float ItemsProcessedScore::token_weight_in_effect() const {
  // @@protoc_insertion_point(field_get:artm.ItemsProcessedScore.token_weight_in_effect)
  return token_weight_in_effect_;
}
 void ItemsProcessedScore::set_token_weight_in_effect(float value) {
  set_has_token_weight_in_effect();
  token_weight_in_effect_ = value;
  // @@protoc_insertion_point(field_set:artm.ItemsProcessedScore.token_weight_in_effect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* TopTokensScoreConfig::_default_class_id_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopTokensScoreConfig::kNumTokensFieldNumber;
const int TopTokensScoreConfig::kClassIdFieldNumber;
const int TopTokensScoreConfig::kTopicNameFieldNumber;
const int TopTokensScoreConfig::kCooccurrenceDictionaryNameFieldNumber;
const int TopTokensScoreConfig::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopTokensScoreConfig::TopTokensScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.TopTokensScoreConfig)
}

void TopTokensScoreConfig::InitAsDefaultInstance() {
}

TopTokensScoreConfig::TopTokensScoreConfig(const TopTokensScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.TopTokensScoreConfig)
}

void TopTokensScoreConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_tokens_ = 10;
  class_id_.UnsafeSetDefault(_default_class_id_);
  cooccurrence_dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eps_ = 1e-37f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopTokensScoreConfig::~TopTokensScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.TopTokensScoreConfig)
  SharedDtor();
}

void TopTokensScoreConfig::SharedDtor() {
  class_id_.DestroyNoArena(_default_class_id_);
  cooccurrence_dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TopTokensScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopTokensScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopTokensScoreConfig_descriptor_;
}

const TopTokensScoreConfig& TopTokensScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopTokensScoreConfig* TopTokensScoreConfig::default_instance_ = NULL;

TopTokensScoreConfig* TopTokensScoreConfig::New(::google::protobuf::Arena* arena) const {
  TopTokensScoreConfig* n = new TopTokensScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopTokensScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.TopTokensScoreConfig)
  if (_has_bits_[0 / 32] & 27u) {
    num_tokens_ = 10;
    if (has_class_id()) {
      class_id_.ClearToDefaultNoArena(_default_class_id_);
    }
    if (has_cooccurrence_dictionary_name()) {
      cooccurrence_dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    eps_ = 1e-37f;
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopTokensScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.TopTokensScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_tokens = 1 [default = 10];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tokens_)));
          set_has_num_tokens();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // optional string class_id = 2 [default = "@default_class"];
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopTokensScoreConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 3;
      case 3: {
        if (tag == 26) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopTokensScoreConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectTag(34)) goto parse_cooccurrence_dictionary_name;
        break;
      }

      // optional string cooccurrence_dictionary_name = 4;
      case 4: {
        if (tag == 34) {
         parse_cooccurrence_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cooccurrence_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopTokensScoreConfig.cooccurrence_dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_eps;
        break;
      }

      // optional float eps = 5 [default = 1e-37];
      case 5: {
        if (tag == 45) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.TopTokensScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.TopTokensScoreConfig)
  return false;
#undef DO_
}

void TopTokensScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.TopTokensScoreConfig)
  // optional int32 num_tokens = 1 [default = 10];
  if (has_num_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_tokens(), output);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopTokensScoreConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->class_id(), output);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopTokensScoreConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  // optional string cooccurrence_dictionary_name = 4;
  if (has_cooccurrence_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopTokensScoreConfig.cooccurrence_dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cooccurrence_dictionary_name(), output);
  }

  // optional float eps = 5 [default = 1e-37];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->eps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.TopTokensScoreConfig)
}

::google::protobuf::uint8* TopTokensScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.TopTokensScoreConfig)
  // optional int32 num_tokens = 1 [default = 10];
  if (has_num_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_tokens(), target);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopTokensScoreConfig.class_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_id(), target);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopTokensScoreConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  // optional string cooccurrence_dictionary_name = 4;
  if (has_cooccurrence_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopTokensScoreConfig.cooccurrence_dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cooccurrence_dictionary_name(), target);
  }

  // optional float eps = 5 [default = 1e-37];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->eps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.TopTokensScoreConfig)
  return target;
}

int TopTokensScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.TopTokensScoreConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 27u) {
    // optional int32 num_tokens = 1 [default = 10];
    if (has_num_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_tokens());
    }

    // optional string class_id = 2 [default = "@default_class"];
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

    // optional string cooccurrence_dictionary_name = 4;
    if (has_cooccurrence_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cooccurrence_dictionary_name());
    }

    // optional float eps = 5 [default = 1e-37];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopTokensScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.TopTokensScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopTokensScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopTokensScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.TopTokensScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.TopTokensScoreConfig)
    MergeFrom(*source);
  }
}

void TopTokensScoreConfig::MergeFrom(const TopTokensScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.TopTokensScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_tokens()) {
      set_num_tokens(from.num_tokens());
    }
    if (from.has_class_id()) {
      set_has_class_id();
      class_id_.AssignWithDefault(_default_class_id_, from.class_id_);
    }
    if (from.has_cooccurrence_dictionary_name()) {
      set_has_cooccurrence_dictionary_name();
      cooccurrence_dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cooccurrence_dictionary_name_);
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopTokensScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.TopTokensScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopTokensScoreConfig::CopyFrom(const TopTokensScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.TopTokensScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopTokensScoreConfig::IsInitialized() const {

  return true;
}

void TopTokensScoreConfig::Swap(TopTokensScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopTokensScoreConfig::InternalSwap(TopTokensScoreConfig* other) {
  std::swap(num_tokens_, other->num_tokens_);
  class_id_.Swap(&other->class_id_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  cooccurrence_dictionary_name_.Swap(&other->cooccurrence_dictionary_name_);
  std::swap(eps_, other->eps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopTokensScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopTokensScoreConfig_descriptor_;
  metadata.reflection = TopTokensScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopTokensScoreConfig

// optional int32 num_tokens = 1 [default = 10];
bool TopTokensScoreConfig::has_num_tokens() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopTokensScoreConfig::set_has_num_tokens() {
  _has_bits_[0] |= 0x00000001u;
}
void TopTokensScoreConfig::clear_has_num_tokens() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopTokensScoreConfig::clear_num_tokens() {
  num_tokens_ = 10;
  clear_has_num_tokens();
}
 ::google::protobuf::int32 TopTokensScoreConfig::num_tokens() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScoreConfig.num_tokens)
  return num_tokens_;
}
 void TopTokensScoreConfig::set_num_tokens(::google::protobuf::int32 value) {
  set_has_num_tokens();
  num_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.TopTokensScoreConfig.num_tokens)
}

// optional string class_id = 2 [default = "@default_class"];
bool TopTokensScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopTokensScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TopTokensScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopTokensScoreConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
 const ::std::string& TopTokensScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScoreConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
 void TopTokensScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.TopTokensScoreConfig.class_id)
}
 void TopTokensScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TopTokensScoreConfig.class_id)
}
 void TopTokensScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TopTokensScoreConfig.class_id)
}
 ::std::string* TopTokensScoreConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.TopTokensScoreConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
 ::std::string* TopTokensScoreConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.TopTokensScoreConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
 void TopTokensScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.TopTokensScoreConfig.class_id)
}

// repeated string topic_name = 3;
int TopTokensScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
void TopTokensScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& TopTokensScoreConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScoreConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* TopTokensScoreConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopTokensScoreConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void TopTokensScoreConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopTokensScoreConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void TopTokensScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopTokensScoreConfig.topic_name)
}
 void TopTokensScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopTokensScoreConfig.topic_name)
}
 ::std::string* TopTokensScoreConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopTokensScoreConfig.topic_name)
  return topic_name_.Add();
}
 void TopTokensScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScoreConfig.topic_name)
}
 void TopTokensScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopTokensScoreConfig.topic_name)
}
 void TopTokensScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopTokensScoreConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopTokensScoreConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScoreConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopTokensScoreConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScoreConfig.topic_name)
  return &topic_name_;
}

// optional string cooccurrence_dictionary_name = 4;
bool TopTokensScoreConfig::has_cooccurrence_dictionary_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TopTokensScoreConfig::set_has_cooccurrence_dictionary_name() {
  _has_bits_[0] |= 0x00000008u;
}
void TopTokensScoreConfig::clear_has_cooccurrence_dictionary_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void TopTokensScoreConfig::clear_cooccurrence_dictionary_name() {
  cooccurrence_dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooccurrence_dictionary_name();
}
 const ::std::string& TopTokensScoreConfig::cooccurrence_dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
  return cooccurrence_dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopTokensScoreConfig::set_cooccurrence_dictionary_name(const ::std::string& value) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
}
 void TopTokensScoreConfig::set_cooccurrence_dictionary_name(const char* value) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
}
 void TopTokensScoreConfig::set_cooccurrence_dictionary_name(const char* value, size_t size) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
}
 ::std::string* TopTokensScoreConfig::mutable_cooccurrence_dictionary_name() {
  set_has_cooccurrence_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
  return cooccurrence_dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopTokensScoreConfig::release_cooccurrence_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
  clear_has_cooccurrence_dictionary_name();
  return cooccurrence_dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopTokensScoreConfig::set_allocated_cooccurrence_dictionary_name(::std::string* cooccurrence_dictionary_name) {
  if (cooccurrence_dictionary_name != NULL) {
    set_has_cooccurrence_dictionary_name();
  } else {
    clear_has_cooccurrence_dictionary_name();
  }
  cooccurrence_dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooccurrence_dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
}

// optional float eps = 5 [default = 1e-37];
bool TopTokensScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TopTokensScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000010u;
}
void TopTokensScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000010u;
}
void TopTokensScoreConfig::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
 float TopTokensScoreConfig::eps() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScoreConfig.eps)
  return eps_;
}
 void TopTokensScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.TopTokensScoreConfig.eps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopTokensScore::kNumEntriesFieldNumber;
const int TopTokensScore::kTopicNameFieldNumber;
const int TopTokensScore::kTopicIndexFieldNumber;
const int TopTokensScore::kTokenFieldNumber;
const int TopTokensScore::kWeightFieldNumber;
const int TopTokensScore::kCoherenceFieldNumber;
const int TopTokensScore::kAverageCoherenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopTokensScore::TopTokensScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.TopTokensScore)
}

void TopTokensScore::InitAsDefaultInstance() {
}

TopTokensScore::TopTokensScore(const TopTokensScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.TopTokensScore)
}

void TopTokensScore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_entries_ = 0;
  average_coherence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopTokensScore::~TopTokensScore() {
  // @@protoc_insertion_point(destructor:artm.TopTokensScore)
  SharedDtor();
}

void TopTokensScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopTokensScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopTokensScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopTokensScore_descriptor_;
}

const TopTokensScore& TopTokensScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopTokensScore* TopTokensScore::default_instance_ = NULL;

TopTokensScore* TopTokensScore::New(::google::protobuf::Arena* arena) const {
  TopTokensScore* n = new TopTokensScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopTokensScore::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.TopTokensScore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TopTokensScore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TopTokensScore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_entries_, average_coherence_);

#undef ZR_HELPER_
#undef ZR_

  topic_name_.Clear();
  topic_index_.Clear();
  token_.Clear();
  weight_.Clear();
  coherence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopTokensScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.TopTokensScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_entries = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_entries_)));
          set_has_num_entries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 2;
      case 2: {
        if (tag == 18) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopTokensScore.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        if (input->ExpectTag(24)) goto parse_topic_index;
        break;
      }

      // repeated int32 topic_index = 3;
      case 3: {
        if (tag == 24) {
         parse_topic_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_topic_index())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_topic_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_topic_index;
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // repeated string token = 4;
      case 4: {
        if (tag == 34) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopTokensScore.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token;
        if (input->ExpectTag(45)) goto parse_weight;
        break;
      }

      // repeated float weight = 5;
      case 5: {
        if (tag == 45) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_weight())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_weight;
        if (input->ExpectTag(53)) goto parse_coherence;
        break;
      }

      // repeated float coherence = 6;
      case 6: {
        if (tag == 53) {
         parse_coherence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_coherence())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coherence())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_coherence;
        if (input->ExpectTag(61)) goto parse_average_coherence;
        break;
      }

      // optional float average_coherence = 7;
      case 7: {
        if (tag == 61) {
         parse_average_coherence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_coherence_)));
          set_has_average_coherence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.TopTokensScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.TopTokensScore)
  return false;
#undef DO_
}

void TopTokensScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.TopTokensScore)
  // optional int32 num_entries = 1;
  if (has_num_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_entries(), output);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopTokensScore.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->topic_name(i), output);
  }

  // repeated int32 topic_index = 3;
  for (int i = 0; i < this->topic_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->topic_index(i), output);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopTokensScore.token");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(i), output);
  }

  // repeated float weight = 5;
  for (int i = 0; i < this->weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->weight(i), output);
  }

  // repeated float coherence = 6;
  for (int i = 0; i < this->coherence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->coherence(i), output);
  }

  // optional float average_coherence = 7;
  if (has_average_coherence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->average_coherence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.TopTokensScore)
}

::google::protobuf::uint8* TopTokensScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.TopTokensScore)
  // optional int32 num_entries = 1;
  if (has_num_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_entries(), target);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopTokensScore.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->topic_name(i), target);
  }

  // repeated int32 topic_index = 3;
  for (int i = 0; i < this->topic_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->topic_index(i), target);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopTokensScore.token");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->token(i), target);
  }

  // repeated float weight = 5;
  for (int i = 0; i < this->weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->weight(i), target);
  }

  // repeated float coherence = 6;
  for (int i = 0; i < this->coherence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->coherence(i), target);
  }

  // optional float average_coherence = 7;
  if (has_average_coherence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->average_coherence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.TopTokensScore)
  return target;
}

int TopTokensScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.TopTokensScore)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 65u) {
    // optional int32 num_entries = 1;
    if (has_num_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_entries());
    }

    // optional float average_coherence = 7;
    if (has_average_coherence()) {
      total_size += 1 + 4;
    }

  }
  // repeated string topic_name = 2;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated int32 topic_index = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->topic_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->topic_index(i));
    }
    total_size += 1 * this->topic_index_size() + data_size;
  }

  // repeated string token = 4;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated float weight = 5;
  {
    int data_size = 0;
    data_size = 4 * this->weight_size();
    total_size += 1 * this->weight_size() + data_size;
  }

  // repeated float coherence = 6;
  {
    int data_size = 0;
    data_size = 4 * this->coherence_size();
    total_size += 1 * this->coherence_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopTokensScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.TopTokensScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopTokensScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopTokensScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.TopTokensScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.TopTokensScore)
    MergeFrom(*source);
  }
}

void TopTokensScore::MergeFrom(const TopTokensScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.TopTokensScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  topic_index_.MergeFrom(from.topic_index_);
  token_.MergeFrom(from.token_);
  weight_.MergeFrom(from.weight_);
  coherence_.MergeFrom(from.coherence_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_entries()) {
      set_num_entries(from.num_entries());
    }
    if (from.has_average_coherence()) {
      set_average_coherence(from.average_coherence());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopTokensScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.TopTokensScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopTokensScore::CopyFrom(const TopTokensScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.TopTokensScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopTokensScore::IsInitialized() const {

  return true;
}

void TopTokensScore::Swap(TopTokensScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopTokensScore::InternalSwap(TopTokensScore* other) {
  std::swap(num_entries_, other->num_entries_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  topic_index_.UnsafeArenaSwap(&other->topic_index_);
  token_.UnsafeArenaSwap(&other->token_);
  weight_.UnsafeArenaSwap(&other->weight_);
  coherence_.UnsafeArenaSwap(&other->coherence_);
  std::swap(average_coherence_, other->average_coherence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopTokensScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopTokensScore_descriptor_;
  metadata.reflection = TopTokensScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopTokensScore

// optional int32 num_entries = 1;
bool TopTokensScore::has_num_entries() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopTokensScore::set_has_num_entries() {
  _has_bits_[0] |= 0x00000001u;
}
void TopTokensScore::clear_has_num_entries() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopTokensScore::clear_num_entries() {
  num_entries_ = 0;
  clear_has_num_entries();
}
 ::google::protobuf::int32 TopTokensScore::num_entries() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.num_entries)
  return num_entries_;
}
 void TopTokensScore::set_num_entries(::google::protobuf::int32 value) {
  set_has_num_entries();
  num_entries_ = value;
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.num_entries)
}

// repeated string topic_name = 2;
int TopTokensScore::topic_name_size() const {
  return topic_name_.size();
}
void TopTokensScore::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& TopTokensScore::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* TopTokensScore::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopTokensScore.topic_name)
  return topic_name_.Mutable(index);
}
 void TopTokensScore::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void TopTokensScore::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopTokensScore.topic_name)
}
 void TopTokensScore::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopTokensScore.topic_name)
}
 ::std::string* TopTokensScore::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopTokensScore.topic_name)
  return topic_name_.Add();
}
 void TopTokensScore::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScore.topic_name)
}
 void TopTokensScore::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopTokensScore.topic_name)
}
 void TopTokensScore::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopTokensScore.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopTokensScore::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScore.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopTokensScore::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScore.topic_name)
  return &topic_name_;
}

// repeated int32 topic_index = 3;
int TopTokensScore::topic_index_size() const {
  return topic_index_.size();
}
void TopTokensScore::clear_topic_index() {
  topic_index_.Clear();
}
 ::google::protobuf::int32 TopTokensScore::topic_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.topic_index)
  return topic_index_.Get(index);
}
 void TopTokensScore::set_topic_index(int index, ::google::protobuf::int32 value) {
  topic_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.topic_index)
}
 void TopTokensScore::add_topic_index(::google::protobuf::int32 value) {
  topic_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScore.topic_index)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TopTokensScore::topic_index() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScore.topic_index)
  return topic_index_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TopTokensScore::mutable_topic_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScore.topic_index)
  return &topic_index_;
}

// repeated string token = 4;
int TopTokensScore::token_size() const {
  return token_.size();
}
void TopTokensScore::clear_token() {
  token_.Clear();
}
 const ::std::string& TopTokensScore::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.token)
  return token_.Get(index);
}
 ::std::string* TopTokensScore::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopTokensScore.token)
  return token_.Mutable(index);
}
 void TopTokensScore::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.token)
  token_.Mutable(index)->assign(value);
}
 void TopTokensScore::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopTokensScore.token)
}
 void TopTokensScore::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopTokensScore.token)
}
 ::std::string* TopTokensScore::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopTokensScore.token)
  return token_.Add();
}
 void TopTokensScore::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScore.token)
}
 void TopTokensScore::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopTokensScore.token)
}
 void TopTokensScore::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopTokensScore.token)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopTokensScore::token() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScore.token)
  return token_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopTokensScore::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScore.token)
  return &token_;
}

// repeated float weight = 5;
int TopTokensScore::weight_size() const {
  return weight_.size();
}
void TopTokensScore::clear_weight() {
  weight_.Clear();
}
 float TopTokensScore::weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.weight)
  return weight_.Get(index);
}
 void TopTokensScore::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.weight)
}
 void TopTokensScore::add_weight(float value) {
  weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScore.weight)
}
 const ::google::protobuf::RepeatedField< float >&
TopTokensScore::weight() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScore.weight)
  return weight_;
}
 ::google::protobuf::RepeatedField< float >*
TopTokensScore::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScore.weight)
  return &weight_;
}

// repeated float coherence = 6;
int TopTokensScore::coherence_size() const {
  return coherence_.size();
}
void TopTokensScore::clear_coherence() {
  coherence_.Clear();
}
 float TopTokensScore::coherence(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.coherence)
  return coherence_.Get(index);
}
 void TopTokensScore::set_coherence(int index, float value) {
  coherence_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.coherence)
}
 void TopTokensScore::add_coherence(float value) {
  coherence_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScore.coherence)
}
 const ::google::protobuf::RepeatedField< float >&
TopTokensScore::coherence() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScore.coherence)
  return coherence_;
}
 ::google::protobuf::RepeatedField< float >*
TopTokensScore::mutable_coherence() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScore.coherence)
  return &coherence_;
}

// optional float average_coherence = 7;
bool TopTokensScore::has_average_coherence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TopTokensScore::set_has_average_coherence() {
  _has_bits_[0] |= 0x00000040u;
}
void TopTokensScore::clear_has_average_coherence() {
  _has_bits_[0] &= ~0x00000040u;
}
void TopTokensScore::clear_average_coherence() {
  average_coherence_ = 0;
  clear_has_average_coherence();
}
 float TopTokensScore::average_coherence() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.average_coherence)
  return average_coherence_;
}
 void TopTokensScore::set_average_coherence(float value) {
  set_has_average_coherence();
  average_coherence_ = value;
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.average_coherence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThetaSnippetScoreConfig::kNumItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThetaSnippetScoreConfig::ThetaSnippetScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ThetaSnippetScoreConfig)
}

void ThetaSnippetScoreConfig::InitAsDefaultInstance() {
}

ThetaSnippetScoreConfig::ThetaSnippetScoreConfig(const ThetaSnippetScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ThetaSnippetScoreConfig)
}

void ThetaSnippetScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  num_items_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThetaSnippetScoreConfig::~ThetaSnippetScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.ThetaSnippetScoreConfig)
  SharedDtor();
}

void ThetaSnippetScoreConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThetaSnippetScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThetaSnippetScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThetaSnippetScoreConfig_descriptor_;
}

const ThetaSnippetScoreConfig& ThetaSnippetScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ThetaSnippetScoreConfig* ThetaSnippetScoreConfig::default_instance_ = NULL;

ThetaSnippetScoreConfig* ThetaSnippetScoreConfig::New(::google::protobuf::Arena* arena) const {
  ThetaSnippetScoreConfig* n = new ThetaSnippetScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThetaSnippetScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ThetaSnippetScoreConfig)
  num_items_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ThetaSnippetScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ThetaSnippetScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_items = 4 [default = 10];
      case 4: {
        if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_items_)));
          set_has_num_items();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ThetaSnippetScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ThetaSnippetScoreConfig)
  return false;
#undef DO_
}

void ThetaSnippetScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ThetaSnippetScoreConfig)
  // optional int32 num_items = 4 [default = 10];
  if (has_num_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_items(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ThetaSnippetScoreConfig)
}

::google::protobuf::uint8* ThetaSnippetScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ThetaSnippetScoreConfig)
  // optional int32 num_items = 4 [default = 10];
  if (has_num_items()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_items(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ThetaSnippetScoreConfig)
  return target;
}

int ThetaSnippetScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ThetaSnippetScoreConfig)
  int total_size = 0;

  // optional int32 num_items = 4 [default = 10];
  if (has_num_items()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_items());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThetaSnippetScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ThetaSnippetScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ThetaSnippetScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ThetaSnippetScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ThetaSnippetScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ThetaSnippetScoreConfig)
    MergeFrom(*source);
  }
}

void ThetaSnippetScoreConfig::MergeFrom(const ThetaSnippetScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ThetaSnippetScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_items()) {
      set_num_items(from.num_items());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ThetaSnippetScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ThetaSnippetScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThetaSnippetScoreConfig::CopyFrom(const ThetaSnippetScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ThetaSnippetScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThetaSnippetScoreConfig::IsInitialized() const {

  return true;
}

void ThetaSnippetScoreConfig::Swap(ThetaSnippetScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThetaSnippetScoreConfig::InternalSwap(ThetaSnippetScoreConfig* other) {
  std::swap(num_items_, other->num_items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThetaSnippetScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThetaSnippetScoreConfig_descriptor_;
  metadata.reflection = ThetaSnippetScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThetaSnippetScoreConfig

// optional int32 num_items = 4 [default = 10];
bool ThetaSnippetScoreConfig::has_num_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ThetaSnippetScoreConfig::set_has_num_items() {
  _has_bits_[0] |= 0x00000001u;
}
void ThetaSnippetScoreConfig::clear_has_num_items() {
  _has_bits_[0] &= ~0x00000001u;
}
void ThetaSnippetScoreConfig::clear_num_items() {
  num_items_ = 10;
  clear_has_num_items();
}
 ::google::protobuf::int32 ThetaSnippetScoreConfig::num_items() const {
  // @@protoc_insertion_point(field_get:artm.ThetaSnippetScoreConfig.num_items)
  return num_items_;
}
 void ThetaSnippetScoreConfig::set_num_items(::google::protobuf::int32 value) {
  set_has_num_items();
  num_items_ = value;
  // @@protoc_insertion_point(field_set:artm.ThetaSnippetScoreConfig.num_items)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThetaSnippetScore::kItemIdFieldNumber;
const int ThetaSnippetScore::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThetaSnippetScore::ThetaSnippetScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ThetaSnippetScore)
}

void ThetaSnippetScore::InitAsDefaultInstance() {
}

ThetaSnippetScore::ThetaSnippetScore(const ThetaSnippetScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ThetaSnippetScore)
}

void ThetaSnippetScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThetaSnippetScore::~ThetaSnippetScore() {
  // @@protoc_insertion_point(destructor:artm.ThetaSnippetScore)
  SharedDtor();
}

void ThetaSnippetScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThetaSnippetScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThetaSnippetScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThetaSnippetScore_descriptor_;
}

const ThetaSnippetScore& ThetaSnippetScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ThetaSnippetScore* ThetaSnippetScore::default_instance_ = NULL;

ThetaSnippetScore* ThetaSnippetScore::New(::google::protobuf::Arena* arena) const {
  ThetaSnippetScore* n = new ThetaSnippetScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThetaSnippetScore::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ThetaSnippetScore)
  item_id_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ThetaSnippetScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ThetaSnippetScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 item_id = 1;
      case 1: {
        if (tag == 8) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_item_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_item_id;
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .artm.FloatArray values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ThetaSnippetScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ThetaSnippetScore)
  return false;
#undef DO_
}

void ThetaSnippetScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ThetaSnippetScore)
  // repeated int32 item_id = 1;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->item_id(i), output);
  }

  // repeated .artm.FloatArray values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ThetaSnippetScore)
}

::google::protobuf::uint8* ThetaSnippetScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ThetaSnippetScore)
  // repeated int32 item_id = 1;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->item_id(i), target);
  }

  // repeated .artm.FloatArray values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->values(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ThetaSnippetScore)
  return target;
}

int ThetaSnippetScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ThetaSnippetScore)
  int total_size = 0;

  // repeated int32 item_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated .artm.FloatArray values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThetaSnippetScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ThetaSnippetScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ThetaSnippetScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ThetaSnippetScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ThetaSnippetScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ThetaSnippetScore)
    MergeFrom(*source);
  }
}

void ThetaSnippetScore::MergeFrom(const ThetaSnippetScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ThetaSnippetScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  item_id_.MergeFrom(from.item_id_);
  values_.MergeFrom(from.values_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ThetaSnippetScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ThetaSnippetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThetaSnippetScore::CopyFrom(const ThetaSnippetScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ThetaSnippetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThetaSnippetScore::IsInitialized() const {

  return true;
}

void ThetaSnippetScore::Swap(ThetaSnippetScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThetaSnippetScore::InternalSwap(ThetaSnippetScore* other) {
  item_id_.UnsafeArenaSwap(&other->item_id_);
  values_.UnsafeArenaSwap(&other->values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThetaSnippetScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThetaSnippetScore_descriptor_;
  metadata.reflection = ThetaSnippetScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThetaSnippetScore

// repeated int32 item_id = 1;
int ThetaSnippetScore::item_id_size() const {
  return item_id_.size();
}
void ThetaSnippetScore::clear_item_id() {
  item_id_.Clear();
}
 ::google::protobuf::int32 ThetaSnippetScore::item_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaSnippetScore.item_id)
  return item_id_.Get(index);
}
 void ThetaSnippetScore::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ThetaSnippetScore.item_id)
}
 void ThetaSnippetScore::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ThetaSnippetScore.item_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ThetaSnippetScore::item_id() const {
  // @@protoc_insertion_point(field_list:artm.ThetaSnippetScore.item_id)
  return item_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ThetaSnippetScore::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaSnippetScore.item_id)
  return &item_id_;
}

// repeated .artm.FloatArray values = 2;
int ThetaSnippetScore::values_size() const {
  return values_.size();
}
void ThetaSnippetScore::clear_values() {
  values_.Clear();
}
const ::artm::FloatArray& ThetaSnippetScore::values(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaSnippetScore.values)
  return values_.Get(index);
}
::artm::FloatArray* ThetaSnippetScore::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ThetaSnippetScore.values)
  return values_.Mutable(index);
}
::artm::FloatArray* ThetaSnippetScore::add_values() {
  // @@protoc_insertion_point(field_add:artm.ThetaSnippetScore.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
ThetaSnippetScore::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaSnippetScore.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
ThetaSnippetScore::values() const {
  // @@protoc_insertion_point(field_list:artm.ThetaSnippetScore.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* TopicKernelScoreConfig::_default_class_id_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicKernelScoreConfig::kEpsFieldNumber;
const int TopicKernelScoreConfig::kClassIdFieldNumber;
const int TopicKernelScoreConfig::kTopicNameFieldNumber;
const int TopicKernelScoreConfig::kProbabilityMassThresholdFieldNumber;
const int TopicKernelScoreConfig::kCooccurrenceDictionaryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicKernelScoreConfig::TopicKernelScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.TopicKernelScoreConfig)
}

void TopicKernelScoreConfig::InitAsDefaultInstance() {
}

TopicKernelScoreConfig::TopicKernelScoreConfig(const TopicKernelScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.TopicKernelScoreConfig)
}

void TopicKernelScoreConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eps_ = 1e-37f;
  class_id_.UnsafeSetDefault(_default_class_id_);
  probability_mass_threshold_ = 0.1f;
  cooccurrence_dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicKernelScoreConfig::~TopicKernelScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.TopicKernelScoreConfig)
  SharedDtor();
}

void TopicKernelScoreConfig::SharedDtor() {
  class_id_.DestroyNoArena(_default_class_id_);
  cooccurrence_dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TopicKernelScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicKernelScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicKernelScoreConfig_descriptor_;
}

const TopicKernelScoreConfig& TopicKernelScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicKernelScoreConfig* TopicKernelScoreConfig::default_instance_ = NULL;

TopicKernelScoreConfig* TopicKernelScoreConfig::New(::google::protobuf::Arena* arena) const {
  TopicKernelScoreConfig* n = new TopicKernelScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicKernelScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.TopicKernelScoreConfig)
  if (_has_bits_[0 / 32] & 27u) {
    eps_ = 1e-37f;
    if (has_class_id()) {
      class_id_.ClearToDefaultNoArena(_default_class_id_);
    }
    probability_mass_threshold_ = 0.1f;
    if (has_cooccurrence_dictionary_name()) {
      cooccurrence_dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopicKernelScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.TopicKernelScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float eps = 1 [default = 1e-37];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // optional string class_id = 2 [default = "@default_class"];
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicKernelScoreConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 3;
      case 3: {
        if (tag == 26) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicKernelScoreConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectTag(37)) goto parse_probability_mass_threshold;
        break;
      }

      // optional float probability_mass_threshold = 4 [default = 0.1];
      case 4: {
        if (tag == 37) {
         parse_probability_mass_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_mass_threshold_)));
          set_has_probability_mass_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cooccurrence_dictionary_name;
        break;
      }

      // optional string cooccurrence_dictionary_name = 5;
      case 5: {
        if (tag == 42) {
         parse_cooccurrence_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cooccurrence_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicKernelScoreConfig.cooccurrence_dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.TopicKernelScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.TopicKernelScoreConfig)
  return false;
#undef DO_
}

void TopicKernelScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.TopicKernelScoreConfig)
  // optional float eps = 1 [default = 1e-37];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eps(), output);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicKernelScoreConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->class_id(), output);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicKernelScoreConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  // optional float probability_mass_threshold = 4 [default = 0.1];
  if (has_probability_mass_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->probability_mass_threshold(), output);
  }

  // optional string cooccurrence_dictionary_name = 5;
  if (has_cooccurrence_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicKernelScoreConfig.cooccurrence_dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cooccurrence_dictionary_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.TopicKernelScoreConfig)
}

::google::protobuf::uint8* TopicKernelScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.TopicKernelScoreConfig)
  // optional float eps = 1 [default = 1e-37];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eps(), target);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicKernelScoreConfig.class_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_id(), target);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicKernelScoreConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  // optional float probability_mass_threshold = 4 [default = 0.1];
  if (has_probability_mass_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->probability_mass_threshold(), target);
  }

  // optional string cooccurrence_dictionary_name = 5;
  if (has_cooccurrence_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicKernelScoreConfig.cooccurrence_dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cooccurrence_dictionary_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.TopicKernelScoreConfig)
  return target;
}

int TopicKernelScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.TopicKernelScoreConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 27u) {
    // optional float eps = 1 [default = 1e-37];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional string class_id = 2 [default = "@default_class"];
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

    // optional float probability_mass_threshold = 4 [default = 0.1];
    if (has_probability_mass_threshold()) {
      total_size += 1 + 4;
    }

    // optional string cooccurrence_dictionary_name = 5;
    if (has_cooccurrence_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cooccurrence_dictionary_name());
    }

  }
  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicKernelScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.TopicKernelScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicKernelScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicKernelScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.TopicKernelScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.TopicKernelScoreConfig)
    MergeFrom(*source);
  }
}

void TopicKernelScoreConfig::MergeFrom(const TopicKernelScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.TopicKernelScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_class_id()) {
      set_has_class_id();
      class_id_.AssignWithDefault(_default_class_id_, from.class_id_);
    }
    if (from.has_probability_mass_threshold()) {
      set_probability_mass_threshold(from.probability_mass_threshold());
    }
    if (from.has_cooccurrence_dictionary_name()) {
      set_has_cooccurrence_dictionary_name();
      cooccurrence_dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cooccurrence_dictionary_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopicKernelScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.TopicKernelScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicKernelScoreConfig::CopyFrom(const TopicKernelScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.TopicKernelScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicKernelScoreConfig::IsInitialized() const {

  return true;
}

void TopicKernelScoreConfig::Swap(TopicKernelScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicKernelScoreConfig::InternalSwap(TopicKernelScoreConfig* other) {
  std::swap(eps_, other->eps_);
  class_id_.Swap(&other->class_id_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  std::swap(probability_mass_threshold_, other->probability_mass_threshold_);
  cooccurrence_dictionary_name_.Swap(&other->cooccurrence_dictionary_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicKernelScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicKernelScoreConfig_descriptor_;
  metadata.reflection = TopicKernelScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicKernelScoreConfig

// optional float eps = 1 [default = 1e-37];
bool TopicKernelScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopicKernelScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
void TopicKernelScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopicKernelScoreConfig::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
 float TopicKernelScoreConfig::eps() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScoreConfig.eps)
  return eps_;
}
 void TopicKernelScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScoreConfig.eps)
}

// optional string class_id = 2 [default = "@default_class"];
bool TopicKernelScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopicKernelScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TopicKernelScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopicKernelScoreConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
 const ::std::string& TopicKernelScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScoreConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
 void TopicKernelScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScoreConfig.class_id)
}
 void TopicKernelScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TopicKernelScoreConfig.class_id)
}
 void TopicKernelScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TopicKernelScoreConfig.class_id)
}
 ::std::string* TopicKernelScoreConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.TopicKernelScoreConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
 ::std::string* TopicKernelScoreConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.TopicKernelScoreConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
 void TopicKernelScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.TopicKernelScoreConfig.class_id)
}

// repeated string topic_name = 3;
int TopicKernelScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
void TopicKernelScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& TopicKernelScoreConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScoreConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* TopicKernelScoreConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicKernelScoreConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void TopicKernelScoreConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicKernelScoreConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void TopicKernelScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicKernelScoreConfig.topic_name)
}
 void TopicKernelScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicKernelScoreConfig.topic_name)
}
 ::std::string* TopicKernelScoreConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicKernelScoreConfig.topic_name)
  return topic_name_.Add();
}
 void TopicKernelScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScoreConfig.topic_name)
}
 void TopicKernelScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicKernelScoreConfig.topic_name)
}
 void TopicKernelScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicKernelScoreConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicKernelScoreConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScoreConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicKernelScoreConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScoreConfig.topic_name)
  return &topic_name_;
}

// optional float probability_mass_threshold = 4 [default = 0.1];
bool TopicKernelScoreConfig::has_probability_mass_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TopicKernelScoreConfig::set_has_probability_mass_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void TopicKernelScoreConfig::clear_has_probability_mass_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void TopicKernelScoreConfig::clear_probability_mass_threshold() {
  probability_mass_threshold_ = 0.1f;
  clear_has_probability_mass_threshold();
}
 float TopicKernelScoreConfig::probability_mass_threshold() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScoreConfig.probability_mass_threshold)
  return probability_mass_threshold_;
}
 void TopicKernelScoreConfig::set_probability_mass_threshold(float value) {
  set_has_probability_mass_threshold();
  probability_mass_threshold_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScoreConfig.probability_mass_threshold)
}

// optional string cooccurrence_dictionary_name = 5;
bool TopicKernelScoreConfig::has_cooccurrence_dictionary_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TopicKernelScoreConfig::set_has_cooccurrence_dictionary_name() {
  _has_bits_[0] |= 0x00000010u;
}
void TopicKernelScoreConfig::clear_has_cooccurrence_dictionary_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void TopicKernelScoreConfig::clear_cooccurrence_dictionary_name() {
  cooccurrence_dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooccurrence_dictionary_name();
}
 const ::std::string& TopicKernelScoreConfig::cooccurrence_dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
  return cooccurrence_dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicKernelScoreConfig::set_cooccurrence_dictionary_name(const ::std::string& value) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
}
 void TopicKernelScoreConfig::set_cooccurrence_dictionary_name(const char* value) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
}
 void TopicKernelScoreConfig::set_cooccurrence_dictionary_name(const char* value, size_t size) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
}
 ::std::string* TopicKernelScoreConfig::mutable_cooccurrence_dictionary_name() {
  set_has_cooccurrence_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
  return cooccurrence_dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopicKernelScoreConfig::release_cooccurrence_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
  clear_has_cooccurrence_dictionary_name();
  return cooccurrence_dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicKernelScoreConfig::set_allocated_cooccurrence_dictionary_name(::std::string* cooccurrence_dictionary_name) {
  if (cooccurrence_dictionary_name != NULL) {
    set_has_cooccurrence_dictionary_name();
  } else {
    clear_has_cooccurrence_dictionary_name();
  }
  cooccurrence_dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooccurrence_dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicKernelScore::kKernelSizeFieldNumber;
const int TopicKernelScore::kKernelPurityFieldNumber;
const int TopicKernelScore::kKernelContrastFieldNumber;
const int TopicKernelScore::kAverageKernelSizeFieldNumber;
const int TopicKernelScore::kAverageKernelPurityFieldNumber;
const int TopicKernelScore::kAverageKernelContrastFieldNumber;
const int TopicKernelScore::kCoherenceFieldNumber;
const int TopicKernelScore::kAverageCoherenceFieldNumber;
const int TopicKernelScore::kKernelTokensFieldNumber;
const int TopicKernelScore::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicKernelScore::TopicKernelScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.TopicKernelScore)
}

void TopicKernelScore::InitAsDefaultInstance() {
}

TopicKernelScore::TopicKernelScore(const TopicKernelScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.TopicKernelScore)
}

void TopicKernelScore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  average_kernel_size_ = 0;
  average_kernel_purity_ = 0;
  average_kernel_contrast_ = 0;
  average_coherence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicKernelScore::~TopicKernelScore() {
  // @@protoc_insertion_point(destructor:artm.TopicKernelScore)
  SharedDtor();
}

void TopicKernelScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicKernelScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicKernelScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicKernelScore_descriptor_;
}

const TopicKernelScore& TopicKernelScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicKernelScore* TopicKernelScore::default_instance_ = NULL;

TopicKernelScore* TopicKernelScore::New(::google::protobuf::Arena* arena) const {
  TopicKernelScore* n = new TopicKernelScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicKernelScore::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.TopicKernelScore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TopicKernelScore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TopicKernelScore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(average_kernel_size_, average_kernel_purity_);
  ZR_(average_kernel_contrast_, average_coherence_);

#undef ZR_HELPER_
#undef ZR_

  kernel_size_.Clear();
  kernel_purity_.Clear();
  kernel_contrast_.Clear();
  coherence_.Clear();
  kernel_tokens_.Clear();
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopicKernelScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.TopicKernelScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float kernel_size = 1;
      case 1: {
        if (tag == 13) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_kernel_size())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kernel_size())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_kernel_size;
        if (input->ExpectTag(21)) goto parse_kernel_purity;
        break;
      }

      // repeated float kernel_purity = 2;
      case 2: {
        if (tag == 21) {
         parse_kernel_purity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_kernel_purity())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kernel_purity())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_kernel_purity;
        if (input->ExpectTag(29)) goto parse_kernel_contrast;
        break;
      }

      // repeated float kernel_contrast = 3;
      case 3: {
        if (tag == 29) {
         parse_kernel_contrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_kernel_contrast())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kernel_contrast())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_kernel_contrast;
        if (input->ExpectTag(37)) goto parse_average_kernel_size;
        break;
      }

      // optional float average_kernel_size = 4;
      case 4: {
        if (tag == 37) {
         parse_average_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_kernel_size_)));
          set_has_average_kernel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_average_kernel_purity;
        break;
      }

      // optional float average_kernel_purity = 5;
      case 5: {
        if (tag == 45) {
         parse_average_kernel_purity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_kernel_purity_)));
          set_has_average_kernel_purity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_average_kernel_contrast;
        break;
      }

      // optional float average_kernel_contrast = 6;
      case 6: {
        if (tag == 53) {
         parse_average_kernel_contrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_kernel_contrast_)));
          set_has_average_kernel_contrast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_coherence;
        break;
      }

      // repeated float coherence = 7;
      case 7: {
        if (tag == 61) {
         parse_coherence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_coherence())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coherence())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_coherence;
        if (input->ExpectTag(69)) goto parse_average_coherence;
        break;
      }

      // optional float average_coherence = 8;
      case 8: {
        if (tag == 69) {
         parse_average_coherence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_coherence_)));
          set_has_average_coherence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_kernel_tokens;
        break;
      }

      // repeated .artm.StringArray kernel_tokens = 9;
      case 9: {
        if (tag == 74) {
         parse_kernel_tokens:
          DO_(input->IncrementRecursionDepth());
         parse_loop_kernel_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kernel_tokens()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_kernel_tokens;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 10;
      case 10: {
        if (tag == 82) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicKernelScore.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_topic_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.TopicKernelScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.TopicKernelScore)
  return false;
#undef DO_
}

void TopicKernelScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.TopicKernelScore)
  // repeated float kernel_size = 1;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->kernel_size(i), output);
  }

  // repeated float kernel_purity = 2;
  for (int i = 0; i < this->kernel_purity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->kernel_purity(i), output);
  }

  // repeated float kernel_contrast = 3;
  for (int i = 0; i < this->kernel_contrast_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->kernel_contrast(i), output);
  }

  // optional float average_kernel_size = 4;
  if (has_average_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->average_kernel_size(), output);
  }

  // optional float average_kernel_purity = 5;
  if (has_average_kernel_purity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->average_kernel_purity(), output);
  }

  // optional float average_kernel_contrast = 6;
  if (has_average_kernel_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->average_kernel_contrast(), output);
  }

  // repeated float coherence = 7;
  for (int i = 0; i < this->coherence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->coherence(i), output);
  }

  // optional float average_coherence = 8;
  if (has_average_coherence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->average_coherence(), output);
  }

  // repeated .artm.StringArray kernel_tokens = 9;
  for (unsigned int i = 0, n = this->kernel_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->kernel_tokens(i), output);
  }

  // repeated string topic_name = 10;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicKernelScore.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->topic_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.TopicKernelScore)
}

::google::protobuf::uint8* TopicKernelScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.TopicKernelScore)
  // repeated float kernel_size = 1;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->kernel_size(i), target);
  }

  // repeated float kernel_purity = 2;
  for (int i = 0; i < this->kernel_purity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->kernel_purity(i), target);
  }

  // repeated float kernel_contrast = 3;
  for (int i = 0; i < this->kernel_contrast_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->kernel_contrast(i), target);
  }

  // optional float average_kernel_size = 4;
  if (has_average_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->average_kernel_size(), target);
  }

  // optional float average_kernel_purity = 5;
  if (has_average_kernel_purity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->average_kernel_purity(), target);
  }

  // optional float average_kernel_contrast = 6;
  if (has_average_kernel_contrast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->average_kernel_contrast(), target);
  }

  // repeated float coherence = 7;
  for (int i = 0; i < this->coherence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->coherence(i), target);
  }

  // optional float average_coherence = 8;
  if (has_average_coherence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->average_coherence(), target);
  }

  // repeated .artm.StringArray kernel_tokens = 9;
  for (unsigned int i = 0, n = this->kernel_tokens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->kernel_tokens(i), false, target);
  }

  // repeated string topic_name = 10;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicKernelScore.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->topic_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.TopicKernelScore)
  return target;
}

int TopicKernelScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.TopicKernelScore)
  int total_size = 0;

  if (_has_bits_[3 / 32] & 184u) {
    // optional float average_kernel_size = 4;
    if (has_average_kernel_size()) {
      total_size += 1 + 4;
    }

    // optional float average_kernel_purity = 5;
    if (has_average_kernel_purity()) {
      total_size += 1 + 4;
    }

    // optional float average_kernel_contrast = 6;
    if (has_average_kernel_contrast()) {
      total_size += 1 + 4;
    }

    // optional float average_coherence = 8;
    if (has_average_coherence()) {
      total_size += 1 + 4;
    }

  }
  // repeated float kernel_size = 1;
  {
    int data_size = 0;
    data_size = 4 * this->kernel_size_size();
    total_size += 1 * this->kernel_size_size() + data_size;
  }

  // repeated float kernel_purity = 2;
  {
    int data_size = 0;
    data_size = 4 * this->kernel_purity_size();
    total_size += 1 * this->kernel_purity_size() + data_size;
  }

  // repeated float kernel_contrast = 3;
  {
    int data_size = 0;
    data_size = 4 * this->kernel_contrast_size();
    total_size += 1 * this->kernel_contrast_size() + data_size;
  }

  // repeated float coherence = 7;
  {
    int data_size = 0;
    data_size = 4 * this->coherence_size();
    total_size += 1 * this->coherence_size() + data_size;
  }

  // repeated .artm.StringArray kernel_tokens = 9;
  total_size += 1 * this->kernel_tokens_size();
  for (int i = 0; i < this->kernel_tokens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kernel_tokens(i));
  }

  // repeated string topic_name = 10;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicKernelScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.TopicKernelScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicKernelScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicKernelScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.TopicKernelScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.TopicKernelScore)
    MergeFrom(*source);
  }
}

void TopicKernelScore::MergeFrom(const TopicKernelScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.TopicKernelScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  kernel_size_.MergeFrom(from.kernel_size_);
  kernel_purity_.MergeFrom(from.kernel_purity_);
  kernel_contrast_.MergeFrom(from.kernel_contrast_);
  coherence_.MergeFrom(from.coherence_);
  kernel_tokens_.MergeFrom(from.kernel_tokens_);
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_average_kernel_size()) {
      set_average_kernel_size(from.average_kernel_size());
    }
    if (from.has_average_kernel_purity()) {
      set_average_kernel_purity(from.average_kernel_purity());
    }
    if (from.has_average_kernel_contrast()) {
      set_average_kernel_contrast(from.average_kernel_contrast());
    }
    if (from.has_average_coherence()) {
      set_average_coherence(from.average_coherence());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopicKernelScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.TopicKernelScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicKernelScore::CopyFrom(const TopicKernelScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.TopicKernelScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicKernelScore::IsInitialized() const {

  return true;
}

void TopicKernelScore::Swap(TopicKernelScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicKernelScore::InternalSwap(TopicKernelScore* other) {
  kernel_size_.UnsafeArenaSwap(&other->kernel_size_);
  kernel_purity_.UnsafeArenaSwap(&other->kernel_purity_);
  kernel_contrast_.UnsafeArenaSwap(&other->kernel_contrast_);
  std::swap(average_kernel_size_, other->average_kernel_size_);
  std::swap(average_kernel_purity_, other->average_kernel_purity_);
  std::swap(average_kernel_contrast_, other->average_kernel_contrast_);
  coherence_.UnsafeArenaSwap(&other->coherence_);
  std::swap(average_coherence_, other->average_coherence_);
  kernel_tokens_.UnsafeArenaSwap(&other->kernel_tokens_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicKernelScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicKernelScore_descriptor_;
  metadata.reflection = TopicKernelScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicKernelScore

// repeated float kernel_size = 1;
int TopicKernelScore::kernel_size_size() const {
  return kernel_size_.size();
}
void TopicKernelScore::clear_kernel_size() {
  kernel_size_.Clear();
}
 float TopicKernelScore::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.kernel_size)
  return kernel_size_.Get(index);
}
 void TopicKernelScore::set_kernel_size(int index, float value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.kernel_size)
}
 void TopicKernelScore::add_kernel_size(float value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.kernel_size)
}
 const ::google::protobuf::RepeatedField< float >&
TopicKernelScore::kernel_size() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.kernel_size)
  return kernel_size_;
}
 ::google::protobuf::RepeatedField< float >*
TopicKernelScore::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.kernel_size)
  return &kernel_size_;
}

// repeated float kernel_purity = 2;
int TopicKernelScore::kernel_purity_size() const {
  return kernel_purity_.size();
}
void TopicKernelScore::clear_kernel_purity() {
  kernel_purity_.Clear();
}
 float TopicKernelScore::kernel_purity(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.kernel_purity)
  return kernel_purity_.Get(index);
}
 void TopicKernelScore::set_kernel_purity(int index, float value) {
  kernel_purity_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.kernel_purity)
}
 void TopicKernelScore::add_kernel_purity(float value) {
  kernel_purity_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.kernel_purity)
}
 const ::google::protobuf::RepeatedField< float >&
TopicKernelScore::kernel_purity() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.kernel_purity)
  return kernel_purity_;
}
 ::google::protobuf::RepeatedField< float >*
TopicKernelScore::mutable_kernel_purity() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.kernel_purity)
  return &kernel_purity_;
}

// repeated float kernel_contrast = 3;
int TopicKernelScore::kernel_contrast_size() const {
  return kernel_contrast_.size();
}
void TopicKernelScore::clear_kernel_contrast() {
  kernel_contrast_.Clear();
}
 float TopicKernelScore::kernel_contrast(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.kernel_contrast)
  return kernel_contrast_.Get(index);
}
 void TopicKernelScore::set_kernel_contrast(int index, float value) {
  kernel_contrast_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.kernel_contrast)
}
 void TopicKernelScore::add_kernel_contrast(float value) {
  kernel_contrast_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.kernel_contrast)
}
 const ::google::protobuf::RepeatedField< float >&
TopicKernelScore::kernel_contrast() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.kernel_contrast)
  return kernel_contrast_;
}
 ::google::protobuf::RepeatedField< float >*
TopicKernelScore::mutable_kernel_contrast() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.kernel_contrast)
  return &kernel_contrast_;
}

// optional float average_kernel_size = 4;
bool TopicKernelScore::has_average_kernel_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TopicKernelScore::set_has_average_kernel_size() {
  _has_bits_[0] |= 0x00000008u;
}
void TopicKernelScore::clear_has_average_kernel_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void TopicKernelScore::clear_average_kernel_size() {
  average_kernel_size_ = 0;
  clear_has_average_kernel_size();
}
 float TopicKernelScore::average_kernel_size() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.average_kernel_size)
  return average_kernel_size_;
}
 void TopicKernelScore::set_average_kernel_size(float value) {
  set_has_average_kernel_size();
  average_kernel_size_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.average_kernel_size)
}

// optional float average_kernel_purity = 5;
bool TopicKernelScore::has_average_kernel_purity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TopicKernelScore::set_has_average_kernel_purity() {
  _has_bits_[0] |= 0x00000010u;
}
void TopicKernelScore::clear_has_average_kernel_purity() {
  _has_bits_[0] &= ~0x00000010u;
}
void TopicKernelScore::clear_average_kernel_purity() {
  average_kernel_purity_ = 0;
  clear_has_average_kernel_purity();
}
 float TopicKernelScore::average_kernel_purity() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.average_kernel_purity)
  return average_kernel_purity_;
}
 void TopicKernelScore::set_average_kernel_purity(float value) {
  set_has_average_kernel_purity();
  average_kernel_purity_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.average_kernel_purity)
}

// optional float average_kernel_contrast = 6;
bool TopicKernelScore::has_average_kernel_contrast() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TopicKernelScore::set_has_average_kernel_contrast() {
  _has_bits_[0] |= 0x00000020u;
}
void TopicKernelScore::clear_has_average_kernel_contrast() {
  _has_bits_[0] &= ~0x00000020u;
}
void TopicKernelScore::clear_average_kernel_contrast() {
  average_kernel_contrast_ = 0;
  clear_has_average_kernel_contrast();
}
 float TopicKernelScore::average_kernel_contrast() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.average_kernel_contrast)
  return average_kernel_contrast_;
}
 void TopicKernelScore::set_average_kernel_contrast(float value) {
  set_has_average_kernel_contrast();
  average_kernel_contrast_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.average_kernel_contrast)
}

// repeated float coherence = 7;
int TopicKernelScore::coherence_size() const {
  return coherence_.size();
}
void TopicKernelScore::clear_coherence() {
  coherence_.Clear();
}
 float TopicKernelScore::coherence(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.coherence)
  return coherence_.Get(index);
}
 void TopicKernelScore::set_coherence(int index, float value) {
  coherence_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.coherence)
}
 void TopicKernelScore::add_coherence(float value) {
  coherence_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.coherence)
}
 const ::google::protobuf::RepeatedField< float >&
TopicKernelScore::coherence() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.coherence)
  return coherence_;
}
 ::google::protobuf::RepeatedField< float >*
TopicKernelScore::mutable_coherence() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.coherence)
  return &coherence_;
}

// optional float average_coherence = 8;
bool TopicKernelScore::has_average_coherence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TopicKernelScore::set_has_average_coherence() {
  _has_bits_[0] |= 0x00000080u;
}
void TopicKernelScore::clear_has_average_coherence() {
  _has_bits_[0] &= ~0x00000080u;
}
void TopicKernelScore::clear_average_coherence() {
  average_coherence_ = 0;
  clear_has_average_coherence();
}
 float TopicKernelScore::average_coherence() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.average_coherence)
  return average_coherence_;
}
 void TopicKernelScore::set_average_coherence(float value) {
  set_has_average_coherence();
  average_coherence_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.average_coherence)
}

// repeated .artm.StringArray kernel_tokens = 9;
int TopicKernelScore::kernel_tokens_size() const {
  return kernel_tokens_.size();
}
void TopicKernelScore::clear_kernel_tokens() {
  kernel_tokens_.Clear();
}
const ::artm::StringArray& TopicKernelScore::kernel_tokens(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.kernel_tokens)
  return kernel_tokens_.Get(index);
}
::artm::StringArray* TopicKernelScore::mutable_kernel_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicKernelScore.kernel_tokens)
  return kernel_tokens_.Mutable(index);
}
::artm::StringArray* TopicKernelScore::add_kernel_tokens() {
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.kernel_tokens)
  return kernel_tokens_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::StringArray >*
TopicKernelScore::mutable_kernel_tokens() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.kernel_tokens)
  return &kernel_tokens_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::StringArray >&
TopicKernelScore::kernel_tokens() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.kernel_tokens)
  return kernel_tokens_;
}

// repeated string topic_name = 10;
int TopicKernelScore::topic_name_size() const {
  return topic_name_.size();
}
void TopicKernelScore::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& TopicKernelScore::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* TopicKernelScore::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicKernelScore.topic_name)
  return topic_name_.Mutable(index);
}
 void TopicKernelScore::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void TopicKernelScore::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicKernelScore.topic_name)
}
 void TopicKernelScore::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicKernelScore.topic_name)
}
 ::std::string* TopicKernelScore::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicKernelScore.topic_name)
  return topic_name_.Add();
}
 void TopicKernelScore::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.topic_name)
}
 void TopicKernelScore::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicKernelScore.topic_name)
}
 void TopicKernelScore::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicKernelScore.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicKernelScore::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicKernelScore::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.topic_name)
  return &topic_name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicMassPhiScoreConfig::kEpsFieldNumber;
const int TopicMassPhiScoreConfig::kClassIdFieldNumber;
const int TopicMassPhiScoreConfig::kTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicMassPhiScoreConfig::TopicMassPhiScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.TopicMassPhiScoreConfig)
}

void TopicMassPhiScoreConfig::InitAsDefaultInstance() {
}

TopicMassPhiScoreConfig::TopicMassPhiScoreConfig(const TopicMassPhiScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.TopicMassPhiScoreConfig)
}

void TopicMassPhiScoreConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eps_ = 1e-37f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicMassPhiScoreConfig::~TopicMassPhiScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.TopicMassPhiScoreConfig)
  SharedDtor();
}

void TopicMassPhiScoreConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicMassPhiScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicMassPhiScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicMassPhiScoreConfig_descriptor_;
}

const TopicMassPhiScoreConfig& TopicMassPhiScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicMassPhiScoreConfig* TopicMassPhiScoreConfig::default_instance_ = NULL;

TopicMassPhiScoreConfig* TopicMassPhiScoreConfig::New(::google::protobuf::Arena* arena) const {
  TopicMassPhiScoreConfig* n = new TopicMassPhiScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicMassPhiScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.TopicMassPhiScoreConfig)
  eps_ = 1e-37f;
  class_id_.Clear();
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopicMassPhiScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.TopicMassPhiScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float eps = 1 [default = 1e-37];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicMassPhiScoreConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(26)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 3;
      case 3: {
        if (tag == 26) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicMassPhiScoreConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.TopicMassPhiScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.TopicMassPhiScoreConfig)
  return false;
#undef DO_
}

void TopicMassPhiScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.TopicMassPhiScoreConfig)
  // optional float eps = 1 [default = 1e-37];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eps(), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicMassPhiScoreConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicMassPhiScoreConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.TopicMassPhiScoreConfig)
}

::google::protobuf::uint8* TopicMassPhiScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.TopicMassPhiScoreConfig)
  // optional float eps = 1 [default = 1e-37];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eps(), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicMassPhiScoreConfig.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicMassPhiScoreConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.TopicMassPhiScoreConfig)
  return target;
}

int TopicMassPhiScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.TopicMassPhiScoreConfig)
  int total_size = 0;

  // optional float eps = 1 [default = 1e-37];
  if (has_eps()) {
    total_size += 1 + 4;
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicMassPhiScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.TopicMassPhiScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicMassPhiScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicMassPhiScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.TopicMassPhiScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.TopicMassPhiScoreConfig)
    MergeFrom(*source);
  }
}

void TopicMassPhiScoreConfig::MergeFrom(const TopicMassPhiScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.TopicMassPhiScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  class_id_.MergeFrom(from.class_id_);
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopicMassPhiScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.TopicMassPhiScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicMassPhiScoreConfig::CopyFrom(const TopicMassPhiScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.TopicMassPhiScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicMassPhiScoreConfig::IsInitialized() const {

  return true;
}

void TopicMassPhiScoreConfig::Swap(TopicMassPhiScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicMassPhiScoreConfig::InternalSwap(TopicMassPhiScoreConfig* other) {
  std::swap(eps_, other->eps_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicMassPhiScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicMassPhiScoreConfig_descriptor_;
  metadata.reflection = TopicMassPhiScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicMassPhiScoreConfig

// optional float eps = 1 [default = 1e-37];
bool TopicMassPhiScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopicMassPhiScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
void TopicMassPhiScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopicMassPhiScoreConfig::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
 float TopicMassPhiScoreConfig::eps() const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScoreConfig.eps)
  return eps_;
}
 void TopicMassPhiScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScoreConfig.eps)
}

// repeated string class_id = 2;
int TopicMassPhiScoreConfig::class_id_size() const {
  return class_id_.size();
}
void TopicMassPhiScoreConfig::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& TopicMassPhiScoreConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScoreConfig.class_id)
  return class_id_.Get(index);
}
 ::std::string* TopicMassPhiScoreConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicMassPhiScoreConfig.class_id)
  return class_id_.Mutable(index);
}
 void TopicMassPhiScoreConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScoreConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void TopicMassPhiScoreConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicMassPhiScoreConfig.class_id)
}
 void TopicMassPhiScoreConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicMassPhiScoreConfig.class_id)
}
 ::std::string* TopicMassPhiScoreConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicMassPhiScoreConfig.class_id)
  return class_id_.Add();
}
 void TopicMassPhiScoreConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicMassPhiScoreConfig.class_id)
}
 void TopicMassPhiScoreConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicMassPhiScoreConfig.class_id)
}
 void TopicMassPhiScoreConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicMassPhiScoreConfig.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicMassPhiScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.TopicMassPhiScoreConfig.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicMassPhiScoreConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicMassPhiScoreConfig.class_id)
  return &class_id_;
}

// repeated string topic_name = 3;
int TopicMassPhiScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
void TopicMassPhiScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& TopicMassPhiScoreConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScoreConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* TopicMassPhiScoreConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicMassPhiScoreConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void TopicMassPhiScoreConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScoreConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void TopicMassPhiScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicMassPhiScoreConfig.topic_name)
}
 void TopicMassPhiScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicMassPhiScoreConfig.topic_name)
}
 ::std::string* TopicMassPhiScoreConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicMassPhiScoreConfig.topic_name)
  return topic_name_.Add();
}
 void TopicMassPhiScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicMassPhiScoreConfig.topic_name)
}
 void TopicMassPhiScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicMassPhiScoreConfig.topic_name)
}
 void TopicMassPhiScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicMassPhiScoreConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicMassPhiScoreConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicMassPhiScoreConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicMassPhiScoreConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicMassPhiScoreConfig.topic_name)
  return &topic_name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicMassPhiScore::kValueFieldNumber;
const int TopicMassPhiScore::kTopicNameFieldNumber;
const int TopicMassPhiScore::kTopicRatioFieldNumber;
const int TopicMassPhiScore::kTopicMassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicMassPhiScore::TopicMassPhiScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.TopicMassPhiScore)
}

void TopicMassPhiScore::InitAsDefaultInstance() {
}

TopicMassPhiScore::TopicMassPhiScore(const TopicMassPhiScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.TopicMassPhiScore)
}

void TopicMassPhiScore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicMassPhiScore::~TopicMassPhiScore() {
  // @@protoc_insertion_point(destructor:artm.TopicMassPhiScore)
  SharedDtor();
}

void TopicMassPhiScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicMassPhiScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicMassPhiScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicMassPhiScore_descriptor_;
}

const TopicMassPhiScore& TopicMassPhiScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicMassPhiScore* TopicMassPhiScore::default_instance_ = NULL;

TopicMassPhiScore* TopicMassPhiScore::New(::google::protobuf::Arena* arena) const {
  TopicMassPhiScore* n = new TopicMassPhiScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicMassPhiScore::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.TopicMassPhiScore)
  value_ = 0;
  topic_name_.Clear();
  topic_ratio_.Clear();
  topic_mass_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopicMassPhiScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.TopicMassPhiScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 2;
      case 2: {
        if (tag == 18) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicMassPhiScore.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        if (input->ExpectTag(29)) goto parse_topic_ratio;
        break;
      }

      // repeated float topic_ratio = 3;
      case 3: {
        if (tag == 29) {
         parse_topic_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_topic_ratio())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_topic_ratio())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_topic_ratio;
        if (input->ExpectTag(37)) goto parse_topic_mass;
        break;
      }

      // repeated float topic_mass = 4;
      case 4: {
        if (tag == 37) {
         parse_topic_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_topic_mass())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_topic_mass())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_topic_mass;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.TopicMassPhiScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.TopicMassPhiScore)
  return false;
#undef DO_
}

void TopicMassPhiScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.TopicMassPhiScore)
  // optional float value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicMassPhiScore.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->topic_name(i), output);
  }

  // repeated float topic_ratio = 3;
  for (int i = 0; i < this->topic_ratio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->topic_ratio(i), output);
  }

  // repeated float topic_mass = 4;
  for (int i = 0; i < this->topic_mass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->topic_mass(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.TopicMassPhiScore)
}

::google::protobuf::uint8* TopicMassPhiScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.TopicMassPhiScore)
  // optional float value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicMassPhiScore.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->topic_name(i), target);
  }

  // repeated float topic_ratio = 3;
  for (int i = 0; i < this->topic_ratio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->topic_ratio(i), target);
  }

  // repeated float topic_mass = 4;
  for (int i = 0; i < this->topic_mass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->topic_mass(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.TopicMassPhiScore)
  return target;
}

int TopicMassPhiScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.TopicMassPhiScore)
  int total_size = 0;

  // optional float value = 1;
  if (has_value()) {
    total_size += 1 + 4;
  }

  // repeated string topic_name = 2;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated float topic_ratio = 3;
  {
    int data_size = 0;
    data_size = 4 * this->topic_ratio_size();
    total_size += 1 * this->topic_ratio_size() + data_size;
  }

  // repeated float topic_mass = 4;
  {
    int data_size = 0;
    data_size = 4 * this->topic_mass_size();
    total_size += 1 * this->topic_mass_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicMassPhiScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.TopicMassPhiScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicMassPhiScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicMassPhiScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.TopicMassPhiScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.TopicMassPhiScore)
    MergeFrom(*source);
  }
}

void TopicMassPhiScore::MergeFrom(const TopicMassPhiScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.TopicMassPhiScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  topic_ratio_.MergeFrom(from.topic_ratio_);
  topic_mass_.MergeFrom(from.topic_mass_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopicMassPhiScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.TopicMassPhiScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicMassPhiScore::CopyFrom(const TopicMassPhiScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.TopicMassPhiScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicMassPhiScore::IsInitialized() const {

  return true;
}

void TopicMassPhiScore::Swap(TopicMassPhiScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicMassPhiScore::InternalSwap(TopicMassPhiScore* other) {
  std::swap(value_, other->value_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  topic_ratio_.UnsafeArenaSwap(&other->topic_ratio_);
  topic_mass_.UnsafeArenaSwap(&other->topic_mass_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicMassPhiScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicMassPhiScore_descriptor_;
  metadata.reflection = TopicMassPhiScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicMassPhiScore

// optional float value = 1;
bool TopicMassPhiScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopicMassPhiScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void TopicMassPhiScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopicMassPhiScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
 float TopicMassPhiScore::value() const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScore.value)
  return value_;
}
 void TopicMassPhiScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScore.value)
}

// repeated string topic_name = 2;
int TopicMassPhiScore::topic_name_size() const {
  return topic_name_.size();
}
void TopicMassPhiScore::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& TopicMassPhiScore::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScore.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* TopicMassPhiScore::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicMassPhiScore.topic_name)
  return topic_name_.Mutable(index);
}
 void TopicMassPhiScore::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScore.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void TopicMassPhiScore::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicMassPhiScore.topic_name)
}
 void TopicMassPhiScore::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicMassPhiScore.topic_name)
}
 ::std::string* TopicMassPhiScore::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicMassPhiScore.topic_name)
  return topic_name_.Add();
}
 void TopicMassPhiScore::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicMassPhiScore.topic_name)
}
 void TopicMassPhiScore::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicMassPhiScore.topic_name)
}
 void TopicMassPhiScore::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicMassPhiScore.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicMassPhiScore::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicMassPhiScore.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicMassPhiScore::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicMassPhiScore.topic_name)
  return &topic_name_;
}

// repeated float topic_ratio = 3;
int TopicMassPhiScore::topic_ratio_size() const {
  return topic_ratio_.size();
}
void TopicMassPhiScore::clear_topic_ratio() {
  topic_ratio_.Clear();
}
 float TopicMassPhiScore::topic_ratio(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScore.topic_ratio)
  return topic_ratio_.Get(index);
}
 void TopicMassPhiScore::set_topic_ratio(int index, float value) {
  topic_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScore.topic_ratio)
}
 void TopicMassPhiScore::add_topic_ratio(float value) {
  topic_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicMassPhiScore.topic_ratio)
}
 const ::google::protobuf::RepeatedField< float >&
TopicMassPhiScore::topic_ratio() const {
  // @@protoc_insertion_point(field_list:artm.TopicMassPhiScore.topic_ratio)
  return topic_ratio_;
}
 ::google::protobuf::RepeatedField< float >*
TopicMassPhiScore::mutable_topic_ratio() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicMassPhiScore.topic_ratio)
  return &topic_ratio_;
}

// repeated float topic_mass = 4;
int TopicMassPhiScore::topic_mass_size() const {
  return topic_mass_.size();
}
void TopicMassPhiScore::clear_topic_mass() {
  topic_mass_.Clear();
}
 float TopicMassPhiScore::topic_mass(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScore.topic_mass)
  return topic_mass_.Get(index);
}
 void TopicMassPhiScore::set_topic_mass(int index, float value) {
  topic_mass_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScore.topic_mass)
}
 void TopicMassPhiScore::add_topic_mass(float value) {
  topic_mass_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicMassPhiScore.topic_mass)
}
 const ::google::protobuf::RepeatedField< float >&
TopicMassPhiScore::topic_mass() const {
  // @@protoc_insertion_point(field_list:artm.TopicMassPhiScore.topic_mass)
  return topic_mass_;
}
 ::google::protobuf::RepeatedField< float >*
TopicMassPhiScore::mutable_topic_mass() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicMassPhiScore.topic_mass)
  return &topic_mass_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClassPrecisionScoreConfig::ClassPrecisionScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ClassPrecisionScoreConfig)
}

void ClassPrecisionScoreConfig::InitAsDefaultInstance() {
}

ClassPrecisionScoreConfig::ClassPrecisionScoreConfig(const ClassPrecisionScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ClassPrecisionScoreConfig)
}

void ClassPrecisionScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassPrecisionScoreConfig::~ClassPrecisionScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.ClassPrecisionScoreConfig)
  SharedDtor();
}

void ClassPrecisionScoreConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClassPrecisionScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassPrecisionScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassPrecisionScoreConfig_descriptor_;
}

const ClassPrecisionScoreConfig& ClassPrecisionScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ClassPrecisionScoreConfig* ClassPrecisionScoreConfig::default_instance_ = NULL;

ClassPrecisionScoreConfig* ClassPrecisionScoreConfig::New(::google::protobuf::Arena* arena) const {
  ClassPrecisionScoreConfig* n = new ClassPrecisionScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClassPrecisionScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ClassPrecisionScoreConfig)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClassPrecisionScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ClassPrecisionScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ClassPrecisionScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ClassPrecisionScoreConfig)
  return false;
#undef DO_
}

void ClassPrecisionScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ClassPrecisionScoreConfig)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ClassPrecisionScoreConfig)
}

::google::protobuf::uint8* ClassPrecisionScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ClassPrecisionScoreConfig)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ClassPrecisionScoreConfig)
  return target;
}

int ClassPrecisionScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ClassPrecisionScoreConfig)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassPrecisionScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ClassPrecisionScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClassPrecisionScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClassPrecisionScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ClassPrecisionScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ClassPrecisionScoreConfig)
    MergeFrom(*source);
  }
}

void ClassPrecisionScoreConfig::MergeFrom(const ClassPrecisionScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ClassPrecisionScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClassPrecisionScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ClassPrecisionScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassPrecisionScoreConfig::CopyFrom(const ClassPrecisionScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ClassPrecisionScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassPrecisionScoreConfig::IsInitialized() const {

  return true;
}

void ClassPrecisionScoreConfig::Swap(ClassPrecisionScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClassPrecisionScoreConfig::InternalSwap(ClassPrecisionScoreConfig* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClassPrecisionScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassPrecisionScoreConfig_descriptor_;
  metadata.reflection = ClassPrecisionScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClassPrecisionScoreConfig

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClassPrecisionScore::kValueFieldNumber;
const int ClassPrecisionScore::kErrorFieldNumber;
const int ClassPrecisionScore::kTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClassPrecisionScore::ClassPrecisionScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ClassPrecisionScore)
}

void ClassPrecisionScore::InitAsDefaultInstance() {
}

ClassPrecisionScore::ClassPrecisionScore(const ClassPrecisionScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ClassPrecisionScore)
}

void ClassPrecisionScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  error_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassPrecisionScore::~ClassPrecisionScore() {
  // @@protoc_insertion_point(destructor:artm.ClassPrecisionScore)
  SharedDtor();
}

void ClassPrecisionScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClassPrecisionScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassPrecisionScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassPrecisionScore_descriptor_;
}

const ClassPrecisionScore& ClassPrecisionScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ClassPrecisionScore* ClassPrecisionScore::default_instance_ = NULL;

ClassPrecisionScore* ClassPrecisionScore::New(::google::protobuf::Arena* arena) const {
  ClassPrecisionScore* n = new ClassPrecisionScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClassPrecisionScore::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ClassPrecisionScore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClassPrecisionScore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClassPrecisionScore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, total_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClassPrecisionScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ClassPrecisionScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_error;
        break;
      }

      // optional float error = 2;
      case 2: {
        if (tag == 21) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_total;
        break;
      }

      // optional float total = 3;
      case 3: {
        if (tag == 29) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ClassPrecisionScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ClassPrecisionScore)
  return false;
#undef DO_
}

void ClassPrecisionScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ClassPrecisionScore)
  // optional float value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // optional float error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->error(), output);
  }

  // optional float total = 3;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->total(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ClassPrecisionScore)
}

::google::protobuf::uint8* ClassPrecisionScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ClassPrecisionScore)
  // optional float value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // optional float error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->error(), target);
  }

  // optional float total = 3;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->total(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ClassPrecisionScore)
  return target;
}

int ClassPrecisionScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ClassPrecisionScore)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float value = 1;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional float error = 2;
    if (has_error()) {
      total_size += 1 + 4;
    }

    // optional float total = 3;
    if (has_total()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassPrecisionScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ClassPrecisionScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClassPrecisionScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClassPrecisionScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ClassPrecisionScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ClassPrecisionScore)
    MergeFrom(*source);
  }
}

void ClassPrecisionScore::MergeFrom(const ClassPrecisionScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ClassPrecisionScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClassPrecisionScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ClassPrecisionScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassPrecisionScore::CopyFrom(const ClassPrecisionScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ClassPrecisionScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassPrecisionScore::IsInitialized() const {

  return true;
}

void ClassPrecisionScore::Swap(ClassPrecisionScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClassPrecisionScore::InternalSwap(ClassPrecisionScore* other) {
  std::swap(value_, other->value_);
  std::swap(error_, other->error_);
  std::swap(total_, other->total_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClassPrecisionScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassPrecisionScore_descriptor_;
  metadata.reflection = ClassPrecisionScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClassPrecisionScore

// optional float value = 1;
bool ClassPrecisionScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClassPrecisionScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void ClassPrecisionScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClassPrecisionScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
 float ClassPrecisionScore::value() const {
  // @@protoc_insertion_point(field_get:artm.ClassPrecisionScore.value)
  return value_;
}
 void ClassPrecisionScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.ClassPrecisionScore.value)
}

// optional float error = 2;
bool ClassPrecisionScore::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClassPrecisionScore::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void ClassPrecisionScore::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClassPrecisionScore::clear_error() {
  error_ = 0;
  clear_has_error();
}
 float ClassPrecisionScore::error() const {
  // @@protoc_insertion_point(field_get:artm.ClassPrecisionScore.error)
  return error_;
}
 void ClassPrecisionScore::set_error(float value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:artm.ClassPrecisionScore.error)
}

// optional float total = 3;
bool ClassPrecisionScore::has_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClassPrecisionScore::set_has_total() {
  _has_bits_[0] |= 0x00000004u;
}
void ClassPrecisionScore::clear_has_total() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClassPrecisionScore::clear_total() {
  total_ = 0;
  clear_has_total();
}
 float ClassPrecisionScore::total() const {
  // @@protoc_insertion_point(field_get:artm.ClassPrecisionScore.total)
  return total_;
}
 void ClassPrecisionScore::set_total(float value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:artm.ClassPrecisionScore.total)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeakMemoryScoreConfig::PeakMemoryScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.PeakMemoryScoreConfig)
}

void PeakMemoryScoreConfig::InitAsDefaultInstance() {
}

PeakMemoryScoreConfig::PeakMemoryScoreConfig(const PeakMemoryScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.PeakMemoryScoreConfig)
}

void PeakMemoryScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeakMemoryScoreConfig::~PeakMemoryScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.PeakMemoryScoreConfig)
  SharedDtor();
}

void PeakMemoryScoreConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PeakMemoryScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeakMemoryScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeakMemoryScoreConfig_descriptor_;
}

const PeakMemoryScoreConfig& PeakMemoryScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

PeakMemoryScoreConfig* PeakMemoryScoreConfig::default_instance_ = NULL;

PeakMemoryScoreConfig* PeakMemoryScoreConfig::New(::google::protobuf::Arena* arena) const {
  PeakMemoryScoreConfig* n = new PeakMemoryScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeakMemoryScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.PeakMemoryScoreConfig)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PeakMemoryScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.PeakMemoryScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:artm.PeakMemoryScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.PeakMemoryScoreConfig)
  return false;
#undef DO_
}

void PeakMemoryScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.PeakMemoryScoreConfig)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.PeakMemoryScoreConfig)
}

::google::protobuf::uint8* PeakMemoryScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.PeakMemoryScoreConfig)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.PeakMemoryScoreConfig)
  return target;
}

int PeakMemoryScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.PeakMemoryScoreConfig)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeakMemoryScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.PeakMemoryScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PeakMemoryScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PeakMemoryScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.PeakMemoryScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.PeakMemoryScoreConfig)
    MergeFrom(*source);
  }
}

void PeakMemoryScoreConfig::MergeFrom(const PeakMemoryScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.PeakMemoryScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PeakMemoryScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.PeakMemoryScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeakMemoryScoreConfig::CopyFrom(const PeakMemoryScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.PeakMemoryScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeakMemoryScoreConfig::IsInitialized() const {

  return true;
}

void PeakMemoryScoreConfig::Swap(PeakMemoryScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeakMemoryScoreConfig::InternalSwap(PeakMemoryScoreConfig* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeakMemoryScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeakMemoryScoreConfig_descriptor_;
  metadata.reflection = PeakMemoryScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeakMemoryScoreConfig

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeakMemoryScore::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeakMemoryScore::PeakMemoryScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.PeakMemoryScore)
}

void PeakMemoryScore::InitAsDefaultInstance() {
}

PeakMemoryScore::PeakMemoryScore(const PeakMemoryScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.PeakMemoryScore)
}

void PeakMemoryScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeakMemoryScore::~PeakMemoryScore() {
  // @@protoc_insertion_point(destructor:artm.PeakMemoryScore)
  SharedDtor();
}

void PeakMemoryScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PeakMemoryScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeakMemoryScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeakMemoryScore_descriptor_;
}

const PeakMemoryScore& PeakMemoryScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

PeakMemoryScore* PeakMemoryScore::default_instance_ = NULL;

PeakMemoryScore* PeakMemoryScore::New(::google::protobuf::Arena* arena) const {
  PeakMemoryScore* n = new PeakMemoryScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeakMemoryScore::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.PeakMemoryScore)
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PeakMemoryScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.PeakMemoryScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.PeakMemoryScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.PeakMemoryScore)
  return false;
#undef DO_
}

void PeakMemoryScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.PeakMemoryScore)
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.PeakMemoryScore)
}

::google::protobuf::uint8* PeakMemoryScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.PeakMemoryScore)
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.PeakMemoryScore)
  return target;
}

int PeakMemoryScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.PeakMemoryScore)
  int total_size = 0;

  // optional int64 value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeakMemoryScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.PeakMemoryScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PeakMemoryScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PeakMemoryScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.PeakMemoryScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.PeakMemoryScore)
    MergeFrom(*source);
  }
}

void PeakMemoryScore::MergeFrom(const PeakMemoryScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.PeakMemoryScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PeakMemoryScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.PeakMemoryScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeakMemoryScore::CopyFrom(const PeakMemoryScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.PeakMemoryScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeakMemoryScore::IsInitialized() const {

  return true;
}

void PeakMemoryScore::Swap(PeakMemoryScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeakMemoryScore::InternalSwap(PeakMemoryScore* other) {
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeakMemoryScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeakMemoryScore_descriptor_;
  metadata.reflection = PeakMemoryScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeakMemoryScore

// optional int64 value = 1;
bool PeakMemoryScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PeakMemoryScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void PeakMemoryScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void PeakMemoryScore::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
 ::google::protobuf::int64 PeakMemoryScore::value() const {
  // @@protoc_insertion_point(field_get:artm.PeakMemoryScore.value)
  return value_;
}
 void PeakMemoryScore::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.PeakMemoryScore.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* BackgroundTokensRatioScoreConfig::_default_class_id_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackgroundTokensRatioScoreConfig::kDeltaThresholdFieldNumber;
const int BackgroundTokensRatioScoreConfig::kSaveTokensFieldNumber;
const int BackgroundTokensRatioScoreConfig::kDirectKlFieldNumber;
const int BackgroundTokensRatioScoreConfig::kClassIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackgroundTokensRatioScoreConfig::BackgroundTokensRatioScoreConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.BackgroundTokensRatioScoreConfig)
}

void BackgroundTokensRatioScoreConfig::InitAsDefaultInstance() {
}

BackgroundTokensRatioScoreConfig::BackgroundTokensRatioScoreConfig(const BackgroundTokensRatioScoreConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.BackgroundTokensRatioScoreConfig)
}

void BackgroundTokensRatioScoreConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  delta_threshold_ = 0.5f;
  save_tokens_ = true;
  direct_kl_ = true;
  class_id_.UnsafeSetDefault(_default_class_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackgroundTokensRatioScoreConfig::~BackgroundTokensRatioScoreConfig() {
  // @@protoc_insertion_point(destructor:artm.BackgroundTokensRatioScoreConfig)
  SharedDtor();
}

void BackgroundTokensRatioScoreConfig::SharedDtor() {
  class_id_.DestroyNoArena(_default_class_id_);
  if (this != default_instance_) {
  }
}

void BackgroundTokensRatioScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackgroundTokensRatioScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackgroundTokensRatioScoreConfig_descriptor_;
}

const BackgroundTokensRatioScoreConfig& BackgroundTokensRatioScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

BackgroundTokensRatioScoreConfig* BackgroundTokensRatioScoreConfig::default_instance_ = NULL;

BackgroundTokensRatioScoreConfig* BackgroundTokensRatioScoreConfig::New(::google::protobuf::Arena* arena) const {
  BackgroundTokensRatioScoreConfig* n = new BackgroundTokensRatioScoreConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackgroundTokensRatioScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.BackgroundTokensRatioScoreConfig)
  if (_has_bits_[0 / 32] & 15u) {
    delta_threshold_ = 0.5f;
    save_tokens_ = true;
    direct_kl_ = true;
    if (has_class_id()) {
      class_id_.ClearToDefaultNoArena(_default_class_id_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BackgroundTokensRatioScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.BackgroundTokensRatioScoreConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float delta_threshold = 1 [default = 0.5];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_threshold_)));
          set_has_delta_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_save_tokens;
        break;
      }

      // optional bool save_tokens = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_save_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_tokens_)));
          set_has_save_tokens();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_direct_kl;
        break;
      }

      // optional bool direct_kl = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_direct_kl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &direct_kl_)));
          set_has_direct_kl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_class_id;
        break;
      }

      // optional string class_id = 4 [default = "@default_class"];
      case 4: {
        if (tag == 34) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.BackgroundTokensRatioScoreConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.BackgroundTokensRatioScoreConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.BackgroundTokensRatioScoreConfig)
  return false;
#undef DO_
}

void BackgroundTokensRatioScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.BackgroundTokensRatioScoreConfig)
  // optional float delta_threshold = 1 [default = 0.5];
  if (has_delta_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->delta_threshold(), output);
  }

  // optional bool save_tokens = 2 [default = true];
  if (has_save_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->save_tokens(), output);
  }

  // optional bool direct_kl = 3 [default = true];
  if (has_direct_kl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->direct_kl(), output);
  }

  // optional string class_id = 4 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.BackgroundTokensRatioScoreConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->class_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.BackgroundTokensRatioScoreConfig)
}

::google::protobuf::uint8* BackgroundTokensRatioScoreConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.BackgroundTokensRatioScoreConfig)
  // optional float delta_threshold = 1 [default = 0.5];
  if (has_delta_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->delta_threshold(), target);
  }

  // optional bool save_tokens = 2 [default = true];
  if (has_save_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->save_tokens(), target);
  }

  // optional bool direct_kl = 3 [default = true];
  if (has_direct_kl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->direct_kl(), target);
  }

  // optional string class_id = 4 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.BackgroundTokensRatioScoreConfig.class_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->class_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.BackgroundTokensRatioScoreConfig)
  return target;
}

int BackgroundTokensRatioScoreConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.BackgroundTokensRatioScoreConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional float delta_threshold = 1 [default = 0.5];
    if (has_delta_threshold()) {
      total_size += 1 + 4;
    }

    // optional bool save_tokens = 2 [default = true];
    if (has_save_tokens()) {
      total_size += 1 + 1;
    }

    // optional bool direct_kl = 3 [default = true];
    if (has_direct_kl()) {
      total_size += 1 + 1;
    }

    // optional string class_id = 4 [default = "@default_class"];
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackgroundTokensRatioScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.BackgroundTokensRatioScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BackgroundTokensRatioScoreConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BackgroundTokensRatioScoreConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.BackgroundTokensRatioScoreConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.BackgroundTokensRatioScoreConfig)
    MergeFrom(*source);
  }
}

void BackgroundTokensRatioScoreConfig::MergeFrom(const BackgroundTokensRatioScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.BackgroundTokensRatioScoreConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delta_threshold()) {
      set_delta_threshold(from.delta_threshold());
    }
    if (from.has_save_tokens()) {
      set_save_tokens(from.save_tokens());
    }
    if (from.has_direct_kl()) {
      set_direct_kl(from.direct_kl());
    }
    if (from.has_class_id()) {
      set_has_class_id();
      class_id_.AssignWithDefault(_default_class_id_, from.class_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BackgroundTokensRatioScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.BackgroundTokensRatioScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackgroundTokensRatioScoreConfig::CopyFrom(const BackgroundTokensRatioScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.BackgroundTokensRatioScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTokensRatioScoreConfig::IsInitialized() const {

  return true;
}

void BackgroundTokensRatioScoreConfig::Swap(BackgroundTokensRatioScoreConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackgroundTokensRatioScoreConfig::InternalSwap(BackgroundTokensRatioScoreConfig* other) {
  std::swap(delta_threshold_, other->delta_threshold_);
  std::swap(save_tokens_, other->save_tokens_);
  std::swap(direct_kl_, other->direct_kl_);
  class_id_.Swap(&other->class_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackgroundTokensRatioScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackgroundTokensRatioScoreConfig_descriptor_;
  metadata.reflection = BackgroundTokensRatioScoreConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackgroundTokensRatioScoreConfig

// optional float delta_threshold = 1 [default = 0.5];
bool BackgroundTokensRatioScoreConfig::has_delta_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackgroundTokensRatioScoreConfig::set_has_delta_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
void BackgroundTokensRatioScoreConfig::clear_has_delta_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackgroundTokensRatioScoreConfig::clear_delta_threshold() {
  delta_threshold_ = 0.5f;
  clear_has_delta_threshold();
}
 float BackgroundTokensRatioScoreConfig::delta_threshold() const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScoreConfig.delta_threshold)
  return delta_threshold_;
}
 void BackgroundTokensRatioScoreConfig::set_delta_threshold(float value) {
  set_has_delta_threshold();
  delta_threshold_ = value;
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScoreConfig.delta_threshold)
}

// optional bool save_tokens = 2 [default = true];
bool BackgroundTokensRatioScoreConfig::has_save_tokens() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BackgroundTokensRatioScoreConfig::set_has_save_tokens() {
  _has_bits_[0] |= 0x00000002u;
}
void BackgroundTokensRatioScoreConfig::clear_has_save_tokens() {
  _has_bits_[0] &= ~0x00000002u;
}
void BackgroundTokensRatioScoreConfig::clear_save_tokens() {
  save_tokens_ = true;
  clear_has_save_tokens();
}
 bool BackgroundTokensRatioScoreConfig::save_tokens() const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScoreConfig.save_tokens)
  return save_tokens_;
}
 void BackgroundTokensRatioScoreConfig::set_save_tokens(bool value) {
  set_has_save_tokens();
  save_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScoreConfig.save_tokens)
}

// optional bool direct_kl = 3 [default = true];
bool BackgroundTokensRatioScoreConfig::has_direct_kl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BackgroundTokensRatioScoreConfig::set_has_direct_kl() {
  _has_bits_[0] |= 0x00000004u;
}
void BackgroundTokensRatioScoreConfig::clear_has_direct_kl() {
  _has_bits_[0] &= ~0x00000004u;
}
void BackgroundTokensRatioScoreConfig::clear_direct_kl() {
  direct_kl_ = true;
  clear_has_direct_kl();
}
 bool BackgroundTokensRatioScoreConfig::direct_kl() const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScoreConfig.direct_kl)
  return direct_kl_;
}
 void BackgroundTokensRatioScoreConfig::set_direct_kl(bool value) {
  set_has_direct_kl();
  direct_kl_ = value;
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScoreConfig.direct_kl)
}

// optional string class_id = 4 [default = "@default_class"];
bool BackgroundTokensRatioScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BackgroundTokensRatioScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000008u;
}
void BackgroundTokensRatioScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void BackgroundTokensRatioScoreConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
 const ::std::string& BackgroundTokensRatioScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScoreConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
 void BackgroundTokensRatioScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScoreConfig.class_id)
}
 void BackgroundTokensRatioScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.BackgroundTokensRatioScoreConfig.class_id)
}
 void BackgroundTokensRatioScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.BackgroundTokensRatioScoreConfig.class_id)
}
 ::std::string* BackgroundTokensRatioScoreConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.BackgroundTokensRatioScoreConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
 ::std::string* BackgroundTokensRatioScoreConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.BackgroundTokensRatioScoreConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
 void BackgroundTokensRatioScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.BackgroundTokensRatioScoreConfig.class_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackgroundTokensRatioScore::kValueFieldNumber;
const int BackgroundTokensRatioScore::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackgroundTokensRatioScore::BackgroundTokensRatioScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.BackgroundTokensRatioScore)
}

void BackgroundTokensRatioScore::InitAsDefaultInstance() {
}

BackgroundTokensRatioScore::BackgroundTokensRatioScore(const BackgroundTokensRatioScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.BackgroundTokensRatioScore)
}

void BackgroundTokensRatioScore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackgroundTokensRatioScore::~BackgroundTokensRatioScore() {
  // @@protoc_insertion_point(destructor:artm.BackgroundTokensRatioScore)
  SharedDtor();
}

void BackgroundTokensRatioScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackgroundTokensRatioScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackgroundTokensRatioScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackgroundTokensRatioScore_descriptor_;
}

const BackgroundTokensRatioScore& BackgroundTokensRatioScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

BackgroundTokensRatioScore* BackgroundTokensRatioScore::default_instance_ = NULL;

BackgroundTokensRatioScore* BackgroundTokensRatioScore::New(::google::protobuf::Arena* arena) const {
  BackgroundTokensRatioScore* n = new BackgroundTokensRatioScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackgroundTokensRatioScore::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.BackgroundTokensRatioScore)
  value_ = 0;
  token_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BackgroundTokensRatioScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.BackgroundTokensRatioScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // repeated string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.BackgroundTokensRatioScore.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.BackgroundTokensRatioScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.BackgroundTokensRatioScore)
  return false;
#undef DO_
}

void BackgroundTokensRatioScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.BackgroundTokensRatioScore)
  // optional float value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // repeated string token = 2;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.BackgroundTokensRatioScore.token");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.BackgroundTokensRatioScore)
}

::google::protobuf::uint8* BackgroundTokensRatioScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.BackgroundTokensRatioScore)
  // optional float value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // repeated string token = 2;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.BackgroundTokensRatioScore.token");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->token(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.BackgroundTokensRatioScore)
  return target;
}

int BackgroundTokensRatioScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.BackgroundTokensRatioScore)
  int total_size = 0;

  // optional float value = 1;
  if (has_value()) {
    total_size += 1 + 4;
  }

  // repeated string token = 2;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackgroundTokensRatioScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.BackgroundTokensRatioScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BackgroundTokensRatioScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BackgroundTokensRatioScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.BackgroundTokensRatioScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.BackgroundTokensRatioScore)
    MergeFrom(*source);
  }
}

void BackgroundTokensRatioScore::MergeFrom(const BackgroundTokensRatioScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.BackgroundTokensRatioScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  token_.MergeFrom(from.token_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BackgroundTokensRatioScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.BackgroundTokensRatioScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackgroundTokensRatioScore::CopyFrom(const BackgroundTokensRatioScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.BackgroundTokensRatioScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTokensRatioScore::IsInitialized() const {

  return true;
}

void BackgroundTokensRatioScore::Swap(BackgroundTokensRatioScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackgroundTokensRatioScore::InternalSwap(BackgroundTokensRatioScore* other) {
  std::swap(value_, other->value_);
  token_.UnsafeArenaSwap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackgroundTokensRatioScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackgroundTokensRatioScore_descriptor_;
  metadata.reflection = BackgroundTokensRatioScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackgroundTokensRatioScore

// optional float value = 1;
bool BackgroundTokensRatioScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackgroundTokensRatioScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void BackgroundTokensRatioScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackgroundTokensRatioScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
 float BackgroundTokensRatioScore::value() const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScore.value)
  return value_;
}
 void BackgroundTokensRatioScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScore.value)
}

// repeated string token = 2;
int BackgroundTokensRatioScore::token_size() const {
  return token_.size();
}
void BackgroundTokensRatioScore::clear_token() {
  token_.Clear();
}
 const ::std::string& BackgroundTokensRatioScore::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScore.token)
  return token_.Get(index);
}
 ::std::string* BackgroundTokensRatioScore::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.BackgroundTokensRatioScore.token)
  return token_.Mutable(index);
}
 void BackgroundTokensRatioScore::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScore.token)
  token_.Mutable(index)->assign(value);
}
 void BackgroundTokensRatioScore::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.BackgroundTokensRatioScore.token)
}
 void BackgroundTokensRatioScore::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.BackgroundTokensRatioScore.token)
}
 ::std::string* BackgroundTokensRatioScore::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.BackgroundTokensRatioScore.token)
  return token_.Add();
}
 void BackgroundTokensRatioScore::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.BackgroundTokensRatioScore.token)
}
 void BackgroundTokensRatioScore::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.BackgroundTokensRatioScore.token)
}
 void BackgroundTokensRatioScore::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.BackgroundTokensRatioScore.token)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BackgroundTokensRatioScore::token() const {
  // @@protoc_insertion_point(field_list:artm.BackgroundTokensRatioScore.token)
  return token_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BackgroundTokensRatioScore::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.BackgroundTokensRatioScore.token)
  return &token_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* TopicModel::_default_name_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicModel::kNameFieldNumber;
const int TopicModel::kNumTopicsFieldNumber;
const int TopicModel::kTopicNameFieldNumber;
const int TopicModel::kTokenFieldNumber;
const int TopicModel::kTokenWeightsFieldNumber;
const int TopicModel::kClassIdFieldNumber;
const int TopicModel::kTopicIndicesFieldNumber;
const int TopicModel::kNumValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicModel::TopicModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.TopicModel)
}

void TopicModel::InitAsDefaultInstance() {
}

TopicModel::TopicModel(const TopicModel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.TopicModel)
}

void TopicModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(_default_name_);
  num_topics_ = 0;
  num_values_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicModel::~TopicModel() {
  // @@protoc_insertion_point(destructor:artm.TopicModel)
  SharedDtor();
}

void TopicModel::SharedDtor() {
  name_.DestroyNoArena(_default_name_);
  if (this != default_instance_) {
  }
}

void TopicModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicModel_descriptor_;
}

const TopicModel& TopicModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicModel* TopicModel::default_instance_ = NULL;

TopicModel* TopicModel::New(::google::protobuf::Arena* arena) const {
  TopicModel* n = new TopicModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicModel::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.TopicModel)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TopicModel, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TopicModel*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 131u) {
    ZR_(num_values_, num_topics_);
    if (has_name()) {
      name_.ClearToDefaultNoArena(_default_name_);
    }
  }

#undef ZR_HELPER_
#undef ZR_

  topic_name_.Clear();
  token_.Clear();
  token_weights_.Clear();
  class_id_.Clear();
  topic_indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopicModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.TopicModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "@model"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicModel.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_topics;
        break;
      }

      // optional int32 num_topics = 2;
      case 2: {
        if (tag == 16) {
         parse_num_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_topics_)));
          set_has_num_topics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 3;
      case 3: {
        if (tag == 26) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicModel.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // repeated string token = 4;
      case 4: {
        if (tag == 34) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicModel.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token;
        if (input->ExpectTag(42)) goto parse_token_weights;
        break;
      }

      // repeated .artm.FloatArray token_weights = 5;
      case 5: {
        if (tag == 42) {
         parse_token_weights:
          DO_(input->IncrementRecursionDepth());
         parse_loop_token_weights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_token_weights()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_token_weights;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 6;
      case 6: {
        if (tag == 50) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TopicModel.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_class_id;
        if (input->ExpectTag(66)) goto parse_topic_indices;
        break;
      }

      // repeated .artm.IntArray topic_indices = 8;
      case 8: {
        if (tag == 66) {
         parse_topic_indices:
          DO_(input->IncrementRecursionDepth());
         parse_loop_topic_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_topic_indices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_topic_indices;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_num_values;
        break;
      }

      // optional int64 num_values = 9;
      case 9: {
        if (tag == 72) {
         parse_num_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_values_)));
          set_has_num_values();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.TopicModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.TopicModel)
  return false;
#undef DO_
}

void TopicModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.TopicModel)
  // optional string name = 1 [default = "@model"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicModel.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 num_topics = 2;
  if (has_num_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_topics(), output);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicModel.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicModel.token");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(i), output);
  }

  // repeated .artm.FloatArray token_weights = 5;
  for (unsigned int i = 0, n = this->token_weights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->token_weights(i), output);
  }

  // repeated string class_id = 6;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicModel.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->class_id(i), output);
  }

  // repeated .artm.IntArray topic_indices = 8;
  for (unsigned int i = 0, n = this->topic_indices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->topic_indices(i), output);
  }

  // optional int64 num_values = 9;
  if (has_num_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->num_values(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.TopicModel)
}

::google::protobuf::uint8* TopicModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.TopicModel)
  // optional string name = 1 [default = "@model"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicModel.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 num_topics = 2;
  if (has_num_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_topics(), target);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicModel.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicModel.token");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->token(i), target);
  }

  // repeated .artm.FloatArray token_weights = 5;
  for (unsigned int i = 0, n = this->token_weights_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->token_weights(i), false, target);
  }

  // repeated string class_id = 6;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TopicModel.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->class_id(i), target);
  }

  // repeated .artm.IntArray topic_indices = 8;
  for (unsigned int i = 0, n = this->topic_indices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->topic_indices(i), false, target);
  }

  // optional int64 num_values = 9;
  if (has_num_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->num_values(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.TopicModel)
  return target;
}

int TopicModel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.TopicModel)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 131u) {
    // optional string name = 1 [default = "@model"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 num_topics = 2;
    if (has_num_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_topics());
    }

    // optional int64 num_values = 9;
    if (has_num_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_values());
    }

  }
  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string token = 4;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated .artm.FloatArray token_weights = 5;
  total_size += 1 * this->token_weights_size();
  for (int i = 0; i < this->token_weights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->token_weights(i));
  }

  // repeated string class_id = 6;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated .artm.IntArray topic_indices = 8;
  total_size += 1 * this->topic_indices_size();
  for (int i = 0; i < this->topic_indices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->topic_indices(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.TopicModel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicModel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.TopicModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.TopicModel)
    MergeFrom(*source);
  }
}

void TopicModel::MergeFrom(const TopicModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.TopicModel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  token_.MergeFrom(from.token_);
  token_weights_.MergeFrom(from.token_weights_);
  class_id_.MergeFrom(from.class_id_);
  topic_indices_.MergeFrom(from.topic_indices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(_default_name_, from.name_);
    }
    if (from.has_num_topics()) {
      set_num_topics(from.num_topics());
    }
    if (from.has_num_values()) {
      set_num_values(from.num_values());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopicModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.TopicModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicModel::CopyFrom(const TopicModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.TopicModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicModel::IsInitialized() const {

  return true;
}

void TopicModel::Swap(TopicModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicModel::InternalSwap(TopicModel* other) {
  name_.Swap(&other->name_);
  std::swap(num_topics_, other->num_topics_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  token_.UnsafeArenaSwap(&other->token_);
  token_weights_.UnsafeArenaSwap(&other->token_weights_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  topic_indices_.UnsafeArenaSwap(&other->topic_indices_);
  std::swap(num_values_, other->num_values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicModel_descriptor_;
  metadata.reflection = TopicModel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicModel

// optional string name = 1 [default = "@model"];
bool TopicModel::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopicModel::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TopicModel::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopicModel::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
 const ::std::string& TopicModel::name() const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.name)
  return name_.GetNoArena(_default_name_);
}
 void TopicModel::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:artm.TopicModel.name)
}
 void TopicModel::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TopicModel.name)
}
 void TopicModel::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TopicModel.name)
}
 ::std::string* TopicModel::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.name)
  return name_.MutableNoArena(_default_name_);
}
 ::std::string* TopicModel::release_name() {
  // @@protoc_insertion_point(field_release:artm.TopicModel.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
 void TopicModel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:artm.TopicModel.name)
}

// optional int32 num_topics = 2;
bool TopicModel::has_num_topics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopicModel::set_has_num_topics() {
  _has_bits_[0] |= 0x00000002u;
}
void TopicModel::clear_has_num_topics() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopicModel::clear_num_topics() {
  num_topics_ = 0;
  clear_has_num_topics();
}
 ::google::protobuf::int32 TopicModel::num_topics() const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.num_topics)
  return num_topics_;
}
 void TopicModel::set_num_topics(::google::protobuf::int32 value) {
  set_has_num_topics();
  num_topics_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicModel.num_topics)
}

// repeated string topic_name = 3;
int TopicModel::topic_name_size() const {
  return topic_name_.size();
}
void TopicModel::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& TopicModel::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* TopicModel::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.topic_name)
  return topic_name_.Mutable(index);
}
 void TopicModel::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicModel.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void TopicModel::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicModel.topic_name)
}
 void TopicModel::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicModel.topic_name)
}
 ::std::string* TopicModel::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicModel.topic_name)
  return topic_name_.Add();
}
 void TopicModel::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicModel.topic_name)
}
 void TopicModel::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicModel.topic_name)
}
 void TopicModel::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicModel.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicModel::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicModel.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicModel::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicModel.topic_name)
  return &topic_name_;
}

// repeated string token = 4;
int TopicModel::token_size() const {
  return token_.size();
}
void TopicModel::clear_token() {
  token_.Clear();
}
 const ::std::string& TopicModel::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.token)
  return token_.Get(index);
}
 ::std::string* TopicModel::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.token)
  return token_.Mutable(index);
}
 void TopicModel::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicModel.token)
  token_.Mutable(index)->assign(value);
}
 void TopicModel::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicModel.token)
}
 void TopicModel::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicModel.token)
}
 ::std::string* TopicModel::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicModel.token)
  return token_.Add();
}
 void TopicModel::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicModel.token)
}
 void TopicModel::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicModel.token)
}
 void TopicModel::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicModel.token)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicModel::token() const {
  // @@protoc_insertion_point(field_list:artm.TopicModel.token)
  return token_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicModel::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicModel.token)
  return &token_;
}

// repeated .artm.FloatArray token_weights = 5;
int TopicModel::token_weights_size() const {
  return token_weights_.size();
}
void TopicModel::clear_token_weights() {
  token_weights_.Clear();
}
const ::artm::FloatArray& TopicModel::token_weights(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.token_weights)
  return token_weights_.Get(index);
}
::artm::FloatArray* TopicModel::mutable_token_weights(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.token_weights)
  return token_weights_.Mutable(index);
}
::artm::FloatArray* TopicModel::add_token_weights() {
  // @@protoc_insertion_point(field_add:artm.TopicModel.token_weights)
  return token_weights_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
TopicModel::mutable_token_weights() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicModel.token_weights)
  return &token_weights_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
TopicModel::token_weights() const {
  // @@protoc_insertion_point(field_list:artm.TopicModel.token_weights)
  return token_weights_;
}

// repeated string class_id = 6;
int TopicModel::class_id_size() const {
  return class_id_.size();
}
void TopicModel::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& TopicModel::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.class_id)
  return class_id_.Get(index);
}
 ::std::string* TopicModel::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.class_id)
  return class_id_.Mutable(index);
}
 void TopicModel::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicModel.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void TopicModel::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicModel.class_id)
}
 void TopicModel::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicModel.class_id)
}
 ::std::string* TopicModel::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicModel.class_id)
  return class_id_.Add();
}
 void TopicModel::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicModel.class_id)
}
 void TopicModel::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicModel.class_id)
}
 void TopicModel::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicModel.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicModel::class_id() const {
  // @@protoc_insertion_point(field_list:artm.TopicModel.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicModel::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicModel.class_id)
  return &class_id_;
}

// repeated .artm.IntArray topic_indices = 8;
int TopicModel::topic_indices_size() const {
  return topic_indices_.size();
}
void TopicModel::clear_topic_indices() {
  topic_indices_.Clear();
}
const ::artm::IntArray& TopicModel::topic_indices(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.topic_indices)
  return topic_indices_.Get(index);
}
::artm::IntArray* TopicModel::mutable_topic_indices(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.topic_indices)
  return topic_indices_.Mutable(index);
}
::artm::IntArray* TopicModel::add_topic_indices() {
  // @@protoc_insertion_point(field_add:artm.TopicModel.topic_indices)
  return topic_indices_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
TopicModel::mutable_topic_indices() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicModel.topic_indices)
  return &topic_indices_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
TopicModel::topic_indices() const {
  // @@protoc_insertion_point(field_list:artm.TopicModel.topic_indices)
  return topic_indices_;
}

// optional int64 num_values = 9;
bool TopicModel::has_num_values() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TopicModel::set_has_num_values() {
  _has_bits_[0] |= 0x00000080u;
}
void TopicModel::clear_has_num_values() {
  _has_bits_[0] &= ~0x00000080u;
}
void TopicModel::clear_num_values() {
  num_values_ = GOOGLE_LONGLONG(0);
  clear_has_num_values();
}
 ::google::protobuf::int64 TopicModel::num_values() const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.num_values)
  return num_values_;
}
 void TopicModel::set_num_values(::google::protobuf::int64 value) {
  set_has_num_values();
  num_values_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicModel.num_values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThetaMatrix::kItemIdFieldNumber;
const int ThetaMatrix::kItemWeightsFieldNumber;
const int ThetaMatrix::kTopicNameFieldNumber;
const int ThetaMatrix::kNumTopicsFieldNumber;
const int ThetaMatrix::kItemTitleFieldNumber;
const int ThetaMatrix::kTopicIndicesFieldNumber;
const int ThetaMatrix::kNumValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThetaMatrix::ThetaMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ThetaMatrix)
}

void ThetaMatrix::InitAsDefaultInstance() {
}

ThetaMatrix::ThetaMatrix(const ThetaMatrix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ThetaMatrix)
}

void ThetaMatrix::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_topics_ = 0;
  num_values_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThetaMatrix::~ThetaMatrix() {
  // @@protoc_insertion_point(destructor:artm.ThetaMatrix)
  SharedDtor();
}

void ThetaMatrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThetaMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThetaMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThetaMatrix_descriptor_;
}

const ThetaMatrix& ThetaMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ThetaMatrix* ThetaMatrix::default_instance_ = NULL;

ThetaMatrix* ThetaMatrix::New(::google::protobuf::Arena* arena) const {
  ThetaMatrix* n = new ThetaMatrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThetaMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ThetaMatrix)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ThetaMatrix, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ThetaMatrix*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_values_, num_topics_);

#undef ZR_HELPER_
#undef ZR_

  item_id_.Clear();
  item_weights_.Clear();
  topic_name_.Clear();
  item_title_.Clear();
  topic_indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ThetaMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ThetaMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_item_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        if (input->ExpectTag(26)) goto parse_item_weights;
        break;
      }

      // repeated .artm.FloatArray item_weights = 3;
      case 3: {
        if (tag == 26) {
         parse_item_weights:
          DO_(input->IncrementRecursionDepth());
         parse_loop_item_weights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item_weights()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_item_weights;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 4;
      case 4: {
        if (tag == 34) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ThetaMatrix.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        if (input->ExpectTag(40)) goto parse_num_topics;
        break;
      }

      // optional int32 num_topics = 5;
      case 5: {
        if (tag == 40) {
         parse_num_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_topics_)));
          set_has_num_topics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_item_title;
        break;
      }

      // repeated string item_title = 6;
      case 6: {
        if (tag == 50) {
         parse_item_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_item_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_title(this->item_title_size() - 1).data(),
            this->item_title(this->item_title_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ThetaMatrix.item_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_item_title;
        if (input->ExpectTag(58)) goto parse_topic_indices;
        break;
      }

      // repeated .artm.IntArray topic_indices = 7;
      case 7: {
        if (tag == 58) {
         parse_topic_indices:
          DO_(input->IncrementRecursionDepth());
         parse_loop_topic_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_topic_indices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_topic_indices;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_num_values;
        break;
      }

      // optional int64 num_values = 8;
      case 8: {
        if (tag == 64) {
         parse_num_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_values_)));
          set_has_num_values();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ThetaMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ThetaMatrix)
  return false;
#undef DO_
}

void ThetaMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ThetaMatrix)
  // repeated int32 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->item_id(i), output);
  }

  // repeated .artm.FloatArray item_weights = 3;
  for (unsigned int i = 0, n = this->item_weights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_weights(i), output);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ThetaMatrix.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topic_name(i), output);
  }

  // optional int32 num_topics = 5;
  if (has_num_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_topics(), output);
  }

  // repeated string item_title = 6;
  for (int i = 0; i < this->item_title_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_title(i).data(), this->item_title(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ThetaMatrix.item_title");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->item_title(i), output);
  }

  // repeated .artm.IntArray topic_indices = 7;
  for (unsigned int i = 0, n = this->topic_indices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->topic_indices(i), output);
  }

  // optional int64 num_values = 8;
  if (has_num_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->num_values(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ThetaMatrix)
}

::google::protobuf::uint8* ThetaMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ThetaMatrix)
  // repeated int32 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->item_id(i), target);
  }

  // repeated .artm.FloatArray item_weights = 3;
  for (unsigned int i = 0, n = this->item_weights_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->item_weights(i), false, target);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ThetaMatrix.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topic_name(i), target);
  }

  // optional int32 num_topics = 5;
  if (has_num_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_topics(), target);
  }

  // repeated string item_title = 6;
  for (int i = 0; i < this->item_title_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_title(i).data(), this->item_title(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ThetaMatrix.item_title");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->item_title(i), target);
  }

  // repeated .artm.IntArray topic_indices = 7;
  for (unsigned int i = 0, n = this->topic_indices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->topic_indices(i), false, target);
  }

  // optional int64 num_values = 8;
  if (has_num_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->num_values(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ThetaMatrix)
  return target;
}

int ThetaMatrix::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ThetaMatrix)
  int total_size = 0;

  if (_has_bits_[3 / 32] & 72u) {
    // optional int32 num_topics = 5;
    if (has_num_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_topics());
    }

    // optional int64 num_values = 8;
    if (has_num_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_values());
    }

  }
  // repeated int32 item_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated .artm.FloatArray item_weights = 3;
  total_size += 1 * this->item_weights_size();
  for (int i = 0; i < this->item_weights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_weights(i));
  }

  // repeated string topic_name = 4;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string item_title = 6;
  total_size += 1 * this->item_title_size();
  for (int i = 0; i < this->item_title_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->item_title(i));
  }

  // repeated .artm.IntArray topic_indices = 7;
  total_size += 1 * this->topic_indices_size();
  for (int i = 0; i < this->topic_indices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->topic_indices(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThetaMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ThetaMatrix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ThetaMatrix* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ThetaMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ThetaMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ThetaMatrix)
    MergeFrom(*source);
  }
}

void ThetaMatrix::MergeFrom(const ThetaMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ThetaMatrix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  item_id_.MergeFrom(from.item_id_);
  item_weights_.MergeFrom(from.item_weights_);
  topic_name_.MergeFrom(from.topic_name_);
  item_title_.MergeFrom(from.item_title_);
  topic_indices_.MergeFrom(from.topic_indices_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_num_topics()) {
      set_num_topics(from.num_topics());
    }
    if (from.has_num_values()) {
      set_num_values(from.num_values());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ThetaMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ThetaMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThetaMatrix::CopyFrom(const ThetaMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ThetaMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThetaMatrix::IsInitialized() const {

  return true;
}

void ThetaMatrix::Swap(ThetaMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThetaMatrix::InternalSwap(ThetaMatrix* other) {
  item_id_.UnsafeArenaSwap(&other->item_id_);
  item_weights_.UnsafeArenaSwap(&other->item_weights_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  std::swap(num_topics_, other->num_topics_);
  item_title_.UnsafeArenaSwap(&other->item_title_);
  topic_indices_.UnsafeArenaSwap(&other->topic_indices_);
  std::swap(num_values_, other->num_values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThetaMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThetaMatrix_descriptor_;
  metadata.reflection = ThetaMatrix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThetaMatrix

// repeated int32 item_id = 2;
int ThetaMatrix::item_id_size() const {
  return item_id_.size();
}
void ThetaMatrix::clear_item_id() {
  item_id_.Clear();
}
 ::google::protobuf::int32 ThetaMatrix::item_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.item_id)
  return item_id_.Get(index);
}
 void ThetaMatrix::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ThetaMatrix.item_id)
}
 void ThetaMatrix::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ThetaMatrix.item_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ThetaMatrix::item_id() const {
  // @@protoc_insertion_point(field_list:artm.ThetaMatrix.item_id)
  return item_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ThetaMatrix::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaMatrix.item_id)
  return &item_id_;
}

// repeated .artm.FloatArray item_weights = 3;
int ThetaMatrix::item_weights_size() const {
  return item_weights_.size();
}
void ThetaMatrix::clear_item_weights() {
  item_weights_.Clear();
}
const ::artm::FloatArray& ThetaMatrix::item_weights(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.item_weights)
  return item_weights_.Get(index);
}
::artm::FloatArray* ThetaMatrix::mutable_item_weights(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ThetaMatrix.item_weights)
  return item_weights_.Mutable(index);
}
::artm::FloatArray* ThetaMatrix::add_item_weights() {
  // @@protoc_insertion_point(field_add:artm.ThetaMatrix.item_weights)
  return item_weights_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
ThetaMatrix::mutable_item_weights() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaMatrix.item_weights)
  return &item_weights_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
ThetaMatrix::item_weights() const {
  // @@protoc_insertion_point(field_list:artm.ThetaMatrix.item_weights)
  return item_weights_;
}

// repeated string topic_name = 4;
int ThetaMatrix::topic_name_size() const {
  return topic_name_.size();
}
void ThetaMatrix::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& ThetaMatrix::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* ThetaMatrix::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ThetaMatrix.topic_name)
  return topic_name_.Mutable(index);
}
 void ThetaMatrix::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ThetaMatrix.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void ThetaMatrix::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ThetaMatrix.topic_name)
}
 void ThetaMatrix::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ThetaMatrix.topic_name)
}
 ::std::string* ThetaMatrix::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.ThetaMatrix.topic_name)
  return topic_name_.Add();
}
 void ThetaMatrix::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ThetaMatrix.topic_name)
}
 void ThetaMatrix::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ThetaMatrix.topic_name)
}
 void ThetaMatrix::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ThetaMatrix.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ThetaMatrix::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.ThetaMatrix.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ThetaMatrix::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaMatrix.topic_name)
  return &topic_name_;
}

// optional int32 num_topics = 5;
bool ThetaMatrix::has_num_topics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ThetaMatrix::set_has_num_topics() {
  _has_bits_[0] |= 0x00000008u;
}
void ThetaMatrix::clear_has_num_topics() {
  _has_bits_[0] &= ~0x00000008u;
}
void ThetaMatrix::clear_num_topics() {
  num_topics_ = 0;
  clear_has_num_topics();
}
 ::google::protobuf::int32 ThetaMatrix::num_topics() const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.num_topics)
  return num_topics_;
}
 void ThetaMatrix::set_num_topics(::google::protobuf::int32 value) {
  set_has_num_topics();
  num_topics_ = value;
  // @@protoc_insertion_point(field_set:artm.ThetaMatrix.num_topics)
}

// repeated string item_title = 6;
int ThetaMatrix::item_title_size() const {
  return item_title_.size();
}
void ThetaMatrix::clear_item_title() {
  item_title_.Clear();
}
 const ::std::string& ThetaMatrix::item_title(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.item_title)
  return item_title_.Get(index);
}
 ::std::string* ThetaMatrix::mutable_item_title(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ThetaMatrix.item_title)
  return item_title_.Mutable(index);
}
 void ThetaMatrix::set_item_title(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ThetaMatrix.item_title)
  item_title_.Mutable(index)->assign(value);
}
 void ThetaMatrix::set_item_title(int index, const char* value) {
  item_title_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ThetaMatrix.item_title)
}
 void ThetaMatrix::set_item_title(int index, const char* value, size_t size) {
  item_title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ThetaMatrix.item_title)
}
 ::std::string* ThetaMatrix::add_item_title() {
  // @@protoc_insertion_point(field_add_mutable:artm.ThetaMatrix.item_title)
  return item_title_.Add();
}
 void ThetaMatrix::add_item_title(const ::std::string& value) {
  item_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ThetaMatrix.item_title)
}
 void ThetaMatrix::add_item_title(const char* value) {
  item_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ThetaMatrix.item_title)
}
 void ThetaMatrix::add_item_title(const char* value, size_t size) {
  item_title_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ThetaMatrix.item_title)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ThetaMatrix::item_title() const {
  // @@protoc_insertion_point(field_list:artm.ThetaMatrix.item_title)
  return item_title_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ThetaMatrix::mutable_item_title() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaMatrix.item_title)
  return &item_title_;
}

// repeated .artm.IntArray topic_indices = 7;
int ThetaMatrix::topic_indices_size() const {
  return topic_indices_.size();
}
void ThetaMatrix::clear_topic_indices() {
  topic_indices_.Clear();
}
const ::artm::IntArray& ThetaMatrix::topic_indices(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.topic_indices)
  return topic_indices_.Get(index);
}
::artm::IntArray* ThetaMatrix::mutable_topic_indices(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ThetaMatrix.topic_indices)
  return topic_indices_.Mutable(index);
}
::artm::IntArray* ThetaMatrix::add_topic_indices() {
  // @@protoc_insertion_point(field_add:artm.ThetaMatrix.topic_indices)
  return topic_indices_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
ThetaMatrix::mutable_topic_indices() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaMatrix.topic_indices)
  return &topic_indices_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
ThetaMatrix::topic_indices() const {
  // @@protoc_insertion_point(field_list:artm.ThetaMatrix.topic_indices)
  return topic_indices_;
}

// optional int64 num_values = 8;
bool ThetaMatrix::has_num_values() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ThetaMatrix::set_has_num_values() {
  _has_bits_[0] |= 0x00000040u;
}
void ThetaMatrix::clear_has_num_values() {
  _has_bits_[0] &= ~0x00000040u;
}
void ThetaMatrix::clear_num_values() {
  num_values_ = GOOGLE_LONGLONG(0);
  clear_has_num_values();
}
 ::google::protobuf::int64 ThetaMatrix::num_values() const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.num_values)
  return num_values_;
}
 void ThetaMatrix::set_num_values(::google::protobuf::int64 value) {
  set_has_num_values();
  num_values_ = value;
  // @@protoc_insertion_point(field_set:artm.ThetaMatrix.num_values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CollectionParserConfig_CollectionFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionParserConfig_CollectionFormat_descriptor_;
}
bool CollectionParserConfig_CollectionFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CollectionParserConfig_CollectionFormat CollectionParserConfig::BagOfWordsUci;
const CollectionParserConfig_CollectionFormat CollectionParserConfig::MatrixMarket;
const CollectionParserConfig_CollectionFormat CollectionParserConfig::VowpalWabbit;
const CollectionParserConfig_CollectionFormat CollectionParserConfig::CollectionFormat_MIN;
const CollectionParserConfig_CollectionFormat CollectionParserConfig::CollectionFormat_MAX;
const int CollectionParserConfig::CollectionFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CollectionParserConfig_BatchNameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionParserConfig_BatchNameType_descriptor_;
}
bool CollectionParserConfig_BatchNameType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CollectionParserConfig_BatchNameType CollectionParserConfig::Guid;
const CollectionParserConfig_BatchNameType CollectionParserConfig::Code;
const CollectionParserConfig_BatchNameType CollectionParserConfig::BatchNameType_MIN;
const CollectionParserConfig_BatchNameType CollectionParserConfig::BatchNameType_MAX;
const int CollectionParserConfig::BatchNameType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectionParserConfig::kFormatFieldNumber;
const int CollectionParserConfig::kDocwordFilePathFieldNumber;
const int CollectionParserConfig::kVocabFilePathFieldNumber;
const int CollectionParserConfig::kTargetFolderFieldNumber;
const int CollectionParserConfig::kNumItemsPerBatchFieldNumber;
const int CollectionParserConfig::kUseUnityBasedIndicesFieldNumber;
const int CollectionParserConfig::kNameTypeFieldNumber;
const int CollectionParserConfig::kNumThreadsFieldNumber;
const int CollectionParserConfig::kClassIdFieldNumber;
const int CollectionParserConfig::kCoocTfFilePathFieldNumber;
const int CollectionParserConfig::kCoocDfFilePathFieldNumber;
const int CollectionParserConfig::kPpmiTfFilePathFieldNumber;
const int CollectionParserConfig::kPpmiDfFilePathFieldNumber;
const int CollectionParserConfig::kGatherCoocTfFieldNumber;
const int CollectionParserConfig::kGatherCoocDfFieldNumber;
const int CollectionParserConfig::kGatherCoocFieldNumber;
const int CollectionParserConfig::kCoocWindowWidthFieldNumber;
const int CollectionParserConfig::kCoocMinTfFieldNumber;
const int CollectionParserConfig::kCoocMinDfFieldNumber;
const int CollectionParserConfig::kStoreSymmetricCoocValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectionParserConfig::CollectionParserConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.CollectionParserConfig)
}

void CollectionParserConfig::InitAsDefaultInstance() {
}

CollectionParserConfig::CollectionParserConfig(const CollectionParserConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.CollectionParserConfig)
}

void CollectionParserConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  format_ = 0;
  docword_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vocab_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_items_per_batch_ = 1000;
  use_unity_based_indices_ = true;
  name_type_ = 0;
  num_threads_ = 0;
  cooc_tf_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cooc_df_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ppmi_tf_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ppmi_df_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gather_cooc_tf_ = false;
  gather_cooc_df_ = false;
  gather_cooc_ = false;
  cooc_window_width_ = 10;
  cooc_min_tf_ = 1;
  cooc_min_df_ = 1;
  store_symmetric_cooc_values_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectionParserConfig::~CollectionParserConfig() {
  // @@protoc_insertion_point(destructor:artm.CollectionParserConfig)
  SharedDtor();
}

void CollectionParserConfig::SharedDtor() {
  docword_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vocab_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cooc_tf_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cooc_df_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ppmi_tf_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ppmi_df_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CollectionParserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectionParserConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionParserConfig_descriptor_;
}

const CollectionParserConfig& CollectionParserConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

CollectionParserConfig* CollectionParserConfig::default_instance_ = NULL;

CollectionParserConfig* CollectionParserConfig::New(::google::protobuf::Arena* arena) const {
  CollectionParserConfig* n = new CollectionParserConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollectionParserConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.CollectionParserConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CollectionParserConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CollectionParserConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(name_type_, num_threads_);
    format_ = 0;
    if (has_docword_file_path()) {
      docword_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_vocab_file_path()) {
      vocab_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_target_folder()) {
      target_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    num_items_per_batch_ = 1000;
    use_unity_based_indices_ = true;
  }
  if (_has_bits_[8 / 32] & 65024u) {
    ZR_(gather_cooc_tf_, gather_cooc_);
    if (has_cooc_tf_file_path()) {
      cooc_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cooc_df_file_path()) {
      cooc_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ppmi_tf_file_path()) {
      ppmi_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ppmi_df_file_path()) {
      ppmi_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 983040u) {
    cooc_window_width_ = 10;
    cooc_min_tf_ = 1;
    cooc_min_df_ = 1;
    store_symmetric_cooc_values_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CollectionParserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.CollectionParserConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.CollectionParserConfig.CollectionFormat format = 1 [default = BagOfWordsUci];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::CollectionParserConfig_CollectionFormat_IsValid(value)) {
            set_format(static_cast< ::artm::CollectionParserConfig_CollectionFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_docword_file_path;
        break;
      }

      // optional string docword_file_path = 2;
      case 2: {
        if (tag == 18) {
         parse_docword_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docword_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->docword_file_path().data(), this->docword_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CollectionParserConfig.docword_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vocab_file_path;
        break;
      }

      // optional string vocab_file_path = 3;
      case 3: {
        if (tag == 26) {
         parse_vocab_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vocab_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vocab_file_path().data(), this->vocab_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CollectionParserConfig.vocab_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_target_folder;
        break;
      }

      // optional string target_folder = 4;
      case 4: {
        if (tag == 34) {
         parse_target_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_folder().data(), this->target_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CollectionParserConfig.target_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_items_per_batch;
        break;
      }

      // optional int32 num_items_per_batch = 5 [default = 1000];
      case 5: {
        if (tag == 40) {
         parse_num_items_per_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_items_per_batch_)));
          set_has_num_items_per_batch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_use_unity_based_indices;
        break;
      }

      // optional bool use_unity_based_indices = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_use_unity_based_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_unity_based_indices_)));
          set_has_use_unity_based_indices();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_name_type;
        break;
      }

      // optional .artm.CollectionParserConfig.BatchNameType name_type = 7 [default = Guid];
      case 7: {
        if (tag == 56) {
         parse_name_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::CollectionParserConfig_BatchNameType_IsValid(value)) {
            set_name_type(static_cast< ::artm::CollectionParserConfig_BatchNameType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_threads;
        break;
      }

      // optional int32 num_threads = 8;
      case 8: {
        if (tag == 64) {
         parse_num_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_threads_)));
          set_has_num_threads();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 9;
      case 9: {
        if (tag == 74) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CollectionParserConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_class_id;
        if (input->ExpectTag(82)) goto parse_cooc_tf_file_path;
        break;
      }

      // optional string cooc_tf_file_path = 10;
      case 10: {
        if (tag == 82) {
         parse_cooc_tf_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cooc_tf_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cooc_tf_file_path().data(), this->cooc_tf_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CollectionParserConfig.cooc_tf_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cooc_df_file_path;
        break;
      }

      // optional string cooc_df_file_path = 11;
      case 11: {
        if (tag == 90) {
         parse_cooc_df_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cooc_df_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cooc_df_file_path().data(), this->cooc_df_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CollectionParserConfig.cooc_df_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ppmi_tf_file_path;
        break;
      }

      // optional string ppmi_tf_file_path = 12;
      case 12: {
        if (tag == 98) {
         parse_ppmi_tf_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ppmi_tf_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ppmi_tf_file_path().data(), this->ppmi_tf_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CollectionParserConfig.ppmi_tf_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ppmi_df_file_path;
        break;
      }

      // optional string ppmi_df_file_path = 13;
      case 13: {
        if (tag == 106) {
         parse_ppmi_df_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ppmi_df_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ppmi_df_file_path().data(), this->ppmi_df_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CollectionParserConfig.ppmi_df_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gather_cooc_tf;
        break;
      }

      // optional bool gather_cooc_tf = 14;
      case 14: {
        if (tag == 112) {
         parse_gather_cooc_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gather_cooc_tf_)));
          set_has_gather_cooc_tf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_gather_cooc_df;
        break;
      }

      // optional bool gather_cooc_df = 15;
      case 15: {
        if (tag == 120) {
         parse_gather_cooc_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gather_cooc_df_)));
          set_has_gather_cooc_df();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_gather_cooc;
        break;
      }

      // optional bool gather_cooc = 16;
      case 16: {
        if (tag == 128) {
         parse_gather_cooc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gather_cooc_)));
          set_has_gather_cooc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_cooc_window_width;
        break;
      }

      // optional int32 cooc_window_width = 17 [default = 10];
      case 17: {
        if (tag == 136) {
         parse_cooc_window_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooc_window_width_)));
          set_has_cooc_window_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_cooc_min_tf;
        break;
      }

      // optional int32 cooc_min_tf = 18 [default = 1];
      case 18: {
        if (tag == 144) {
         parse_cooc_min_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooc_min_tf_)));
          set_has_cooc_min_tf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_cooc_min_df;
        break;
      }

      // optional int32 cooc_min_df = 19 [default = 1];
      case 19: {
        if (tag == 152) {
         parse_cooc_min_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooc_min_df_)));
          set_has_cooc_min_df();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_store_symmetric_cooc_values;
        break;
      }

      // optional bool store_symmetric_cooc_values = 20 [default = false];
      case 20: {
        if (tag == 160) {
         parse_store_symmetric_cooc_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_symmetric_cooc_values_)));
          set_has_store_symmetric_cooc_values();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.CollectionParserConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.CollectionParserConfig)
  return false;
#undef DO_
}

void CollectionParserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.CollectionParserConfig)
  // optional .artm.CollectionParserConfig.CollectionFormat format = 1 [default = BagOfWordsUci];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }

  // optional string docword_file_path = 2;
  if (has_docword_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docword_file_path().data(), this->docword_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.docword_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->docword_file_path(), output);
  }

  // optional string vocab_file_path = 3;
  if (has_vocab_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vocab_file_path().data(), this->vocab_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.vocab_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vocab_file_path(), output);
  }

  // optional string target_folder = 4;
  if (has_target_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_folder().data(), this->target_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.target_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->target_folder(), output);
  }

  // optional int32 num_items_per_batch = 5 [default = 1000];
  if (has_num_items_per_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_items_per_batch(), output);
  }

  // optional bool use_unity_based_indices = 6 [default = true];
  if (has_use_unity_based_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_unity_based_indices(), output);
  }

  // optional .artm.CollectionParserConfig.BatchNameType name_type = 7 [default = Guid];
  if (has_name_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->name_type(), output);
  }

  // optional int32 num_threads = 8;
  if (has_num_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_threads(), output);
  }

  // repeated string class_id = 9;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->class_id(i), output);
  }

  // optional string cooc_tf_file_path = 10;
  if (has_cooc_tf_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooc_tf_file_path().data(), this->cooc_tf_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.cooc_tf_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->cooc_tf_file_path(), output);
  }

  // optional string cooc_df_file_path = 11;
  if (has_cooc_df_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooc_df_file_path().data(), this->cooc_df_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.cooc_df_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->cooc_df_file_path(), output);
  }

  // optional string ppmi_tf_file_path = 12;
  if (has_ppmi_tf_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ppmi_tf_file_path().data(), this->ppmi_tf_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.ppmi_tf_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->ppmi_tf_file_path(), output);
  }

  // optional string ppmi_df_file_path = 13;
  if (has_ppmi_df_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ppmi_df_file_path().data(), this->ppmi_df_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.ppmi_df_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->ppmi_df_file_path(), output);
  }

  // optional bool gather_cooc_tf = 14;
  if (has_gather_cooc_tf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->gather_cooc_tf(), output);
  }

  // optional bool gather_cooc_df = 15;
  if (has_gather_cooc_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->gather_cooc_df(), output);
  }

  // optional bool gather_cooc = 16;
  if (has_gather_cooc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->gather_cooc(), output);
  }

  // optional int32 cooc_window_width = 17 [default = 10];
  if (has_cooc_window_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cooc_window_width(), output);
  }

  // optional int32 cooc_min_tf = 18 [default = 1];
  if (has_cooc_min_tf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->cooc_min_tf(), output);
  }

  // optional int32 cooc_min_df = 19 [default = 1];
  if (has_cooc_min_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->cooc_min_df(), output);
  }

  // optional bool store_symmetric_cooc_values = 20 [default = false];
  if (has_store_symmetric_cooc_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->store_symmetric_cooc_values(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.CollectionParserConfig)
}

::google::protobuf::uint8* CollectionParserConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.CollectionParserConfig)
  // optional .artm.CollectionParserConfig.CollectionFormat format = 1 [default = BagOfWordsUci];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }

  // optional string docword_file_path = 2;
  if (has_docword_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docword_file_path().data(), this->docword_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.docword_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->docword_file_path(), target);
  }

  // optional string vocab_file_path = 3;
  if (has_vocab_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vocab_file_path().data(), this->vocab_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.vocab_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vocab_file_path(), target);
  }

  // optional string target_folder = 4;
  if (has_target_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_folder().data(), this->target_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.target_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->target_folder(), target);
  }

  // optional int32 num_items_per_batch = 5 [default = 1000];
  if (has_num_items_per_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_items_per_batch(), target);
  }

  // optional bool use_unity_based_indices = 6 [default = true];
  if (has_use_unity_based_indices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_unity_based_indices(), target);
  }

  // optional .artm.CollectionParserConfig.BatchNameType name_type = 7 [default = Guid];
  if (has_name_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->name_type(), target);
  }

  // optional int32 num_threads = 8;
  if (has_num_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num_threads(), target);
  }

  // repeated string class_id = 9;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->class_id(i), target);
  }

  // optional string cooc_tf_file_path = 10;
  if (has_cooc_tf_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooc_tf_file_path().data(), this->cooc_tf_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.cooc_tf_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->cooc_tf_file_path(), target);
  }

  // optional string cooc_df_file_path = 11;
  if (has_cooc_df_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooc_df_file_path().data(), this->cooc_df_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.cooc_df_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->cooc_df_file_path(), target);
  }

  // optional string ppmi_tf_file_path = 12;
  if (has_ppmi_tf_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ppmi_tf_file_path().data(), this->ppmi_tf_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.ppmi_tf_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ppmi_tf_file_path(), target);
  }

  // optional string ppmi_df_file_path = 13;
  if (has_ppmi_df_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ppmi_df_file_path().data(), this->ppmi_df_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CollectionParserConfig.ppmi_df_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ppmi_df_file_path(), target);
  }

  // optional bool gather_cooc_tf = 14;
  if (has_gather_cooc_tf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->gather_cooc_tf(), target);
  }

  // optional bool gather_cooc_df = 15;
  if (has_gather_cooc_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->gather_cooc_df(), target);
  }

  // optional bool gather_cooc = 16;
  if (has_gather_cooc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->gather_cooc(), target);
  }

  // optional int32 cooc_window_width = 17 [default = 10];
  if (has_cooc_window_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cooc_window_width(), target);
  }

  // optional int32 cooc_min_tf = 18 [default = 1];
  if (has_cooc_min_tf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->cooc_min_tf(), target);
  }

  // optional int32 cooc_min_df = 19 [default = 1];
  if (has_cooc_min_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->cooc_min_df(), target);
  }

  // optional bool store_symmetric_cooc_values = 20 [default = false];
  if (has_store_symmetric_cooc_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->store_symmetric_cooc_values(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.CollectionParserConfig)
  return target;
}

int CollectionParserConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.CollectionParserConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .artm.CollectionParserConfig.CollectionFormat format = 1 [default = BagOfWordsUci];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional string docword_file_path = 2;
    if (has_docword_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docword_file_path());
    }

    // optional string vocab_file_path = 3;
    if (has_vocab_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vocab_file_path());
    }

    // optional string target_folder = 4;
    if (has_target_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_folder());
    }

    // optional int32 num_items_per_batch = 5 [default = 1000];
    if (has_num_items_per_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_items_per_batch());
    }

    // optional bool use_unity_based_indices = 6 [default = true];
    if (has_use_unity_based_indices()) {
      total_size += 1 + 1;
    }

    // optional .artm.CollectionParserConfig.BatchNameType name_type = 7 [default = Guid];
    if (has_name_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->name_type());
    }

    // optional int32 num_threads = 8;
    if (has_num_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_threads());
    }

  }
  if (_has_bits_[9 / 32] & 65024u) {
    // optional string cooc_tf_file_path = 10;
    if (has_cooc_tf_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cooc_tf_file_path());
    }

    // optional string cooc_df_file_path = 11;
    if (has_cooc_df_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cooc_df_file_path());
    }

    // optional string ppmi_tf_file_path = 12;
    if (has_ppmi_tf_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ppmi_tf_file_path());
    }

    // optional string ppmi_df_file_path = 13;
    if (has_ppmi_df_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ppmi_df_file_path());
    }

    // optional bool gather_cooc_tf = 14;
    if (has_gather_cooc_tf()) {
      total_size += 1 + 1;
    }

    // optional bool gather_cooc_df = 15;
    if (has_gather_cooc_df()) {
      total_size += 1 + 1;
    }

    // optional bool gather_cooc = 16;
    if (has_gather_cooc()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional int32 cooc_window_width = 17 [default = 10];
    if (has_cooc_window_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooc_window_width());
    }

    // optional int32 cooc_min_tf = 18 [default = 1];
    if (has_cooc_min_tf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooc_min_tf());
    }

    // optional int32 cooc_min_df = 19 [default = 1];
    if (has_cooc_min_df()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooc_min_df());
    }

    // optional bool store_symmetric_cooc_values = 20 [default = false];
    if (has_store_symmetric_cooc_values()) {
      total_size += 2 + 1;
    }

  }
  // repeated string class_id = 9;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectionParserConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.CollectionParserConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CollectionParserConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CollectionParserConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.CollectionParserConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.CollectionParserConfig)
    MergeFrom(*source);
  }
}

void CollectionParserConfig::MergeFrom(const CollectionParserConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.CollectionParserConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_docword_file_path()) {
      set_has_docword_file_path();
      docword_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docword_file_path_);
    }
    if (from.has_vocab_file_path()) {
      set_has_vocab_file_path();
      vocab_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vocab_file_path_);
    }
    if (from.has_target_folder()) {
      set_has_target_folder();
      target_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_folder_);
    }
    if (from.has_num_items_per_batch()) {
      set_num_items_per_batch(from.num_items_per_batch());
    }
    if (from.has_use_unity_based_indices()) {
      set_use_unity_based_indices(from.use_unity_based_indices());
    }
    if (from.has_name_type()) {
      set_name_type(from.name_type());
    }
    if (from.has_num_threads()) {
      set_num_threads(from.num_threads());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_cooc_tf_file_path()) {
      set_has_cooc_tf_file_path();
      cooc_tf_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cooc_tf_file_path_);
    }
    if (from.has_cooc_df_file_path()) {
      set_has_cooc_df_file_path();
      cooc_df_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cooc_df_file_path_);
    }
    if (from.has_ppmi_tf_file_path()) {
      set_has_ppmi_tf_file_path();
      ppmi_tf_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ppmi_tf_file_path_);
    }
    if (from.has_ppmi_df_file_path()) {
      set_has_ppmi_df_file_path();
      ppmi_df_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ppmi_df_file_path_);
    }
    if (from.has_gather_cooc_tf()) {
      set_gather_cooc_tf(from.gather_cooc_tf());
    }
    if (from.has_gather_cooc_df()) {
      set_gather_cooc_df(from.gather_cooc_df());
    }
    if (from.has_gather_cooc()) {
      set_gather_cooc(from.gather_cooc());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cooc_window_width()) {
      set_cooc_window_width(from.cooc_window_width());
    }
    if (from.has_cooc_min_tf()) {
      set_cooc_min_tf(from.cooc_min_tf());
    }
    if (from.has_cooc_min_df()) {
      set_cooc_min_df(from.cooc_min_df());
    }
    if (from.has_store_symmetric_cooc_values()) {
      set_store_symmetric_cooc_values(from.store_symmetric_cooc_values());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CollectionParserConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.CollectionParserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionParserConfig::CopyFrom(const CollectionParserConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.CollectionParserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionParserConfig::IsInitialized() const {

  return true;
}

void CollectionParserConfig::Swap(CollectionParserConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollectionParserConfig::InternalSwap(CollectionParserConfig* other) {
  std::swap(format_, other->format_);
  docword_file_path_.Swap(&other->docword_file_path_);
  vocab_file_path_.Swap(&other->vocab_file_path_);
  target_folder_.Swap(&other->target_folder_);
  std::swap(num_items_per_batch_, other->num_items_per_batch_);
  std::swap(use_unity_based_indices_, other->use_unity_based_indices_);
  std::swap(name_type_, other->name_type_);
  std::swap(num_threads_, other->num_threads_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  cooc_tf_file_path_.Swap(&other->cooc_tf_file_path_);
  cooc_df_file_path_.Swap(&other->cooc_df_file_path_);
  ppmi_tf_file_path_.Swap(&other->ppmi_tf_file_path_);
  ppmi_df_file_path_.Swap(&other->ppmi_df_file_path_);
  std::swap(gather_cooc_tf_, other->gather_cooc_tf_);
  std::swap(gather_cooc_df_, other->gather_cooc_df_);
  std::swap(gather_cooc_, other->gather_cooc_);
  std::swap(cooc_window_width_, other->cooc_window_width_);
  std::swap(cooc_min_tf_, other->cooc_min_tf_);
  std::swap(cooc_min_df_, other->cooc_min_df_);
  std::swap(store_symmetric_cooc_values_, other->store_symmetric_cooc_values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollectionParserConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectionParserConfig_descriptor_;
  metadata.reflection = CollectionParserConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollectionParserConfig

// optional .artm.CollectionParserConfig.CollectionFormat format = 1 [default = BagOfWordsUci];
bool CollectionParserConfig::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CollectionParserConfig::set_has_format() {
  _has_bits_[0] |= 0x00000001u;
}
void CollectionParserConfig::clear_has_format() {
  _has_bits_[0] &= ~0x00000001u;
}
void CollectionParserConfig::clear_format() {
  format_ = 0;
  clear_has_format();
}
 ::artm::CollectionParserConfig_CollectionFormat CollectionParserConfig::format() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.format)
  return static_cast< ::artm::CollectionParserConfig_CollectionFormat >(format_);
}
 void CollectionParserConfig::set_format(::artm::CollectionParserConfig_CollectionFormat value) {
  assert(::artm::CollectionParserConfig_CollectionFormat_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.format)
}

// optional string docword_file_path = 2;
bool CollectionParserConfig::has_docword_file_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CollectionParserConfig::set_has_docword_file_path() {
  _has_bits_[0] |= 0x00000002u;
}
void CollectionParserConfig::clear_has_docword_file_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void CollectionParserConfig::clear_docword_file_path() {
  docword_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_docword_file_path();
}
 const ::std::string& CollectionParserConfig::docword_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.docword_file_path)
  return docword_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_docword_file_path(const ::std::string& value) {
  set_has_docword_file_path();
  docword_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.docword_file_path)
}
 void CollectionParserConfig::set_docword_file_path(const char* value) {
  set_has_docword_file_path();
  docword_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.docword_file_path)
}
 void CollectionParserConfig::set_docword_file_path(const char* value, size_t size) {
  set_has_docword_file_path();
  docword_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.docword_file_path)
}
 ::std::string* CollectionParserConfig::mutable_docword_file_path() {
  set_has_docword_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.docword_file_path)
  return docword_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CollectionParserConfig::release_docword_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.docword_file_path)
  clear_has_docword_file_path();
  return docword_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_allocated_docword_file_path(::std::string* docword_file_path) {
  if (docword_file_path != NULL) {
    set_has_docword_file_path();
  } else {
    clear_has_docword_file_path();
  }
  docword_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docword_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.docword_file_path)
}

// optional string vocab_file_path = 3;
bool CollectionParserConfig::has_vocab_file_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CollectionParserConfig::set_has_vocab_file_path() {
  _has_bits_[0] |= 0x00000004u;
}
void CollectionParserConfig::clear_has_vocab_file_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void CollectionParserConfig::clear_vocab_file_path() {
  vocab_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vocab_file_path();
}
 const ::std::string& CollectionParserConfig::vocab_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.vocab_file_path)
  return vocab_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_vocab_file_path(const ::std::string& value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.vocab_file_path)
}
 void CollectionParserConfig::set_vocab_file_path(const char* value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.vocab_file_path)
}
 void CollectionParserConfig::set_vocab_file_path(const char* value, size_t size) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.vocab_file_path)
}
 ::std::string* CollectionParserConfig::mutable_vocab_file_path() {
  set_has_vocab_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.vocab_file_path)
  return vocab_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CollectionParserConfig::release_vocab_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.vocab_file_path)
  clear_has_vocab_file_path();
  return vocab_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_allocated_vocab_file_path(::std::string* vocab_file_path) {
  if (vocab_file_path != NULL) {
    set_has_vocab_file_path();
  } else {
    clear_has_vocab_file_path();
  }
  vocab_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vocab_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.vocab_file_path)
}

// optional string target_folder = 4;
bool CollectionParserConfig::has_target_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CollectionParserConfig::set_has_target_folder() {
  _has_bits_[0] |= 0x00000008u;
}
void CollectionParserConfig::clear_has_target_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
void CollectionParserConfig::clear_target_folder() {
  target_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_folder();
}
 const ::std::string& CollectionParserConfig::target_folder() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.target_folder)
  return target_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_target_folder(const ::std::string& value) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.target_folder)
}
 void CollectionParserConfig::set_target_folder(const char* value) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.target_folder)
}
 void CollectionParserConfig::set_target_folder(const char* value, size_t size) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.target_folder)
}
 ::std::string* CollectionParserConfig::mutable_target_folder() {
  set_has_target_folder();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.target_folder)
  return target_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CollectionParserConfig::release_target_folder() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.target_folder)
  clear_has_target_folder();
  return target_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_allocated_target_folder(::std::string* target_folder) {
  if (target_folder != NULL) {
    set_has_target_folder();
  } else {
    clear_has_target_folder();
  }
  target_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_folder);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.target_folder)
}

// optional int32 num_items_per_batch = 5 [default = 1000];
bool CollectionParserConfig::has_num_items_per_batch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CollectionParserConfig::set_has_num_items_per_batch() {
  _has_bits_[0] |= 0x00000010u;
}
void CollectionParserConfig::clear_has_num_items_per_batch() {
  _has_bits_[0] &= ~0x00000010u;
}
void CollectionParserConfig::clear_num_items_per_batch() {
  num_items_per_batch_ = 1000;
  clear_has_num_items_per_batch();
}
 ::google::protobuf::int32 CollectionParserConfig::num_items_per_batch() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.num_items_per_batch)
  return num_items_per_batch_;
}
 void CollectionParserConfig::set_num_items_per_batch(::google::protobuf::int32 value) {
  set_has_num_items_per_batch();
  num_items_per_batch_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.num_items_per_batch)
}

// optional bool use_unity_based_indices = 6 [default = true];
bool CollectionParserConfig::has_use_unity_based_indices() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CollectionParserConfig::set_has_use_unity_based_indices() {
  _has_bits_[0] |= 0x00000020u;
}
void CollectionParserConfig::clear_has_use_unity_based_indices() {
  _has_bits_[0] &= ~0x00000020u;
}
void CollectionParserConfig::clear_use_unity_based_indices() {
  use_unity_based_indices_ = true;
  clear_has_use_unity_based_indices();
}
 bool CollectionParserConfig::use_unity_based_indices() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.use_unity_based_indices)
  return use_unity_based_indices_;
}
 void CollectionParserConfig::set_use_unity_based_indices(bool value) {
  set_has_use_unity_based_indices();
  use_unity_based_indices_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.use_unity_based_indices)
}

// optional .artm.CollectionParserConfig.BatchNameType name_type = 7 [default = Guid];
bool CollectionParserConfig::has_name_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CollectionParserConfig::set_has_name_type() {
  _has_bits_[0] |= 0x00000040u;
}
void CollectionParserConfig::clear_has_name_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void CollectionParserConfig::clear_name_type() {
  name_type_ = 0;
  clear_has_name_type();
}
 ::artm::CollectionParserConfig_BatchNameType CollectionParserConfig::name_type() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.name_type)
  return static_cast< ::artm::CollectionParserConfig_BatchNameType >(name_type_);
}
 void CollectionParserConfig::set_name_type(::artm::CollectionParserConfig_BatchNameType value) {
  assert(::artm::CollectionParserConfig_BatchNameType_IsValid(value));
  set_has_name_type();
  name_type_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.name_type)
}

// optional int32 num_threads = 8;
bool CollectionParserConfig::has_num_threads() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CollectionParserConfig::set_has_num_threads() {
  _has_bits_[0] |= 0x00000080u;
}
void CollectionParserConfig::clear_has_num_threads() {
  _has_bits_[0] &= ~0x00000080u;
}
void CollectionParserConfig::clear_num_threads() {
  num_threads_ = 0;
  clear_has_num_threads();
}
 ::google::protobuf::int32 CollectionParserConfig::num_threads() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.num_threads)
  return num_threads_;
}
 void CollectionParserConfig::set_num_threads(::google::protobuf::int32 value) {
  set_has_num_threads();
  num_threads_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.num_threads)
}

// repeated string class_id = 9;
int CollectionParserConfig::class_id_size() const {
  return class_id_.size();
}
void CollectionParserConfig::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& CollectionParserConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.class_id)
  return class_id_.Get(index);
}
 ::std::string* CollectionParserConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.class_id)
  return class_id_.Mutable(index);
}
 void CollectionParserConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void CollectionParserConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.class_id)
}
 void CollectionParserConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.class_id)
}
 ::std::string* CollectionParserConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.CollectionParserConfig.class_id)
  return class_id_.Add();
}
 void CollectionParserConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.CollectionParserConfig.class_id)
}
 void CollectionParserConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.CollectionParserConfig.class_id)
}
 void CollectionParserConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.CollectionParserConfig.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CollectionParserConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.CollectionParserConfig.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CollectionParserConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.CollectionParserConfig.class_id)
  return &class_id_;
}

// optional string cooc_tf_file_path = 10;
bool CollectionParserConfig::has_cooc_tf_file_path() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CollectionParserConfig::set_has_cooc_tf_file_path() {
  _has_bits_[0] |= 0x00000200u;
}
void CollectionParserConfig::clear_has_cooc_tf_file_path() {
  _has_bits_[0] &= ~0x00000200u;
}
void CollectionParserConfig::clear_cooc_tf_file_path() {
  cooc_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooc_tf_file_path();
}
 const ::std::string& CollectionParserConfig::cooc_tf_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.cooc_tf_file_path)
  return cooc_tf_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_cooc_tf_file_path(const ::std::string& value) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.cooc_tf_file_path)
}
 void CollectionParserConfig::set_cooc_tf_file_path(const char* value) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.cooc_tf_file_path)
}
 void CollectionParserConfig::set_cooc_tf_file_path(const char* value, size_t size) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.cooc_tf_file_path)
}
 ::std::string* CollectionParserConfig::mutable_cooc_tf_file_path() {
  set_has_cooc_tf_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.cooc_tf_file_path)
  return cooc_tf_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CollectionParserConfig::release_cooc_tf_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.cooc_tf_file_path)
  clear_has_cooc_tf_file_path();
  return cooc_tf_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_allocated_cooc_tf_file_path(::std::string* cooc_tf_file_path) {
  if (cooc_tf_file_path != NULL) {
    set_has_cooc_tf_file_path();
  } else {
    clear_has_cooc_tf_file_path();
  }
  cooc_tf_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooc_tf_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.cooc_tf_file_path)
}

// optional string cooc_df_file_path = 11;
bool CollectionParserConfig::has_cooc_df_file_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CollectionParserConfig::set_has_cooc_df_file_path() {
  _has_bits_[0] |= 0x00000400u;
}
void CollectionParserConfig::clear_has_cooc_df_file_path() {
  _has_bits_[0] &= ~0x00000400u;
}
void CollectionParserConfig::clear_cooc_df_file_path() {
  cooc_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooc_df_file_path();
}
 const ::std::string& CollectionParserConfig::cooc_df_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.cooc_df_file_path)
  return cooc_df_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_cooc_df_file_path(const ::std::string& value) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.cooc_df_file_path)
}
 void CollectionParserConfig::set_cooc_df_file_path(const char* value) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.cooc_df_file_path)
}
 void CollectionParserConfig::set_cooc_df_file_path(const char* value, size_t size) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.cooc_df_file_path)
}
 ::std::string* CollectionParserConfig::mutable_cooc_df_file_path() {
  set_has_cooc_df_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.cooc_df_file_path)
  return cooc_df_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CollectionParserConfig::release_cooc_df_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.cooc_df_file_path)
  clear_has_cooc_df_file_path();
  return cooc_df_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_allocated_cooc_df_file_path(::std::string* cooc_df_file_path) {
  if (cooc_df_file_path != NULL) {
    set_has_cooc_df_file_path();
  } else {
    clear_has_cooc_df_file_path();
  }
  cooc_df_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooc_df_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.cooc_df_file_path)
}

// optional string ppmi_tf_file_path = 12;
bool CollectionParserConfig::has_ppmi_tf_file_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CollectionParserConfig::set_has_ppmi_tf_file_path() {
  _has_bits_[0] |= 0x00000800u;
}
void CollectionParserConfig::clear_has_ppmi_tf_file_path() {
  _has_bits_[0] &= ~0x00000800u;
}
void CollectionParserConfig::clear_ppmi_tf_file_path() {
  ppmi_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ppmi_tf_file_path();
}
 const ::std::string& CollectionParserConfig::ppmi_tf_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.ppmi_tf_file_path)
  return ppmi_tf_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_ppmi_tf_file_path(const ::std::string& value) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.ppmi_tf_file_path)
}
 void CollectionParserConfig::set_ppmi_tf_file_path(const char* value) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.ppmi_tf_file_path)
}
 void CollectionParserConfig::set_ppmi_tf_file_path(const char* value, size_t size) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.ppmi_tf_file_path)
}
 ::std::string* CollectionParserConfig::mutable_ppmi_tf_file_path() {
  set_has_ppmi_tf_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.ppmi_tf_file_path)
  return ppmi_tf_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CollectionParserConfig::release_ppmi_tf_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.ppmi_tf_file_path)
  clear_has_ppmi_tf_file_path();
  return ppmi_tf_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_allocated_ppmi_tf_file_path(::std::string* ppmi_tf_file_path) {
  if (ppmi_tf_file_path != NULL) {
    set_has_ppmi_tf_file_path();
  } else {
    clear_has_ppmi_tf_file_path();
  }
  ppmi_tf_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppmi_tf_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.ppmi_tf_file_path)
}

// optional string ppmi_df_file_path = 13;
bool CollectionParserConfig::has_ppmi_df_file_path() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CollectionParserConfig::set_has_ppmi_df_file_path() {
  _has_bits_[0] |= 0x00001000u;
}
void CollectionParserConfig::clear_has_ppmi_df_file_path() {
  _has_bits_[0] &= ~0x00001000u;
}
void CollectionParserConfig::clear_ppmi_df_file_path() {
  ppmi_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ppmi_df_file_path();
}
 const ::std::string& CollectionParserConfig::ppmi_df_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.ppmi_df_file_path)
  return ppmi_df_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_ppmi_df_file_path(const ::std::string& value) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.ppmi_df_file_path)
}
 void CollectionParserConfig::set_ppmi_df_file_path(const char* value) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.ppmi_df_file_path)
}
 void CollectionParserConfig::set_ppmi_df_file_path(const char* value, size_t size) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.ppmi_df_file_path)
}
 ::std::string* CollectionParserConfig::mutable_ppmi_df_file_path() {
  set_has_ppmi_df_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.ppmi_df_file_path)
  return ppmi_df_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CollectionParserConfig::release_ppmi_df_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.ppmi_df_file_path)
  clear_has_ppmi_df_file_path();
  return ppmi_df_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollectionParserConfig::set_allocated_ppmi_df_file_path(::std::string* ppmi_df_file_path) {
  if (ppmi_df_file_path != NULL) {
    set_has_ppmi_df_file_path();
  } else {
    clear_has_ppmi_df_file_path();
  }
  ppmi_df_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppmi_df_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.ppmi_df_file_path)
}

// optional bool gather_cooc_tf = 14;
bool CollectionParserConfig::has_gather_cooc_tf() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CollectionParserConfig::set_has_gather_cooc_tf() {
  _has_bits_[0] |= 0x00002000u;
}
void CollectionParserConfig::clear_has_gather_cooc_tf() {
  _has_bits_[0] &= ~0x00002000u;
}
void CollectionParserConfig::clear_gather_cooc_tf() {
  gather_cooc_tf_ = false;
  clear_has_gather_cooc_tf();
}
 bool CollectionParserConfig::gather_cooc_tf() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.gather_cooc_tf)
  return gather_cooc_tf_;
}
 void CollectionParserConfig::set_gather_cooc_tf(bool value) {
  set_has_gather_cooc_tf();
  gather_cooc_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.gather_cooc_tf)
}

// optional bool gather_cooc_df = 15;
bool CollectionParserConfig::has_gather_cooc_df() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CollectionParserConfig::set_has_gather_cooc_df() {
  _has_bits_[0] |= 0x00004000u;
}
void CollectionParserConfig::clear_has_gather_cooc_df() {
  _has_bits_[0] &= ~0x00004000u;
}
void CollectionParserConfig::clear_gather_cooc_df() {
  gather_cooc_df_ = false;
  clear_has_gather_cooc_df();
}
 bool CollectionParserConfig::gather_cooc_df() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.gather_cooc_df)
  return gather_cooc_df_;
}
 void CollectionParserConfig::set_gather_cooc_df(bool value) {
  set_has_gather_cooc_df();
  gather_cooc_df_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.gather_cooc_df)
}

// optional bool gather_cooc = 16;
bool CollectionParserConfig::has_gather_cooc() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CollectionParserConfig::set_has_gather_cooc() {
  _has_bits_[0] |= 0x00008000u;
}
void CollectionParserConfig::clear_has_gather_cooc() {
  _has_bits_[0] &= ~0x00008000u;
}
void CollectionParserConfig::clear_gather_cooc() {
  gather_cooc_ = false;
  clear_has_gather_cooc();
}
 bool CollectionParserConfig::gather_cooc() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.gather_cooc)
  return gather_cooc_;
}
 void CollectionParserConfig::set_gather_cooc(bool value) {
  set_has_gather_cooc();
  gather_cooc_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.gather_cooc)
}

// optional int32 cooc_window_width = 17 [default = 10];
bool CollectionParserConfig::has_cooc_window_width() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CollectionParserConfig::set_has_cooc_window_width() {
  _has_bits_[0] |= 0x00010000u;
}
void CollectionParserConfig::clear_has_cooc_window_width() {
  _has_bits_[0] &= ~0x00010000u;
}
void CollectionParserConfig::clear_cooc_window_width() {
  cooc_window_width_ = 10;
  clear_has_cooc_window_width();
}
 ::google::protobuf::int32 CollectionParserConfig::cooc_window_width() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.cooc_window_width)
  return cooc_window_width_;
}
 void CollectionParserConfig::set_cooc_window_width(::google::protobuf::int32 value) {
  set_has_cooc_window_width();
  cooc_window_width_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.cooc_window_width)
}

// optional int32 cooc_min_tf = 18 [default = 1];
bool CollectionParserConfig::has_cooc_min_tf() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CollectionParserConfig::set_has_cooc_min_tf() {
  _has_bits_[0] |= 0x00020000u;
}
void CollectionParserConfig::clear_has_cooc_min_tf() {
  _has_bits_[0] &= ~0x00020000u;
}
void CollectionParserConfig::clear_cooc_min_tf() {
  cooc_min_tf_ = 1;
  clear_has_cooc_min_tf();
}
 ::google::protobuf::int32 CollectionParserConfig::cooc_min_tf() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.cooc_min_tf)
  return cooc_min_tf_;
}
 void CollectionParserConfig::set_cooc_min_tf(::google::protobuf::int32 value) {
  set_has_cooc_min_tf();
  cooc_min_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.cooc_min_tf)
}

// optional int32 cooc_min_df = 19 [default = 1];
bool CollectionParserConfig::has_cooc_min_df() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CollectionParserConfig::set_has_cooc_min_df() {
  _has_bits_[0] |= 0x00040000u;
}
void CollectionParserConfig::clear_has_cooc_min_df() {
  _has_bits_[0] &= ~0x00040000u;
}
void CollectionParserConfig::clear_cooc_min_df() {
  cooc_min_df_ = 1;
  clear_has_cooc_min_df();
}
 ::google::protobuf::int32 CollectionParserConfig::cooc_min_df() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.cooc_min_df)
  return cooc_min_df_;
}
 void CollectionParserConfig::set_cooc_min_df(::google::protobuf::int32 value) {
  set_has_cooc_min_df();
  cooc_min_df_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.cooc_min_df)
}

// optional bool store_symmetric_cooc_values = 20 [default = false];
bool CollectionParserConfig::has_store_symmetric_cooc_values() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CollectionParserConfig::set_has_store_symmetric_cooc_values() {
  _has_bits_[0] |= 0x00080000u;
}
void CollectionParserConfig::clear_has_store_symmetric_cooc_values() {
  _has_bits_[0] &= ~0x00080000u;
}
void CollectionParserConfig::clear_store_symmetric_cooc_values() {
  store_symmetric_cooc_values_ = false;
  clear_has_store_symmetric_cooc_values();
}
 bool CollectionParserConfig::store_symmetric_cooc_values() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.store_symmetric_cooc_values)
  return store_symmetric_cooc_values_;
}
 void CollectionParserConfig::set_store_symmetric_cooc_values(bool value) {
  set_has_store_symmetric_cooc_values();
  store_symmetric_cooc_values_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.store_symmetric_cooc_values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectionParserInfo::kNumItemsFieldNumber;
const int CollectionParserInfo::kNumBatchesFieldNumber;
const int CollectionParserInfo::kDictionarySizeFieldNumber;
const int CollectionParserInfo::kNumTokensFieldNumber;
const int CollectionParserInfo::kTotalTokenWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectionParserInfo::CollectionParserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.CollectionParserInfo)
}

void CollectionParserInfo::InitAsDefaultInstance() {
}

CollectionParserInfo::CollectionParserInfo(const CollectionParserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.CollectionParserInfo)
}

void CollectionParserInfo::SharedCtor() {
  _cached_size_ = 0;
  num_items_ = GOOGLE_LONGLONG(0);
  num_batches_ = GOOGLE_LONGLONG(0);
  dictionary_size_ = GOOGLE_LONGLONG(0);
  num_tokens_ = GOOGLE_LONGLONG(0);
  total_token_weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectionParserInfo::~CollectionParserInfo() {
  // @@protoc_insertion_point(destructor:artm.CollectionParserInfo)
  SharedDtor();
}

void CollectionParserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollectionParserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectionParserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionParserInfo_descriptor_;
}

const CollectionParserInfo& CollectionParserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

CollectionParserInfo* CollectionParserInfo::default_instance_ = NULL;

CollectionParserInfo* CollectionParserInfo::New(::google::protobuf::Arena* arena) const {
  CollectionParserInfo* n = new CollectionParserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollectionParserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.CollectionParserInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CollectionParserInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CollectionParserInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(num_items_, total_token_weight_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CollectionParserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.CollectionParserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 num_items = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_items_)));
          set_has_num_items();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_batches;
        break;
      }

      // optional int64 num_batches = 2;
      case 2: {
        if (tag == 16) {
         parse_num_batches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_batches_)));
          set_has_num_batches();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dictionary_size;
        break;
      }

      // optional int64 dictionary_size = 3;
      case 3: {
        if (tag == 24) {
         parse_dictionary_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dictionary_size_)));
          set_has_dictionary_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_tokens;
        break;
      }

      // optional int64 num_tokens = 4;
      case 4: {
        if (tag == 32) {
         parse_num_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_tokens_)));
          set_has_num_tokens();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_total_token_weight;
        break;
      }

      // optional float total_token_weight = 5;
      case 5: {
        if (tag == 45) {
         parse_total_token_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_token_weight_)));
          set_has_total_token_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.CollectionParserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.CollectionParserInfo)
  return false;
#undef DO_
}

void CollectionParserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.CollectionParserInfo)
  // optional int64 num_items = 1;
  if (has_num_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num_items(), output);
  }

  // optional int64 num_batches = 2;
  if (has_num_batches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_batches(), output);
  }

  // optional int64 dictionary_size = 3;
  if (has_dictionary_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dictionary_size(), output);
  }

  // optional int64 num_tokens = 4;
  if (has_num_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->num_tokens(), output);
  }

  // optional float total_token_weight = 5;
  if (has_total_token_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->total_token_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.CollectionParserInfo)
}

::google::protobuf::uint8* CollectionParserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.CollectionParserInfo)
  // optional int64 num_items = 1;
  if (has_num_items()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num_items(), target);
  }

  // optional int64 num_batches = 2;
  if (has_num_batches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_batches(), target);
  }

  // optional int64 dictionary_size = 3;
  if (has_dictionary_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->dictionary_size(), target);
  }

  // optional int64 num_tokens = 4;
  if (has_num_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->num_tokens(), target);
  }

  // optional float total_token_weight = 5;
  if (has_total_token_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->total_token_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.CollectionParserInfo)
  return target;
}

int CollectionParserInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.CollectionParserInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 num_items = 1;
    if (has_num_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_items());
    }

    // optional int64 num_batches = 2;
    if (has_num_batches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_batches());
    }

    // optional int64 dictionary_size = 3;
    if (has_dictionary_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dictionary_size());
    }

    // optional int64 num_tokens = 4;
    if (has_num_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_tokens());
    }

    // optional float total_token_weight = 5;
    if (has_total_token_weight()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectionParserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.CollectionParserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CollectionParserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CollectionParserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.CollectionParserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.CollectionParserInfo)
    MergeFrom(*source);
  }
}

void CollectionParserInfo::MergeFrom(const CollectionParserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.CollectionParserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_items()) {
      set_num_items(from.num_items());
    }
    if (from.has_num_batches()) {
      set_num_batches(from.num_batches());
    }
    if (from.has_dictionary_size()) {
      set_dictionary_size(from.dictionary_size());
    }
    if (from.has_num_tokens()) {
      set_num_tokens(from.num_tokens());
    }
    if (from.has_total_token_weight()) {
      set_total_token_weight(from.total_token_weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CollectionParserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.CollectionParserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionParserInfo::CopyFrom(const CollectionParserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.CollectionParserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionParserInfo::IsInitialized() const {

  return true;
}

void CollectionParserInfo::Swap(CollectionParserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollectionParserInfo::InternalSwap(CollectionParserInfo* other) {
  std::swap(num_items_, other->num_items_);
  std::swap(num_batches_, other->num_batches_);
  std::swap(dictionary_size_, other->dictionary_size_);
  std::swap(num_tokens_, other->num_tokens_);
  std::swap(total_token_weight_, other->total_token_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollectionParserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectionParserInfo_descriptor_;
  metadata.reflection = CollectionParserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollectionParserInfo

// optional int64 num_items = 1;
bool CollectionParserInfo::has_num_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CollectionParserInfo::set_has_num_items() {
  _has_bits_[0] |= 0x00000001u;
}
void CollectionParserInfo::clear_has_num_items() {
  _has_bits_[0] &= ~0x00000001u;
}
void CollectionParserInfo::clear_num_items() {
  num_items_ = GOOGLE_LONGLONG(0);
  clear_has_num_items();
}
 ::google::protobuf::int64 CollectionParserInfo::num_items() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserInfo.num_items)
  return num_items_;
}
 void CollectionParserInfo::set_num_items(::google::protobuf::int64 value) {
  set_has_num_items();
  num_items_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserInfo.num_items)
}

// optional int64 num_batches = 2;
bool CollectionParserInfo::has_num_batches() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CollectionParserInfo::set_has_num_batches() {
  _has_bits_[0] |= 0x00000002u;
}
void CollectionParserInfo::clear_has_num_batches() {
  _has_bits_[0] &= ~0x00000002u;
}
void CollectionParserInfo::clear_num_batches() {
  num_batches_ = GOOGLE_LONGLONG(0);
  clear_has_num_batches();
}
 ::google::protobuf::int64 CollectionParserInfo::num_batches() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserInfo.num_batches)
  return num_batches_;
}
 void CollectionParserInfo::set_num_batches(::google::protobuf::int64 value) {
  set_has_num_batches();
  num_batches_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserInfo.num_batches)
}

// optional int64 dictionary_size = 3;
bool CollectionParserInfo::has_dictionary_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CollectionParserInfo::set_has_dictionary_size() {
  _has_bits_[0] |= 0x00000004u;
}
void CollectionParserInfo::clear_has_dictionary_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void CollectionParserInfo::clear_dictionary_size() {
  dictionary_size_ = GOOGLE_LONGLONG(0);
  clear_has_dictionary_size();
}
 ::google::protobuf::int64 CollectionParserInfo::dictionary_size() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserInfo.dictionary_size)
  return dictionary_size_;
}
 void CollectionParserInfo::set_dictionary_size(::google::protobuf::int64 value) {
  set_has_dictionary_size();
  dictionary_size_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserInfo.dictionary_size)
}

// optional int64 num_tokens = 4;
bool CollectionParserInfo::has_num_tokens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CollectionParserInfo::set_has_num_tokens() {
  _has_bits_[0] |= 0x00000008u;
}
void CollectionParserInfo::clear_has_num_tokens() {
  _has_bits_[0] &= ~0x00000008u;
}
void CollectionParserInfo::clear_num_tokens() {
  num_tokens_ = GOOGLE_LONGLONG(0);
  clear_has_num_tokens();
}
 ::google::protobuf::int64 CollectionParserInfo::num_tokens() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserInfo.num_tokens)
  return num_tokens_;
}
 void CollectionParserInfo::set_num_tokens(::google::protobuf::int64 value) {
  set_has_num_tokens();
  num_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserInfo.num_tokens)
}

// optional float total_token_weight = 5;
bool CollectionParserInfo::has_total_token_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CollectionParserInfo::set_has_total_token_weight() {
  _has_bits_[0] |= 0x00000010u;
}
void CollectionParserInfo::clear_has_total_token_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
void CollectionParserInfo::clear_total_token_weight() {
  total_token_weight_ = 0;
  clear_has_total_token_weight();
}
 float CollectionParserInfo::total_token_weight() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserInfo.total_token_weight)
  return total_token_weight_;
}
 void CollectionParserInfo::set_total_token_weight(float value) {
  set_has_total_token_weight();
  total_token_weight_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserInfo.total_token_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CooccurrenceCollectorConfig::kGatherCoocFieldNumber;
const int CooccurrenceCollectorConfig::kGatherCoocTfFieldNumber;
const int CooccurrenceCollectorConfig::kGatherCoocDfFieldNumber;
const int CooccurrenceCollectorConfig::kStoreSymmetricCoocValuesFieldNumber;
const int CooccurrenceCollectorConfig::kCalculatePpmiTfFieldNumber;
const int CooccurrenceCollectorConfig::kCalculatePpmiDfFieldNumber;
const int CooccurrenceCollectorConfig::kVwFilePathFieldNumber;
const int CooccurrenceCollectorConfig::kVocabFilePathFieldNumber;
const int CooccurrenceCollectorConfig::kTargetFolderFieldNumber;
const int CooccurrenceCollectorConfig::kCoocTfFilePathFieldNumber;
const int CooccurrenceCollectorConfig::kCoocDfFilePathFieldNumber;
const int CooccurrenceCollectorConfig::kPpmiTfFilePathFieldNumber;
const int CooccurrenceCollectorConfig::kPpmiDfFilePathFieldNumber;
const int CooccurrenceCollectorConfig::kCoocWindowWidthFieldNumber;
const int CooccurrenceCollectorConfig::kCoocMinTfFieldNumber;
const int CooccurrenceCollectorConfig::kCoocMinDfFieldNumber;
const int CooccurrenceCollectorConfig::kMaxNumOfOpenFilesInAThreadFieldNumber;
const int CooccurrenceCollectorConfig::kNumItemsPerBatchFieldNumber;
const int CooccurrenceCollectorConfig::kNumThreadsFieldNumber;
const int CooccurrenceCollectorConfig::kTotalNumOfPairsFieldNumber;
const int CooccurrenceCollectorConfig::kTotalNumOfDocumentsFieldNumber;
const int CooccurrenceCollectorConfig::kClassIdFieldNumber;
const int CooccurrenceCollectorConfig::kMaxNumOfOpenFilesInAProcessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CooccurrenceCollectorConfig::CooccurrenceCollectorConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.CooccurrenceCollectorConfig)
}

void CooccurrenceCollectorConfig::InitAsDefaultInstance() {
}

CooccurrenceCollectorConfig::CooccurrenceCollectorConfig(const CooccurrenceCollectorConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.CooccurrenceCollectorConfig)
}

void CooccurrenceCollectorConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gather_cooc_ = false;
  gather_cooc_tf_ = false;
  gather_cooc_df_ = false;
  store_symmetric_cooc_values_ = false;
  calculate_ppmi_tf_ = false;
  calculate_ppmi_df_ = false;
  vw_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vocab_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cooc_tf_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cooc_df_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ppmi_tf_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ppmi_df_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cooc_window_width_ = 10;
  cooc_min_tf_ = 1;
  cooc_min_df_ = 1;
  max_num_of_open_files_in_a_thread_ = 0;
  num_items_per_batch_ = 1000;
  num_threads_ = 0;
  total_num_of_pairs_ = GOOGLE_LONGLONG(0);
  total_num_of_documents_ = 0;
  max_num_of_open_files_in_a_process_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CooccurrenceCollectorConfig::~CooccurrenceCollectorConfig() {
  // @@protoc_insertion_point(destructor:artm.CooccurrenceCollectorConfig)
  SharedDtor();
}

void CooccurrenceCollectorConfig::SharedDtor() {
  vw_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vocab_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cooc_tf_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cooc_df_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ppmi_tf_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ppmi_df_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CooccurrenceCollectorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CooccurrenceCollectorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CooccurrenceCollectorConfig_descriptor_;
}

const CooccurrenceCollectorConfig& CooccurrenceCollectorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

CooccurrenceCollectorConfig* CooccurrenceCollectorConfig::default_instance_ = NULL;

CooccurrenceCollectorConfig* CooccurrenceCollectorConfig::New(::google::protobuf::Arena* arena) const {
  CooccurrenceCollectorConfig* n = new CooccurrenceCollectorConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CooccurrenceCollectorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.CooccurrenceCollectorConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CooccurrenceCollectorConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CooccurrenceCollectorConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(gather_cooc_, calculate_ppmi_df_);
    if (has_vw_file_path()) {
      vw_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_vocab_file_path()) {
      vocab_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_target_folder()) {
      target_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cooc_tf_file_path()) {
      cooc_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cooc_df_file_path()) {
      cooc_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ppmi_tf_file_path()) {
      ppmi_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ppmi_df_file_path()) {
      ppmi_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cooc_window_width_ = 10;
    cooc_min_tf_ = 1;
    cooc_min_df_ = 1;
  }
  if (_has_bits_[16 / 32] & 6225920u) {
    ZR_(num_threads_, total_num_of_pairs_);
    ZR_(total_num_of_documents_, max_num_of_open_files_in_a_process_);
    max_num_of_open_files_in_a_thread_ = 0;
    num_items_per_batch_ = 1000;
  }

#undef ZR_HELPER_
#undef ZR_

  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CooccurrenceCollectorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.CooccurrenceCollectorConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool gather_cooc = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gather_cooc_)));
          set_has_gather_cooc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gather_cooc_tf;
        break;
      }

      // optional bool gather_cooc_tf = 2;
      case 2: {
        if (tag == 16) {
         parse_gather_cooc_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gather_cooc_tf_)));
          set_has_gather_cooc_tf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gather_cooc_df;
        break;
      }

      // optional bool gather_cooc_df = 3;
      case 3: {
        if (tag == 24) {
         parse_gather_cooc_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gather_cooc_df_)));
          set_has_gather_cooc_df();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_store_symmetric_cooc_values;
        break;
      }

      // optional bool store_symmetric_cooc_values = 4;
      case 4: {
        if (tag == 32) {
         parse_store_symmetric_cooc_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_symmetric_cooc_values_)));
          set_has_store_symmetric_cooc_values();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_calculate_ppmi_tf;
        break;
      }

      // optional bool calculate_ppmi_tf = 5;
      case 5: {
        if (tag == 40) {
         parse_calculate_ppmi_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calculate_ppmi_tf_)));
          set_has_calculate_ppmi_tf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_calculate_ppmi_df;
        break;
      }

      // optional bool calculate_ppmi_df = 6;
      case 6: {
        if (tag == 48) {
         parse_calculate_ppmi_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calculate_ppmi_df_)));
          set_has_calculate_ppmi_df();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vw_file_path;
        break;
      }

      // optional string vw_file_path = 7;
      case 7: {
        if (tag == 58) {
         parse_vw_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vw_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vw_file_path().data(), this->vw_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CooccurrenceCollectorConfig.vw_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vocab_file_path;
        break;
      }

      // optional string vocab_file_path = 8;
      case 8: {
        if (tag == 66) {
         parse_vocab_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vocab_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vocab_file_path().data(), this->vocab_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CooccurrenceCollectorConfig.vocab_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_target_folder;
        break;
      }

      // optional string target_folder = 9;
      case 9: {
        if (tag == 74) {
         parse_target_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_folder().data(), this->target_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CooccurrenceCollectorConfig.target_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cooc_tf_file_path;
        break;
      }

      // optional string cooc_tf_file_path = 10;
      case 10: {
        if (tag == 82) {
         parse_cooc_tf_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cooc_tf_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cooc_tf_file_path().data(), this->cooc_tf_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CooccurrenceCollectorConfig.cooc_tf_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cooc_df_file_path;
        break;
      }

      // optional string cooc_df_file_path = 11;
      case 11: {
        if (tag == 90) {
         parse_cooc_df_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cooc_df_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cooc_df_file_path().data(), this->cooc_df_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CooccurrenceCollectorConfig.cooc_df_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ppmi_tf_file_path;
        break;
      }

      // optional string ppmi_tf_file_path = 12;
      case 12: {
        if (tag == 98) {
         parse_ppmi_tf_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ppmi_tf_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ppmi_tf_file_path().data(), this->ppmi_tf_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CooccurrenceCollectorConfig.ppmi_tf_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ppmi_df_file_path;
        break;
      }

      // optional string ppmi_df_file_path = 13;
      case 13: {
        if (tag == 106) {
         parse_ppmi_df_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ppmi_df_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ppmi_df_file_path().data(), this->ppmi_df_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CooccurrenceCollectorConfig.ppmi_df_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_cooc_window_width;
        break;
      }

      // optional int32 cooc_window_width = 14 [default = 10];
      case 14: {
        if (tag == 112) {
         parse_cooc_window_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooc_window_width_)));
          set_has_cooc_window_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_cooc_min_tf;
        break;
      }

      // optional int32 cooc_min_tf = 15 [default = 1];
      case 15: {
        if (tag == 120) {
         parse_cooc_min_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooc_min_tf_)));
          set_has_cooc_min_tf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_cooc_min_df;
        break;
      }

      // optional int32 cooc_min_df = 16 [default = 1];
      case 16: {
        if (tag == 128) {
         parse_cooc_min_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooc_min_df_)));
          set_has_cooc_min_df();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_max_num_of_open_files_in_a_thread;
        break;
      }

      // optional int32 max_num_of_open_files_in_a_thread = 17;
      case 17: {
        if (tag == 136) {
         parse_max_num_of_open_files_in_a_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_of_open_files_in_a_thread_)));
          set_has_max_num_of_open_files_in_a_thread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_num_items_per_batch;
        break;
      }

      // optional int32 num_items_per_batch = 18 [default = 1000];
      case 18: {
        if (tag == 144) {
         parse_num_items_per_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_items_per_batch_)));
          set_has_num_items_per_batch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_num_threads;
        break;
      }

      // optional int32 num_threads = 19;
      case 19: {
        if (tag == 152) {
         parse_num_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_threads_)));
          set_has_num_threads();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_total_num_of_pairs;
        break;
      }

      // optional int64 total_num_of_pairs = 20;
      case 20: {
        if (tag == 160) {
         parse_total_num_of_pairs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_num_of_pairs_)));
          set_has_total_num_of_pairs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_total_num_of_documents;
        break;
      }

      // optional int32 total_num_of_documents = 21;
      case 21: {
        if (tag == 168) {
         parse_total_num_of_documents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_of_documents_)));
          set_has_total_num_of_documents();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 22;
      case 22: {
        if (tag == 178) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.CooccurrenceCollectorConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_class_id;
        if (input->ExpectTag(184)) goto parse_max_num_of_open_files_in_a_process;
        break;
      }

      // optional int32 max_num_of_open_files_in_a_process = 23;
      case 23: {
        if (tag == 184) {
         parse_max_num_of_open_files_in_a_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_of_open_files_in_a_process_)));
          set_has_max_num_of_open_files_in_a_process();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.CooccurrenceCollectorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.CooccurrenceCollectorConfig)
  return false;
#undef DO_
}

void CooccurrenceCollectorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.CooccurrenceCollectorConfig)
  // optional bool gather_cooc = 1;
  if (has_gather_cooc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->gather_cooc(), output);
  }

  // optional bool gather_cooc_tf = 2;
  if (has_gather_cooc_tf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->gather_cooc_tf(), output);
  }

  // optional bool gather_cooc_df = 3;
  if (has_gather_cooc_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->gather_cooc_df(), output);
  }

  // optional bool store_symmetric_cooc_values = 4;
  if (has_store_symmetric_cooc_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->store_symmetric_cooc_values(), output);
  }

  // optional bool calculate_ppmi_tf = 5;
  if (has_calculate_ppmi_tf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->calculate_ppmi_tf(), output);
  }

  // optional bool calculate_ppmi_df = 6;
  if (has_calculate_ppmi_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->calculate_ppmi_df(), output);
  }

  // optional string vw_file_path = 7;
  if (has_vw_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vw_file_path().data(), this->vw_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.vw_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->vw_file_path(), output);
  }

  // optional string vocab_file_path = 8;
  if (has_vocab_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vocab_file_path().data(), this->vocab_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.vocab_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->vocab_file_path(), output);
  }

  // optional string target_folder = 9;
  if (has_target_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_folder().data(), this->target_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.target_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->target_folder(), output);
  }

  // optional string cooc_tf_file_path = 10;
  if (has_cooc_tf_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooc_tf_file_path().data(), this->cooc_tf_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.cooc_tf_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->cooc_tf_file_path(), output);
  }

  // optional string cooc_df_file_path = 11;
  if (has_cooc_df_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooc_df_file_path().data(), this->cooc_df_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.cooc_df_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->cooc_df_file_path(), output);
  }

  // optional string ppmi_tf_file_path = 12;
  if (has_ppmi_tf_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ppmi_tf_file_path().data(), this->ppmi_tf_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.ppmi_tf_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->ppmi_tf_file_path(), output);
  }

  // optional string ppmi_df_file_path = 13;
  if (has_ppmi_df_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ppmi_df_file_path().data(), this->ppmi_df_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.ppmi_df_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->ppmi_df_file_path(), output);
  }

  // optional int32 cooc_window_width = 14 [default = 10];
  if (has_cooc_window_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->cooc_window_width(), output);
  }

  // optional int32 cooc_min_tf = 15 [default = 1];
  if (has_cooc_min_tf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->cooc_min_tf(), output);
  }

  // optional int32 cooc_min_df = 16 [default = 1];
  if (has_cooc_min_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->cooc_min_df(), output);
  }

  // optional int32 max_num_of_open_files_in_a_thread = 17;
  if (has_max_num_of_open_files_in_a_thread()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->max_num_of_open_files_in_a_thread(), output);
  }

  // optional int32 num_items_per_batch = 18 [default = 1000];
  if (has_num_items_per_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->num_items_per_batch(), output);
  }

  // optional int32 num_threads = 19;
  if (has_num_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->num_threads(), output);
  }

  // optional int64 total_num_of_pairs = 20;
  if (has_total_num_of_pairs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->total_num_of_pairs(), output);
  }

  // optional int32 total_num_of_documents = 21;
  if (has_total_num_of_documents()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->total_num_of_documents(), output);
  }

  // repeated string class_id = 22;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->class_id(i), output);
  }

  // optional int32 max_num_of_open_files_in_a_process = 23;
  if (has_max_num_of_open_files_in_a_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->max_num_of_open_files_in_a_process(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.CooccurrenceCollectorConfig)
}

::google::protobuf::uint8* CooccurrenceCollectorConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.CooccurrenceCollectorConfig)
  // optional bool gather_cooc = 1;
  if (has_gather_cooc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->gather_cooc(), target);
  }

  // optional bool gather_cooc_tf = 2;
  if (has_gather_cooc_tf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->gather_cooc_tf(), target);
  }

  // optional bool gather_cooc_df = 3;
  if (has_gather_cooc_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->gather_cooc_df(), target);
  }

  // optional bool store_symmetric_cooc_values = 4;
  if (has_store_symmetric_cooc_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->store_symmetric_cooc_values(), target);
  }

  // optional bool calculate_ppmi_tf = 5;
  if (has_calculate_ppmi_tf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->calculate_ppmi_tf(), target);
  }

  // optional bool calculate_ppmi_df = 6;
  if (has_calculate_ppmi_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->calculate_ppmi_df(), target);
  }

  // optional string vw_file_path = 7;
  if (has_vw_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vw_file_path().data(), this->vw_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.vw_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->vw_file_path(), target);
  }

  // optional string vocab_file_path = 8;
  if (has_vocab_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vocab_file_path().data(), this->vocab_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.vocab_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->vocab_file_path(), target);
  }

  // optional string target_folder = 9;
  if (has_target_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_folder().data(), this->target_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.target_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->target_folder(), target);
  }

  // optional string cooc_tf_file_path = 10;
  if (has_cooc_tf_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooc_tf_file_path().data(), this->cooc_tf_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.cooc_tf_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->cooc_tf_file_path(), target);
  }

  // optional string cooc_df_file_path = 11;
  if (has_cooc_df_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooc_df_file_path().data(), this->cooc_df_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.cooc_df_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->cooc_df_file_path(), target);
  }

  // optional string ppmi_tf_file_path = 12;
  if (has_ppmi_tf_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ppmi_tf_file_path().data(), this->ppmi_tf_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.ppmi_tf_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ppmi_tf_file_path(), target);
  }

  // optional string ppmi_df_file_path = 13;
  if (has_ppmi_df_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ppmi_df_file_path().data(), this->ppmi_df_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.ppmi_df_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ppmi_df_file_path(), target);
  }

  // optional int32 cooc_window_width = 14 [default = 10];
  if (has_cooc_window_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->cooc_window_width(), target);
  }

  // optional int32 cooc_min_tf = 15 [default = 1];
  if (has_cooc_min_tf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->cooc_min_tf(), target);
  }

  // optional int32 cooc_min_df = 16 [default = 1];
  if (has_cooc_min_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->cooc_min_df(), target);
  }

  // optional int32 max_num_of_open_files_in_a_thread = 17;
  if (has_max_num_of_open_files_in_a_thread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->max_num_of_open_files_in_a_thread(), target);
  }

  // optional int32 num_items_per_batch = 18 [default = 1000];
  if (has_num_items_per_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->num_items_per_batch(), target);
  }

  // optional int32 num_threads = 19;
  if (has_num_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->num_threads(), target);
  }

  // optional int64 total_num_of_pairs = 20;
  if (has_total_num_of_pairs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->total_num_of_pairs(), target);
  }

  // optional int32 total_num_of_documents = 21;
  if (has_total_num_of_documents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->total_num_of_documents(), target);
  }

  // repeated string class_id = 22;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.CooccurrenceCollectorConfig.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->class_id(i), target);
  }

  // optional int32 max_num_of_open_files_in_a_process = 23;
  if (has_max_num_of_open_files_in_a_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->max_num_of_open_files_in_a_process(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.CooccurrenceCollectorConfig)
  return target;
}

int CooccurrenceCollectorConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.CooccurrenceCollectorConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool gather_cooc = 1;
    if (has_gather_cooc()) {
      total_size += 1 + 1;
    }

    // optional bool gather_cooc_tf = 2;
    if (has_gather_cooc_tf()) {
      total_size += 1 + 1;
    }

    // optional bool gather_cooc_df = 3;
    if (has_gather_cooc_df()) {
      total_size += 1 + 1;
    }

    // optional bool store_symmetric_cooc_values = 4;
    if (has_store_symmetric_cooc_values()) {
      total_size += 1 + 1;
    }

    // optional bool calculate_ppmi_tf = 5;
    if (has_calculate_ppmi_tf()) {
      total_size += 1 + 1;
    }

    // optional bool calculate_ppmi_df = 6;
    if (has_calculate_ppmi_df()) {
      total_size += 1 + 1;
    }

    // optional string vw_file_path = 7;
    if (has_vw_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vw_file_path());
    }

    // optional string vocab_file_path = 8;
    if (has_vocab_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vocab_file_path());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string target_folder = 9;
    if (has_target_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_folder());
    }

    // optional string cooc_tf_file_path = 10;
    if (has_cooc_tf_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cooc_tf_file_path());
    }

    // optional string cooc_df_file_path = 11;
    if (has_cooc_df_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cooc_df_file_path());
    }

    // optional string ppmi_tf_file_path = 12;
    if (has_ppmi_tf_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ppmi_tf_file_path());
    }

    // optional string ppmi_df_file_path = 13;
    if (has_ppmi_df_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ppmi_df_file_path());
    }

    // optional int32 cooc_window_width = 14 [default = 10];
    if (has_cooc_window_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooc_window_width());
    }

    // optional int32 cooc_min_tf = 15 [default = 1];
    if (has_cooc_min_tf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooc_min_tf());
    }

    // optional int32 cooc_min_df = 16 [default = 1];
    if (has_cooc_min_df()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooc_min_df());
    }

  }
  if (_has_bits_[16 / 32] & 6225920u) {
    // optional int32 max_num_of_open_files_in_a_thread = 17;
    if (has_max_num_of_open_files_in_a_thread()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_of_open_files_in_a_thread());
    }

    // optional int32 num_items_per_batch = 18 [default = 1000];
    if (has_num_items_per_batch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_items_per_batch());
    }

    // optional int32 num_threads = 19;
    if (has_num_threads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_threads());
    }

    // optional int64 total_num_of_pairs = 20;
    if (has_total_num_of_pairs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_num_of_pairs());
    }

    // optional int32 total_num_of_documents = 21;
    if (has_total_num_of_documents()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num_of_documents());
    }

    // optional int32 max_num_of_open_files_in_a_process = 23;
    if (has_max_num_of_open_files_in_a_process()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_of_open_files_in_a_process());
    }

  }
  // repeated string class_id = 22;
  total_size += 2 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CooccurrenceCollectorConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.CooccurrenceCollectorConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CooccurrenceCollectorConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CooccurrenceCollectorConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.CooccurrenceCollectorConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.CooccurrenceCollectorConfig)
    MergeFrom(*source);
  }
}

void CooccurrenceCollectorConfig::MergeFrom(const CooccurrenceCollectorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.CooccurrenceCollectorConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gather_cooc()) {
      set_gather_cooc(from.gather_cooc());
    }
    if (from.has_gather_cooc_tf()) {
      set_gather_cooc_tf(from.gather_cooc_tf());
    }
    if (from.has_gather_cooc_df()) {
      set_gather_cooc_df(from.gather_cooc_df());
    }
    if (from.has_store_symmetric_cooc_values()) {
      set_store_symmetric_cooc_values(from.store_symmetric_cooc_values());
    }
    if (from.has_calculate_ppmi_tf()) {
      set_calculate_ppmi_tf(from.calculate_ppmi_tf());
    }
    if (from.has_calculate_ppmi_df()) {
      set_calculate_ppmi_df(from.calculate_ppmi_df());
    }
    if (from.has_vw_file_path()) {
      set_has_vw_file_path();
      vw_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vw_file_path_);
    }
    if (from.has_vocab_file_path()) {
      set_has_vocab_file_path();
      vocab_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vocab_file_path_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target_folder()) {
      set_has_target_folder();
      target_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_folder_);
    }
    if (from.has_cooc_tf_file_path()) {
      set_has_cooc_tf_file_path();
      cooc_tf_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cooc_tf_file_path_);
    }
    if (from.has_cooc_df_file_path()) {
      set_has_cooc_df_file_path();
      cooc_df_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cooc_df_file_path_);
    }
    if (from.has_ppmi_tf_file_path()) {
      set_has_ppmi_tf_file_path();
      ppmi_tf_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ppmi_tf_file_path_);
    }
    if (from.has_ppmi_df_file_path()) {
      set_has_ppmi_df_file_path();
      ppmi_df_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ppmi_df_file_path_);
    }
    if (from.has_cooc_window_width()) {
      set_cooc_window_width(from.cooc_window_width());
    }
    if (from.has_cooc_min_tf()) {
      set_cooc_min_tf(from.cooc_min_tf());
    }
    if (from.has_cooc_min_df()) {
      set_cooc_min_df(from.cooc_min_df());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_num_of_open_files_in_a_thread()) {
      set_max_num_of_open_files_in_a_thread(from.max_num_of_open_files_in_a_thread());
    }
    if (from.has_num_items_per_batch()) {
      set_num_items_per_batch(from.num_items_per_batch());
    }
    if (from.has_num_threads()) {
      set_num_threads(from.num_threads());
    }
    if (from.has_total_num_of_pairs()) {
      set_total_num_of_pairs(from.total_num_of_pairs());
    }
    if (from.has_total_num_of_documents()) {
      set_total_num_of_documents(from.total_num_of_documents());
    }
    if (from.has_max_num_of_open_files_in_a_process()) {
      set_max_num_of_open_files_in_a_process(from.max_num_of_open_files_in_a_process());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CooccurrenceCollectorConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.CooccurrenceCollectorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CooccurrenceCollectorConfig::CopyFrom(const CooccurrenceCollectorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.CooccurrenceCollectorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooccurrenceCollectorConfig::IsInitialized() const {

  return true;
}

void CooccurrenceCollectorConfig::Swap(CooccurrenceCollectorConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CooccurrenceCollectorConfig::InternalSwap(CooccurrenceCollectorConfig* other) {
  std::swap(gather_cooc_, other->gather_cooc_);
  std::swap(gather_cooc_tf_, other->gather_cooc_tf_);
  std::swap(gather_cooc_df_, other->gather_cooc_df_);
  std::swap(store_symmetric_cooc_values_, other->store_symmetric_cooc_values_);
  std::swap(calculate_ppmi_tf_, other->calculate_ppmi_tf_);
  std::swap(calculate_ppmi_df_, other->calculate_ppmi_df_);
  vw_file_path_.Swap(&other->vw_file_path_);
  vocab_file_path_.Swap(&other->vocab_file_path_);
  target_folder_.Swap(&other->target_folder_);
  cooc_tf_file_path_.Swap(&other->cooc_tf_file_path_);
  cooc_df_file_path_.Swap(&other->cooc_df_file_path_);
  ppmi_tf_file_path_.Swap(&other->ppmi_tf_file_path_);
  ppmi_df_file_path_.Swap(&other->ppmi_df_file_path_);
  std::swap(cooc_window_width_, other->cooc_window_width_);
  std::swap(cooc_min_tf_, other->cooc_min_tf_);
  std::swap(cooc_min_df_, other->cooc_min_df_);
  std::swap(max_num_of_open_files_in_a_thread_, other->max_num_of_open_files_in_a_thread_);
  std::swap(num_items_per_batch_, other->num_items_per_batch_);
  std::swap(num_threads_, other->num_threads_);
  std::swap(total_num_of_pairs_, other->total_num_of_pairs_);
  std::swap(total_num_of_documents_, other->total_num_of_documents_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  std::swap(max_num_of_open_files_in_a_process_, other->max_num_of_open_files_in_a_process_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CooccurrenceCollectorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CooccurrenceCollectorConfig_descriptor_;
  metadata.reflection = CooccurrenceCollectorConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CooccurrenceCollectorConfig

// optional bool gather_cooc = 1;
bool CooccurrenceCollectorConfig::has_gather_cooc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CooccurrenceCollectorConfig::set_has_gather_cooc() {
  _has_bits_[0] |= 0x00000001u;
}
void CooccurrenceCollectorConfig::clear_has_gather_cooc() {
  _has_bits_[0] &= ~0x00000001u;
}
void CooccurrenceCollectorConfig::clear_gather_cooc() {
  gather_cooc_ = false;
  clear_has_gather_cooc();
}
 bool CooccurrenceCollectorConfig::gather_cooc() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.gather_cooc)
  return gather_cooc_;
}
 void CooccurrenceCollectorConfig::set_gather_cooc(bool value) {
  set_has_gather_cooc();
  gather_cooc_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.gather_cooc)
}

// optional bool gather_cooc_tf = 2;
bool CooccurrenceCollectorConfig::has_gather_cooc_tf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CooccurrenceCollectorConfig::set_has_gather_cooc_tf() {
  _has_bits_[0] |= 0x00000002u;
}
void CooccurrenceCollectorConfig::clear_has_gather_cooc_tf() {
  _has_bits_[0] &= ~0x00000002u;
}
void CooccurrenceCollectorConfig::clear_gather_cooc_tf() {
  gather_cooc_tf_ = false;
  clear_has_gather_cooc_tf();
}
 bool CooccurrenceCollectorConfig::gather_cooc_tf() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.gather_cooc_tf)
  return gather_cooc_tf_;
}
 void CooccurrenceCollectorConfig::set_gather_cooc_tf(bool value) {
  set_has_gather_cooc_tf();
  gather_cooc_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.gather_cooc_tf)
}

// optional bool gather_cooc_df = 3;
bool CooccurrenceCollectorConfig::has_gather_cooc_df() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CooccurrenceCollectorConfig::set_has_gather_cooc_df() {
  _has_bits_[0] |= 0x00000004u;
}
void CooccurrenceCollectorConfig::clear_has_gather_cooc_df() {
  _has_bits_[0] &= ~0x00000004u;
}
void CooccurrenceCollectorConfig::clear_gather_cooc_df() {
  gather_cooc_df_ = false;
  clear_has_gather_cooc_df();
}
 bool CooccurrenceCollectorConfig::gather_cooc_df() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.gather_cooc_df)
  return gather_cooc_df_;
}
 void CooccurrenceCollectorConfig::set_gather_cooc_df(bool value) {
  set_has_gather_cooc_df();
  gather_cooc_df_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.gather_cooc_df)
}

// optional bool store_symmetric_cooc_values = 4;
bool CooccurrenceCollectorConfig::has_store_symmetric_cooc_values() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CooccurrenceCollectorConfig::set_has_store_symmetric_cooc_values() {
  _has_bits_[0] |= 0x00000008u;
}
void CooccurrenceCollectorConfig::clear_has_store_symmetric_cooc_values() {
  _has_bits_[0] &= ~0x00000008u;
}
void CooccurrenceCollectorConfig::clear_store_symmetric_cooc_values() {
  store_symmetric_cooc_values_ = false;
  clear_has_store_symmetric_cooc_values();
}
 bool CooccurrenceCollectorConfig::store_symmetric_cooc_values() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.store_symmetric_cooc_values)
  return store_symmetric_cooc_values_;
}
 void CooccurrenceCollectorConfig::set_store_symmetric_cooc_values(bool value) {
  set_has_store_symmetric_cooc_values();
  store_symmetric_cooc_values_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.store_symmetric_cooc_values)
}

// optional bool calculate_ppmi_tf = 5;
bool CooccurrenceCollectorConfig::has_calculate_ppmi_tf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CooccurrenceCollectorConfig::set_has_calculate_ppmi_tf() {
  _has_bits_[0] |= 0x00000010u;
}
void CooccurrenceCollectorConfig::clear_has_calculate_ppmi_tf() {
  _has_bits_[0] &= ~0x00000010u;
}
void CooccurrenceCollectorConfig::clear_calculate_ppmi_tf() {
  calculate_ppmi_tf_ = false;
  clear_has_calculate_ppmi_tf();
}
 bool CooccurrenceCollectorConfig::calculate_ppmi_tf() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.calculate_ppmi_tf)
  return calculate_ppmi_tf_;
}
 void CooccurrenceCollectorConfig::set_calculate_ppmi_tf(bool value) {
  set_has_calculate_ppmi_tf();
  calculate_ppmi_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.calculate_ppmi_tf)
}

// optional bool calculate_ppmi_df = 6;
bool CooccurrenceCollectorConfig::has_calculate_ppmi_df() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CooccurrenceCollectorConfig::set_has_calculate_ppmi_df() {
  _has_bits_[0] |= 0x00000020u;
}
void CooccurrenceCollectorConfig::clear_has_calculate_ppmi_df() {
  _has_bits_[0] &= ~0x00000020u;
}
void CooccurrenceCollectorConfig::clear_calculate_ppmi_df() {
  calculate_ppmi_df_ = false;
  clear_has_calculate_ppmi_df();
}
 bool CooccurrenceCollectorConfig::calculate_ppmi_df() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.calculate_ppmi_df)
  return calculate_ppmi_df_;
}
 void CooccurrenceCollectorConfig::set_calculate_ppmi_df(bool value) {
  set_has_calculate_ppmi_df();
  calculate_ppmi_df_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.calculate_ppmi_df)
}

// optional string vw_file_path = 7;
bool CooccurrenceCollectorConfig::has_vw_file_path() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CooccurrenceCollectorConfig::set_has_vw_file_path() {
  _has_bits_[0] |= 0x00000040u;
}
void CooccurrenceCollectorConfig::clear_has_vw_file_path() {
  _has_bits_[0] &= ~0x00000040u;
}
void CooccurrenceCollectorConfig::clear_vw_file_path() {
  vw_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vw_file_path();
}
 const ::std::string& CooccurrenceCollectorConfig::vw_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.vw_file_path)
  return vw_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_vw_file_path(const ::std::string& value) {
  set_has_vw_file_path();
  vw_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.vw_file_path)
}
 void CooccurrenceCollectorConfig::set_vw_file_path(const char* value) {
  set_has_vw_file_path();
  vw_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.vw_file_path)
}
 void CooccurrenceCollectorConfig::set_vw_file_path(const char* value, size_t size) {
  set_has_vw_file_path();
  vw_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.vw_file_path)
}
 ::std::string* CooccurrenceCollectorConfig::mutable_vw_file_path() {
  set_has_vw_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.vw_file_path)
  return vw_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CooccurrenceCollectorConfig::release_vw_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.vw_file_path)
  clear_has_vw_file_path();
  return vw_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_allocated_vw_file_path(::std::string* vw_file_path) {
  if (vw_file_path != NULL) {
    set_has_vw_file_path();
  } else {
    clear_has_vw_file_path();
  }
  vw_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vw_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.vw_file_path)
}

// optional string vocab_file_path = 8;
bool CooccurrenceCollectorConfig::has_vocab_file_path() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CooccurrenceCollectorConfig::set_has_vocab_file_path() {
  _has_bits_[0] |= 0x00000080u;
}
void CooccurrenceCollectorConfig::clear_has_vocab_file_path() {
  _has_bits_[0] &= ~0x00000080u;
}
void CooccurrenceCollectorConfig::clear_vocab_file_path() {
  vocab_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vocab_file_path();
}
 const ::std::string& CooccurrenceCollectorConfig::vocab_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.vocab_file_path)
  return vocab_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_vocab_file_path(const ::std::string& value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.vocab_file_path)
}
 void CooccurrenceCollectorConfig::set_vocab_file_path(const char* value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.vocab_file_path)
}
 void CooccurrenceCollectorConfig::set_vocab_file_path(const char* value, size_t size) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.vocab_file_path)
}
 ::std::string* CooccurrenceCollectorConfig::mutable_vocab_file_path() {
  set_has_vocab_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.vocab_file_path)
  return vocab_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CooccurrenceCollectorConfig::release_vocab_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.vocab_file_path)
  clear_has_vocab_file_path();
  return vocab_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_allocated_vocab_file_path(::std::string* vocab_file_path) {
  if (vocab_file_path != NULL) {
    set_has_vocab_file_path();
  } else {
    clear_has_vocab_file_path();
  }
  vocab_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vocab_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.vocab_file_path)
}

// optional string target_folder = 9;
bool CooccurrenceCollectorConfig::has_target_folder() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CooccurrenceCollectorConfig::set_has_target_folder() {
  _has_bits_[0] |= 0x00000100u;
}
void CooccurrenceCollectorConfig::clear_has_target_folder() {
  _has_bits_[0] &= ~0x00000100u;
}
void CooccurrenceCollectorConfig::clear_target_folder() {
  target_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_folder();
}
 const ::std::string& CooccurrenceCollectorConfig::target_folder() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.target_folder)
  return target_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_target_folder(const ::std::string& value) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.target_folder)
}
 void CooccurrenceCollectorConfig::set_target_folder(const char* value) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.target_folder)
}
 void CooccurrenceCollectorConfig::set_target_folder(const char* value, size_t size) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.target_folder)
}
 ::std::string* CooccurrenceCollectorConfig::mutable_target_folder() {
  set_has_target_folder();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.target_folder)
  return target_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CooccurrenceCollectorConfig::release_target_folder() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.target_folder)
  clear_has_target_folder();
  return target_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_allocated_target_folder(::std::string* target_folder) {
  if (target_folder != NULL) {
    set_has_target_folder();
  } else {
    clear_has_target_folder();
  }
  target_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_folder);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.target_folder)
}

// optional string cooc_tf_file_path = 10;
bool CooccurrenceCollectorConfig::has_cooc_tf_file_path() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CooccurrenceCollectorConfig::set_has_cooc_tf_file_path() {
  _has_bits_[0] |= 0x00000200u;
}
void CooccurrenceCollectorConfig::clear_has_cooc_tf_file_path() {
  _has_bits_[0] &= ~0x00000200u;
}
void CooccurrenceCollectorConfig::clear_cooc_tf_file_path() {
  cooc_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooc_tf_file_path();
}
 const ::std::string& CooccurrenceCollectorConfig::cooc_tf_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
  return cooc_tf_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_cooc_tf_file_path(const ::std::string& value) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
}
 void CooccurrenceCollectorConfig::set_cooc_tf_file_path(const char* value) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
}
 void CooccurrenceCollectorConfig::set_cooc_tf_file_path(const char* value, size_t size) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
}
 ::std::string* CooccurrenceCollectorConfig::mutable_cooc_tf_file_path() {
  set_has_cooc_tf_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
  return cooc_tf_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CooccurrenceCollectorConfig::release_cooc_tf_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
  clear_has_cooc_tf_file_path();
  return cooc_tf_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_allocated_cooc_tf_file_path(::std::string* cooc_tf_file_path) {
  if (cooc_tf_file_path != NULL) {
    set_has_cooc_tf_file_path();
  } else {
    clear_has_cooc_tf_file_path();
  }
  cooc_tf_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooc_tf_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
}

// optional string cooc_df_file_path = 11;
bool CooccurrenceCollectorConfig::has_cooc_df_file_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CooccurrenceCollectorConfig::set_has_cooc_df_file_path() {
  _has_bits_[0] |= 0x00000400u;
}
void CooccurrenceCollectorConfig::clear_has_cooc_df_file_path() {
  _has_bits_[0] &= ~0x00000400u;
}
void CooccurrenceCollectorConfig::clear_cooc_df_file_path() {
  cooc_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooc_df_file_path();
}
 const ::std::string& CooccurrenceCollectorConfig::cooc_df_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
  return cooc_df_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_cooc_df_file_path(const ::std::string& value) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
}
 void CooccurrenceCollectorConfig::set_cooc_df_file_path(const char* value) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
}
 void CooccurrenceCollectorConfig::set_cooc_df_file_path(const char* value, size_t size) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
}
 ::std::string* CooccurrenceCollectorConfig::mutable_cooc_df_file_path() {
  set_has_cooc_df_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
  return cooc_df_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CooccurrenceCollectorConfig::release_cooc_df_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
  clear_has_cooc_df_file_path();
  return cooc_df_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_allocated_cooc_df_file_path(::std::string* cooc_df_file_path) {
  if (cooc_df_file_path != NULL) {
    set_has_cooc_df_file_path();
  } else {
    clear_has_cooc_df_file_path();
  }
  cooc_df_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooc_df_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
}

// optional string ppmi_tf_file_path = 12;
bool CooccurrenceCollectorConfig::has_ppmi_tf_file_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CooccurrenceCollectorConfig::set_has_ppmi_tf_file_path() {
  _has_bits_[0] |= 0x00000800u;
}
void CooccurrenceCollectorConfig::clear_has_ppmi_tf_file_path() {
  _has_bits_[0] &= ~0x00000800u;
}
void CooccurrenceCollectorConfig::clear_ppmi_tf_file_path() {
  ppmi_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ppmi_tf_file_path();
}
 const ::std::string& CooccurrenceCollectorConfig::ppmi_tf_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
  return ppmi_tf_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_ppmi_tf_file_path(const ::std::string& value) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
}
 void CooccurrenceCollectorConfig::set_ppmi_tf_file_path(const char* value) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
}
 void CooccurrenceCollectorConfig::set_ppmi_tf_file_path(const char* value, size_t size) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
}
 ::std::string* CooccurrenceCollectorConfig::mutable_ppmi_tf_file_path() {
  set_has_ppmi_tf_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
  return ppmi_tf_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CooccurrenceCollectorConfig::release_ppmi_tf_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
  clear_has_ppmi_tf_file_path();
  return ppmi_tf_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_allocated_ppmi_tf_file_path(::std::string* ppmi_tf_file_path) {
  if (ppmi_tf_file_path != NULL) {
    set_has_ppmi_tf_file_path();
  } else {
    clear_has_ppmi_tf_file_path();
  }
  ppmi_tf_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppmi_tf_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
}

// optional string ppmi_df_file_path = 13;
bool CooccurrenceCollectorConfig::has_ppmi_df_file_path() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CooccurrenceCollectorConfig::set_has_ppmi_df_file_path() {
  _has_bits_[0] |= 0x00001000u;
}
void CooccurrenceCollectorConfig::clear_has_ppmi_df_file_path() {
  _has_bits_[0] &= ~0x00001000u;
}
void CooccurrenceCollectorConfig::clear_ppmi_df_file_path() {
  ppmi_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ppmi_df_file_path();
}
 const ::std::string& CooccurrenceCollectorConfig::ppmi_df_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
  return ppmi_df_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_ppmi_df_file_path(const ::std::string& value) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
}
 void CooccurrenceCollectorConfig::set_ppmi_df_file_path(const char* value) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
}
 void CooccurrenceCollectorConfig::set_ppmi_df_file_path(const char* value, size_t size) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
}
 ::std::string* CooccurrenceCollectorConfig::mutable_ppmi_df_file_path() {
  set_has_ppmi_df_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
  return ppmi_df_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CooccurrenceCollectorConfig::release_ppmi_df_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
  clear_has_ppmi_df_file_path();
  return ppmi_df_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CooccurrenceCollectorConfig::set_allocated_ppmi_df_file_path(::std::string* ppmi_df_file_path) {
  if (ppmi_df_file_path != NULL) {
    set_has_ppmi_df_file_path();
  } else {
    clear_has_ppmi_df_file_path();
  }
  ppmi_df_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppmi_df_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
}

// optional int32 cooc_window_width = 14 [default = 10];
bool CooccurrenceCollectorConfig::has_cooc_window_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CooccurrenceCollectorConfig::set_has_cooc_window_width() {
  _has_bits_[0] |= 0x00002000u;
}
void CooccurrenceCollectorConfig::clear_has_cooc_window_width() {
  _has_bits_[0] &= ~0x00002000u;
}
void CooccurrenceCollectorConfig::clear_cooc_window_width() {
  cooc_window_width_ = 10;
  clear_has_cooc_window_width();
}
 ::google::protobuf::int32 CooccurrenceCollectorConfig::cooc_window_width() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.cooc_window_width)
  return cooc_window_width_;
}
 void CooccurrenceCollectorConfig::set_cooc_window_width(::google::protobuf::int32 value) {
  set_has_cooc_window_width();
  cooc_window_width_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.cooc_window_width)
}

// optional int32 cooc_min_tf = 15 [default = 1];
bool CooccurrenceCollectorConfig::has_cooc_min_tf() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CooccurrenceCollectorConfig::set_has_cooc_min_tf() {
  _has_bits_[0] |= 0x00004000u;
}
void CooccurrenceCollectorConfig::clear_has_cooc_min_tf() {
  _has_bits_[0] &= ~0x00004000u;
}
void CooccurrenceCollectorConfig::clear_cooc_min_tf() {
  cooc_min_tf_ = 1;
  clear_has_cooc_min_tf();
}
 ::google::protobuf::int32 CooccurrenceCollectorConfig::cooc_min_tf() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.cooc_min_tf)
  return cooc_min_tf_;
}
 void CooccurrenceCollectorConfig::set_cooc_min_tf(::google::protobuf::int32 value) {
  set_has_cooc_min_tf();
  cooc_min_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.cooc_min_tf)
}

// optional int32 cooc_min_df = 16 [default = 1];
bool CooccurrenceCollectorConfig::has_cooc_min_df() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CooccurrenceCollectorConfig::set_has_cooc_min_df() {
  _has_bits_[0] |= 0x00008000u;
}
void CooccurrenceCollectorConfig::clear_has_cooc_min_df() {
  _has_bits_[0] &= ~0x00008000u;
}
void CooccurrenceCollectorConfig::clear_cooc_min_df() {
  cooc_min_df_ = 1;
  clear_has_cooc_min_df();
}
 ::google::protobuf::int32 CooccurrenceCollectorConfig::cooc_min_df() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.cooc_min_df)
  return cooc_min_df_;
}
 void CooccurrenceCollectorConfig::set_cooc_min_df(::google::protobuf::int32 value) {
  set_has_cooc_min_df();
  cooc_min_df_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.cooc_min_df)
}

// optional int32 max_num_of_open_files_in_a_thread = 17;
bool CooccurrenceCollectorConfig::has_max_num_of_open_files_in_a_thread() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CooccurrenceCollectorConfig::set_has_max_num_of_open_files_in_a_thread() {
  _has_bits_[0] |= 0x00010000u;
}
void CooccurrenceCollectorConfig::clear_has_max_num_of_open_files_in_a_thread() {
  _has_bits_[0] &= ~0x00010000u;
}
void CooccurrenceCollectorConfig::clear_max_num_of_open_files_in_a_thread() {
  max_num_of_open_files_in_a_thread_ = 0;
  clear_has_max_num_of_open_files_in_a_thread();
}
 ::google::protobuf::int32 CooccurrenceCollectorConfig::max_num_of_open_files_in_a_thread() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.max_num_of_open_files_in_a_thread)
  return max_num_of_open_files_in_a_thread_;
}
 void CooccurrenceCollectorConfig::set_max_num_of_open_files_in_a_thread(::google::protobuf::int32 value) {
  set_has_max_num_of_open_files_in_a_thread();
  max_num_of_open_files_in_a_thread_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.max_num_of_open_files_in_a_thread)
}

// optional int32 num_items_per_batch = 18 [default = 1000];
bool CooccurrenceCollectorConfig::has_num_items_per_batch() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CooccurrenceCollectorConfig::set_has_num_items_per_batch() {
  _has_bits_[0] |= 0x00020000u;
}
void CooccurrenceCollectorConfig::clear_has_num_items_per_batch() {
  _has_bits_[0] &= ~0x00020000u;
}
void CooccurrenceCollectorConfig::clear_num_items_per_batch() {
  num_items_per_batch_ = 1000;
  clear_has_num_items_per_batch();
}
 ::google::protobuf::int32 CooccurrenceCollectorConfig::num_items_per_batch() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.num_items_per_batch)
  return num_items_per_batch_;
}
 void CooccurrenceCollectorConfig::set_num_items_per_batch(::google::protobuf::int32 value) {
  set_has_num_items_per_batch();
  num_items_per_batch_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.num_items_per_batch)
}

// optional int32 num_threads = 19;
bool CooccurrenceCollectorConfig::has_num_threads() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CooccurrenceCollectorConfig::set_has_num_threads() {
  _has_bits_[0] |= 0x00040000u;
}
void CooccurrenceCollectorConfig::clear_has_num_threads() {
  _has_bits_[0] &= ~0x00040000u;
}
void CooccurrenceCollectorConfig::clear_num_threads() {
  num_threads_ = 0;
  clear_has_num_threads();
}
 ::google::protobuf::int32 CooccurrenceCollectorConfig::num_threads() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.num_threads)
  return num_threads_;
}
 void CooccurrenceCollectorConfig::set_num_threads(::google::protobuf::int32 value) {
  set_has_num_threads();
  num_threads_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.num_threads)
}

// optional int64 total_num_of_pairs = 20;
bool CooccurrenceCollectorConfig::has_total_num_of_pairs() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CooccurrenceCollectorConfig::set_has_total_num_of_pairs() {
  _has_bits_[0] |= 0x00080000u;
}
void CooccurrenceCollectorConfig::clear_has_total_num_of_pairs() {
  _has_bits_[0] &= ~0x00080000u;
}
void CooccurrenceCollectorConfig::clear_total_num_of_pairs() {
  total_num_of_pairs_ = GOOGLE_LONGLONG(0);
  clear_has_total_num_of_pairs();
}
 ::google::protobuf::int64 CooccurrenceCollectorConfig::total_num_of_pairs() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.total_num_of_pairs)
  return total_num_of_pairs_;
}
 void CooccurrenceCollectorConfig::set_total_num_of_pairs(::google::protobuf::int64 value) {
  set_has_total_num_of_pairs();
  total_num_of_pairs_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.total_num_of_pairs)
}

// optional int32 total_num_of_documents = 21;
bool CooccurrenceCollectorConfig::has_total_num_of_documents() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CooccurrenceCollectorConfig::set_has_total_num_of_documents() {
  _has_bits_[0] |= 0x00100000u;
}
void CooccurrenceCollectorConfig::clear_has_total_num_of_documents() {
  _has_bits_[0] &= ~0x00100000u;
}
void CooccurrenceCollectorConfig::clear_total_num_of_documents() {
  total_num_of_documents_ = 0;
  clear_has_total_num_of_documents();
}
 ::google::protobuf::int32 CooccurrenceCollectorConfig::total_num_of_documents() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.total_num_of_documents)
  return total_num_of_documents_;
}
 void CooccurrenceCollectorConfig::set_total_num_of_documents(::google::protobuf::int32 value) {
  set_has_total_num_of_documents();
  total_num_of_documents_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.total_num_of_documents)
}

// repeated string class_id = 22;
int CooccurrenceCollectorConfig::class_id_size() const {
  return class_id_.size();
}
void CooccurrenceCollectorConfig::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& CooccurrenceCollectorConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.class_id)
  return class_id_.Get(index);
}
 ::std::string* CooccurrenceCollectorConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.class_id)
  return class_id_.Mutable(index);
}
 void CooccurrenceCollectorConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void CooccurrenceCollectorConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.class_id)
}
 void CooccurrenceCollectorConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.class_id)
}
 ::std::string* CooccurrenceCollectorConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.CooccurrenceCollectorConfig.class_id)
  return class_id_.Add();
}
 void CooccurrenceCollectorConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.CooccurrenceCollectorConfig.class_id)
}
 void CooccurrenceCollectorConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.CooccurrenceCollectorConfig.class_id)
}
 void CooccurrenceCollectorConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.CooccurrenceCollectorConfig.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CooccurrenceCollectorConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.CooccurrenceCollectorConfig.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CooccurrenceCollectorConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.CooccurrenceCollectorConfig.class_id)
  return &class_id_;
}

// optional int32 max_num_of_open_files_in_a_process = 23;
bool CooccurrenceCollectorConfig::has_max_num_of_open_files_in_a_process() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CooccurrenceCollectorConfig::set_has_max_num_of_open_files_in_a_process() {
  _has_bits_[0] |= 0x00400000u;
}
void CooccurrenceCollectorConfig::clear_has_max_num_of_open_files_in_a_process() {
  _has_bits_[0] &= ~0x00400000u;
}
void CooccurrenceCollectorConfig::clear_max_num_of_open_files_in_a_process() {
  max_num_of_open_files_in_a_process_ = 0;
  clear_has_max_num_of_open_files_in_a_process();
}
 ::google::protobuf::int32 CooccurrenceCollectorConfig::max_num_of_open_files_in_a_process() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.max_num_of_open_files_in_a_process)
  return max_num_of_open_files_in_a_process_;
}
 void CooccurrenceCollectorConfig::set_max_num_of_open_files_in_a_process(::google::protobuf::int32 value) {
  set_has_max_num_of_open_files_in_a_process();
  max_num_of_open_files_in_a_process_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.max_num_of_open_files_in_a_process)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitializeModelArgs::kModelNameFieldNumber;
const int InitializeModelArgs::kDictionaryNameFieldNumber;
const int InitializeModelArgs::kTopicNameFieldNumber;
const int InitializeModelArgs::kSeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitializeModelArgs::InitializeModelArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.InitializeModelArgs)
}

void InitializeModelArgs::InitAsDefaultInstance() {
}

InitializeModelArgs::InitializeModelArgs(const InitializeModelArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.InitializeModelArgs)
}

void InitializeModelArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seed_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitializeModelArgs::~InitializeModelArgs() {
  // @@protoc_insertion_point(destructor:artm.InitializeModelArgs)
  SharedDtor();
}

void InitializeModelArgs::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InitializeModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitializeModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitializeModelArgs_descriptor_;
}

const InitializeModelArgs& InitializeModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

InitializeModelArgs* InitializeModelArgs::default_instance_ = NULL;

InitializeModelArgs* InitializeModelArgs::New(::google::protobuf::Arena* arena) const {
  InitializeModelArgs* n = new InitializeModelArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitializeModelArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.InitializeModelArgs)
  if (_has_bits_[0 / 32] & 11u) {
    if (has_model_name()) {
      model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dictionary_name()) {
      dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    seed_ = -1;
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InitializeModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.InitializeModelArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.InitializeModelArgs.model_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 2;
      case 2: {
        if (tag == 18) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.InitializeModelArgs.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 4;
      case 4: {
        if (tag == 34) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.InitializeModelArgs.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        if (input->ExpectTag(40)) goto parse_seed;
        break;
      }

      // optional int32 seed = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.InitializeModelArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.InitializeModelArgs)
  return false;
#undef DO_
}

void InitializeModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.InitializeModelArgs)
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.InitializeModelArgs.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.InitializeModelArgs.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dictionary_name(), output);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.InitializeModelArgs.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topic_name(i), output);
  }

  // optional int32 seed = 5 [default = -1];
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.InitializeModelArgs)
}

::google::protobuf::uint8* InitializeModelArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.InitializeModelArgs)
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.InitializeModelArgs.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.InitializeModelArgs.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dictionary_name(), target);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.InitializeModelArgs.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topic_name(i), target);
  }

  // optional int32 seed = 5 [default = -1];
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.InitializeModelArgs)
  return target;
}

int InitializeModelArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.InitializeModelArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 11u) {
    // optional string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string dictionary_name = 2;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

    // optional int32 seed = 5 [default = -1];
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seed());
    }

  }
  // repeated string topic_name = 4;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitializeModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.InitializeModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InitializeModelArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitializeModelArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.InitializeModelArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.InitializeModelArgs)
    MergeFrom(*source);
  }
}

void InitializeModelArgs::MergeFrom(const InitializeModelArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.InitializeModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InitializeModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.InitializeModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitializeModelArgs::CopyFrom(const InitializeModelArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.InitializeModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeModelArgs::IsInitialized() const {

  return true;
}

void InitializeModelArgs::Swap(InitializeModelArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitializeModelArgs::InternalSwap(InitializeModelArgs* other) {
  model_name_.Swap(&other->model_name_);
  dictionary_name_.Swap(&other->dictionary_name_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  std::swap(seed_, other->seed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitializeModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitializeModelArgs_descriptor_;
  metadata.reflection = InitializeModelArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitializeModelArgs

// optional string model_name = 1;
bool InitializeModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitializeModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
void InitializeModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitializeModelArgs::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
 const ::std::string& InitializeModelArgs::model_name() const {
  // @@protoc_insertion_point(field_get:artm.InitializeModelArgs.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitializeModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.InitializeModelArgs.model_name)
}
 void InitializeModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.InitializeModelArgs.model_name)
}
 void InitializeModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.InitializeModelArgs.model_name)
}
 ::std::string* InitializeModelArgs::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.InitializeModelArgs.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitializeModelArgs::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.InitializeModelArgs.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitializeModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.InitializeModelArgs.model_name)
}

// optional string dictionary_name = 2;
bool InitializeModelArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitializeModelArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
void InitializeModelArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitializeModelArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& InitializeModelArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.InitializeModelArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitializeModelArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.InitializeModelArgs.dictionary_name)
}
 void InitializeModelArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.InitializeModelArgs.dictionary_name)
}
 void InitializeModelArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.InitializeModelArgs.dictionary_name)
}
 ::std::string* InitializeModelArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.InitializeModelArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitializeModelArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.InitializeModelArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitializeModelArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.InitializeModelArgs.dictionary_name)
}

// repeated string topic_name = 4;
int InitializeModelArgs::topic_name_size() const {
  return topic_name_.size();
}
void InitializeModelArgs::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& InitializeModelArgs::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.InitializeModelArgs.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* InitializeModelArgs::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.InitializeModelArgs.topic_name)
  return topic_name_.Mutable(index);
}
 void InitializeModelArgs::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.InitializeModelArgs.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void InitializeModelArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.InitializeModelArgs.topic_name)
}
 void InitializeModelArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.InitializeModelArgs.topic_name)
}
 ::std::string* InitializeModelArgs::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.InitializeModelArgs.topic_name)
  return topic_name_.Add();
}
 void InitializeModelArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.InitializeModelArgs.topic_name)
}
 void InitializeModelArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.InitializeModelArgs.topic_name)
}
 void InitializeModelArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.InitializeModelArgs.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
InitializeModelArgs::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.InitializeModelArgs.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
InitializeModelArgs::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.InitializeModelArgs.topic_name)
  return &topic_name_;
}

// optional int32 seed = 5 [default = -1];
bool InitializeModelArgs::has_seed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InitializeModelArgs::set_has_seed() {
  _has_bits_[0] |= 0x00000008u;
}
void InitializeModelArgs::clear_has_seed() {
  _has_bits_[0] &= ~0x00000008u;
}
void InitializeModelArgs::clear_seed() {
  seed_ = -1;
  clear_has_seed();
}
 ::google::protobuf::int32 InitializeModelArgs::seed() const {
  // @@protoc_insertion_point(field_get:artm.InitializeModelArgs.seed)
  return seed_;
}
 void InitializeModelArgs::set_seed(::google::protobuf::int32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:artm.InitializeModelArgs.seed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictionaryData::kNameFieldNumber;
const int DictionaryData::kTokenFieldNumber;
const int DictionaryData::kClassIdFieldNumber;
const int DictionaryData::kTokenValueFieldNumber;
const int DictionaryData::kTokenTfFieldNumber;
const int DictionaryData::kTokenDfFieldNumber;
const int DictionaryData::kCoocFirstIndexFieldNumber;
const int DictionaryData::kCoocSecondIndexFieldNumber;
const int DictionaryData::kCoocValueFieldNumber;
const int DictionaryData::kNumItemsInCollectionFieldNumber;
const int DictionaryData::kCoocTfFieldNumber;
const int DictionaryData::kCoocDfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictionaryData::DictionaryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.DictionaryData)
}

void DictionaryData::InitAsDefaultInstance() {
}

DictionaryData::DictionaryData(const DictionaryData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.DictionaryData)
}

void DictionaryData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_items_in_collection_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DictionaryData::~DictionaryData() {
  // @@protoc_insertion_point(destructor:artm.DictionaryData)
  SharedDtor();
}

void DictionaryData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DictionaryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DictionaryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DictionaryData_descriptor_;
}

const DictionaryData& DictionaryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DictionaryData* DictionaryData::default_instance_ = NULL;

DictionaryData* DictionaryData::New(::google::protobuf::Arena* arena) const {
  DictionaryData* n = new DictionaryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DictionaryData::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.DictionaryData)
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  num_items_in_collection_ = GOOGLE_LONGLONG(0);
  token_.Clear();
  class_id_.Clear();
  token_value_.Clear();
  token_tf_.Clear();
  token_df_.Clear();
  cooc_first_index_.Clear();
  cooc_second_index_.Clear();
  cooc_value_.Clear();
  cooc_tf_.Clear();
  cooc_df_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DictionaryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.DictionaryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.DictionaryData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // repeated string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.DictionaryData.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        if (input->ExpectTag(26)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 3;
      case 3: {
        if (tag == 26) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.DictionaryData.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_class_id;
        if (input->ExpectTag(37)) goto parse_token_value;
        break;
      }

      // repeated float token_value = 4;
      case 4: {
        if (tag == 37) {
         parse_token_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_token_value())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_token_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_token_value;
        if (input->ExpectTag(45)) goto parse_token_tf;
        break;
      }

      // repeated float token_tf = 5;
      case 5: {
        if (tag == 45) {
         parse_token_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_token_tf())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_token_tf())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_token_tf;
        if (input->ExpectTag(53)) goto parse_token_df;
        break;
      }

      // repeated float token_df = 6;
      case 6: {
        if (tag == 53) {
         parse_token_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_token_df())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_token_df())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_token_df;
        if (input->ExpectTag(56)) goto parse_cooc_first_index;
        break;
      }

      // repeated int32 cooc_first_index = 7;
      case 7: {
        if (tag == 56) {
         parse_cooc_first_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_cooc_first_index())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cooc_first_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cooc_first_index;
        if (input->ExpectTag(64)) goto parse_cooc_second_index;
        break;
      }

      // repeated int32 cooc_second_index = 8;
      case 8: {
        if (tag == 64) {
         parse_cooc_second_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_cooc_second_index())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cooc_second_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cooc_second_index;
        if (input->ExpectTag(77)) goto parse_cooc_value;
        break;
      }

      // repeated float cooc_value = 9;
      case 9: {
        if (tag == 77) {
         parse_cooc_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_cooc_value())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cooc_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_cooc_value;
        if (input->ExpectTag(80)) goto parse_num_items_in_collection;
        break;
      }

      // optional int64 num_items_in_collection = 10;
      case 10: {
        if (tag == 80) {
         parse_num_items_in_collection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_items_in_collection_)));
          set_has_num_items_in_collection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_cooc_tf;
        break;
      }

      // repeated float cooc_tf = 11;
      case 11: {
        if (tag == 93) {
         parse_cooc_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93, input, this->mutable_cooc_tf())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cooc_tf())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_cooc_tf;
        if (input->ExpectTag(101)) goto parse_cooc_df;
        break;
      }

      // repeated float cooc_df = 12;
      case 12: {
        if (tag == 101) {
         parse_cooc_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 101, input, this->mutable_cooc_df())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cooc_df())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_cooc_df;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.DictionaryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.DictionaryData)
  return false;
#undef DO_
}

void DictionaryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.DictionaryData)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DictionaryData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string token = 2;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DictionaryData.token");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(i), output);
  }

  // repeated string class_id = 3;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DictionaryData.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->class_id(i), output);
  }

  // repeated float token_value = 4;
  for (int i = 0; i < this->token_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->token_value(i), output);
  }

  // repeated float token_tf = 5;
  for (int i = 0; i < this->token_tf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->token_tf(i), output);
  }

  // repeated float token_df = 6;
  for (int i = 0; i < this->token_df_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->token_df(i), output);
  }

  // repeated int32 cooc_first_index = 7;
  for (int i = 0; i < this->cooc_first_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->cooc_first_index(i), output);
  }

  // repeated int32 cooc_second_index = 8;
  for (int i = 0; i < this->cooc_second_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->cooc_second_index(i), output);
  }

  // repeated float cooc_value = 9;
  for (int i = 0; i < this->cooc_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->cooc_value(i), output);
  }

  // optional int64 num_items_in_collection = 10;
  if (has_num_items_in_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->num_items_in_collection(), output);
  }

  // repeated float cooc_tf = 11;
  for (int i = 0; i < this->cooc_tf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->cooc_tf(i), output);
  }

  // repeated float cooc_df = 12;
  for (int i = 0; i < this->cooc_df_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      12, this->cooc_df(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.DictionaryData)
}

::google::protobuf::uint8* DictionaryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.DictionaryData)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DictionaryData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string token = 2;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DictionaryData.token");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->token(i), target);
  }

  // repeated string class_id = 3;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.DictionaryData.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->class_id(i), target);
  }

  // repeated float token_value = 4;
  for (int i = 0; i < this->token_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->token_value(i), target);
  }

  // repeated float token_tf = 5;
  for (int i = 0; i < this->token_tf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->token_tf(i), target);
  }

  // repeated float token_df = 6;
  for (int i = 0; i < this->token_df_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->token_df(i), target);
  }

  // repeated int32 cooc_first_index = 7;
  for (int i = 0; i < this->cooc_first_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->cooc_first_index(i), target);
  }

  // repeated int32 cooc_second_index = 8;
  for (int i = 0; i < this->cooc_second_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->cooc_second_index(i), target);
  }

  // repeated float cooc_value = 9;
  for (int i = 0; i < this->cooc_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->cooc_value(i), target);
  }

  // optional int64 num_items_in_collection = 10;
  if (has_num_items_in_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->num_items_in_collection(), target);
  }

  // repeated float cooc_tf = 11;
  for (int i = 0; i < this->cooc_tf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(11, this->cooc_tf(i), target);
  }

  // repeated float cooc_df = 12;
  for (int i = 0; i < this->cooc_df_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(12, this->cooc_df(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.DictionaryData)
  return target;
}

int DictionaryData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.DictionaryData)
  int total_size = 0;

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int64 num_items_in_collection = 10;
  if (has_num_items_in_collection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_items_in_collection());
  }

  // repeated string token = 2;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated string class_id = 3;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated float token_value = 4;
  {
    int data_size = 0;
    data_size = 4 * this->token_value_size();
    total_size += 1 * this->token_value_size() + data_size;
  }

  // repeated float token_tf = 5;
  {
    int data_size = 0;
    data_size = 4 * this->token_tf_size();
    total_size += 1 * this->token_tf_size() + data_size;
  }

  // repeated float token_df = 6;
  {
    int data_size = 0;
    data_size = 4 * this->token_df_size();
    total_size += 1 * this->token_df_size() + data_size;
  }

  // repeated int32 cooc_first_index = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->cooc_first_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cooc_first_index(i));
    }
    total_size += 1 * this->cooc_first_index_size() + data_size;
  }

  // repeated int32 cooc_second_index = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->cooc_second_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cooc_second_index(i));
    }
    total_size += 1 * this->cooc_second_index_size() + data_size;
  }

  // repeated float cooc_value = 9;
  {
    int data_size = 0;
    data_size = 4 * this->cooc_value_size();
    total_size += 1 * this->cooc_value_size() + data_size;
  }

  // repeated float cooc_tf = 11;
  {
    int data_size = 0;
    data_size = 4 * this->cooc_tf_size();
    total_size += 1 * this->cooc_tf_size() + data_size;
  }

  // repeated float cooc_df = 12;
  {
    int data_size = 0;
    data_size = 4 * this->cooc_df_size();
    total_size += 1 * this->cooc_df_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionaryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.DictionaryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DictionaryData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DictionaryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.DictionaryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.DictionaryData)
    MergeFrom(*source);
  }
}

void DictionaryData::MergeFrom(const DictionaryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.DictionaryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  token_.MergeFrom(from.token_);
  class_id_.MergeFrom(from.class_id_);
  token_value_.MergeFrom(from.token_value_);
  token_tf_.MergeFrom(from.token_tf_);
  token_df_.MergeFrom(from.token_df_);
  cooc_first_index_.MergeFrom(from.cooc_first_index_);
  cooc_second_index_.MergeFrom(from.cooc_second_index_);
  cooc_value_.MergeFrom(from.cooc_value_);
  cooc_tf_.MergeFrom(from.cooc_tf_);
  cooc_df_.MergeFrom(from.cooc_df_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_num_items_in_collection()) {
      set_num_items_in_collection(from.num_items_in_collection());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DictionaryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.DictionaryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictionaryData::CopyFrom(const DictionaryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.DictionaryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryData::IsInitialized() const {

  return true;
}

void DictionaryData::Swap(DictionaryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictionaryData::InternalSwap(DictionaryData* other) {
  name_.Swap(&other->name_);
  token_.UnsafeArenaSwap(&other->token_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  token_value_.UnsafeArenaSwap(&other->token_value_);
  token_tf_.UnsafeArenaSwap(&other->token_tf_);
  token_df_.UnsafeArenaSwap(&other->token_df_);
  cooc_first_index_.UnsafeArenaSwap(&other->cooc_first_index_);
  cooc_second_index_.UnsafeArenaSwap(&other->cooc_second_index_);
  cooc_value_.UnsafeArenaSwap(&other->cooc_value_);
  std::swap(num_items_in_collection_, other->num_items_in_collection_);
  cooc_tf_.UnsafeArenaSwap(&other->cooc_tf_);
  cooc_df_.UnsafeArenaSwap(&other->cooc_df_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DictionaryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DictionaryData_descriptor_;
  metadata.reflection = DictionaryData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DictionaryData

// optional string name = 1;
bool DictionaryData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DictionaryData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DictionaryData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DictionaryData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& DictionaryData::name() const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DictionaryData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.name)
}
 void DictionaryData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.DictionaryData.name)
}
 void DictionaryData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.DictionaryData.name)
}
 ::std::string* DictionaryData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.DictionaryData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DictionaryData::release_name() {
  // @@protoc_insertion_point(field_release:artm.DictionaryData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DictionaryData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.DictionaryData.name)
}

// repeated string token = 2;
int DictionaryData::token_size() const {
  return token_.size();
}
void DictionaryData::clear_token() {
  token_.Clear();
}
 const ::std::string& DictionaryData::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.token)
  return token_.Get(index);
}
 ::std::string* DictionaryData::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DictionaryData.token)
  return token_.Mutable(index);
}
 void DictionaryData::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DictionaryData.token)
  token_.Mutable(index)->assign(value);
}
 void DictionaryData::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DictionaryData.token)
}
 void DictionaryData::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DictionaryData.token)
}
 ::std::string* DictionaryData::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.DictionaryData.token)
  return token_.Add();
}
 void DictionaryData::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.token)
}
 void DictionaryData::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DictionaryData.token)
}
 void DictionaryData::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DictionaryData.token)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DictionaryData::token() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.token)
  return token_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DictionaryData::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.token)
  return &token_;
}

// repeated string class_id = 3;
int DictionaryData::class_id_size() const {
  return class_id_.size();
}
void DictionaryData::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& DictionaryData::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.class_id)
  return class_id_.Get(index);
}
 ::std::string* DictionaryData::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DictionaryData.class_id)
  return class_id_.Mutable(index);
}
 void DictionaryData::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DictionaryData.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void DictionaryData::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DictionaryData.class_id)
}
 void DictionaryData::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DictionaryData.class_id)
}
 ::std::string* DictionaryData::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.DictionaryData.class_id)
  return class_id_.Add();
}
 void DictionaryData::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.class_id)
}
 void DictionaryData::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DictionaryData.class_id)
}
 void DictionaryData::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DictionaryData.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DictionaryData::class_id() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DictionaryData::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.class_id)
  return &class_id_;
}

// repeated float token_value = 4;
int DictionaryData::token_value_size() const {
  return token_value_.size();
}
void DictionaryData::clear_token_value() {
  token_value_.Clear();
}
 float DictionaryData::token_value(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.token_value)
  return token_value_.Get(index);
}
 void DictionaryData::set_token_value(int index, float value) {
  token_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.token_value)
}
 void DictionaryData::add_token_value(float value) {
  token_value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.token_value)
}
 const ::google::protobuf::RepeatedField< float >&
DictionaryData::token_value() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.token_value)
  return token_value_;
}
 ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_token_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.token_value)
  return &token_value_;
}

// repeated float token_tf = 5;
int DictionaryData::token_tf_size() const {
  return token_tf_.size();
}
void DictionaryData::clear_token_tf() {
  token_tf_.Clear();
}
 float DictionaryData::token_tf(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.token_tf)
  return token_tf_.Get(index);
}
 void DictionaryData::set_token_tf(int index, float value) {
  token_tf_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.token_tf)
}
 void DictionaryData::add_token_tf(float value) {
  token_tf_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.token_tf)
}
 const ::google::protobuf::RepeatedField< float >&
DictionaryData::token_tf() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.token_tf)
  return token_tf_;
}
 ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_token_tf() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.token_tf)
  return &token_tf_;
}

// repeated float token_df = 6;
int DictionaryData::token_df_size() const {
  return token_df_.size();
}
void DictionaryData::clear_token_df() {
  token_df_.Clear();
}
 float DictionaryData::token_df(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.token_df)
  return token_df_.Get(index);
}
 void DictionaryData::set_token_df(int index, float value) {
  token_df_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.token_df)
}
 void DictionaryData::add_token_df(float value) {
  token_df_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.token_df)
}
 const ::google::protobuf::RepeatedField< float >&
DictionaryData::token_df() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.token_df)
  return token_df_;
}
 ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_token_df() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.token_df)
  return &token_df_;
}

// repeated int32 cooc_first_index = 7;
int DictionaryData::cooc_first_index_size() const {
  return cooc_first_index_.size();
}
void DictionaryData::clear_cooc_first_index() {
  cooc_first_index_.Clear();
}
 ::google::protobuf::int32 DictionaryData::cooc_first_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.cooc_first_index)
  return cooc_first_index_.Get(index);
}
 void DictionaryData::set_cooc_first_index(int index, ::google::protobuf::int32 value) {
  cooc_first_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.cooc_first_index)
}
 void DictionaryData::add_cooc_first_index(::google::protobuf::int32 value) {
  cooc_first_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.cooc_first_index)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DictionaryData::cooc_first_index() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.cooc_first_index)
  return cooc_first_index_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DictionaryData::mutable_cooc_first_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.cooc_first_index)
  return &cooc_first_index_;
}

// repeated int32 cooc_second_index = 8;
int DictionaryData::cooc_second_index_size() const {
  return cooc_second_index_.size();
}
void DictionaryData::clear_cooc_second_index() {
  cooc_second_index_.Clear();
}
 ::google::protobuf::int32 DictionaryData::cooc_second_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.cooc_second_index)
  return cooc_second_index_.Get(index);
}
 void DictionaryData::set_cooc_second_index(int index, ::google::protobuf::int32 value) {
  cooc_second_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.cooc_second_index)
}
 void DictionaryData::add_cooc_second_index(::google::protobuf::int32 value) {
  cooc_second_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.cooc_second_index)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DictionaryData::cooc_second_index() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.cooc_second_index)
  return cooc_second_index_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DictionaryData::mutable_cooc_second_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.cooc_second_index)
  return &cooc_second_index_;
}

// repeated float cooc_value = 9;
int DictionaryData::cooc_value_size() const {
  return cooc_value_.size();
}
void DictionaryData::clear_cooc_value() {
  cooc_value_.Clear();
}
 float DictionaryData::cooc_value(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.cooc_value)
  return cooc_value_.Get(index);
}
 void DictionaryData::set_cooc_value(int index, float value) {
  cooc_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.cooc_value)
}
 void DictionaryData::add_cooc_value(float value) {
  cooc_value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.cooc_value)
}
 const ::google::protobuf::RepeatedField< float >&
DictionaryData::cooc_value() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.cooc_value)
  return cooc_value_;
}
 ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_cooc_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.cooc_value)
  return &cooc_value_;
}

// optional int64 num_items_in_collection = 10;
bool DictionaryData::has_num_items_in_collection() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DictionaryData::set_has_num_items_in_collection() {
  _has_bits_[0] |= 0x00000200u;
}
void DictionaryData::clear_has_num_items_in_collection() {
  _has_bits_[0] &= ~0x00000200u;
}
void DictionaryData::clear_num_items_in_collection() {
  num_items_in_collection_ = GOOGLE_LONGLONG(0);
  clear_has_num_items_in_collection();
}
 ::google::protobuf::int64 DictionaryData::num_items_in_collection() const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.num_items_in_collection)
  return num_items_in_collection_;
}
 void DictionaryData::set_num_items_in_collection(::google::protobuf::int64 value) {
  set_has_num_items_in_collection();
  num_items_in_collection_ = value;
  // @@protoc_insertion_point(field_set:artm.DictionaryData.num_items_in_collection)
}

// repeated float cooc_tf = 11;
int DictionaryData::cooc_tf_size() const {
  return cooc_tf_.size();
}
void DictionaryData::clear_cooc_tf() {
  cooc_tf_.Clear();
}
 float DictionaryData::cooc_tf(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.cooc_tf)
  return cooc_tf_.Get(index);
}
 void DictionaryData::set_cooc_tf(int index, float value) {
  cooc_tf_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.cooc_tf)
}
 void DictionaryData::add_cooc_tf(float value) {
  cooc_tf_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.cooc_tf)
}
 const ::google::protobuf::RepeatedField< float >&
DictionaryData::cooc_tf() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.cooc_tf)
  return cooc_tf_;
}
 ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_cooc_tf() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.cooc_tf)
  return &cooc_tf_;
}

// repeated float cooc_df = 12;
int DictionaryData::cooc_df_size() const {
  return cooc_df_.size();
}
void DictionaryData::clear_cooc_df() {
  cooc_df_.Clear();
}
 float DictionaryData::cooc_df(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.cooc_df)
  return cooc_df_.Get(index);
}
 void DictionaryData::set_cooc_df(int index, float value) {
  cooc_df_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.cooc_df)
}
 void DictionaryData::add_cooc_df(float value) {
  cooc_df_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.cooc_df)
}
 const ::google::protobuf::RepeatedField< float >&
DictionaryData::cooc_df() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.cooc_df)
  return cooc_df_;
}
 ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_cooc_df() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.cooc_df)
  return &cooc_df_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterDictionaryArgs::kDictionaryNameFieldNumber;
const int FilterDictionaryArgs::kDictionaryTargetNameFieldNumber;
const int FilterDictionaryArgs::kClassIdFieldNumber;
const int FilterDictionaryArgs::kMinDfFieldNumber;
const int FilterDictionaryArgs::kMaxDfFieldNumber;
const int FilterDictionaryArgs::kMinDfRateFieldNumber;
const int FilterDictionaryArgs::kMaxDfRateFieldNumber;
const int FilterDictionaryArgs::kMinTfFieldNumber;
const int FilterDictionaryArgs::kMaxTfFieldNumber;
const int FilterDictionaryArgs::kMaxDictionarySizeFieldNumber;
const int FilterDictionaryArgs::kRecalculateValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterDictionaryArgs::FilterDictionaryArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.FilterDictionaryArgs)
}

void FilterDictionaryArgs::InitAsDefaultInstance() {
}

FilterDictionaryArgs::FilterDictionaryArgs(const FilterDictionaryArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.FilterDictionaryArgs)
}

void FilterDictionaryArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_target_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_df_ = 0;
  max_df_ = 0;
  min_df_rate_ = 0;
  max_df_rate_ = 0;
  min_tf_ = 0;
  max_tf_ = 0;
  max_dictionary_size_ = GOOGLE_LONGLONG(0);
  recalculate_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterDictionaryArgs::~FilterDictionaryArgs() {
  // @@protoc_insertion_point(destructor:artm.FilterDictionaryArgs)
  SharedDtor();
}

void FilterDictionaryArgs::SharedDtor() {
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_target_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FilterDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterDictionaryArgs_descriptor_;
}

const FilterDictionaryArgs& FilterDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

FilterDictionaryArgs* FilterDictionaryArgs::default_instance_ = NULL;

FilterDictionaryArgs* FilterDictionaryArgs::New(::google::protobuf::Arena* arena) const {
  FilterDictionaryArgs* n = new FilterDictionaryArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterDictionaryArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.FilterDictionaryArgs)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FilterDictionaryArgs, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FilterDictionaryArgs*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(min_df_, min_tf_);
    if (has_dictionary_name()) {
      dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dictionary_target_name()) {
      dictionary_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_class_id()) {
      class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(max_tf_, recalculate_value_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FilterDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.FilterDictionaryArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dictionary_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.FilterDictionaryArgs.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dictionary_target_name;
        break;
      }

      // optional string dictionary_target_name = 2;
      case 2: {
        if (tag == 18) {
         parse_dictionary_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_target_name().data(), this->dictionary_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.FilterDictionaryArgs.dictionary_target_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_class_id;
        break;
      }

      // optional string class_id = 3;
      case 3: {
        if (tag == 26) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.FilterDictionaryArgs.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_min_df;
        break;
      }

      // optional float min_df = 4;
      case 4: {
        if (tag == 37) {
         parse_min_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_df_)));
          set_has_min_df();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_max_df;
        break;
      }

      // optional float max_df = 5;
      case 5: {
        if (tag == 45) {
         parse_max_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_df_)));
          set_has_max_df();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_min_df_rate;
        break;
      }

      // optional float min_df_rate = 6;
      case 6: {
        if (tag == 53) {
         parse_min_df_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_df_rate_)));
          set_has_min_df_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_max_df_rate;
        break;
      }

      // optional float max_df_rate = 7;
      case 7: {
        if (tag == 61) {
         parse_max_df_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_df_rate_)));
          set_has_max_df_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_min_tf;
        break;
      }

      // optional float min_tf = 8;
      case 8: {
        if (tag == 69) {
         parse_min_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_tf_)));
          set_has_min_tf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_max_tf;
        break;
      }

      // optional float max_tf = 9;
      case 9: {
        if (tag == 77) {
         parse_max_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_tf_)));
          set_has_max_tf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_max_dictionary_size;
        break;
      }

      // optional int64 max_dictionary_size = 10;
      case 10: {
        if (tag == 80) {
         parse_max_dictionary_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_dictionary_size_)));
          set_has_max_dictionary_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_recalculate_value;
        break;
      }

      // optional bool recalculate_value = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_recalculate_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recalculate_value_)));
          set_has_recalculate_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.FilterDictionaryArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.FilterDictionaryArgs)
  return false;
#undef DO_
}

void FilterDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.FilterDictionaryArgs)
  // optional string dictionary_name = 1;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FilterDictionaryArgs.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dictionary_name(), output);
  }

  // optional string dictionary_target_name = 2;
  if (has_dictionary_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_target_name().data(), this->dictionary_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FilterDictionaryArgs.dictionary_target_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dictionary_target_name(), output);
  }

  // optional string class_id = 3;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FilterDictionaryArgs.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->class_id(), output);
  }

  // optional float min_df = 4;
  if (has_min_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_df(), output);
  }

  // optional float max_df = 5;
  if (has_max_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_df(), output);
  }

  // optional float min_df_rate = 6;
  if (has_min_df_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->min_df_rate(), output);
  }

  // optional float max_df_rate = 7;
  if (has_max_df_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max_df_rate(), output);
  }

  // optional float min_tf = 8;
  if (has_min_tf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->min_tf(), output);
  }

  // optional float max_tf = 9;
  if (has_max_tf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->max_tf(), output);
  }

  // optional int64 max_dictionary_size = 10;
  if (has_max_dictionary_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->max_dictionary_size(), output);
  }

  // optional bool recalculate_value = 11 [default = false];
  if (has_recalculate_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->recalculate_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.FilterDictionaryArgs)
}

::google::protobuf::uint8* FilterDictionaryArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.FilterDictionaryArgs)
  // optional string dictionary_name = 1;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FilterDictionaryArgs.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dictionary_name(), target);
  }

  // optional string dictionary_target_name = 2;
  if (has_dictionary_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_target_name().data(), this->dictionary_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FilterDictionaryArgs.dictionary_target_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dictionary_target_name(), target);
  }

  // optional string class_id = 3;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FilterDictionaryArgs.class_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->class_id(), target);
  }

  // optional float min_df = 4;
  if (has_min_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_df(), target);
  }

  // optional float max_df = 5;
  if (has_max_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_df(), target);
  }

  // optional float min_df_rate = 6;
  if (has_min_df_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->min_df_rate(), target);
  }

  // optional float max_df_rate = 7;
  if (has_max_df_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->max_df_rate(), target);
  }

  // optional float min_tf = 8;
  if (has_min_tf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->min_tf(), target);
  }

  // optional float max_tf = 9;
  if (has_max_tf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->max_tf(), target);
  }

  // optional int64 max_dictionary_size = 10;
  if (has_max_dictionary_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->max_dictionary_size(), target);
  }

  // optional bool recalculate_value = 11 [default = false];
  if (has_recalculate_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->recalculate_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.FilterDictionaryArgs)
  return target;
}

int FilterDictionaryArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.FilterDictionaryArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string dictionary_name = 1;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

    // optional string dictionary_target_name = 2;
    if (has_dictionary_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_target_name());
    }

    // optional string class_id = 3;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

    // optional float min_df = 4;
    if (has_min_df()) {
      total_size += 1 + 4;
    }

    // optional float max_df = 5;
    if (has_max_df()) {
      total_size += 1 + 4;
    }

    // optional float min_df_rate = 6;
    if (has_min_df_rate()) {
      total_size += 1 + 4;
    }

    // optional float max_df_rate = 7;
    if (has_max_df_rate()) {
      total_size += 1 + 4;
    }

    // optional float min_tf = 8;
    if (has_min_tf()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float max_tf = 9;
    if (has_max_tf()) {
      total_size += 1 + 4;
    }

    // optional int64 max_dictionary_size = 10;
    if (has_max_dictionary_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_dictionary_size());
    }

    // optional bool recalculate_value = 11 [default = false];
    if (has_recalculate_value()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.FilterDictionaryArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FilterDictionaryArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterDictionaryArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.FilterDictionaryArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.FilterDictionaryArgs)
    MergeFrom(*source);
  }
}

void FilterDictionaryArgs::MergeFrom(const FilterDictionaryArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.FilterDictionaryArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
    if (from.has_dictionary_target_name()) {
      set_has_dictionary_target_name();
      dictionary_target_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_target_name_);
    }
    if (from.has_class_id()) {
      set_has_class_id();
      class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_id_);
    }
    if (from.has_min_df()) {
      set_min_df(from.min_df());
    }
    if (from.has_max_df()) {
      set_max_df(from.max_df());
    }
    if (from.has_min_df_rate()) {
      set_min_df_rate(from.min_df_rate());
    }
    if (from.has_max_df_rate()) {
      set_max_df_rate(from.max_df_rate());
    }
    if (from.has_min_tf()) {
      set_min_tf(from.min_tf());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_tf()) {
      set_max_tf(from.max_tf());
    }
    if (from.has_max_dictionary_size()) {
      set_max_dictionary_size(from.max_dictionary_size());
    }
    if (from.has_recalculate_value()) {
      set_recalculate_value(from.recalculate_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FilterDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.FilterDictionaryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterDictionaryArgs::CopyFrom(const FilterDictionaryArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.FilterDictionaryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterDictionaryArgs::IsInitialized() const {

  return true;
}

void FilterDictionaryArgs::Swap(FilterDictionaryArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterDictionaryArgs::InternalSwap(FilterDictionaryArgs* other) {
  dictionary_name_.Swap(&other->dictionary_name_);
  dictionary_target_name_.Swap(&other->dictionary_target_name_);
  class_id_.Swap(&other->class_id_);
  std::swap(min_df_, other->min_df_);
  std::swap(max_df_, other->max_df_);
  std::swap(min_df_rate_, other->min_df_rate_);
  std::swap(max_df_rate_, other->max_df_rate_);
  std::swap(min_tf_, other->min_tf_);
  std::swap(max_tf_, other->max_tf_);
  std::swap(max_dictionary_size_, other->max_dictionary_size_);
  std::swap(recalculate_value_, other->recalculate_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterDictionaryArgs_descriptor_;
  metadata.reflection = FilterDictionaryArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterDictionaryArgs

// optional string dictionary_name = 1;
bool FilterDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FilterDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FilterDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FilterDictionaryArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& FilterDictionaryArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.dictionary_name)
}
 void FilterDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.FilterDictionaryArgs.dictionary_name)
}
 void FilterDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.FilterDictionaryArgs.dictionary_name)
}
 ::std::string* FilterDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.FilterDictionaryArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FilterDictionaryArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.FilterDictionaryArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.FilterDictionaryArgs.dictionary_name)
}

// optional string dictionary_target_name = 2;
bool FilterDictionaryArgs::has_dictionary_target_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FilterDictionaryArgs::set_has_dictionary_target_name() {
  _has_bits_[0] |= 0x00000002u;
}
void FilterDictionaryArgs::clear_has_dictionary_target_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void FilterDictionaryArgs::clear_dictionary_target_name() {
  dictionary_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_target_name();
}
 const ::std::string& FilterDictionaryArgs::dictionary_target_name() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.dictionary_target_name)
  return dictionary_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterDictionaryArgs::set_dictionary_target_name(const ::std::string& value) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.dictionary_target_name)
}
 void FilterDictionaryArgs::set_dictionary_target_name(const char* value) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.FilterDictionaryArgs.dictionary_target_name)
}
 void FilterDictionaryArgs::set_dictionary_target_name(const char* value, size_t size) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.FilterDictionaryArgs.dictionary_target_name)
}
 ::std::string* FilterDictionaryArgs::mutable_dictionary_target_name() {
  set_has_dictionary_target_name();
  // @@protoc_insertion_point(field_mutable:artm.FilterDictionaryArgs.dictionary_target_name)
  return dictionary_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FilterDictionaryArgs::release_dictionary_target_name() {
  // @@protoc_insertion_point(field_release:artm.FilterDictionaryArgs.dictionary_target_name)
  clear_has_dictionary_target_name();
  return dictionary_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterDictionaryArgs::set_allocated_dictionary_target_name(::std::string* dictionary_target_name) {
  if (dictionary_target_name != NULL) {
    set_has_dictionary_target_name();
  } else {
    clear_has_dictionary_target_name();
  }
  dictionary_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.FilterDictionaryArgs.dictionary_target_name)
}

// optional string class_id = 3;
bool FilterDictionaryArgs::has_class_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FilterDictionaryArgs::set_has_class_id() {
  _has_bits_[0] |= 0x00000004u;
}
void FilterDictionaryArgs::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void FilterDictionaryArgs::clear_class_id() {
  class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_id();
}
 const ::std::string& FilterDictionaryArgs::class_id() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.class_id)
  return class_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterDictionaryArgs::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.class_id)
}
 void FilterDictionaryArgs::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.FilterDictionaryArgs.class_id)
}
 void FilterDictionaryArgs::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.FilterDictionaryArgs.class_id)
}
 ::std::string* FilterDictionaryArgs::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.FilterDictionaryArgs.class_id)
  return class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FilterDictionaryArgs::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.FilterDictionaryArgs.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FilterDictionaryArgs::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.FilterDictionaryArgs.class_id)
}

// optional float min_df = 4;
bool FilterDictionaryArgs::has_min_df() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FilterDictionaryArgs::set_has_min_df() {
  _has_bits_[0] |= 0x00000008u;
}
void FilterDictionaryArgs::clear_has_min_df() {
  _has_bits_[0] &= ~0x00000008u;
}
void FilterDictionaryArgs::clear_min_df() {
  min_df_ = 0;
  clear_has_min_df();
}
 float FilterDictionaryArgs::min_df() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.min_df)
  return min_df_;
}
 void FilterDictionaryArgs::set_min_df(float value) {
  set_has_min_df();
  min_df_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.min_df)
}

// optional float max_df = 5;
bool FilterDictionaryArgs::has_max_df() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FilterDictionaryArgs::set_has_max_df() {
  _has_bits_[0] |= 0x00000010u;
}
void FilterDictionaryArgs::clear_has_max_df() {
  _has_bits_[0] &= ~0x00000010u;
}
void FilterDictionaryArgs::clear_max_df() {
  max_df_ = 0;
  clear_has_max_df();
}
 float FilterDictionaryArgs::max_df() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.max_df)
  return max_df_;
}
 void FilterDictionaryArgs::set_max_df(float value) {
  set_has_max_df();
  max_df_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.max_df)
}

// optional float min_df_rate = 6;
bool FilterDictionaryArgs::has_min_df_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FilterDictionaryArgs::set_has_min_df_rate() {
  _has_bits_[0] |= 0x00000020u;
}
void FilterDictionaryArgs::clear_has_min_df_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
void FilterDictionaryArgs::clear_min_df_rate() {
  min_df_rate_ = 0;
  clear_has_min_df_rate();
}
 float FilterDictionaryArgs::min_df_rate() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.min_df_rate)
  return min_df_rate_;
}
 void FilterDictionaryArgs::set_min_df_rate(float value) {
  set_has_min_df_rate();
  min_df_rate_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.min_df_rate)
}

// optional float max_df_rate = 7;
bool FilterDictionaryArgs::has_max_df_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FilterDictionaryArgs::set_has_max_df_rate() {
  _has_bits_[0] |= 0x00000040u;
}
void FilterDictionaryArgs::clear_has_max_df_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
void FilterDictionaryArgs::clear_max_df_rate() {
  max_df_rate_ = 0;
  clear_has_max_df_rate();
}
 float FilterDictionaryArgs::max_df_rate() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.max_df_rate)
  return max_df_rate_;
}
 void FilterDictionaryArgs::set_max_df_rate(float value) {
  set_has_max_df_rate();
  max_df_rate_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.max_df_rate)
}

// optional float min_tf = 8;
bool FilterDictionaryArgs::has_min_tf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FilterDictionaryArgs::set_has_min_tf() {
  _has_bits_[0] |= 0x00000080u;
}
void FilterDictionaryArgs::clear_has_min_tf() {
  _has_bits_[0] &= ~0x00000080u;
}
void FilterDictionaryArgs::clear_min_tf() {
  min_tf_ = 0;
  clear_has_min_tf();
}
 float FilterDictionaryArgs::min_tf() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.min_tf)
  return min_tf_;
}
 void FilterDictionaryArgs::set_min_tf(float value) {
  set_has_min_tf();
  min_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.min_tf)
}

// optional float max_tf = 9;
bool FilterDictionaryArgs::has_max_tf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FilterDictionaryArgs::set_has_max_tf() {
  _has_bits_[0] |= 0x00000100u;
}
void FilterDictionaryArgs::clear_has_max_tf() {
  _has_bits_[0] &= ~0x00000100u;
}
void FilterDictionaryArgs::clear_max_tf() {
  max_tf_ = 0;
  clear_has_max_tf();
}
 float FilterDictionaryArgs::max_tf() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.max_tf)
  return max_tf_;
}
 void FilterDictionaryArgs::set_max_tf(float value) {
  set_has_max_tf();
  max_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.max_tf)
}

// optional int64 max_dictionary_size = 10;
bool FilterDictionaryArgs::has_max_dictionary_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FilterDictionaryArgs::set_has_max_dictionary_size() {
  _has_bits_[0] |= 0x00000200u;
}
void FilterDictionaryArgs::clear_has_max_dictionary_size() {
  _has_bits_[0] &= ~0x00000200u;
}
void FilterDictionaryArgs::clear_max_dictionary_size() {
  max_dictionary_size_ = GOOGLE_LONGLONG(0);
  clear_has_max_dictionary_size();
}
 ::google::protobuf::int64 FilterDictionaryArgs::max_dictionary_size() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.max_dictionary_size)
  return max_dictionary_size_;
}
 void FilterDictionaryArgs::set_max_dictionary_size(::google::protobuf::int64 value) {
  set_has_max_dictionary_size();
  max_dictionary_size_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.max_dictionary_size)
}

// optional bool recalculate_value = 11 [default = false];
bool FilterDictionaryArgs::has_recalculate_value() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FilterDictionaryArgs::set_has_recalculate_value() {
  _has_bits_[0] |= 0x00000400u;
}
void FilterDictionaryArgs::clear_has_recalculate_value() {
  _has_bits_[0] &= ~0x00000400u;
}
void FilterDictionaryArgs::clear_recalculate_value() {
  recalculate_value_ = false;
  clear_has_recalculate_value();
}
 bool FilterDictionaryArgs::recalculate_value() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.recalculate_value)
  return recalculate_value_;
}
 void FilterDictionaryArgs::set_recalculate_value(bool value) {
  set_has_recalculate_value();
  recalculate_value_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.recalculate_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GatherDictionaryArgs::kDictionaryTargetNameFieldNumber;
const int GatherDictionaryArgs::kDataPathFieldNumber;
const int GatherDictionaryArgs::kCoocFilePathFieldNumber;
const int GatherDictionaryArgs::kVocabFilePathFieldNumber;
const int GatherDictionaryArgs::kSymmetricCoocValuesFieldNumber;
const int GatherDictionaryArgs::kBatchPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GatherDictionaryArgs::GatherDictionaryArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.GatherDictionaryArgs)
}

void GatherDictionaryArgs::InitAsDefaultInstance() {
}

GatherDictionaryArgs::GatherDictionaryArgs(const GatherDictionaryArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.GatherDictionaryArgs)
}

void GatherDictionaryArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dictionary_target_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cooc_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vocab_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symmetric_cooc_values_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatherDictionaryArgs::~GatherDictionaryArgs() {
  // @@protoc_insertion_point(destructor:artm.GatherDictionaryArgs)
  SharedDtor();
}

void GatherDictionaryArgs::SharedDtor() {
  dictionary_target_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cooc_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vocab_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GatherDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatherDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatherDictionaryArgs_descriptor_;
}

const GatherDictionaryArgs& GatherDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GatherDictionaryArgs* GatherDictionaryArgs::default_instance_ = NULL;

GatherDictionaryArgs* GatherDictionaryArgs::New(::google::protobuf::Arena* arena) const {
  GatherDictionaryArgs* n = new GatherDictionaryArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GatherDictionaryArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.GatherDictionaryArgs)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_dictionary_target_name()) {
      dictionary_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data_path()) {
      data_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cooc_file_path()) {
      cooc_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_vocab_file_path()) {
      vocab_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    symmetric_cooc_values_ = false;
  }
  batch_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GatherDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.GatherDictionaryArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dictionary_target_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_target_name().data(), this->dictionary_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GatherDictionaryArgs.dictionary_target_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_path;
        break;
      }

      // optional string data_path = 2;
      case 2: {
        if (tag == 18) {
         parse_data_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_path().data(), this->data_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GatherDictionaryArgs.data_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cooc_file_path;
        break;
      }

      // optional string cooc_file_path = 3;
      case 3: {
        if (tag == 26) {
         parse_cooc_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cooc_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cooc_file_path().data(), this->cooc_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GatherDictionaryArgs.cooc_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vocab_file_path;
        break;
      }

      // optional string vocab_file_path = 4;
      case 4: {
        if (tag == 34) {
         parse_vocab_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vocab_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vocab_file_path().data(), this->vocab_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GatherDictionaryArgs.vocab_file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_symmetric_cooc_values;
        break;
      }

      // optional bool symmetric_cooc_values = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_symmetric_cooc_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &symmetric_cooc_values_)));
          set_has_symmetric_cooc_values();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_batch_path;
        break;
      }

      // repeated string batch_path = 6;
      case 6: {
        if (tag == 50) {
         parse_batch_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->batch_path(this->batch_path_size() - 1).data(),
            this->batch_path(this->batch_path_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GatherDictionaryArgs.batch_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_batch_path;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.GatherDictionaryArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.GatherDictionaryArgs)
  return false;
#undef DO_
}

void GatherDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.GatherDictionaryArgs)
  // optional string dictionary_target_name = 1;
  if (has_dictionary_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_target_name().data(), this->dictionary_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GatherDictionaryArgs.dictionary_target_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dictionary_target_name(), output);
  }

  // optional string data_path = 2;
  if (has_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_path().data(), this->data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GatherDictionaryArgs.data_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data_path(), output);
  }

  // optional string cooc_file_path = 3;
  if (has_cooc_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooc_file_path().data(), this->cooc_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GatherDictionaryArgs.cooc_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cooc_file_path(), output);
  }

  // optional string vocab_file_path = 4;
  if (has_vocab_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vocab_file_path().data(), this->vocab_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GatherDictionaryArgs.vocab_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vocab_file_path(), output);
  }

  // optional bool symmetric_cooc_values = 5 [default = false];
  if (has_symmetric_cooc_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->symmetric_cooc_values(), output);
  }

  // repeated string batch_path = 6;
  for (int i = 0; i < this->batch_path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_path(i).data(), this->batch_path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GatherDictionaryArgs.batch_path");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->batch_path(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.GatherDictionaryArgs)
}

::google::protobuf::uint8* GatherDictionaryArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.GatherDictionaryArgs)
  // optional string dictionary_target_name = 1;
  if (has_dictionary_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_target_name().data(), this->dictionary_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GatherDictionaryArgs.dictionary_target_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dictionary_target_name(), target);
  }

  // optional string data_path = 2;
  if (has_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_path().data(), this->data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GatherDictionaryArgs.data_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_path(), target);
  }

  // optional string cooc_file_path = 3;
  if (has_cooc_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cooc_file_path().data(), this->cooc_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GatherDictionaryArgs.cooc_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cooc_file_path(), target);
  }

  // optional string vocab_file_path = 4;
  if (has_vocab_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vocab_file_path().data(), this->vocab_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GatherDictionaryArgs.vocab_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vocab_file_path(), target);
  }

  // optional bool symmetric_cooc_values = 5 [default = false];
  if (has_symmetric_cooc_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->symmetric_cooc_values(), target);
  }

  // repeated string batch_path = 6;
  for (int i = 0; i < this->batch_path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_path(i).data(), this->batch_path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GatherDictionaryArgs.batch_path");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->batch_path(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.GatherDictionaryArgs)
  return target;
}

int GatherDictionaryArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.GatherDictionaryArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string dictionary_target_name = 1;
    if (has_dictionary_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_target_name());
    }

    // optional string data_path = 2;
    if (has_data_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_path());
    }

    // optional string cooc_file_path = 3;
    if (has_cooc_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cooc_file_path());
    }

    // optional string vocab_file_path = 4;
    if (has_vocab_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vocab_file_path());
    }

    // optional bool symmetric_cooc_values = 5 [default = false];
    if (has_symmetric_cooc_values()) {
      total_size += 1 + 1;
    }

  }
  // repeated string batch_path = 6;
  total_size += 1 * this->batch_path_size();
  for (int i = 0; i < this->batch_path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_path(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatherDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.GatherDictionaryArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GatherDictionaryArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GatherDictionaryArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.GatherDictionaryArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.GatherDictionaryArgs)
    MergeFrom(*source);
  }
}

void GatherDictionaryArgs::MergeFrom(const GatherDictionaryArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.GatherDictionaryArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  batch_path_.MergeFrom(from.batch_path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dictionary_target_name()) {
      set_has_dictionary_target_name();
      dictionary_target_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_target_name_);
    }
    if (from.has_data_path()) {
      set_has_data_path();
      data_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_path_);
    }
    if (from.has_cooc_file_path()) {
      set_has_cooc_file_path();
      cooc_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cooc_file_path_);
    }
    if (from.has_vocab_file_path()) {
      set_has_vocab_file_path();
      vocab_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vocab_file_path_);
    }
    if (from.has_symmetric_cooc_values()) {
      set_symmetric_cooc_values(from.symmetric_cooc_values());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GatherDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.GatherDictionaryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatherDictionaryArgs::CopyFrom(const GatherDictionaryArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.GatherDictionaryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatherDictionaryArgs::IsInitialized() const {

  return true;
}

void GatherDictionaryArgs::Swap(GatherDictionaryArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GatherDictionaryArgs::InternalSwap(GatherDictionaryArgs* other) {
  dictionary_target_name_.Swap(&other->dictionary_target_name_);
  data_path_.Swap(&other->data_path_);
  cooc_file_path_.Swap(&other->cooc_file_path_);
  vocab_file_path_.Swap(&other->vocab_file_path_);
  std::swap(symmetric_cooc_values_, other->symmetric_cooc_values_);
  batch_path_.UnsafeArenaSwap(&other->batch_path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GatherDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatherDictionaryArgs_descriptor_;
  metadata.reflection = GatherDictionaryArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GatherDictionaryArgs

// optional string dictionary_target_name = 1;
bool GatherDictionaryArgs::has_dictionary_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GatherDictionaryArgs::set_has_dictionary_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
void GatherDictionaryArgs::clear_has_dictionary_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void GatherDictionaryArgs::clear_dictionary_target_name() {
  dictionary_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_target_name();
}
 const ::std::string& GatherDictionaryArgs::dictionary_target_name() const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.dictionary_target_name)
  return dictionary_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GatherDictionaryArgs::set_dictionary_target_name(const ::std::string& value) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.dictionary_target_name)
}
 void GatherDictionaryArgs::set_dictionary_target_name(const char* value) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GatherDictionaryArgs.dictionary_target_name)
}
 void GatherDictionaryArgs::set_dictionary_target_name(const char* value, size_t size) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GatherDictionaryArgs.dictionary_target_name)
}
 ::std::string* GatherDictionaryArgs::mutable_dictionary_target_name() {
  set_has_dictionary_target_name();
  // @@protoc_insertion_point(field_mutable:artm.GatherDictionaryArgs.dictionary_target_name)
  return dictionary_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GatherDictionaryArgs::release_dictionary_target_name() {
  // @@protoc_insertion_point(field_release:artm.GatherDictionaryArgs.dictionary_target_name)
  clear_has_dictionary_target_name();
  return dictionary_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GatherDictionaryArgs::set_allocated_dictionary_target_name(::std::string* dictionary_target_name) {
  if (dictionary_target_name != NULL) {
    set_has_dictionary_target_name();
  } else {
    clear_has_dictionary_target_name();
  }
  dictionary_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.GatherDictionaryArgs.dictionary_target_name)
}

// optional string data_path = 2;
bool GatherDictionaryArgs::has_data_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GatherDictionaryArgs::set_has_data_path() {
  _has_bits_[0] |= 0x00000002u;
}
void GatherDictionaryArgs::clear_has_data_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void GatherDictionaryArgs::clear_data_path() {
  data_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_path();
}
 const ::std::string& GatherDictionaryArgs::data_path() const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.data_path)
  return data_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GatherDictionaryArgs::set_data_path(const ::std::string& value) {
  set_has_data_path();
  data_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.data_path)
}
 void GatherDictionaryArgs::set_data_path(const char* value) {
  set_has_data_path();
  data_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GatherDictionaryArgs.data_path)
}
 void GatherDictionaryArgs::set_data_path(const char* value, size_t size) {
  set_has_data_path();
  data_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GatherDictionaryArgs.data_path)
}
 ::std::string* GatherDictionaryArgs::mutable_data_path() {
  set_has_data_path();
  // @@protoc_insertion_point(field_mutable:artm.GatherDictionaryArgs.data_path)
  return data_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GatherDictionaryArgs::release_data_path() {
  // @@protoc_insertion_point(field_release:artm.GatherDictionaryArgs.data_path)
  clear_has_data_path();
  return data_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GatherDictionaryArgs::set_allocated_data_path(::std::string* data_path) {
  if (data_path != NULL) {
    set_has_data_path();
  } else {
    clear_has_data_path();
  }
  data_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_path);
  // @@protoc_insertion_point(field_set_allocated:artm.GatherDictionaryArgs.data_path)
}

// optional string cooc_file_path = 3;
bool GatherDictionaryArgs::has_cooc_file_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GatherDictionaryArgs::set_has_cooc_file_path() {
  _has_bits_[0] |= 0x00000004u;
}
void GatherDictionaryArgs::clear_has_cooc_file_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void GatherDictionaryArgs::clear_cooc_file_path() {
  cooc_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooc_file_path();
}
 const ::std::string& GatherDictionaryArgs::cooc_file_path() const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.cooc_file_path)
  return cooc_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GatherDictionaryArgs::set_cooc_file_path(const ::std::string& value) {
  set_has_cooc_file_path();
  cooc_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.cooc_file_path)
}
 void GatherDictionaryArgs::set_cooc_file_path(const char* value) {
  set_has_cooc_file_path();
  cooc_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GatherDictionaryArgs.cooc_file_path)
}
 void GatherDictionaryArgs::set_cooc_file_path(const char* value, size_t size) {
  set_has_cooc_file_path();
  cooc_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GatherDictionaryArgs.cooc_file_path)
}
 ::std::string* GatherDictionaryArgs::mutable_cooc_file_path() {
  set_has_cooc_file_path();
  // @@protoc_insertion_point(field_mutable:artm.GatherDictionaryArgs.cooc_file_path)
  return cooc_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GatherDictionaryArgs::release_cooc_file_path() {
  // @@protoc_insertion_point(field_release:artm.GatherDictionaryArgs.cooc_file_path)
  clear_has_cooc_file_path();
  return cooc_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GatherDictionaryArgs::set_allocated_cooc_file_path(::std::string* cooc_file_path) {
  if (cooc_file_path != NULL) {
    set_has_cooc_file_path();
  } else {
    clear_has_cooc_file_path();
  }
  cooc_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooc_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.GatherDictionaryArgs.cooc_file_path)
}

// optional string vocab_file_path = 4;
bool GatherDictionaryArgs::has_vocab_file_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GatherDictionaryArgs::set_has_vocab_file_path() {
  _has_bits_[0] |= 0x00000008u;
}
void GatherDictionaryArgs::clear_has_vocab_file_path() {
  _has_bits_[0] &= ~0x00000008u;
}
void GatherDictionaryArgs::clear_vocab_file_path() {
  vocab_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vocab_file_path();
}
 const ::std::string& GatherDictionaryArgs::vocab_file_path() const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.vocab_file_path)
  return vocab_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GatherDictionaryArgs::set_vocab_file_path(const ::std::string& value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.vocab_file_path)
}
 void GatherDictionaryArgs::set_vocab_file_path(const char* value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GatherDictionaryArgs.vocab_file_path)
}
 void GatherDictionaryArgs::set_vocab_file_path(const char* value, size_t size) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GatherDictionaryArgs.vocab_file_path)
}
 ::std::string* GatherDictionaryArgs::mutable_vocab_file_path() {
  set_has_vocab_file_path();
  // @@protoc_insertion_point(field_mutable:artm.GatherDictionaryArgs.vocab_file_path)
  return vocab_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GatherDictionaryArgs::release_vocab_file_path() {
  // @@protoc_insertion_point(field_release:artm.GatherDictionaryArgs.vocab_file_path)
  clear_has_vocab_file_path();
  return vocab_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GatherDictionaryArgs::set_allocated_vocab_file_path(::std::string* vocab_file_path) {
  if (vocab_file_path != NULL) {
    set_has_vocab_file_path();
  } else {
    clear_has_vocab_file_path();
  }
  vocab_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vocab_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.GatherDictionaryArgs.vocab_file_path)
}

// optional bool symmetric_cooc_values = 5 [default = false];
bool GatherDictionaryArgs::has_symmetric_cooc_values() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GatherDictionaryArgs::set_has_symmetric_cooc_values() {
  _has_bits_[0] |= 0x00000010u;
}
void GatherDictionaryArgs::clear_has_symmetric_cooc_values() {
  _has_bits_[0] &= ~0x00000010u;
}
void GatherDictionaryArgs::clear_symmetric_cooc_values() {
  symmetric_cooc_values_ = false;
  clear_has_symmetric_cooc_values();
}
 bool GatherDictionaryArgs::symmetric_cooc_values() const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.symmetric_cooc_values)
  return symmetric_cooc_values_;
}
 void GatherDictionaryArgs::set_symmetric_cooc_values(bool value) {
  set_has_symmetric_cooc_values();
  symmetric_cooc_values_ = value;
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.symmetric_cooc_values)
}

// repeated string batch_path = 6;
int GatherDictionaryArgs::batch_path_size() const {
  return batch_path_.size();
}
void GatherDictionaryArgs::clear_batch_path() {
  batch_path_.Clear();
}
 const ::std::string& GatherDictionaryArgs::batch_path(int index) const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.batch_path)
  return batch_path_.Get(index);
}
 ::std::string* GatherDictionaryArgs::mutable_batch_path(int index) {
  // @@protoc_insertion_point(field_mutable:artm.GatherDictionaryArgs.batch_path)
  return batch_path_.Mutable(index);
}
 void GatherDictionaryArgs::set_batch_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.batch_path)
  batch_path_.Mutable(index)->assign(value);
}
 void GatherDictionaryArgs::set_batch_path(int index, const char* value) {
  batch_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.GatherDictionaryArgs.batch_path)
}
 void GatherDictionaryArgs::set_batch_path(int index, const char* value, size_t size) {
  batch_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.GatherDictionaryArgs.batch_path)
}
 ::std::string* GatherDictionaryArgs::add_batch_path() {
  // @@protoc_insertion_point(field_add_mutable:artm.GatherDictionaryArgs.batch_path)
  return batch_path_.Add();
}
 void GatherDictionaryArgs::add_batch_path(const ::std::string& value) {
  batch_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.GatherDictionaryArgs.batch_path)
}
 void GatherDictionaryArgs::add_batch_path(const char* value) {
  batch_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.GatherDictionaryArgs.batch_path)
}
 void GatherDictionaryArgs::add_batch_path(const char* value, size_t size) {
  batch_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.GatherDictionaryArgs.batch_path)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GatherDictionaryArgs::batch_path() const {
  // @@protoc_insertion_point(field_list:artm.GatherDictionaryArgs.batch_path)
  return batch_path_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GatherDictionaryArgs::mutable_batch_path() {
  // @@protoc_insertion_point(field_mutable_list:artm.GatherDictionaryArgs.batch_path)
  return &batch_path_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDictionaryArgs::kDictionaryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDictionaryArgs::GetDictionaryArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.GetDictionaryArgs)
}

void GetDictionaryArgs::InitAsDefaultInstance() {
}

GetDictionaryArgs::GetDictionaryArgs(const GetDictionaryArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.GetDictionaryArgs)
}

void GetDictionaryArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDictionaryArgs::~GetDictionaryArgs() {
  // @@protoc_insertion_point(destructor:artm.GetDictionaryArgs)
  SharedDtor();
}

void GetDictionaryArgs::SharedDtor() {
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDictionaryArgs_descriptor_;
}

const GetDictionaryArgs& GetDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetDictionaryArgs* GetDictionaryArgs::default_instance_ = NULL;

GetDictionaryArgs* GetDictionaryArgs::New(::google::protobuf::Arena* arena) const {
  GetDictionaryArgs* n = new GetDictionaryArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDictionaryArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.GetDictionaryArgs)
  if (has_dictionary_name()) {
    dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.GetDictionaryArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dictionary_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GetDictionaryArgs.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.GetDictionaryArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.GetDictionaryArgs)
  return false;
#undef DO_
}

void GetDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.GetDictionaryArgs)
  // optional string dictionary_name = 1;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetDictionaryArgs.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dictionary_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.GetDictionaryArgs)
}

::google::protobuf::uint8* GetDictionaryArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.GetDictionaryArgs)
  // optional string dictionary_name = 1;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetDictionaryArgs.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dictionary_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.GetDictionaryArgs)
  return target;
}

int GetDictionaryArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.GetDictionaryArgs)
  int total_size = 0;

  // optional string dictionary_name = 1;
  if (has_dictionary_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dictionary_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.GetDictionaryArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetDictionaryArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDictionaryArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.GetDictionaryArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.GetDictionaryArgs)
    MergeFrom(*source);
  }
}

void GetDictionaryArgs::MergeFrom(const GetDictionaryArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.GetDictionaryArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.GetDictionaryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDictionaryArgs::CopyFrom(const GetDictionaryArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.GetDictionaryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDictionaryArgs::IsInitialized() const {

  return true;
}

void GetDictionaryArgs::Swap(GetDictionaryArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDictionaryArgs::InternalSwap(GetDictionaryArgs* other) {
  dictionary_name_.Swap(&other->dictionary_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDictionaryArgs_descriptor_;
  metadata.reflection = GetDictionaryArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDictionaryArgs

// optional string dictionary_name = 1;
bool GetDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000001u;
}
void GetDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetDictionaryArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& GetDictionaryArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.GetDictionaryArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GetDictionaryArgs.dictionary_name)
}
 void GetDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GetDictionaryArgs.dictionary_name)
}
 void GetDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GetDictionaryArgs.dictionary_name)
}
 ::std::string* GetDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.GetDictionaryArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetDictionaryArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.GetDictionaryArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.GetDictionaryArgs.dictionary_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTopicModelArgs::kModelNameFieldNumber;
const int GetTopicModelArgs::kTopicNameFieldNumber;
const int GetTopicModelArgs::kTokenFieldNumber;
const int GetTopicModelArgs::kClassIdFieldNumber;
const int GetTopicModelArgs::kUseSparseFormatFieldNumber;
const int GetTopicModelArgs::kEpsFieldNumber;
const int GetTopicModelArgs::kMatrixLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTopicModelArgs::GetTopicModelArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.GetTopicModelArgs)
}

void GetTopicModelArgs::InitAsDefaultInstance() {
}

GetTopicModelArgs::GetTopicModelArgs(const GetTopicModelArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.GetTopicModelArgs)
}

void GetTopicModelArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_sparse_format_ = false;
  eps_ = 1e-37f;
  matrix_layout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTopicModelArgs::~GetTopicModelArgs() {
  // @@protoc_insertion_point(destructor:artm.GetTopicModelArgs)
  SharedDtor();
}

void GetTopicModelArgs::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetTopicModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTopicModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTopicModelArgs_descriptor_;
}

const GetTopicModelArgs& GetTopicModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetTopicModelArgs* GetTopicModelArgs::default_instance_ = NULL;

GetTopicModelArgs* GetTopicModelArgs::New(::google::protobuf::Arena* arena) const {
  GetTopicModelArgs* n = new GetTopicModelArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTopicModelArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.GetTopicModelArgs)
  if (_has_bits_[0 / 32] & 113u) {
    if (has_model_name()) {
      model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    use_sparse_format_ = false;
    eps_ = 1e-37f;
    matrix_layout_ = 0;
  }
  topic_name_.Clear();
  token_.Clear();
  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetTopicModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.GetTopicModelArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GetTopicModelArgs.model_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 2;
      case 2: {
        if (tag == 18) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GetTopicModelArgs.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // repeated string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GetTopicModelArgs.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        if (input->ExpectTag(34)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 4;
      case 4: {
        if (tag == 34) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GetTopicModelArgs.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_class_id;
        if (input->ExpectTag(40)) goto parse_use_sparse_format;
        break;
      }

      // optional bool use_sparse_format = 5;
      case 5: {
        if (tag == 40) {
         parse_use_sparse_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sparse_format_)));
          set_has_use_sparse_format();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_eps;
        break;
      }

      // optional float eps = 6 [default = 1e-37];
      case 6: {
        if (tag == 53) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_matrix_layout;
        break;
      }

      // optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
      case 8: {
        if (tag == 64) {
         parse_matrix_layout:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::MatrixLayout_IsValid(value)) {
            set_matrix_layout(static_cast< ::artm::MatrixLayout >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.GetTopicModelArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.GetTopicModelArgs)
  return false;
#undef DO_
}

void GetTopicModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.GetTopicModelArgs)
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetTopicModelArgs.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetTopicModelArgs.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->topic_name(i), output);
  }

  // repeated string token = 3;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetTopicModelArgs.token");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(i), output);
  }

  // repeated string class_id = 4;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetTopicModelArgs.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->class_id(i), output);
  }

  // optional bool use_sparse_format = 5;
  if (has_use_sparse_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_sparse_format(), output);
  }

  // optional float eps = 6 [default = 1e-37];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->eps(), output);
  }

  // optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
  if (has_matrix_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->matrix_layout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.GetTopicModelArgs)
}

::google::protobuf::uint8* GetTopicModelArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.GetTopicModelArgs)
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetTopicModelArgs.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetTopicModelArgs.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->topic_name(i), target);
  }

  // repeated string token = 3;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetTopicModelArgs.token");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->token(i), target);
  }

  // repeated string class_id = 4;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetTopicModelArgs.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->class_id(i), target);
  }

  // optional bool use_sparse_format = 5;
  if (has_use_sparse_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_sparse_format(), target);
  }

  // optional float eps = 6 [default = 1e-37];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->eps(), target);
  }

  // optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
  if (has_matrix_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->matrix_layout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.GetTopicModelArgs)
  return target;
}

int GetTopicModelArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.GetTopicModelArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 113u) {
    // optional string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional bool use_sparse_format = 5;
    if (has_use_sparse_format()) {
      total_size += 1 + 1;
    }

    // optional float eps = 6 [default = 1e-37];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
    if (has_matrix_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->matrix_layout());
    }

  }
  // repeated string topic_name = 2;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string token = 3;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated string class_id = 4;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTopicModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.GetTopicModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetTopicModelArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTopicModelArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.GetTopicModelArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.GetTopicModelArgs)
    MergeFrom(*source);
  }
}

void GetTopicModelArgs::MergeFrom(const GetTopicModelArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.GetTopicModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  token_.MergeFrom(from.token_);
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (from.has_use_sparse_format()) {
      set_use_sparse_format(from.use_sparse_format());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_matrix_layout()) {
      set_matrix_layout(from.matrix_layout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetTopicModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.GetTopicModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTopicModelArgs::CopyFrom(const GetTopicModelArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.GetTopicModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopicModelArgs::IsInitialized() const {

  return true;
}

void GetTopicModelArgs::Swap(GetTopicModelArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTopicModelArgs::InternalSwap(GetTopicModelArgs* other) {
  model_name_.Swap(&other->model_name_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  token_.UnsafeArenaSwap(&other->token_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  std::swap(use_sparse_format_, other->use_sparse_format_);
  std::swap(eps_, other->eps_);
  std::swap(matrix_layout_, other->matrix_layout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTopicModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTopicModelArgs_descriptor_;
  metadata.reflection = GetTopicModelArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTopicModelArgs

// optional string model_name = 1;
bool GetTopicModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetTopicModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
void GetTopicModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetTopicModelArgs::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
 const ::std::string& GetTopicModelArgs::model_name() const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetTopicModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.model_name)
}
 void GetTopicModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GetTopicModelArgs.model_name)
}
 void GetTopicModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GetTopicModelArgs.model_name)
}
 ::std::string* GetTopicModelArgs::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.GetTopicModelArgs.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetTopicModelArgs::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.GetTopicModelArgs.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetTopicModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.GetTopicModelArgs.model_name)
}

// repeated string topic_name = 2;
int GetTopicModelArgs::topic_name_size() const {
  return topic_name_.size();
}
void GetTopicModelArgs::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& GetTopicModelArgs::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* GetTopicModelArgs::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.GetTopicModelArgs.topic_name)
  return topic_name_.Mutable(index);
}
 void GetTopicModelArgs::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void GetTopicModelArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.GetTopicModelArgs.topic_name)
}
 void GetTopicModelArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.GetTopicModelArgs.topic_name)
}
 ::std::string* GetTopicModelArgs::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.GetTopicModelArgs.topic_name)
  return topic_name_.Add();
}
 void GetTopicModelArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.GetTopicModelArgs.topic_name)
}
 void GetTopicModelArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.GetTopicModelArgs.topic_name)
}
 void GetTopicModelArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.GetTopicModelArgs.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTopicModelArgs::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.GetTopicModelArgs.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTopicModelArgs::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.GetTopicModelArgs.topic_name)
  return &topic_name_;
}

// repeated string token = 3;
int GetTopicModelArgs::token_size() const {
  return token_.size();
}
void GetTopicModelArgs::clear_token() {
  token_.Clear();
}
 const ::std::string& GetTopicModelArgs::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.token)
  return token_.Get(index);
}
 ::std::string* GetTopicModelArgs::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.GetTopicModelArgs.token)
  return token_.Mutable(index);
}
 void GetTopicModelArgs::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.token)
  token_.Mutable(index)->assign(value);
}
 void GetTopicModelArgs::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.GetTopicModelArgs.token)
}
 void GetTopicModelArgs::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.GetTopicModelArgs.token)
}
 ::std::string* GetTopicModelArgs::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.GetTopicModelArgs.token)
  return token_.Add();
}
 void GetTopicModelArgs::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.GetTopicModelArgs.token)
}
 void GetTopicModelArgs::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.GetTopicModelArgs.token)
}
 void GetTopicModelArgs::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.GetTopicModelArgs.token)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTopicModelArgs::token() const {
  // @@protoc_insertion_point(field_list:artm.GetTopicModelArgs.token)
  return token_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTopicModelArgs::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.GetTopicModelArgs.token)
  return &token_;
}

// repeated string class_id = 4;
int GetTopicModelArgs::class_id_size() const {
  return class_id_.size();
}
void GetTopicModelArgs::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& GetTopicModelArgs::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.class_id)
  return class_id_.Get(index);
}
 ::std::string* GetTopicModelArgs::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.GetTopicModelArgs.class_id)
  return class_id_.Mutable(index);
}
 void GetTopicModelArgs::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void GetTopicModelArgs::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.GetTopicModelArgs.class_id)
}
 void GetTopicModelArgs::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.GetTopicModelArgs.class_id)
}
 ::std::string* GetTopicModelArgs::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.GetTopicModelArgs.class_id)
  return class_id_.Add();
}
 void GetTopicModelArgs::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.GetTopicModelArgs.class_id)
}
 void GetTopicModelArgs::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.GetTopicModelArgs.class_id)
}
 void GetTopicModelArgs::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.GetTopicModelArgs.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTopicModelArgs::class_id() const {
  // @@protoc_insertion_point(field_list:artm.GetTopicModelArgs.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTopicModelArgs::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.GetTopicModelArgs.class_id)
  return &class_id_;
}

// optional bool use_sparse_format = 5;
bool GetTopicModelArgs::has_use_sparse_format() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetTopicModelArgs::set_has_use_sparse_format() {
  _has_bits_[0] |= 0x00000010u;
}
void GetTopicModelArgs::clear_has_use_sparse_format() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetTopicModelArgs::clear_use_sparse_format() {
  use_sparse_format_ = false;
  clear_has_use_sparse_format();
}
 bool GetTopicModelArgs::use_sparse_format() const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.use_sparse_format)
  return use_sparse_format_;
}
 void GetTopicModelArgs::set_use_sparse_format(bool value) {
  set_has_use_sparse_format();
  use_sparse_format_ = value;
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.use_sparse_format)
}

// optional float eps = 6 [default = 1e-37];
bool GetTopicModelArgs::has_eps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetTopicModelArgs::set_has_eps() {
  _has_bits_[0] |= 0x00000020u;
}
void GetTopicModelArgs::clear_has_eps() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetTopicModelArgs::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
 float GetTopicModelArgs::eps() const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.eps)
  return eps_;
}
 void GetTopicModelArgs::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.eps)
}

// optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
bool GetTopicModelArgs::has_matrix_layout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetTopicModelArgs::set_has_matrix_layout() {
  _has_bits_[0] |= 0x00000040u;
}
void GetTopicModelArgs::clear_has_matrix_layout() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetTopicModelArgs::clear_matrix_layout() {
  matrix_layout_ = 0;
  clear_has_matrix_layout();
}
 ::artm::MatrixLayout GetTopicModelArgs::matrix_layout() const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.matrix_layout)
  return static_cast< ::artm::MatrixLayout >(matrix_layout_);
}
 void GetTopicModelArgs::set_matrix_layout(::artm::MatrixLayout value) {
  assert(::artm::MatrixLayout_IsValid(value));
  set_has_matrix_layout();
  matrix_layout_ = value;
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.matrix_layout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetThetaMatrixArgs::kTopicNameFieldNumber;
const int GetThetaMatrixArgs::kUseSparseFormatFieldNumber;
const int GetThetaMatrixArgs::kEpsFieldNumber;
const int GetThetaMatrixArgs::kMatrixLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetThetaMatrixArgs::GetThetaMatrixArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.GetThetaMatrixArgs)
}

void GetThetaMatrixArgs::InitAsDefaultInstance() {
}

GetThetaMatrixArgs::GetThetaMatrixArgs(const GetThetaMatrixArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.GetThetaMatrixArgs)
}

void GetThetaMatrixArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  use_sparse_format_ = false;
  eps_ = 1e-37f;
  matrix_layout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetThetaMatrixArgs::~GetThetaMatrixArgs() {
  // @@protoc_insertion_point(destructor:artm.GetThetaMatrixArgs)
  SharedDtor();
}

void GetThetaMatrixArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetThetaMatrixArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetThetaMatrixArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetThetaMatrixArgs_descriptor_;
}

const GetThetaMatrixArgs& GetThetaMatrixArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetThetaMatrixArgs* GetThetaMatrixArgs::default_instance_ = NULL;

GetThetaMatrixArgs* GetThetaMatrixArgs::New(::google::protobuf::Arena* arena) const {
  GetThetaMatrixArgs* n = new GetThetaMatrixArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetThetaMatrixArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.GetThetaMatrixArgs)
  if (_has_bits_[0 / 32] & 14u) {
    use_sparse_format_ = false;
    eps_ = 1e-37f;
    matrix_layout_ = 0;
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetThetaMatrixArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.GetThetaMatrixArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 3;
      case 3: {
        if (tag == 26) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GetThetaMatrixArgs.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectTag(48)) goto parse_use_sparse_format;
        break;
      }

      // optional bool use_sparse_format = 6;
      case 6: {
        if (tag == 48) {
         parse_use_sparse_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sparse_format_)));
          set_has_use_sparse_format();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_eps;
        break;
      }

      // optional float eps = 7 [default = 1e-37];
      case 7: {
        if (tag == 61) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_matrix_layout;
        break;
      }

      // optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
      case 8: {
        if (tag == 64) {
         parse_matrix_layout:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::MatrixLayout_IsValid(value)) {
            set_matrix_layout(static_cast< ::artm::MatrixLayout >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.GetThetaMatrixArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.GetThetaMatrixArgs)
  return false;
#undef DO_
}

void GetThetaMatrixArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.GetThetaMatrixArgs)
  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetThetaMatrixArgs.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  // optional bool use_sparse_format = 6;
  if (has_use_sparse_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_sparse_format(), output);
  }

  // optional float eps = 7 [default = 1e-37];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->eps(), output);
  }

  // optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
  if (has_matrix_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->matrix_layout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.GetThetaMatrixArgs)
}

::google::protobuf::uint8* GetThetaMatrixArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.GetThetaMatrixArgs)
  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetThetaMatrixArgs.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  // optional bool use_sparse_format = 6;
  if (has_use_sparse_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_sparse_format(), target);
  }

  // optional float eps = 7 [default = 1e-37];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->eps(), target);
  }

  // optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
  if (has_matrix_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->matrix_layout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.GetThetaMatrixArgs)
  return target;
}

int GetThetaMatrixArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.GetThetaMatrixArgs)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 14u) {
    // optional bool use_sparse_format = 6;
    if (has_use_sparse_format()) {
      total_size += 1 + 1;
    }

    // optional float eps = 7 [default = 1e-37];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
    if (has_matrix_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->matrix_layout());
    }

  }
  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetThetaMatrixArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.GetThetaMatrixArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetThetaMatrixArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetThetaMatrixArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.GetThetaMatrixArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.GetThetaMatrixArgs)
    MergeFrom(*source);
  }
}

void GetThetaMatrixArgs::MergeFrom(const GetThetaMatrixArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.GetThetaMatrixArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_use_sparse_format()) {
      set_use_sparse_format(from.use_sparse_format());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_matrix_layout()) {
      set_matrix_layout(from.matrix_layout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetThetaMatrixArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.GetThetaMatrixArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetThetaMatrixArgs::CopyFrom(const GetThetaMatrixArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.GetThetaMatrixArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetThetaMatrixArgs::IsInitialized() const {

  return true;
}

void GetThetaMatrixArgs::Swap(GetThetaMatrixArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetThetaMatrixArgs::InternalSwap(GetThetaMatrixArgs* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  std::swap(use_sparse_format_, other->use_sparse_format_);
  std::swap(eps_, other->eps_);
  std::swap(matrix_layout_, other->matrix_layout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetThetaMatrixArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetThetaMatrixArgs_descriptor_;
  metadata.reflection = GetThetaMatrixArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetThetaMatrixArgs

// repeated string topic_name = 3;
int GetThetaMatrixArgs::topic_name_size() const {
  return topic_name_.size();
}
void GetThetaMatrixArgs::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& GetThetaMatrixArgs::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.GetThetaMatrixArgs.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* GetThetaMatrixArgs::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.GetThetaMatrixArgs.topic_name)
  return topic_name_.Mutable(index);
}
 void GetThetaMatrixArgs::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.GetThetaMatrixArgs.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void GetThetaMatrixArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.GetThetaMatrixArgs.topic_name)
}
 void GetThetaMatrixArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.GetThetaMatrixArgs.topic_name)
}
 ::std::string* GetThetaMatrixArgs::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.GetThetaMatrixArgs.topic_name)
  return topic_name_.Add();
}
 void GetThetaMatrixArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.GetThetaMatrixArgs.topic_name)
}
 void GetThetaMatrixArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.GetThetaMatrixArgs.topic_name)
}
 void GetThetaMatrixArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.GetThetaMatrixArgs.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetThetaMatrixArgs::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.GetThetaMatrixArgs.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GetThetaMatrixArgs::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.GetThetaMatrixArgs.topic_name)
  return &topic_name_;
}

// optional bool use_sparse_format = 6;
bool GetThetaMatrixArgs::has_use_sparse_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetThetaMatrixArgs::set_has_use_sparse_format() {
  _has_bits_[0] |= 0x00000002u;
}
void GetThetaMatrixArgs::clear_has_use_sparse_format() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetThetaMatrixArgs::clear_use_sparse_format() {
  use_sparse_format_ = false;
  clear_has_use_sparse_format();
}
 bool GetThetaMatrixArgs::use_sparse_format() const {
  // @@protoc_insertion_point(field_get:artm.GetThetaMatrixArgs.use_sparse_format)
  return use_sparse_format_;
}
 void GetThetaMatrixArgs::set_use_sparse_format(bool value) {
  set_has_use_sparse_format();
  use_sparse_format_ = value;
  // @@protoc_insertion_point(field_set:artm.GetThetaMatrixArgs.use_sparse_format)
}

// optional float eps = 7 [default = 1e-37];
bool GetThetaMatrixArgs::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetThetaMatrixArgs::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
void GetThetaMatrixArgs::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetThetaMatrixArgs::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
 float GetThetaMatrixArgs::eps() const {
  // @@protoc_insertion_point(field_get:artm.GetThetaMatrixArgs.eps)
  return eps_;
}
 void GetThetaMatrixArgs::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.GetThetaMatrixArgs.eps)
}

// optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
bool GetThetaMatrixArgs::has_matrix_layout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetThetaMatrixArgs::set_has_matrix_layout() {
  _has_bits_[0] |= 0x00000008u;
}
void GetThetaMatrixArgs::clear_has_matrix_layout() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetThetaMatrixArgs::clear_matrix_layout() {
  matrix_layout_ = 0;
  clear_has_matrix_layout();
}
 ::artm::MatrixLayout GetThetaMatrixArgs::matrix_layout() const {
  // @@protoc_insertion_point(field_get:artm.GetThetaMatrixArgs.matrix_layout)
  return static_cast< ::artm::MatrixLayout >(matrix_layout_);
}
 void GetThetaMatrixArgs::set_matrix_layout(::artm::MatrixLayout value) {
  assert(::artm::MatrixLayout_IsValid(value));
  set_has_matrix_layout();
  matrix_layout_ = value;
  // @@protoc_insertion_point(field_set:artm.GetThetaMatrixArgs.matrix_layout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetScoreValueArgs::kScoreNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetScoreValueArgs::GetScoreValueArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.GetScoreValueArgs)
}

void GetScoreValueArgs::InitAsDefaultInstance() {
}

GetScoreValueArgs::GetScoreValueArgs(const GetScoreValueArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.GetScoreValueArgs)
}

void GetScoreValueArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  score_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetScoreValueArgs::~GetScoreValueArgs() {
  // @@protoc_insertion_point(destructor:artm.GetScoreValueArgs)
  SharedDtor();
}

void GetScoreValueArgs::SharedDtor() {
  score_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetScoreValueArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetScoreValueArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetScoreValueArgs_descriptor_;
}

const GetScoreValueArgs& GetScoreValueArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetScoreValueArgs* GetScoreValueArgs::default_instance_ = NULL;

GetScoreValueArgs* GetScoreValueArgs::New(::google::protobuf::Arena* arena) const {
  GetScoreValueArgs* n = new GetScoreValueArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetScoreValueArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.GetScoreValueArgs)
  if (has_score_name()) {
    score_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetScoreValueArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.GetScoreValueArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string score_name = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_score_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->score_name().data(), this->score_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GetScoreValueArgs.score_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.GetScoreValueArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.GetScoreValueArgs)
  return false;
#undef DO_
}

void GetScoreValueArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.GetScoreValueArgs)
  // optional string score_name = 2;
  if (has_score_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->score_name().data(), this->score_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetScoreValueArgs.score_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->score_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.GetScoreValueArgs)
}

::google::protobuf::uint8* GetScoreValueArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.GetScoreValueArgs)
  // optional string score_name = 2;
  if (has_score_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->score_name().data(), this->score_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetScoreValueArgs.score_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->score_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.GetScoreValueArgs)
  return target;
}

int GetScoreValueArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.GetScoreValueArgs)
  int total_size = 0;

  // optional string score_name = 2;
  if (has_score_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->score_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetScoreValueArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.GetScoreValueArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetScoreValueArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetScoreValueArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.GetScoreValueArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.GetScoreValueArgs)
    MergeFrom(*source);
  }
}

void GetScoreValueArgs::MergeFrom(const GetScoreValueArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.GetScoreValueArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score_name()) {
      set_has_score_name();
      score_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.score_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetScoreValueArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.GetScoreValueArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScoreValueArgs::CopyFrom(const GetScoreValueArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.GetScoreValueArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScoreValueArgs::IsInitialized() const {

  return true;
}

void GetScoreValueArgs::Swap(GetScoreValueArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetScoreValueArgs::InternalSwap(GetScoreValueArgs* other) {
  score_name_.Swap(&other->score_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetScoreValueArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetScoreValueArgs_descriptor_;
  metadata.reflection = GetScoreValueArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetScoreValueArgs

// optional string score_name = 2;
bool GetScoreValueArgs::has_score_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetScoreValueArgs::set_has_score_name() {
  _has_bits_[0] |= 0x00000001u;
}
void GetScoreValueArgs::clear_has_score_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetScoreValueArgs::clear_score_name() {
  score_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_score_name();
}
 const ::std::string& GetScoreValueArgs::score_name() const {
  // @@protoc_insertion_point(field_get:artm.GetScoreValueArgs.score_name)
  return score_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetScoreValueArgs::set_score_name(const ::std::string& value) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GetScoreValueArgs.score_name)
}
 void GetScoreValueArgs::set_score_name(const char* value) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GetScoreValueArgs.score_name)
}
 void GetScoreValueArgs::set_score_name(const char* value, size_t size) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GetScoreValueArgs.score_name)
}
 ::std::string* GetScoreValueArgs::mutable_score_name() {
  set_has_score_name();
  // @@protoc_insertion_point(field_mutable:artm.GetScoreValueArgs.score_name)
  return score_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetScoreValueArgs::release_score_name() {
  // @@protoc_insertion_point(field_release:artm.GetScoreValueArgs.score_name)
  clear_has_score_name();
  return score_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetScoreValueArgs::set_allocated_score_name(::std::string* score_name) {
  if (score_name != NULL) {
    set_has_score_name();
  } else {
    clear_has_score_name();
  }
  score_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), score_name);
  // @@protoc_insertion_point(field_set_allocated:artm.GetScoreValueArgs.score_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetScoreArrayArgs::kScoreNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetScoreArrayArgs::GetScoreArrayArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.GetScoreArrayArgs)
}

void GetScoreArrayArgs::InitAsDefaultInstance() {
}

GetScoreArrayArgs::GetScoreArrayArgs(const GetScoreArrayArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.GetScoreArrayArgs)
}

void GetScoreArrayArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  score_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetScoreArrayArgs::~GetScoreArrayArgs() {
  // @@protoc_insertion_point(destructor:artm.GetScoreArrayArgs)
  SharedDtor();
}

void GetScoreArrayArgs::SharedDtor() {
  score_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetScoreArrayArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetScoreArrayArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetScoreArrayArgs_descriptor_;
}

const GetScoreArrayArgs& GetScoreArrayArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetScoreArrayArgs* GetScoreArrayArgs::default_instance_ = NULL;

GetScoreArrayArgs* GetScoreArrayArgs::New(::google::protobuf::Arena* arena) const {
  GetScoreArrayArgs* n = new GetScoreArrayArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetScoreArrayArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.GetScoreArrayArgs)
  if (has_score_name()) {
    score_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetScoreArrayArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.GetScoreArrayArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string score_name = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_score_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->score_name().data(), this->score_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.GetScoreArrayArgs.score_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.GetScoreArrayArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.GetScoreArrayArgs)
  return false;
#undef DO_
}

void GetScoreArrayArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.GetScoreArrayArgs)
  // optional string score_name = 2;
  if (has_score_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->score_name().data(), this->score_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetScoreArrayArgs.score_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->score_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.GetScoreArrayArgs)
}

::google::protobuf::uint8* GetScoreArrayArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.GetScoreArrayArgs)
  // optional string score_name = 2;
  if (has_score_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->score_name().data(), this->score_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.GetScoreArrayArgs.score_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->score_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.GetScoreArrayArgs)
  return target;
}

int GetScoreArrayArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.GetScoreArrayArgs)
  int total_size = 0;

  // optional string score_name = 2;
  if (has_score_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->score_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetScoreArrayArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.GetScoreArrayArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetScoreArrayArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetScoreArrayArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.GetScoreArrayArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.GetScoreArrayArgs)
    MergeFrom(*source);
  }
}

void GetScoreArrayArgs::MergeFrom(const GetScoreArrayArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.GetScoreArrayArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score_name()) {
      set_has_score_name();
      score_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.score_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetScoreArrayArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.GetScoreArrayArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScoreArrayArgs::CopyFrom(const GetScoreArrayArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.GetScoreArrayArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScoreArrayArgs::IsInitialized() const {

  return true;
}

void GetScoreArrayArgs::Swap(GetScoreArrayArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetScoreArrayArgs::InternalSwap(GetScoreArrayArgs* other) {
  score_name_.Swap(&other->score_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetScoreArrayArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetScoreArrayArgs_descriptor_;
  metadata.reflection = GetScoreArrayArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetScoreArrayArgs

// optional string score_name = 2;
bool GetScoreArrayArgs::has_score_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetScoreArrayArgs::set_has_score_name() {
  _has_bits_[0] |= 0x00000001u;
}
void GetScoreArrayArgs::clear_has_score_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetScoreArrayArgs::clear_score_name() {
  score_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_score_name();
}
 const ::std::string& GetScoreArrayArgs::score_name() const {
  // @@protoc_insertion_point(field_get:artm.GetScoreArrayArgs.score_name)
  return score_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetScoreArrayArgs::set_score_name(const ::std::string& value) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GetScoreArrayArgs.score_name)
}
 void GetScoreArrayArgs::set_score_name(const char* value) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GetScoreArrayArgs.score_name)
}
 void GetScoreArrayArgs::set_score_name(const char* value, size_t size) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GetScoreArrayArgs.score_name)
}
 ::std::string* GetScoreArrayArgs::mutable_score_name() {
  set_has_score_name();
  // @@protoc_insertion_point(field_mutable:artm.GetScoreArrayArgs.score_name)
  return score_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetScoreArrayArgs::release_score_name() {
  // @@protoc_insertion_point(field_release:artm.GetScoreArrayArgs.score_name)
  clear_has_score_name();
  return score_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetScoreArrayArgs::set_allocated_score_name(::std::string* score_name) {
  if (score_name != NULL) {
    set_has_score_name();
  } else {
    clear_has_score_name();
  }
  score_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), score_name);
  // @@protoc_insertion_point(field_set_allocated:artm.GetScoreArrayArgs.score_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportModelArgs::kFileNameFieldNumber;
const int ExportModelArgs::kModelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportModelArgs::ExportModelArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ExportModelArgs)
}

void ExportModelArgs::InitAsDefaultInstance() {
}

ExportModelArgs::ExportModelArgs(const ExportModelArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ExportModelArgs)
}

void ExportModelArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExportModelArgs::~ExportModelArgs() {
  // @@protoc_insertion_point(destructor:artm.ExportModelArgs)
  SharedDtor();
}

void ExportModelArgs::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExportModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportModelArgs_descriptor_;
}

const ExportModelArgs& ExportModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ExportModelArgs* ExportModelArgs::default_instance_ = NULL;

ExportModelArgs* ExportModelArgs::New(::google::protobuf::Arena* arena) const {
  ExportModelArgs* n = new ExportModelArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExportModelArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ExportModelArgs)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_name()) {
      file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model_name()) {
      model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExportModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ExportModelArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ExportModelArgs.file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model_name;
        break;
      }

      // optional string model_name = 2;
      case 2: {
        if (tag == 18) {
         parse_model_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ExportModelArgs.model_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ExportModelArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ExportModelArgs)
  return false;
#undef DO_
}

void ExportModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ExportModelArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ExportModelArgs.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ExportModelArgs.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ExportModelArgs)
}

::google::protobuf::uint8* ExportModelArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ExportModelArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ExportModelArgs.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ExportModelArgs.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ExportModelArgs)
  return target;
}

int ExportModelArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ExportModelArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string model_name = 2;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ExportModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExportModelArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportModelArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ExportModelArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ExportModelArgs)
    MergeFrom(*source);
  }
}

void ExportModelArgs::MergeFrom(const ExportModelArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ExportModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_model_name()) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExportModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ExportModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportModelArgs::CopyFrom(const ExportModelArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ExportModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportModelArgs::IsInitialized() const {

  return true;
}

void ExportModelArgs::Swap(ExportModelArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportModelArgs::InternalSwap(ExportModelArgs* other) {
  file_name_.Swap(&other->file_name_);
  model_name_.Swap(&other->model_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExportModelArgs_descriptor_;
  metadata.reflection = ExportModelArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportModelArgs

// optional string file_name = 1;
bool ExportModelArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExportModelArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ExportModelArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExportModelArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& ExportModelArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ExportModelArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportModelArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ExportModelArgs.file_name)
}
 void ExportModelArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ExportModelArgs.file_name)
}
 void ExportModelArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ExportModelArgs.file_name)
}
 ::std::string* ExportModelArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ExportModelArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportModelArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ExportModelArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportModelArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ExportModelArgs.file_name)
}

// optional string model_name = 2;
bool ExportModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExportModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ExportModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExportModelArgs::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
 const ::std::string& ExportModelArgs::model_name() const {
  // @@protoc_insertion_point(field_get:artm.ExportModelArgs.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ExportModelArgs.model_name)
}
 void ExportModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ExportModelArgs.model_name)
}
 void ExportModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ExportModelArgs.model_name)
}
 ::std::string* ExportModelArgs::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.ExportModelArgs.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportModelArgs::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.ExportModelArgs.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ExportModelArgs.model_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportModelArgs::kFileNameFieldNumber;
const int ImportModelArgs::kModelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportModelArgs::ImportModelArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ImportModelArgs)
}

void ImportModelArgs::InitAsDefaultInstance() {
}

ImportModelArgs::ImportModelArgs(const ImportModelArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ImportModelArgs)
}

void ImportModelArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportModelArgs::~ImportModelArgs() {
  // @@protoc_insertion_point(destructor:artm.ImportModelArgs)
  SharedDtor();
}

void ImportModelArgs::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ImportModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportModelArgs_descriptor_;
}

const ImportModelArgs& ImportModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ImportModelArgs* ImportModelArgs::default_instance_ = NULL;

ImportModelArgs* ImportModelArgs::New(::google::protobuf::Arena* arena) const {
  ImportModelArgs* n = new ImportModelArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportModelArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ImportModelArgs)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_name()) {
      file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model_name()) {
      model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImportModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ImportModelArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ImportModelArgs.file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model_name;
        break;
      }

      // optional string model_name = 2;
      case 2: {
        if (tag == 18) {
         parse_model_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ImportModelArgs.model_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ImportModelArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ImportModelArgs)
  return false;
#undef DO_
}

void ImportModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ImportModelArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImportModelArgs.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImportModelArgs.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ImportModelArgs)
}

::google::protobuf::uint8* ImportModelArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ImportModelArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImportModelArgs.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImportModelArgs.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ImportModelArgs)
  return target;
}

int ImportModelArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ImportModelArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string model_name = 2;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ImportModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImportModelArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportModelArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ImportModelArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ImportModelArgs)
    MergeFrom(*source);
  }
}

void ImportModelArgs::MergeFrom(const ImportModelArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ImportModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_model_name()) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImportModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ImportModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportModelArgs::CopyFrom(const ImportModelArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ImportModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportModelArgs::IsInitialized() const {

  return true;
}

void ImportModelArgs::Swap(ImportModelArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportModelArgs::InternalSwap(ImportModelArgs* other) {
  file_name_.Swap(&other->file_name_);
  model_name_.Swap(&other->model_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportModelArgs_descriptor_;
  metadata.reflection = ImportModelArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportModelArgs

// optional string file_name = 1;
bool ImportModelArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImportModelArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ImportModelArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImportModelArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& ImportModelArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ImportModelArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportModelArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImportModelArgs.file_name)
}
 void ImportModelArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImportModelArgs.file_name)
}
 void ImportModelArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImportModelArgs.file_name)
}
 ::std::string* ImportModelArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ImportModelArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImportModelArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ImportModelArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportModelArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImportModelArgs.file_name)
}

// optional string model_name = 2;
bool ImportModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImportModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ImportModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImportModelArgs::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
 const ::std::string& ImportModelArgs::model_name() const {
  // @@protoc_insertion_point(field_get:artm.ImportModelArgs.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImportModelArgs.model_name)
}
 void ImportModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImportModelArgs.model_name)
}
 void ImportModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImportModelArgs.model_name)
}
 ::std::string* ImportModelArgs::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.ImportModelArgs.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImportModelArgs::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.ImportModelArgs.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImportModelArgs.model_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportScoreTrackerArgs::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportScoreTrackerArgs::ExportScoreTrackerArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ExportScoreTrackerArgs)
}

void ExportScoreTrackerArgs::InitAsDefaultInstance() {
}

ExportScoreTrackerArgs::ExportScoreTrackerArgs(const ExportScoreTrackerArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ExportScoreTrackerArgs)
}

void ExportScoreTrackerArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExportScoreTrackerArgs::~ExportScoreTrackerArgs() {
  // @@protoc_insertion_point(destructor:artm.ExportScoreTrackerArgs)
  SharedDtor();
}

void ExportScoreTrackerArgs::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExportScoreTrackerArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportScoreTrackerArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportScoreTrackerArgs_descriptor_;
}

const ExportScoreTrackerArgs& ExportScoreTrackerArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ExportScoreTrackerArgs* ExportScoreTrackerArgs::default_instance_ = NULL;

ExportScoreTrackerArgs* ExportScoreTrackerArgs::New(::google::protobuf::Arena* arena) const {
  ExportScoreTrackerArgs* n = new ExportScoreTrackerArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExportScoreTrackerArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ExportScoreTrackerArgs)
  if (has_file_name()) {
    file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExportScoreTrackerArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ExportScoreTrackerArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ExportScoreTrackerArgs.file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ExportScoreTrackerArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ExportScoreTrackerArgs)
  return false;
#undef DO_
}

void ExportScoreTrackerArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ExportScoreTrackerArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ExportScoreTrackerArgs.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ExportScoreTrackerArgs)
}

::google::protobuf::uint8* ExportScoreTrackerArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ExportScoreTrackerArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ExportScoreTrackerArgs.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ExportScoreTrackerArgs)
  return target;
}

int ExportScoreTrackerArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ExportScoreTrackerArgs)
  int total_size = 0;

  // optional string file_name = 1;
  if (has_file_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportScoreTrackerArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ExportScoreTrackerArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExportScoreTrackerArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportScoreTrackerArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ExportScoreTrackerArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ExportScoreTrackerArgs)
    MergeFrom(*source);
  }
}

void ExportScoreTrackerArgs::MergeFrom(const ExportScoreTrackerArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ExportScoreTrackerArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExportScoreTrackerArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ExportScoreTrackerArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportScoreTrackerArgs::CopyFrom(const ExportScoreTrackerArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ExportScoreTrackerArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportScoreTrackerArgs::IsInitialized() const {

  return true;
}

void ExportScoreTrackerArgs::Swap(ExportScoreTrackerArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportScoreTrackerArgs::InternalSwap(ExportScoreTrackerArgs* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportScoreTrackerArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExportScoreTrackerArgs_descriptor_;
  metadata.reflection = ExportScoreTrackerArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportScoreTrackerArgs

// optional string file_name = 1;
bool ExportScoreTrackerArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExportScoreTrackerArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ExportScoreTrackerArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExportScoreTrackerArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& ExportScoreTrackerArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ExportScoreTrackerArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportScoreTrackerArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ExportScoreTrackerArgs.file_name)
}
 void ExportScoreTrackerArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ExportScoreTrackerArgs.file_name)
}
 void ExportScoreTrackerArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ExportScoreTrackerArgs.file_name)
}
 ::std::string* ExportScoreTrackerArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ExportScoreTrackerArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportScoreTrackerArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ExportScoreTrackerArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportScoreTrackerArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ExportScoreTrackerArgs.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportScoreTrackerArgs::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportScoreTrackerArgs::ImportScoreTrackerArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ImportScoreTrackerArgs)
}

void ImportScoreTrackerArgs::InitAsDefaultInstance() {
}

ImportScoreTrackerArgs::ImportScoreTrackerArgs(const ImportScoreTrackerArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ImportScoreTrackerArgs)
}

void ImportScoreTrackerArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportScoreTrackerArgs::~ImportScoreTrackerArgs() {
  // @@protoc_insertion_point(destructor:artm.ImportScoreTrackerArgs)
  SharedDtor();
}

void ImportScoreTrackerArgs::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ImportScoreTrackerArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportScoreTrackerArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportScoreTrackerArgs_descriptor_;
}

const ImportScoreTrackerArgs& ImportScoreTrackerArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ImportScoreTrackerArgs* ImportScoreTrackerArgs::default_instance_ = NULL;

ImportScoreTrackerArgs* ImportScoreTrackerArgs::New(::google::protobuf::Arena* arena) const {
  ImportScoreTrackerArgs* n = new ImportScoreTrackerArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportScoreTrackerArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ImportScoreTrackerArgs)
  if (has_file_name()) {
    file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImportScoreTrackerArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ImportScoreTrackerArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ImportScoreTrackerArgs.file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ImportScoreTrackerArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ImportScoreTrackerArgs)
  return false;
#undef DO_
}

void ImportScoreTrackerArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ImportScoreTrackerArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImportScoreTrackerArgs.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ImportScoreTrackerArgs)
}

::google::protobuf::uint8* ImportScoreTrackerArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ImportScoreTrackerArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImportScoreTrackerArgs.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ImportScoreTrackerArgs)
  return target;
}

int ImportScoreTrackerArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ImportScoreTrackerArgs)
  int total_size = 0;

  // optional string file_name = 1;
  if (has_file_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportScoreTrackerArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ImportScoreTrackerArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImportScoreTrackerArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportScoreTrackerArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ImportScoreTrackerArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ImportScoreTrackerArgs)
    MergeFrom(*source);
  }
}

void ImportScoreTrackerArgs::MergeFrom(const ImportScoreTrackerArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ImportScoreTrackerArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImportScoreTrackerArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ImportScoreTrackerArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportScoreTrackerArgs::CopyFrom(const ImportScoreTrackerArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ImportScoreTrackerArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportScoreTrackerArgs::IsInitialized() const {

  return true;
}

void ImportScoreTrackerArgs::Swap(ImportScoreTrackerArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportScoreTrackerArgs::InternalSwap(ImportScoreTrackerArgs* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportScoreTrackerArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportScoreTrackerArgs_descriptor_;
  metadata.reflection = ImportScoreTrackerArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportScoreTrackerArgs

// optional string file_name = 1;
bool ImportScoreTrackerArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImportScoreTrackerArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ImportScoreTrackerArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImportScoreTrackerArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& ImportScoreTrackerArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ImportScoreTrackerArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportScoreTrackerArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImportScoreTrackerArgs.file_name)
}
 void ImportScoreTrackerArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImportScoreTrackerArgs.file_name)
}
 void ImportScoreTrackerArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImportScoreTrackerArgs.file_name)
}
 ::std::string* ImportScoreTrackerArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ImportScoreTrackerArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImportScoreTrackerArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ImportScoreTrackerArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportScoreTrackerArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImportScoreTrackerArgs.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttachModelArgs::kModelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttachModelArgs::AttachModelArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.AttachModelArgs)
}

void AttachModelArgs::InitAsDefaultInstance() {
}

AttachModelArgs::AttachModelArgs(const AttachModelArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.AttachModelArgs)
}

void AttachModelArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttachModelArgs::~AttachModelArgs() {
  // @@protoc_insertion_point(destructor:artm.AttachModelArgs)
  SharedDtor();
}

void AttachModelArgs::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AttachModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttachModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttachModelArgs_descriptor_;
}

const AttachModelArgs& AttachModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

AttachModelArgs* AttachModelArgs::default_instance_ = NULL;

AttachModelArgs* AttachModelArgs::New(::google::protobuf::Arena* arena) const {
  AttachModelArgs* n = new AttachModelArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttachModelArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.AttachModelArgs)
  if (has_model_name()) {
    model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AttachModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.AttachModelArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.AttachModelArgs.model_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.AttachModelArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.AttachModelArgs)
  return false;
#undef DO_
}

void AttachModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.AttachModelArgs)
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.AttachModelArgs.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.AttachModelArgs)
}

::google::protobuf::uint8* AttachModelArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.AttachModelArgs)
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.AttachModelArgs.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.AttachModelArgs)
  return target;
}

int AttachModelArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.AttachModelArgs)
  int total_size = 0;

  // optional string model_name = 1;
  if (has_model_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttachModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.AttachModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AttachModelArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AttachModelArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.AttachModelArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.AttachModelArgs)
    MergeFrom(*source);
  }
}

void AttachModelArgs::MergeFrom(const AttachModelArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.AttachModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AttachModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.AttachModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttachModelArgs::CopyFrom(const AttachModelArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.AttachModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachModelArgs::IsInitialized() const {

  return true;
}

void AttachModelArgs::Swap(AttachModelArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttachModelArgs::InternalSwap(AttachModelArgs* other) {
  model_name_.Swap(&other->model_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttachModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttachModelArgs_descriptor_;
  metadata.reflection = AttachModelArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AttachModelArgs

// optional string model_name = 1;
bool AttachModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AttachModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
void AttachModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void AttachModelArgs::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
 const ::std::string& AttachModelArgs::model_name() const {
  // @@protoc_insertion_point(field_get:artm.AttachModelArgs.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AttachModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.AttachModelArgs.model_name)
}
 void AttachModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.AttachModelArgs.model_name)
}
 void AttachModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.AttachModelArgs.model_name)
}
 ::std::string* AttachModelArgs::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.AttachModelArgs.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AttachModelArgs::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.AttachModelArgs.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AttachModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.AttachModelArgs.model_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessBatchesArgs::kNwtTargetNameFieldNumber;
const int ProcessBatchesArgs::kBatchFilenameFieldNumber;
const int ProcessBatchesArgs::kPwtSourceNameFieldNumber;
const int ProcessBatchesArgs::kNumDocumentPassesFieldNumber;
const int ProcessBatchesArgs::kRegularizerNameFieldNumber;
const int ProcessBatchesArgs::kRegularizerTauFieldNumber;
const int ProcessBatchesArgs::kClassIdFieldNumber;
const int ProcessBatchesArgs::kClassWeightFieldNumber;
const int ProcessBatchesArgs::kReuseThetaFieldNumber;
const int ProcessBatchesArgs::kOptForAvxFieldNumber;
const int ProcessBatchesArgs::kThetaMatrixTypeFieldNumber;
const int ProcessBatchesArgs::kBatchWeightFieldNumber;
const int ProcessBatchesArgs::kPredictClassIdFieldNumber;
const int ProcessBatchesArgs::kBatchFieldNumber;
const int ProcessBatchesArgs::kUseRandomThetaFieldNumber;
const int ProcessBatchesArgs::kTopicNameFieldNumber;
const int ProcessBatchesArgs::kTransactionTypenameFieldNumber;
const int ProcessBatchesArgs::kTransactionWeightFieldNumber;
const int ProcessBatchesArgs::kResetNwtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessBatchesArgs::ProcessBatchesArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ProcessBatchesArgs)
}

void ProcessBatchesArgs::InitAsDefaultInstance() {
}

ProcessBatchesArgs::ProcessBatchesArgs(const ProcessBatchesArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ProcessBatchesArgs)
}

void ProcessBatchesArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nwt_target_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwt_source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_document_passes_ = 10;
  reuse_theta_ = false;
  opt_for_avx_ = true;
  theta_matrix_type_ = 3;
  predict_class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_random_theta_ = false;
  reset_nwt_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessBatchesArgs::~ProcessBatchesArgs() {
  // @@protoc_insertion_point(destructor:artm.ProcessBatchesArgs)
  SharedDtor();
}

void ProcessBatchesArgs::SharedDtor() {
  nwt_target_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwt_source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predict_class_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ProcessBatchesArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessBatchesArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessBatchesArgs_descriptor_;
}

const ProcessBatchesArgs& ProcessBatchesArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ProcessBatchesArgs* ProcessBatchesArgs::default_instance_ = NULL;

ProcessBatchesArgs* ProcessBatchesArgs::New(::google::protobuf::Arena* arena) const {
  ProcessBatchesArgs* n = new ProcessBatchesArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessBatchesArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ProcessBatchesArgs)
  if (_has_bits_[0 / 32] & 13u) {
    if (has_nwt_target_name()) {
      nwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pwt_source_name()) {
      pwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    num_document_passes_ = 10;
  }
  if (_has_bits_[8 / 32] & 22272u) {
    reuse_theta_ = false;
    opt_for_avx_ = true;
    theta_matrix_type_ = 3;
    if (has_predict_class_id()) {
      predict_class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    use_random_theta_ = false;
  }
  reset_nwt_ = true;
  batch_filename_.Clear();
  regularizer_name_.Clear();
  regularizer_tau_.Clear();
  class_id_.Clear();
  class_weight_.Clear();
  batch_weight_.Clear();
  batch_.Clear();
  topic_name_.Clear();
  transaction_typename_.Clear();
  transaction_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProcessBatchesArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ProcessBatchesArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nwt_target_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwt_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nwt_target_name().data(), this->nwt_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ProcessBatchesArgs.nwt_target_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_batch_filename;
        break;
      }

      // repeated string batch_filename = 2;
      case 2: {
        if (tag == 18) {
         parse_batch_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->batch_filename(this->batch_filename_size() - 1).data(),
            this->batch_filename(this->batch_filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ProcessBatchesArgs.batch_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_batch_filename;
        if (input->ExpectTag(26)) goto parse_pwt_source_name;
        break;
      }

      // optional string pwt_source_name = 3;
      case 3: {
        if (tag == 26) {
         parse_pwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwt_source_name().data(), this->pwt_source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ProcessBatchesArgs.pwt_source_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_document_passes;
        break;
      }

      // optional int32 num_document_passes = 4 [default = 10];
      case 4: {
        if (tag == 32) {
         parse_num_document_passes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_document_passes_)));
          set_has_num_document_passes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_regularizer_name;
        break;
      }

      // repeated string regularizer_name = 6;
      case 6: {
        if (tag == 50) {
         parse_regularizer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_regularizer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regularizer_name(this->regularizer_name_size() - 1).data(),
            this->regularizer_name(this->regularizer_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ProcessBatchesArgs.regularizer_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_regularizer_name;
        if (input->ExpectTag(61)) goto parse_regularizer_tau;
        break;
      }

      // repeated float regularizer_tau = 7;
      case 7: {
        if (tag == 61) {
         parse_regularizer_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_regularizer_tau())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_regularizer_tau())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_regularizer_tau;
        if (input->ExpectTag(66)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 8;
      case 8: {
        if (tag == 66) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ProcessBatchesArgs.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_class_id;
        if (input->ExpectTag(77)) goto parse_class_weight;
        break;
      }

      // repeated float class_weight = 9;
      case 9: {
        if (tag == 77) {
         parse_class_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_class_weight())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_class_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_class_weight;
        if (input->ExpectTag(80)) goto parse_reuse_theta;
        break;
      }

      // optional bool reuse_theta = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_reuse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reuse_theta_)));
          set_has_reuse_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_opt_for_avx;
        break;
      }

      // optional bool opt_for_avx = 11 [default = true];
      case 11: {
        if (tag == 88) {
         parse_opt_for_avx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opt_for_avx_)));
          set_has_opt_for_avx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_theta_matrix_type;
        break;
      }

      // optional .artm.ThetaMatrixType theta_matrix_type = 14 [default = ThetaMatrixType_Cache];
      case 14: {
        if (tag == 112) {
         parse_theta_matrix_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::ThetaMatrixType_IsValid(value)) {
            set_theta_matrix_type(static_cast< ::artm::ThetaMatrixType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_batch_weight;
        break;
      }

      // repeated float batch_weight = 15;
      case 15: {
        if (tag == 125) {
         parse_batch_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 125, input, this->mutable_batch_weight())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_batch_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_batch_weight;
        if (input->ExpectTag(138)) goto parse_predict_class_id;
        break;
      }

      // optional string predict_class_id = 17;
      case 17: {
        if (tag == 138) {
         parse_predict_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predict_class_id().data(), this->predict_class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ProcessBatchesArgs.predict_class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_batch;
        break;
      }

      // repeated .artm.Batch batch = 18;
      case 18: {
        if (tag == 146) {
         parse_batch:
          DO_(input->IncrementRecursionDepth());
         parse_loop_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_batch;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(152)) goto parse_use_random_theta;
        break;
      }

      // optional bool use_random_theta = 19 [default = false];
      case 19: {
        if (tag == 152) {
         parse_use_random_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_random_theta_)));
          set_has_use_random_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 20;
      case 20: {
        if (tag == 162) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ProcessBatchesArgs.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_topic_name;
        if (input->ExpectTag(170)) goto parse_transaction_typename;
        break;
      }

      // repeated string transaction_typename = 21;
      case 21: {
        if (tag == 170) {
         parse_transaction_typename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_transaction_typename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transaction_typename(this->transaction_typename_size() - 1).data(),
            this->transaction_typename(this->transaction_typename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ProcessBatchesArgs.transaction_typename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_transaction_typename;
        if (input->ExpectTag(181)) goto parse_transaction_weight;
        break;
      }

      // repeated float transaction_weight = 22;
      case 22: {
        if (tag == 181) {
         parse_transaction_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 181, input, this->mutable_transaction_weight())));
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_transaction_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_transaction_weight;
        if (input->ExpectTag(184)) goto parse_reset_nwt;
        break;
      }

      // optional bool reset_nwt = 23 [default = true];
      case 23: {
        if (tag == 184) {
         parse_reset_nwt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_nwt_)));
          set_has_reset_nwt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ProcessBatchesArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ProcessBatchesArgs)
  return false;
#undef DO_
}

void ProcessBatchesArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ProcessBatchesArgs)
  // optional string nwt_target_name = 1;
  if (has_nwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_target_name().data(), this->nwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.nwt_target_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nwt_target_name(), output);
  }

  // repeated string batch_filename = 2;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.batch_filename");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->batch_filename(i), output);
  }

  // optional string pwt_source_name = 3;
  if (has_pwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwt_source_name().data(), this->pwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.pwt_source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwt_source_name(), output);
  }

  // optional int32 num_document_passes = 4 [default = 10];
  if (has_num_document_passes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_document_passes(), output);
  }

  // repeated string regularizer_name = 6;
  for (int i = 0; i < this->regularizer_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularizer_name(i).data(), this->regularizer_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.regularizer_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->regularizer_name(i), output);
  }

  // repeated float regularizer_tau = 7;
  for (int i = 0; i < this->regularizer_tau_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->regularizer_tau(i), output);
  }

  // repeated string class_id = 8;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->class_id(i), output);
  }

  // repeated float class_weight = 9;
  for (int i = 0; i < this->class_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->class_weight(i), output);
  }

  // optional bool reuse_theta = 10 [default = false];
  if (has_reuse_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->reuse_theta(), output);
  }

  // optional bool opt_for_avx = 11 [default = true];
  if (has_opt_for_avx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->opt_for_avx(), output);
  }

  // optional .artm.ThetaMatrixType theta_matrix_type = 14 [default = ThetaMatrixType_Cache];
  if (has_theta_matrix_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->theta_matrix_type(), output);
  }

  // repeated float batch_weight = 15;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      15, this->batch_weight(i), output);
  }

  // optional string predict_class_id = 17;
  if (has_predict_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_class_id().data(), this->predict_class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.predict_class_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->predict_class_id(), output);
  }

  // repeated .artm.Batch batch = 18;
  for (unsigned int i = 0, n = this->batch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->batch(i), output);
  }

  // optional bool use_random_theta = 19 [default = false];
  if (has_use_random_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->use_random_theta(), output);
  }

  // repeated string topic_name = 20;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->topic_name(i), output);
  }

  // repeated string transaction_typename = 21;
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_typename(i).data(), this->transaction_typename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.transaction_typename");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->transaction_typename(i), output);
  }

  // repeated float transaction_weight = 22;
  for (int i = 0; i < this->transaction_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      22, this->transaction_weight(i), output);
  }

  // optional bool reset_nwt = 23 [default = true];
  if (has_reset_nwt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->reset_nwt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ProcessBatchesArgs)
}

::google::protobuf::uint8* ProcessBatchesArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ProcessBatchesArgs)
  // optional string nwt_target_name = 1;
  if (has_nwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_target_name().data(), this->nwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.nwt_target_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nwt_target_name(), target);
  }

  // repeated string batch_filename = 2;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.batch_filename");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->batch_filename(i), target);
  }

  // optional string pwt_source_name = 3;
  if (has_pwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwt_source_name().data(), this->pwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.pwt_source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwt_source_name(), target);
  }

  // optional int32 num_document_passes = 4 [default = 10];
  if (has_num_document_passes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_document_passes(), target);
  }

  // repeated string regularizer_name = 6;
  for (int i = 0; i < this->regularizer_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularizer_name(i).data(), this->regularizer_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.regularizer_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->regularizer_name(i), target);
  }

  // repeated float regularizer_tau = 7;
  for (int i = 0; i < this->regularizer_tau_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->regularizer_tau(i), target);
  }

  // repeated string class_id = 8;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->class_id(i), target);
  }

  // repeated float class_weight = 9;
  for (int i = 0; i < this->class_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->class_weight(i), target);
  }

  // optional bool reuse_theta = 10 [default = false];
  if (has_reuse_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->reuse_theta(), target);
  }

  // optional bool opt_for_avx = 11 [default = true];
  if (has_opt_for_avx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->opt_for_avx(), target);
  }

  // optional .artm.ThetaMatrixType theta_matrix_type = 14 [default = ThetaMatrixType_Cache];
  if (has_theta_matrix_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->theta_matrix_type(), target);
  }

  // repeated float batch_weight = 15;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(15, this->batch_weight(i), target);
  }

  // optional string predict_class_id = 17;
  if (has_predict_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_class_id().data(), this->predict_class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.predict_class_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->predict_class_id(), target);
  }

  // repeated .artm.Batch batch = 18;
  for (unsigned int i = 0, n = this->batch_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->batch(i), false, target);
  }

  // optional bool use_random_theta = 19 [default = false];
  if (has_use_random_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->use_random_theta(), target);
  }

  // repeated string topic_name = 20;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->topic_name(i), target);
  }

  // repeated string transaction_typename = 21;
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_typename(i).data(), this->transaction_typename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ProcessBatchesArgs.transaction_typename");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(21, this->transaction_typename(i), target);
  }

  // repeated float transaction_weight = 22;
  for (int i = 0; i < this->transaction_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(22, this->transaction_weight(i), target);
  }

  // optional bool reset_nwt = 23 [default = true];
  if (has_reset_nwt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->reset_nwt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ProcessBatchesArgs)
  return target;
}

int ProcessBatchesArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ProcessBatchesArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 13u) {
    // optional string nwt_target_name = 1;
    if (has_nwt_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwt_target_name());
    }

    // optional string pwt_source_name = 3;
    if (has_pwt_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwt_source_name());
    }

    // optional int32 num_document_passes = 4 [default = 10];
    if (has_num_document_passes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_document_passes());
    }

  }
  if (_has_bits_[8 / 32] & 22272u) {
    // optional bool reuse_theta = 10 [default = false];
    if (has_reuse_theta()) {
      total_size += 1 + 1;
    }

    // optional bool opt_for_avx = 11 [default = true];
    if (has_opt_for_avx()) {
      total_size += 1 + 1;
    }

    // optional .artm.ThetaMatrixType theta_matrix_type = 14 [default = ThetaMatrixType_Cache];
    if (has_theta_matrix_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->theta_matrix_type());
    }

    // optional string predict_class_id = 17;
    if (has_predict_class_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_class_id());
    }

    // optional bool use_random_theta = 19 [default = false];
    if (has_use_random_theta()) {
      total_size += 2 + 1;
    }

  }
  // optional bool reset_nwt = 23 [default = true];
  if (has_reset_nwt()) {
    total_size += 2 + 1;
  }

  // repeated string batch_filename = 2;
  total_size += 1 * this->batch_filename_size();
  for (int i = 0; i < this->batch_filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_filename(i));
  }

  // repeated string regularizer_name = 6;
  total_size += 1 * this->regularizer_name_size();
  for (int i = 0; i < this->regularizer_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->regularizer_name(i));
  }

  // repeated float regularizer_tau = 7;
  {
    int data_size = 0;
    data_size = 4 * this->regularizer_tau_size();
    total_size += 1 * this->regularizer_tau_size() + data_size;
  }

  // repeated string class_id = 8;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated float class_weight = 9;
  {
    int data_size = 0;
    data_size = 4 * this->class_weight_size();
    total_size += 1 * this->class_weight_size() + data_size;
  }

  // repeated float batch_weight = 15;
  {
    int data_size = 0;
    data_size = 4 * this->batch_weight_size();
    total_size += 1 * this->batch_weight_size() + data_size;
  }

  // repeated .artm.Batch batch = 18;
  total_size += 2 * this->batch_size();
  for (int i = 0; i < this->batch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch(i));
  }

  // repeated string topic_name = 20;
  total_size += 2 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string transaction_typename = 21;
  total_size += 2 * this->transaction_typename_size();
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->transaction_typename(i));
  }

  // repeated float transaction_weight = 22;
  {
    int data_size = 0;
    data_size = 4 * this->transaction_weight_size();
    total_size += 2 * this->transaction_weight_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessBatchesArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ProcessBatchesArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProcessBatchesArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessBatchesArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ProcessBatchesArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ProcessBatchesArgs)
    MergeFrom(*source);
  }
}

void ProcessBatchesArgs::MergeFrom(const ProcessBatchesArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ProcessBatchesArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  batch_filename_.MergeFrom(from.batch_filename_);
  regularizer_name_.MergeFrom(from.regularizer_name_);
  regularizer_tau_.MergeFrom(from.regularizer_tau_);
  class_id_.MergeFrom(from.class_id_);
  class_weight_.MergeFrom(from.class_weight_);
  batch_weight_.MergeFrom(from.batch_weight_);
  batch_.MergeFrom(from.batch_);
  topic_name_.MergeFrom(from.topic_name_);
  transaction_typename_.MergeFrom(from.transaction_typename_);
  transaction_weight_.MergeFrom(from.transaction_weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nwt_target_name()) {
      set_has_nwt_target_name();
      nwt_target_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nwt_target_name_);
    }
    if (from.has_pwt_source_name()) {
      set_has_pwt_source_name();
      pwt_source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwt_source_name_);
    }
    if (from.has_num_document_passes()) {
      set_num_document_passes(from.num_document_passes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reuse_theta()) {
      set_reuse_theta(from.reuse_theta());
    }
    if (from.has_opt_for_avx()) {
      set_opt_for_avx(from.opt_for_avx());
    }
    if (from.has_theta_matrix_type()) {
      set_theta_matrix_type(from.theta_matrix_type());
    }
    if (from.has_predict_class_id()) {
      set_has_predict_class_id();
      predict_class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.predict_class_id_);
    }
    if (from.has_use_random_theta()) {
      set_use_random_theta(from.use_random_theta());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_reset_nwt()) {
      set_reset_nwt(from.reset_nwt());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProcessBatchesArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ProcessBatchesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessBatchesArgs::CopyFrom(const ProcessBatchesArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ProcessBatchesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchesArgs::IsInitialized() const {

  return true;
}

void ProcessBatchesArgs::Swap(ProcessBatchesArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessBatchesArgs::InternalSwap(ProcessBatchesArgs* other) {
  nwt_target_name_.Swap(&other->nwt_target_name_);
  batch_filename_.UnsafeArenaSwap(&other->batch_filename_);
  pwt_source_name_.Swap(&other->pwt_source_name_);
  std::swap(num_document_passes_, other->num_document_passes_);
  regularizer_name_.UnsafeArenaSwap(&other->regularizer_name_);
  regularizer_tau_.UnsafeArenaSwap(&other->regularizer_tau_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  class_weight_.UnsafeArenaSwap(&other->class_weight_);
  std::swap(reuse_theta_, other->reuse_theta_);
  std::swap(opt_for_avx_, other->opt_for_avx_);
  std::swap(theta_matrix_type_, other->theta_matrix_type_);
  batch_weight_.UnsafeArenaSwap(&other->batch_weight_);
  predict_class_id_.Swap(&other->predict_class_id_);
  batch_.UnsafeArenaSwap(&other->batch_);
  std::swap(use_random_theta_, other->use_random_theta_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  transaction_typename_.UnsafeArenaSwap(&other->transaction_typename_);
  transaction_weight_.UnsafeArenaSwap(&other->transaction_weight_);
  std::swap(reset_nwt_, other->reset_nwt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessBatchesArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessBatchesArgs_descriptor_;
  metadata.reflection = ProcessBatchesArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessBatchesArgs

// optional string nwt_target_name = 1;
bool ProcessBatchesArgs::has_nwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProcessBatchesArgs::set_has_nwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ProcessBatchesArgs::clear_has_nwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProcessBatchesArgs::clear_nwt_target_name() {
  nwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nwt_target_name();
}
 const ::std::string& ProcessBatchesArgs::nwt_target_name() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.nwt_target_name)
  return nwt_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProcessBatchesArgs::set_nwt_target_name(const ::std::string& value) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.nwt_target_name)
}
 void ProcessBatchesArgs::set_nwt_target_name(const char* value) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.nwt_target_name)
}
 void ProcessBatchesArgs::set_nwt_target_name(const char* value, size_t size) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.nwt_target_name)
}
 ::std::string* ProcessBatchesArgs::mutable_nwt_target_name() {
  set_has_nwt_target_name();
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.nwt_target_name)
  return nwt_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProcessBatchesArgs::release_nwt_target_name() {
  // @@protoc_insertion_point(field_release:artm.ProcessBatchesArgs.nwt_target_name)
  clear_has_nwt_target_name();
  return nwt_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProcessBatchesArgs::set_allocated_nwt_target_name(::std::string* nwt_target_name) {
  if (nwt_target_name != NULL) {
    set_has_nwt_target_name();
  } else {
    clear_has_nwt_target_name();
  }
  nwt_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nwt_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ProcessBatchesArgs.nwt_target_name)
}

// repeated string batch_filename = 2;
int ProcessBatchesArgs::batch_filename_size() const {
  return batch_filename_.size();
}
void ProcessBatchesArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
 const ::std::string& ProcessBatchesArgs::batch_filename(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.batch_filename)
  return batch_filename_.Get(index);
}
 ::std::string* ProcessBatchesArgs::mutable_batch_filename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.batch_filename)
  return batch_filename_.Mutable(index);
}
 void ProcessBatchesArgs::set_batch_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.batch_filename)
  batch_filename_.Mutable(index)->assign(value);
}
 void ProcessBatchesArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.batch_filename)
}
 void ProcessBatchesArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.batch_filename)
}
 ::std::string* ProcessBatchesArgs::add_batch_filename() {
  // @@protoc_insertion_point(field_add_mutable:artm.ProcessBatchesArgs.batch_filename)
  return batch_filename_.Add();
}
 void ProcessBatchesArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.batch_filename)
}
 void ProcessBatchesArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ProcessBatchesArgs.batch_filename)
}
 void ProcessBatchesArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ProcessBatchesArgs.batch_filename)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::batch_filename() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.batch_filename)
  return batch_filename_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_batch_filename() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.batch_filename)
  return &batch_filename_;
}

// optional string pwt_source_name = 3;
bool ProcessBatchesArgs::has_pwt_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProcessBatchesArgs::set_has_pwt_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ProcessBatchesArgs::clear_has_pwt_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProcessBatchesArgs::clear_pwt_source_name() {
  pwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwt_source_name();
}
 const ::std::string& ProcessBatchesArgs::pwt_source_name() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.pwt_source_name)
  return pwt_source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProcessBatchesArgs::set_pwt_source_name(const ::std::string& value) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.pwt_source_name)
}
 void ProcessBatchesArgs::set_pwt_source_name(const char* value) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.pwt_source_name)
}
 void ProcessBatchesArgs::set_pwt_source_name(const char* value, size_t size) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.pwt_source_name)
}
 ::std::string* ProcessBatchesArgs::mutable_pwt_source_name() {
  set_has_pwt_source_name();
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.pwt_source_name)
  return pwt_source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProcessBatchesArgs::release_pwt_source_name() {
  // @@protoc_insertion_point(field_release:artm.ProcessBatchesArgs.pwt_source_name)
  clear_has_pwt_source_name();
  return pwt_source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProcessBatchesArgs::set_allocated_pwt_source_name(::std::string* pwt_source_name) {
  if (pwt_source_name != NULL) {
    set_has_pwt_source_name();
  } else {
    clear_has_pwt_source_name();
  }
  pwt_source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwt_source_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ProcessBatchesArgs.pwt_source_name)
}

// optional int32 num_document_passes = 4 [default = 10];
bool ProcessBatchesArgs::has_num_document_passes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProcessBatchesArgs::set_has_num_document_passes() {
  _has_bits_[0] |= 0x00000008u;
}
void ProcessBatchesArgs::clear_has_num_document_passes() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProcessBatchesArgs::clear_num_document_passes() {
  num_document_passes_ = 10;
  clear_has_num_document_passes();
}
 ::google::protobuf::int32 ProcessBatchesArgs::num_document_passes() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.num_document_passes)
  return num_document_passes_;
}
 void ProcessBatchesArgs::set_num_document_passes(::google::protobuf::int32 value) {
  set_has_num_document_passes();
  num_document_passes_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.num_document_passes)
}

// repeated string regularizer_name = 6;
int ProcessBatchesArgs::regularizer_name_size() const {
  return regularizer_name_.size();
}
void ProcessBatchesArgs::clear_regularizer_name() {
  regularizer_name_.Clear();
}
 const ::std::string& ProcessBatchesArgs::regularizer_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.regularizer_name)
  return regularizer_name_.Get(index);
}
 ::std::string* ProcessBatchesArgs::mutable_regularizer_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.regularizer_name)
  return regularizer_name_.Mutable(index);
}
 void ProcessBatchesArgs::set_regularizer_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.regularizer_name)
  regularizer_name_.Mutable(index)->assign(value);
}
 void ProcessBatchesArgs::set_regularizer_name(int index, const char* value) {
  regularizer_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.regularizer_name)
}
 void ProcessBatchesArgs::set_regularizer_name(int index, const char* value, size_t size) {
  regularizer_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.regularizer_name)
}
 ::std::string* ProcessBatchesArgs::add_regularizer_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.ProcessBatchesArgs.regularizer_name)
  return regularizer_name_.Add();
}
 void ProcessBatchesArgs::add_regularizer_name(const ::std::string& value) {
  regularizer_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.regularizer_name)
}
 void ProcessBatchesArgs::add_regularizer_name(const char* value) {
  regularizer_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ProcessBatchesArgs.regularizer_name)
}
 void ProcessBatchesArgs::add_regularizer_name(const char* value, size_t size) {
  regularizer_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ProcessBatchesArgs.regularizer_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::regularizer_name() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.regularizer_name)
  return regularizer_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_regularizer_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.regularizer_name)
  return &regularizer_name_;
}

// repeated float regularizer_tau = 7;
int ProcessBatchesArgs::regularizer_tau_size() const {
  return regularizer_tau_.size();
}
void ProcessBatchesArgs::clear_regularizer_tau() {
  regularizer_tau_.Clear();
}
 float ProcessBatchesArgs::regularizer_tau(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.regularizer_tau)
  return regularizer_tau_.Get(index);
}
 void ProcessBatchesArgs::set_regularizer_tau(int index, float value) {
  regularizer_tau_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.regularizer_tau)
}
 void ProcessBatchesArgs::add_regularizer_tau(float value) {
  regularizer_tau_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.regularizer_tau)
}
 const ::google::protobuf::RepeatedField< float >&
ProcessBatchesArgs::regularizer_tau() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.regularizer_tau)
  return regularizer_tau_;
}
 ::google::protobuf::RepeatedField< float >*
ProcessBatchesArgs::mutable_regularizer_tau() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.regularizer_tau)
  return &regularizer_tau_;
}

// repeated string class_id = 8;
int ProcessBatchesArgs::class_id_size() const {
  return class_id_.size();
}
void ProcessBatchesArgs::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& ProcessBatchesArgs::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.class_id)
  return class_id_.Get(index);
}
 ::std::string* ProcessBatchesArgs::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.class_id)
  return class_id_.Mutable(index);
}
 void ProcessBatchesArgs::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void ProcessBatchesArgs::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.class_id)
}
 void ProcessBatchesArgs::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.class_id)
}
 ::std::string* ProcessBatchesArgs::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.ProcessBatchesArgs.class_id)
  return class_id_.Add();
}
 void ProcessBatchesArgs::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.class_id)
}
 void ProcessBatchesArgs::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ProcessBatchesArgs.class_id)
}
 void ProcessBatchesArgs::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ProcessBatchesArgs.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::class_id() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.class_id)
  return &class_id_;
}

// repeated float class_weight = 9;
int ProcessBatchesArgs::class_weight_size() const {
  return class_weight_.size();
}
void ProcessBatchesArgs::clear_class_weight() {
  class_weight_.Clear();
}
 float ProcessBatchesArgs::class_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.class_weight)
  return class_weight_.Get(index);
}
 void ProcessBatchesArgs::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.class_weight)
}
 void ProcessBatchesArgs::add_class_weight(float value) {
  class_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.class_weight)
}
 const ::google::protobuf::RepeatedField< float >&
ProcessBatchesArgs::class_weight() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.class_weight)
  return class_weight_;
}
 ::google::protobuf::RepeatedField< float >*
ProcessBatchesArgs::mutable_class_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.class_weight)
  return &class_weight_;
}

// optional bool reuse_theta = 10 [default = false];
bool ProcessBatchesArgs::has_reuse_theta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ProcessBatchesArgs::set_has_reuse_theta() {
  _has_bits_[0] |= 0x00000100u;
}
void ProcessBatchesArgs::clear_has_reuse_theta() {
  _has_bits_[0] &= ~0x00000100u;
}
void ProcessBatchesArgs::clear_reuse_theta() {
  reuse_theta_ = false;
  clear_has_reuse_theta();
}
 bool ProcessBatchesArgs::reuse_theta() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.reuse_theta)
  return reuse_theta_;
}
 void ProcessBatchesArgs::set_reuse_theta(bool value) {
  set_has_reuse_theta();
  reuse_theta_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.reuse_theta)
}

// optional bool opt_for_avx = 11 [default = true];
bool ProcessBatchesArgs::has_opt_for_avx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ProcessBatchesArgs::set_has_opt_for_avx() {
  _has_bits_[0] |= 0x00000200u;
}
void ProcessBatchesArgs::clear_has_opt_for_avx() {
  _has_bits_[0] &= ~0x00000200u;
}
void ProcessBatchesArgs::clear_opt_for_avx() {
  opt_for_avx_ = true;
  clear_has_opt_for_avx();
}
 bool ProcessBatchesArgs::opt_for_avx() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.opt_for_avx)
  return opt_for_avx_;
}
 void ProcessBatchesArgs::set_opt_for_avx(bool value) {
  set_has_opt_for_avx();
  opt_for_avx_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.opt_for_avx)
}

// optional .artm.ThetaMatrixType theta_matrix_type = 14 [default = ThetaMatrixType_Cache];
bool ProcessBatchesArgs::has_theta_matrix_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ProcessBatchesArgs::set_has_theta_matrix_type() {
  _has_bits_[0] |= 0x00000400u;
}
void ProcessBatchesArgs::clear_has_theta_matrix_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void ProcessBatchesArgs::clear_theta_matrix_type() {
  theta_matrix_type_ = 3;
  clear_has_theta_matrix_type();
}
 ::artm::ThetaMatrixType ProcessBatchesArgs::theta_matrix_type() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.theta_matrix_type)
  return static_cast< ::artm::ThetaMatrixType >(theta_matrix_type_);
}
 void ProcessBatchesArgs::set_theta_matrix_type(::artm::ThetaMatrixType value) {
  assert(::artm::ThetaMatrixType_IsValid(value));
  set_has_theta_matrix_type();
  theta_matrix_type_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.theta_matrix_type)
}

// repeated float batch_weight = 15;
int ProcessBatchesArgs::batch_weight_size() const {
  return batch_weight_.size();
}
void ProcessBatchesArgs::clear_batch_weight() {
  batch_weight_.Clear();
}
 float ProcessBatchesArgs::batch_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.batch_weight)
  return batch_weight_.Get(index);
}
 void ProcessBatchesArgs::set_batch_weight(int index, float value) {
  batch_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.batch_weight)
}
 void ProcessBatchesArgs::add_batch_weight(float value) {
  batch_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.batch_weight)
}
 const ::google::protobuf::RepeatedField< float >&
ProcessBatchesArgs::batch_weight() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.batch_weight)
  return batch_weight_;
}
 ::google::protobuf::RepeatedField< float >*
ProcessBatchesArgs::mutable_batch_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.batch_weight)
  return &batch_weight_;
}

// optional string predict_class_id = 17;
bool ProcessBatchesArgs::has_predict_class_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ProcessBatchesArgs::set_has_predict_class_id() {
  _has_bits_[0] |= 0x00001000u;
}
void ProcessBatchesArgs::clear_has_predict_class_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void ProcessBatchesArgs::clear_predict_class_id() {
  predict_class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_predict_class_id();
}
 const ::std::string& ProcessBatchesArgs::predict_class_id() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.predict_class_id)
  return predict_class_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProcessBatchesArgs::set_predict_class_id(const ::std::string& value) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.predict_class_id)
}
 void ProcessBatchesArgs::set_predict_class_id(const char* value) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.predict_class_id)
}
 void ProcessBatchesArgs::set_predict_class_id(const char* value, size_t size) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.predict_class_id)
}
 ::std::string* ProcessBatchesArgs::mutable_predict_class_id() {
  set_has_predict_class_id();
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.predict_class_id)
  return predict_class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProcessBatchesArgs::release_predict_class_id() {
  // @@protoc_insertion_point(field_release:artm.ProcessBatchesArgs.predict_class_id)
  clear_has_predict_class_id();
  return predict_class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProcessBatchesArgs::set_allocated_predict_class_id(::std::string* predict_class_id) {
  if (predict_class_id != NULL) {
    set_has_predict_class_id();
  } else {
    clear_has_predict_class_id();
  }
  predict_class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), predict_class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.ProcessBatchesArgs.predict_class_id)
}

// repeated .artm.Batch batch = 18;
int ProcessBatchesArgs::batch_size() const {
  return batch_.size();
}
void ProcessBatchesArgs::clear_batch() {
  batch_.Clear();
}
const ::artm::Batch& ProcessBatchesArgs::batch(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.batch)
  return batch_.Get(index);
}
::artm::Batch* ProcessBatchesArgs::mutable_batch(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.batch)
  return batch_.Mutable(index);
}
::artm::Batch* ProcessBatchesArgs::add_batch() {
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.batch)
  return batch_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::Batch >*
ProcessBatchesArgs::mutable_batch() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.batch)
  return &batch_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
ProcessBatchesArgs::batch() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.batch)
  return batch_;
}

// optional bool use_random_theta = 19 [default = false];
bool ProcessBatchesArgs::has_use_random_theta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ProcessBatchesArgs::set_has_use_random_theta() {
  _has_bits_[0] |= 0x00004000u;
}
void ProcessBatchesArgs::clear_has_use_random_theta() {
  _has_bits_[0] &= ~0x00004000u;
}
void ProcessBatchesArgs::clear_use_random_theta() {
  use_random_theta_ = false;
  clear_has_use_random_theta();
}
 bool ProcessBatchesArgs::use_random_theta() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.use_random_theta)
  return use_random_theta_;
}
 void ProcessBatchesArgs::set_use_random_theta(bool value) {
  set_has_use_random_theta();
  use_random_theta_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.use_random_theta)
}

// repeated string topic_name = 20;
int ProcessBatchesArgs::topic_name_size() const {
  return topic_name_.size();
}
void ProcessBatchesArgs::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& ProcessBatchesArgs::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* ProcessBatchesArgs::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.topic_name)
  return topic_name_.Mutable(index);
}
 void ProcessBatchesArgs::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void ProcessBatchesArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.topic_name)
}
 void ProcessBatchesArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.topic_name)
}
 ::std::string* ProcessBatchesArgs::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.ProcessBatchesArgs.topic_name)
  return topic_name_.Add();
}
 void ProcessBatchesArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.topic_name)
}
 void ProcessBatchesArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ProcessBatchesArgs.topic_name)
}
 void ProcessBatchesArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ProcessBatchesArgs.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.topic_name)
  return &topic_name_;
}

// repeated string transaction_typename = 21;
int ProcessBatchesArgs::transaction_typename_size() const {
  return transaction_typename_.size();
}
void ProcessBatchesArgs::clear_transaction_typename() {
  transaction_typename_.Clear();
}
 const ::std::string& ProcessBatchesArgs::transaction_typename(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.transaction_typename)
  return transaction_typename_.Get(index);
}
 ::std::string* ProcessBatchesArgs::mutable_transaction_typename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.transaction_typename)
  return transaction_typename_.Mutable(index);
}
 void ProcessBatchesArgs::set_transaction_typename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.transaction_typename)
  transaction_typename_.Mutable(index)->assign(value);
}
 void ProcessBatchesArgs::set_transaction_typename(int index, const char* value) {
  transaction_typename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.transaction_typename)
}
 void ProcessBatchesArgs::set_transaction_typename(int index, const char* value, size_t size) {
  transaction_typename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.transaction_typename)
}
 ::std::string* ProcessBatchesArgs::add_transaction_typename() {
  // @@protoc_insertion_point(field_add_mutable:artm.ProcessBatchesArgs.transaction_typename)
  return transaction_typename_.Add();
}
 void ProcessBatchesArgs::add_transaction_typename(const ::std::string& value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.transaction_typename)
}
 void ProcessBatchesArgs::add_transaction_typename(const char* value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ProcessBatchesArgs.transaction_typename)
}
 void ProcessBatchesArgs::add_transaction_typename(const char* value, size_t size) {
  transaction_typename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ProcessBatchesArgs.transaction_typename)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::transaction_typename() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.transaction_typename)
  return transaction_typename_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_transaction_typename() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.transaction_typename)
  return &transaction_typename_;
}

// repeated float transaction_weight = 22;
int ProcessBatchesArgs::transaction_weight_size() const {
  return transaction_weight_.size();
}
void ProcessBatchesArgs::clear_transaction_weight() {
  transaction_weight_.Clear();
}
 float ProcessBatchesArgs::transaction_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.transaction_weight)
  return transaction_weight_.Get(index);
}
 void ProcessBatchesArgs::set_transaction_weight(int index, float value) {
  transaction_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.transaction_weight)
}
 void ProcessBatchesArgs::add_transaction_weight(float value) {
  transaction_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.transaction_weight)
}
 const ::google::protobuf::RepeatedField< float >&
ProcessBatchesArgs::transaction_weight() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.transaction_weight)
  return transaction_weight_;
}
 ::google::protobuf::RepeatedField< float >*
ProcessBatchesArgs::mutable_transaction_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.transaction_weight)
  return &transaction_weight_;
}

// optional bool reset_nwt = 23 [default = true];
bool ProcessBatchesArgs::has_reset_nwt() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ProcessBatchesArgs::set_has_reset_nwt() {
  _has_bits_[0] |= 0x00040000u;
}
void ProcessBatchesArgs::clear_has_reset_nwt() {
  _has_bits_[0] &= ~0x00040000u;
}
void ProcessBatchesArgs::clear_reset_nwt() {
  reset_nwt_ = true;
  clear_has_reset_nwt();
}
 bool ProcessBatchesArgs::reset_nwt() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.reset_nwt)
  return reset_nwt_;
}
 void ProcessBatchesArgs::set_reset_nwt(bool value) {
  set_has_reset_nwt();
  reset_nwt_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.reset_nwt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessBatchesResult::kScoreDataFieldNumber;
const int ProcessBatchesResult::kThetaMatrixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessBatchesResult::ProcessBatchesResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ProcessBatchesResult)
}

void ProcessBatchesResult::InitAsDefaultInstance() {
  theta_matrix_ = const_cast< ::artm::ThetaMatrix*>(&::artm::ThetaMatrix::default_instance());
}

ProcessBatchesResult::ProcessBatchesResult(const ProcessBatchesResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ProcessBatchesResult)
}

void ProcessBatchesResult::SharedCtor() {
  _cached_size_ = 0;
  theta_matrix_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessBatchesResult::~ProcessBatchesResult() {
  // @@protoc_insertion_point(destructor:artm.ProcessBatchesResult)
  SharedDtor();
}

void ProcessBatchesResult::SharedDtor() {
  if (this != default_instance_) {
    delete theta_matrix_;
  }
}

void ProcessBatchesResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessBatchesResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessBatchesResult_descriptor_;
}

const ProcessBatchesResult& ProcessBatchesResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ProcessBatchesResult* ProcessBatchesResult::default_instance_ = NULL;

ProcessBatchesResult* ProcessBatchesResult::New(::google::protobuf::Arena* arena) const {
  ProcessBatchesResult* n = new ProcessBatchesResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessBatchesResult::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ProcessBatchesResult)
  if (has_theta_matrix()) {
    if (theta_matrix_ != NULL) theta_matrix_->::artm::ThetaMatrix::Clear();
  }
  score_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProcessBatchesResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ProcessBatchesResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.ScoreData score_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_score_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_score_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_score_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_theta_matrix;
        break;
      }

      // optional .artm.ThetaMatrix theta_matrix = 2;
      case 2: {
        if (tag == 18) {
         parse_theta_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theta_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ProcessBatchesResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ProcessBatchesResult)
  return false;
#undef DO_
}

void ProcessBatchesResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ProcessBatchesResult)
  // repeated .artm.ScoreData score_data = 1;
  for (unsigned int i = 0, n = this->score_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score_data(i), output);
  }

  // optional .artm.ThetaMatrix theta_matrix = 2;
  if (has_theta_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->theta_matrix_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ProcessBatchesResult)
}

::google::protobuf::uint8* ProcessBatchesResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ProcessBatchesResult)
  // repeated .artm.ScoreData score_data = 1;
  for (unsigned int i = 0, n = this->score_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->score_data(i), false, target);
  }

  // optional .artm.ThetaMatrix theta_matrix = 2;
  if (has_theta_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->theta_matrix_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ProcessBatchesResult)
  return target;
}

int ProcessBatchesResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ProcessBatchesResult)
  int total_size = 0;

  // optional .artm.ThetaMatrix theta_matrix = 2;
  if (has_theta_matrix()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->theta_matrix_);
  }

  // repeated .artm.ScoreData score_data = 1;
  total_size += 1 * this->score_data_size();
  for (int i = 0; i < this->score_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessBatchesResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ProcessBatchesResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProcessBatchesResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessBatchesResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ProcessBatchesResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ProcessBatchesResult)
    MergeFrom(*source);
  }
}

void ProcessBatchesResult::MergeFrom(const ProcessBatchesResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ProcessBatchesResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  score_data_.MergeFrom(from.score_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_theta_matrix()) {
      mutable_theta_matrix()->::artm::ThetaMatrix::MergeFrom(from.theta_matrix());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProcessBatchesResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ProcessBatchesResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessBatchesResult::CopyFrom(const ProcessBatchesResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ProcessBatchesResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchesResult::IsInitialized() const {

  return true;
}

void ProcessBatchesResult::Swap(ProcessBatchesResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessBatchesResult::InternalSwap(ProcessBatchesResult* other) {
  score_data_.UnsafeArenaSwap(&other->score_data_);
  std::swap(theta_matrix_, other->theta_matrix_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessBatchesResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessBatchesResult_descriptor_;
  metadata.reflection = ProcessBatchesResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessBatchesResult

// repeated .artm.ScoreData score_data = 1;
int ProcessBatchesResult::score_data_size() const {
  return score_data_.size();
}
void ProcessBatchesResult::clear_score_data() {
  score_data_.Clear();
}
const ::artm::ScoreData& ProcessBatchesResult::score_data(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesResult.score_data)
  return score_data_.Get(index);
}
::artm::ScoreData* ProcessBatchesResult::mutable_score_data(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesResult.score_data)
  return score_data_.Mutable(index);
}
::artm::ScoreData* ProcessBatchesResult::add_score_data() {
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesResult.score_data)
  return score_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::ScoreData >*
ProcessBatchesResult::mutable_score_data() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesResult.score_data)
  return &score_data_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >&
ProcessBatchesResult::score_data() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesResult.score_data)
  return score_data_;
}

// optional .artm.ThetaMatrix theta_matrix = 2;
bool ProcessBatchesResult::has_theta_matrix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProcessBatchesResult::set_has_theta_matrix() {
  _has_bits_[0] |= 0x00000002u;
}
void ProcessBatchesResult::clear_has_theta_matrix() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProcessBatchesResult::clear_theta_matrix() {
  if (theta_matrix_ != NULL) theta_matrix_->::artm::ThetaMatrix::Clear();
  clear_has_theta_matrix();
}
const ::artm::ThetaMatrix& ProcessBatchesResult::theta_matrix() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesResult.theta_matrix)
  return theta_matrix_ != NULL ? *theta_matrix_ : *default_instance_->theta_matrix_;
}
::artm::ThetaMatrix* ProcessBatchesResult::mutable_theta_matrix() {
  set_has_theta_matrix();
  if (theta_matrix_ == NULL) {
    theta_matrix_ = new ::artm::ThetaMatrix;
  }
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesResult.theta_matrix)
  return theta_matrix_;
}
::artm::ThetaMatrix* ProcessBatchesResult::release_theta_matrix() {
  // @@protoc_insertion_point(field_release:artm.ProcessBatchesResult.theta_matrix)
  clear_has_theta_matrix();
  ::artm::ThetaMatrix* temp = theta_matrix_;
  theta_matrix_ = NULL;
  return temp;
}
void ProcessBatchesResult::set_allocated_theta_matrix(::artm::ThetaMatrix* theta_matrix) {
  delete theta_matrix_;
  theta_matrix_ = theta_matrix;
  if (theta_matrix) {
    set_has_theta_matrix();
  } else {
    clear_has_theta_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:artm.ProcessBatchesResult.theta_matrix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeModelArgs::kNwtTargetNameFieldNumber;
const int MergeModelArgs::kNwtSourceNameFieldNumber;
const int MergeModelArgs::kSourceWeightFieldNumber;
const int MergeModelArgs::kTopicNameFieldNumber;
const int MergeModelArgs::kDictionaryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeModelArgs::MergeModelArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.MergeModelArgs)
}

void MergeModelArgs::InitAsDefaultInstance() {
}

MergeModelArgs::MergeModelArgs(const MergeModelArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.MergeModelArgs)
}

void MergeModelArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nwt_target_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeModelArgs::~MergeModelArgs() {
  // @@protoc_insertion_point(destructor:artm.MergeModelArgs)
  SharedDtor();
}

void MergeModelArgs::SharedDtor() {
  nwt_target_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MergeModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeModelArgs_descriptor_;
}

const MergeModelArgs& MergeModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MergeModelArgs* MergeModelArgs::default_instance_ = NULL;

MergeModelArgs* MergeModelArgs::New(::google::protobuf::Arena* arena) const {
  MergeModelArgs* n = new MergeModelArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MergeModelArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.MergeModelArgs)
  if (_has_bits_[0 / 32] & 17u) {
    if (has_nwt_target_name()) {
      nwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dictionary_name()) {
      dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  nwt_source_name_.Clear();
  source_weight_.Clear();
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MergeModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.MergeModelArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nwt_target_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwt_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nwt_target_name().data(), this->nwt_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MergeModelArgs.nwt_target_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nwt_source_name;
        break;
      }

      // repeated string nwt_source_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nwt_source_name(this->nwt_source_name_size() - 1).data(),
            this->nwt_source_name(this->nwt_source_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MergeModelArgs.nwt_source_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nwt_source_name;
        if (input->ExpectTag(29)) goto parse_source_weight;
        break;
      }

      // repeated float source_weight = 3;
      case 3: {
        if (tag == 29) {
         parse_source_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_source_weight())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_source_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_source_weight;
        if (input->ExpectTag(34)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 4;
      case 4: {
        if (tag == 34) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MergeModelArgs.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        if (input->ExpectTag(42)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 5;
      case 5: {
        if (tag == 42) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MergeModelArgs.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.MergeModelArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.MergeModelArgs)
  return false;
#undef DO_
}

void MergeModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.MergeModelArgs)
  // optional string nwt_target_name = 1;
  if (has_nwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_target_name().data(), this->nwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MergeModelArgs.nwt_target_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nwt_target_name(), output);
  }

  // repeated string nwt_source_name = 2;
  for (int i = 0; i < this->nwt_source_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_source_name(i).data(), this->nwt_source_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MergeModelArgs.nwt_source_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nwt_source_name(i), output);
  }

  // repeated float source_weight = 3;
  for (int i = 0; i < this->source_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->source_weight(i), output);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MergeModelArgs.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topic_name(i), output);
  }

  // optional string dictionary_name = 5;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MergeModelArgs.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dictionary_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.MergeModelArgs)
}

::google::protobuf::uint8* MergeModelArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.MergeModelArgs)
  // optional string nwt_target_name = 1;
  if (has_nwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_target_name().data(), this->nwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MergeModelArgs.nwt_target_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nwt_target_name(), target);
  }

  // repeated string nwt_source_name = 2;
  for (int i = 0; i < this->nwt_source_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_source_name(i).data(), this->nwt_source_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MergeModelArgs.nwt_source_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->nwt_source_name(i), target);
  }

  // repeated float source_weight = 3;
  for (int i = 0; i < this->source_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->source_weight(i), target);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MergeModelArgs.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topic_name(i), target);
  }

  // optional string dictionary_name = 5;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MergeModelArgs.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dictionary_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.MergeModelArgs)
  return target;
}

int MergeModelArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.MergeModelArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 17u) {
    // optional string nwt_target_name = 1;
    if (has_nwt_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwt_target_name());
    }

    // optional string dictionary_name = 5;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  // repeated string nwt_source_name = 2;
  total_size += 1 * this->nwt_source_name_size();
  for (int i = 0; i < this->nwt_source_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nwt_source_name(i));
  }

  // repeated float source_weight = 3;
  {
    int data_size = 0;
    data_size = 4 * this->source_weight_size();
    total_size += 1 * this->source_weight_size() + data_size;
  }

  // repeated string topic_name = 4;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.MergeModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MergeModelArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MergeModelArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.MergeModelArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.MergeModelArgs)
    MergeFrom(*source);
  }
}

void MergeModelArgs::MergeFrom(const MergeModelArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.MergeModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  nwt_source_name_.MergeFrom(from.nwt_source_name_);
  source_weight_.MergeFrom(from.source_weight_);
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nwt_target_name()) {
      set_has_nwt_target_name();
      nwt_target_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nwt_target_name_);
    }
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MergeModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.MergeModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeModelArgs::CopyFrom(const MergeModelArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.MergeModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeModelArgs::IsInitialized() const {

  return true;
}

void MergeModelArgs::Swap(MergeModelArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeModelArgs::InternalSwap(MergeModelArgs* other) {
  nwt_target_name_.Swap(&other->nwt_target_name_);
  nwt_source_name_.UnsafeArenaSwap(&other->nwt_source_name_);
  source_weight_.UnsafeArenaSwap(&other->source_weight_);
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  dictionary_name_.Swap(&other->dictionary_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MergeModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeModelArgs_descriptor_;
  metadata.reflection = MergeModelArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MergeModelArgs

// optional string nwt_target_name = 1;
bool MergeModelArgs::has_nwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MergeModelArgs::set_has_nwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MergeModelArgs::clear_has_nwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MergeModelArgs::clear_nwt_target_name() {
  nwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nwt_target_name();
}
 const ::std::string& MergeModelArgs::nwt_target_name() const {
  // @@protoc_insertion_point(field_get:artm.MergeModelArgs.nwt_target_name)
  return nwt_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MergeModelArgs::set_nwt_target_name(const ::std::string& value) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MergeModelArgs.nwt_target_name)
}
 void MergeModelArgs::set_nwt_target_name(const char* value) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MergeModelArgs.nwt_target_name)
}
 void MergeModelArgs::set_nwt_target_name(const char* value, size_t size) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MergeModelArgs.nwt_target_name)
}
 ::std::string* MergeModelArgs::mutable_nwt_target_name() {
  set_has_nwt_target_name();
  // @@protoc_insertion_point(field_mutable:artm.MergeModelArgs.nwt_target_name)
  return nwt_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MergeModelArgs::release_nwt_target_name() {
  // @@protoc_insertion_point(field_release:artm.MergeModelArgs.nwt_target_name)
  clear_has_nwt_target_name();
  return nwt_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MergeModelArgs::set_allocated_nwt_target_name(::std::string* nwt_target_name) {
  if (nwt_target_name != NULL) {
    set_has_nwt_target_name();
  } else {
    clear_has_nwt_target_name();
  }
  nwt_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nwt_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.MergeModelArgs.nwt_target_name)
}

// repeated string nwt_source_name = 2;
int MergeModelArgs::nwt_source_name_size() const {
  return nwt_source_name_.size();
}
void MergeModelArgs::clear_nwt_source_name() {
  nwt_source_name_.Clear();
}
 const ::std::string& MergeModelArgs::nwt_source_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.MergeModelArgs.nwt_source_name)
  return nwt_source_name_.Get(index);
}
 ::std::string* MergeModelArgs::mutable_nwt_source_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MergeModelArgs.nwt_source_name)
  return nwt_source_name_.Mutable(index);
}
 void MergeModelArgs::set_nwt_source_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.MergeModelArgs.nwt_source_name)
  nwt_source_name_.Mutable(index)->assign(value);
}
 void MergeModelArgs::set_nwt_source_name(int index, const char* value) {
  nwt_source_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.MergeModelArgs.nwt_source_name)
}
 void MergeModelArgs::set_nwt_source_name(int index, const char* value, size_t size) {
  nwt_source_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.MergeModelArgs.nwt_source_name)
}
 ::std::string* MergeModelArgs::add_nwt_source_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.MergeModelArgs.nwt_source_name)
  return nwt_source_name_.Add();
}
 void MergeModelArgs::add_nwt_source_name(const ::std::string& value) {
  nwt_source_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.MergeModelArgs.nwt_source_name)
}
 void MergeModelArgs::add_nwt_source_name(const char* value) {
  nwt_source_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.MergeModelArgs.nwt_source_name)
}
 void MergeModelArgs::add_nwt_source_name(const char* value, size_t size) {
  nwt_source_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.MergeModelArgs.nwt_source_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MergeModelArgs::nwt_source_name() const {
  // @@protoc_insertion_point(field_list:artm.MergeModelArgs.nwt_source_name)
  return nwt_source_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MergeModelArgs::mutable_nwt_source_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.MergeModelArgs.nwt_source_name)
  return &nwt_source_name_;
}

// repeated float source_weight = 3;
int MergeModelArgs::source_weight_size() const {
  return source_weight_.size();
}
void MergeModelArgs::clear_source_weight() {
  source_weight_.Clear();
}
 float MergeModelArgs::source_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.MergeModelArgs.source_weight)
  return source_weight_.Get(index);
}
 void MergeModelArgs::set_source_weight(int index, float value) {
  source_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.MergeModelArgs.source_weight)
}
 void MergeModelArgs::add_source_weight(float value) {
  source_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.MergeModelArgs.source_weight)
}
 const ::google::protobuf::RepeatedField< float >&
MergeModelArgs::source_weight() const {
  // @@protoc_insertion_point(field_list:artm.MergeModelArgs.source_weight)
  return source_weight_;
}
 ::google::protobuf::RepeatedField< float >*
MergeModelArgs::mutable_source_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.MergeModelArgs.source_weight)
  return &source_weight_;
}

// repeated string topic_name = 4;
int MergeModelArgs::topic_name_size() const {
  return topic_name_.size();
}
void MergeModelArgs::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& MergeModelArgs::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.MergeModelArgs.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* MergeModelArgs::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MergeModelArgs.topic_name)
  return topic_name_.Mutable(index);
}
 void MergeModelArgs::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.MergeModelArgs.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void MergeModelArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.MergeModelArgs.topic_name)
}
 void MergeModelArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.MergeModelArgs.topic_name)
}
 ::std::string* MergeModelArgs::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.MergeModelArgs.topic_name)
  return topic_name_.Add();
}
 void MergeModelArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.MergeModelArgs.topic_name)
}
 void MergeModelArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.MergeModelArgs.topic_name)
}
 void MergeModelArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.MergeModelArgs.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MergeModelArgs::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.MergeModelArgs.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MergeModelArgs::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.MergeModelArgs.topic_name)
  return &topic_name_;
}

// optional string dictionary_name = 5;
bool MergeModelArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MergeModelArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000010u;
}
void MergeModelArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void MergeModelArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& MergeModelArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.MergeModelArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MergeModelArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MergeModelArgs.dictionary_name)
}
 void MergeModelArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MergeModelArgs.dictionary_name)
}
 void MergeModelArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MergeModelArgs.dictionary_name)
}
 ::std::string* MergeModelArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.MergeModelArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MergeModelArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.MergeModelArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MergeModelArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.MergeModelArgs.dictionary_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegularizeModelArgs::kRwtTargetNameFieldNumber;
const int RegularizeModelArgs::kPwtSourceNameFieldNumber;
const int RegularizeModelArgs::kNwtSourceNameFieldNumber;
const int RegularizeModelArgs::kRegularizerSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegularizeModelArgs::RegularizeModelArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.RegularizeModelArgs)
}

void RegularizeModelArgs::InitAsDefaultInstance() {
}

RegularizeModelArgs::RegularizeModelArgs(const RegularizeModelArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.RegularizeModelArgs)
}

void RegularizeModelArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rwt_target_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwt_source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nwt_source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegularizeModelArgs::~RegularizeModelArgs() {
  // @@protoc_insertion_point(destructor:artm.RegularizeModelArgs)
  SharedDtor();
}

void RegularizeModelArgs::SharedDtor() {
  rwt_target_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwt_source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nwt_source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RegularizeModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegularizeModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizeModelArgs_descriptor_;
}

const RegularizeModelArgs& RegularizeModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

RegularizeModelArgs* RegularizeModelArgs::default_instance_ = NULL;

RegularizeModelArgs* RegularizeModelArgs::New(::google::protobuf::Arena* arena) const {
  RegularizeModelArgs* n = new RegularizeModelArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegularizeModelArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.RegularizeModelArgs)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_rwt_target_name()) {
      rwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pwt_source_name()) {
      pwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nwt_source_name()) {
      nwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  regularizer_settings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegularizeModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.RegularizeModelArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rwt_target_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rwt_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rwt_target_name().data(), this->rwt_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.RegularizeModelArgs.rwt_target_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pwt_source_name;
        break;
      }

      // optional string pwt_source_name = 2;
      case 2: {
        if (tag == 18) {
         parse_pwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwt_source_name().data(), this->pwt_source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.RegularizeModelArgs.pwt_source_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nwt_source_name;
        break;
      }

      // optional string nwt_source_name = 3;
      case 3: {
        if (tag == 26) {
         parse_nwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nwt_source_name().data(), this->nwt_source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.RegularizeModelArgs.nwt_source_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_regularizer_settings;
        break;
      }

      // repeated .artm.RegularizerSettings regularizer_settings = 4;
      case 4: {
        if (tag == 34) {
         parse_regularizer_settings:
          DO_(input->IncrementRecursionDepth());
         parse_loop_regularizer_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_regularizer_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_regularizer_settings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.RegularizeModelArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.RegularizeModelArgs)
  return false;
#undef DO_
}

void RegularizeModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.RegularizeModelArgs)
  // optional string rwt_target_name = 1;
  if (has_rwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rwt_target_name().data(), this->rwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizeModelArgs.rwt_target_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rwt_target_name(), output);
  }

  // optional string pwt_source_name = 2;
  if (has_pwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwt_source_name().data(), this->pwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizeModelArgs.pwt_source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pwt_source_name(), output);
  }

  // optional string nwt_source_name = 3;
  if (has_nwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_source_name().data(), this->nwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizeModelArgs.nwt_source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nwt_source_name(), output);
  }

  // repeated .artm.RegularizerSettings regularizer_settings = 4;
  for (unsigned int i = 0, n = this->regularizer_settings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->regularizer_settings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.RegularizeModelArgs)
}

::google::protobuf::uint8* RegularizeModelArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.RegularizeModelArgs)
  // optional string rwt_target_name = 1;
  if (has_rwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rwt_target_name().data(), this->rwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizeModelArgs.rwt_target_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rwt_target_name(), target);
  }

  // optional string pwt_source_name = 2;
  if (has_pwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwt_source_name().data(), this->pwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizeModelArgs.pwt_source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwt_source_name(), target);
  }

  // optional string nwt_source_name = 3;
  if (has_nwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_source_name().data(), this->nwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.RegularizeModelArgs.nwt_source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nwt_source_name(), target);
  }

  // repeated .artm.RegularizerSettings regularizer_settings = 4;
  for (unsigned int i = 0, n = this->regularizer_settings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->regularizer_settings(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.RegularizeModelArgs)
  return target;
}

int RegularizeModelArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.RegularizeModelArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string rwt_target_name = 1;
    if (has_rwt_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rwt_target_name());
    }

    // optional string pwt_source_name = 2;
    if (has_pwt_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwt_source_name());
    }

    // optional string nwt_source_name = 3;
    if (has_nwt_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwt_source_name());
    }

  }
  // repeated .artm.RegularizerSettings regularizer_settings = 4;
  total_size += 1 * this->regularizer_settings_size();
  for (int i = 0; i < this->regularizer_settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regularizer_settings(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegularizeModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.RegularizeModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegularizeModelArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegularizeModelArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.RegularizeModelArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.RegularizeModelArgs)
    MergeFrom(*source);
  }
}

void RegularizeModelArgs::MergeFrom(const RegularizeModelArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.RegularizeModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  regularizer_settings_.MergeFrom(from.regularizer_settings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rwt_target_name()) {
      set_has_rwt_target_name();
      rwt_target_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rwt_target_name_);
    }
    if (from.has_pwt_source_name()) {
      set_has_pwt_source_name();
      pwt_source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwt_source_name_);
    }
    if (from.has_nwt_source_name()) {
      set_has_nwt_source_name();
      nwt_source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nwt_source_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegularizeModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.RegularizeModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegularizeModelArgs::CopyFrom(const RegularizeModelArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.RegularizeModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegularizeModelArgs::IsInitialized() const {

  return true;
}

void RegularizeModelArgs::Swap(RegularizeModelArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegularizeModelArgs::InternalSwap(RegularizeModelArgs* other) {
  rwt_target_name_.Swap(&other->rwt_target_name_);
  pwt_source_name_.Swap(&other->pwt_source_name_);
  nwt_source_name_.Swap(&other->nwt_source_name_);
  regularizer_settings_.UnsafeArenaSwap(&other->regularizer_settings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegularizeModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegularizeModelArgs_descriptor_;
  metadata.reflection = RegularizeModelArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegularizeModelArgs

// optional string rwt_target_name = 1;
bool RegularizeModelArgs::has_rwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegularizeModelArgs::set_has_rwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RegularizeModelArgs::clear_has_rwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegularizeModelArgs::clear_rwt_target_name() {
  rwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rwt_target_name();
}
 const ::std::string& RegularizeModelArgs::rwt_target_name() const {
  // @@protoc_insertion_point(field_get:artm.RegularizeModelArgs.rwt_target_name)
  return rwt_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizeModelArgs::set_rwt_target_name(const ::std::string& value) {
  set_has_rwt_target_name();
  rwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizeModelArgs.rwt_target_name)
}
 void RegularizeModelArgs::set_rwt_target_name(const char* value) {
  set_has_rwt_target_name();
  rwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizeModelArgs.rwt_target_name)
}
 void RegularizeModelArgs::set_rwt_target_name(const char* value, size_t size) {
  set_has_rwt_target_name();
  rwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizeModelArgs.rwt_target_name)
}
 ::std::string* RegularizeModelArgs::mutable_rwt_target_name() {
  set_has_rwt_target_name();
  // @@protoc_insertion_point(field_mutable:artm.RegularizeModelArgs.rwt_target_name)
  return rwt_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegularizeModelArgs::release_rwt_target_name() {
  // @@protoc_insertion_point(field_release:artm.RegularizeModelArgs.rwt_target_name)
  clear_has_rwt_target_name();
  return rwt_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizeModelArgs::set_allocated_rwt_target_name(::std::string* rwt_target_name) {
  if (rwt_target_name != NULL) {
    set_has_rwt_target_name();
  } else {
    clear_has_rwt_target_name();
  }
  rwt_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rwt_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizeModelArgs.rwt_target_name)
}

// optional string pwt_source_name = 2;
bool RegularizeModelArgs::has_pwt_source_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegularizeModelArgs::set_has_pwt_source_name() {
  _has_bits_[0] |= 0x00000002u;
}
void RegularizeModelArgs::clear_has_pwt_source_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegularizeModelArgs::clear_pwt_source_name() {
  pwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwt_source_name();
}
 const ::std::string& RegularizeModelArgs::pwt_source_name() const {
  // @@protoc_insertion_point(field_get:artm.RegularizeModelArgs.pwt_source_name)
  return pwt_source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizeModelArgs::set_pwt_source_name(const ::std::string& value) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizeModelArgs.pwt_source_name)
}
 void RegularizeModelArgs::set_pwt_source_name(const char* value) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizeModelArgs.pwt_source_name)
}
 void RegularizeModelArgs::set_pwt_source_name(const char* value, size_t size) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizeModelArgs.pwt_source_name)
}
 ::std::string* RegularizeModelArgs::mutable_pwt_source_name() {
  set_has_pwt_source_name();
  // @@protoc_insertion_point(field_mutable:artm.RegularizeModelArgs.pwt_source_name)
  return pwt_source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegularizeModelArgs::release_pwt_source_name() {
  // @@protoc_insertion_point(field_release:artm.RegularizeModelArgs.pwt_source_name)
  clear_has_pwt_source_name();
  return pwt_source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizeModelArgs::set_allocated_pwt_source_name(::std::string* pwt_source_name) {
  if (pwt_source_name != NULL) {
    set_has_pwt_source_name();
  } else {
    clear_has_pwt_source_name();
  }
  pwt_source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwt_source_name);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizeModelArgs.pwt_source_name)
}

// optional string nwt_source_name = 3;
bool RegularizeModelArgs::has_nwt_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RegularizeModelArgs::set_has_nwt_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
void RegularizeModelArgs::clear_has_nwt_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void RegularizeModelArgs::clear_nwt_source_name() {
  nwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nwt_source_name();
}
 const ::std::string& RegularizeModelArgs::nwt_source_name() const {
  // @@protoc_insertion_point(field_get:artm.RegularizeModelArgs.nwt_source_name)
  return nwt_source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizeModelArgs::set_nwt_source_name(const ::std::string& value) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizeModelArgs.nwt_source_name)
}
 void RegularizeModelArgs::set_nwt_source_name(const char* value) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizeModelArgs.nwt_source_name)
}
 void RegularizeModelArgs::set_nwt_source_name(const char* value, size_t size) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizeModelArgs.nwt_source_name)
}
 ::std::string* RegularizeModelArgs::mutable_nwt_source_name() {
  set_has_nwt_source_name();
  // @@protoc_insertion_point(field_mutable:artm.RegularizeModelArgs.nwt_source_name)
  return nwt_source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegularizeModelArgs::release_nwt_source_name() {
  // @@protoc_insertion_point(field_release:artm.RegularizeModelArgs.nwt_source_name)
  clear_has_nwt_source_name();
  return nwt_source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegularizeModelArgs::set_allocated_nwt_source_name(::std::string* nwt_source_name) {
  if (nwt_source_name != NULL) {
    set_has_nwt_source_name();
  } else {
    clear_has_nwt_source_name();
  }
  nwt_source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nwt_source_name);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizeModelArgs.nwt_source_name)
}

// repeated .artm.RegularizerSettings regularizer_settings = 4;
int RegularizeModelArgs::regularizer_settings_size() const {
  return regularizer_settings_.size();
}
void RegularizeModelArgs::clear_regularizer_settings() {
  regularizer_settings_.Clear();
}
const ::artm::RegularizerSettings& RegularizeModelArgs::regularizer_settings(int index) const {
  // @@protoc_insertion_point(field_get:artm.RegularizeModelArgs.regularizer_settings)
  return regularizer_settings_.Get(index);
}
::artm::RegularizerSettings* RegularizeModelArgs::mutable_regularizer_settings(int index) {
  // @@protoc_insertion_point(field_mutable:artm.RegularizeModelArgs.regularizer_settings)
  return regularizer_settings_.Mutable(index);
}
::artm::RegularizerSettings* RegularizeModelArgs::add_regularizer_settings() {
  // @@protoc_insertion_point(field_add:artm.RegularizeModelArgs.regularizer_settings)
  return regularizer_settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings >*
RegularizeModelArgs::mutable_regularizer_settings() {
  // @@protoc_insertion_point(field_mutable_list:artm.RegularizeModelArgs.regularizer_settings)
  return &regularizer_settings_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings >&
RegularizeModelArgs::regularizer_settings() const {
  // @@protoc_insertion_point(field_list:artm.RegularizeModelArgs.regularizer_settings)
  return regularizer_settings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizeModelArgs::kPwtTargetNameFieldNumber;
const int NormalizeModelArgs::kNwtSourceNameFieldNumber;
const int NormalizeModelArgs::kRwtSourceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizeModelArgs::NormalizeModelArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.NormalizeModelArgs)
}

void NormalizeModelArgs::InitAsDefaultInstance() {
}

NormalizeModelArgs::NormalizeModelArgs(const NormalizeModelArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.NormalizeModelArgs)
}

void NormalizeModelArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pwt_target_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nwt_source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rwt_source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalizeModelArgs::~NormalizeModelArgs() {
  // @@protoc_insertion_point(destructor:artm.NormalizeModelArgs)
  SharedDtor();
}

void NormalizeModelArgs::SharedDtor() {
  pwt_target_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nwt_source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rwt_source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NormalizeModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalizeModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalizeModelArgs_descriptor_;
}

const NormalizeModelArgs& NormalizeModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

NormalizeModelArgs* NormalizeModelArgs::default_instance_ = NULL;

NormalizeModelArgs* NormalizeModelArgs::New(::google::protobuf::Arena* arena) const {
  NormalizeModelArgs* n = new NormalizeModelArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NormalizeModelArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.NormalizeModelArgs)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_pwt_target_name()) {
      pwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nwt_source_name()) {
      nwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_rwt_source_name()) {
      rwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NormalizeModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.NormalizeModelArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pwt_target_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwt_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwt_target_name().data(), this->pwt_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.NormalizeModelArgs.pwt_target_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nwt_source_name;
        break;
      }

      // optional string nwt_source_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nwt_source_name().data(), this->nwt_source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.NormalizeModelArgs.nwt_source_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rwt_source_name;
        break;
      }

      // optional string rwt_source_name = 3;
      case 3: {
        if (tag == 26) {
         parse_rwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rwt_source_name().data(), this->rwt_source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.NormalizeModelArgs.rwt_source_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.NormalizeModelArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.NormalizeModelArgs)
  return false;
#undef DO_
}

void NormalizeModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.NormalizeModelArgs)
  // optional string pwt_target_name = 1;
  if (has_pwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwt_target_name().data(), this->pwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NormalizeModelArgs.pwt_target_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pwt_target_name(), output);
  }

  // optional string nwt_source_name = 2;
  if (has_nwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_source_name().data(), this->nwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NormalizeModelArgs.nwt_source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nwt_source_name(), output);
  }

  // optional string rwt_source_name = 3;
  if (has_rwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rwt_source_name().data(), this->rwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NormalizeModelArgs.rwt_source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rwt_source_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.NormalizeModelArgs)
}

::google::protobuf::uint8* NormalizeModelArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.NormalizeModelArgs)
  // optional string pwt_target_name = 1;
  if (has_pwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwt_target_name().data(), this->pwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NormalizeModelArgs.pwt_target_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pwt_target_name(), target);
  }

  // optional string nwt_source_name = 2;
  if (has_nwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_source_name().data(), this->nwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NormalizeModelArgs.nwt_source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nwt_source_name(), target);
  }

  // optional string rwt_source_name = 3;
  if (has_rwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rwt_source_name().data(), this->rwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.NormalizeModelArgs.rwt_source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rwt_source_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.NormalizeModelArgs)
  return target;
}

int NormalizeModelArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.NormalizeModelArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string pwt_target_name = 1;
    if (has_pwt_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwt_target_name());
    }

    // optional string nwt_source_name = 2;
    if (has_nwt_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwt_source_name());
    }

    // optional string rwt_source_name = 3;
    if (has_rwt_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rwt_source_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalizeModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.NormalizeModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NormalizeModelArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizeModelArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.NormalizeModelArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.NormalizeModelArgs)
    MergeFrom(*source);
  }
}

void NormalizeModelArgs::MergeFrom(const NormalizeModelArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.NormalizeModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pwt_target_name()) {
      set_has_pwt_target_name();
      pwt_target_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwt_target_name_);
    }
    if (from.has_nwt_source_name()) {
      set_has_nwt_source_name();
      nwt_source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nwt_source_name_);
    }
    if (from.has_rwt_source_name()) {
      set_has_rwt_source_name();
      rwt_source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rwt_source_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NormalizeModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.NormalizeModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizeModelArgs::CopyFrom(const NormalizeModelArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.NormalizeModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizeModelArgs::IsInitialized() const {

  return true;
}

void NormalizeModelArgs::Swap(NormalizeModelArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalizeModelArgs::InternalSwap(NormalizeModelArgs* other) {
  pwt_target_name_.Swap(&other->pwt_target_name_);
  nwt_source_name_.Swap(&other->nwt_source_name_);
  rwt_source_name_.Swap(&other->rwt_source_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NormalizeModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalizeModelArgs_descriptor_;
  metadata.reflection = NormalizeModelArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NormalizeModelArgs

// optional string pwt_target_name = 1;
bool NormalizeModelArgs::has_pwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NormalizeModelArgs::set_has_pwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NormalizeModelArgs::clear_has_pwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NormalizeModelArgs::clear_pwt_target_name() {
  pwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwt_target_name();
}
 const ::std::string& NormalizeModelArgs::pwt_target_name() const {
  // @@protoc_insertion_point(field_get:artm.NormalizeModelArgs.pwt_target_name)
  return pwt_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NormalizeModelArgs::set_pwt_target_name(const ::std::string& value) {
  set_has_pwt_target_name();
  pwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.NormalizeModelArgs.pwt_target_name)
}
 void NormalizeModelArgs::set_pwt_target_name(const char* value) {
  set_has_pwt_target_name();
  pwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.NormalizeModelArgs.pwt_target_name)
}
 void NormalizeModelArgs::set_pwt_target_name(const char* value, size_t size) {
  set_has_pwt_target_name();
  pwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.NormalizeModelArgs.pwt_target_name)
}
 ::std::string* NormalizeModelArgs::mutable_pwt_target_name() {
  set_has_pwt_target_name();
  // @@protoc_insertion_point(field_mutable:artm.NormalizeModelArgs.pwt_target_name)
  return pwt_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NormalizeModelArgs::release_pwt_target_name() {
  // @@protoc_insertion_point(field_release:artm.NormalizeModelArgs.pwt_target_name)
  clear_has_pwt_target_name();
  return pwt_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NormalizeModelArgs::set_allocated_pwt_target_name(::std::string* pwt_target_name) {
  if (pwt_target_name != NULL) {
    set_has_pwt_target_name();
  } else {
    clear_has_pwt_target_name();
  }
  pwt_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwt_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.NormalizeModelArgs.pwt_target_name)
}

// optional string nwt_source_name = 2;
bool NormalizeModelArgs::has_nwt_source_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NormalizeModelArgs::set_has_nwt_source_name() {
  _has_bits_[0] |= 0x00000002u;
}
void NormalizeModelArgs::clear_has_nwt_source_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void NormalizeModelArgs::clear_nwt_source_name() {
  nwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nwt_source_name();
}
 const ::std::string& NormalizeModelArgs::nwt_source_name() const {
  // @@protoc_insertion_point(field_get:artm.NormalizeModelArgs.nwt_source_name)
  return nwt_source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NormalizeModelArgs::set_nwt_source_name(const ::std::string& value) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.NormalizeModelArgs.nwt_source_name)
}
 void NormalizeModelArgs::set_nwt_source_name(const char* value) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.NormalizeModelArgs.nwt_source_name)
}
 void NormalizeModelArgs::set_nwt_source_name(const char* value, size_t size) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.NormalizeModelArgs.nwt_source_name)
}
 ::std::string* NormalizeModelArgs::mutable_nwt_source_name() {
  set_has_nwt_source_name();
  // @@protoc_insertion_point(field_mutable:artm.NormalizeModelArgs.nwt_source_name)
  return nwt_source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NormalizeModelArgs::release_nwt_source_name() {
  // @@protoc_insertion_point(field_release:artm.NormalizeModelArgs.nwt_source_name)
  clear_has_nwt_source_name();
  return nwt_source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NormalizeModelArgs::set_allocated_nwt_source_name(::std::string* nwt_source_name) {
  if (nwt_source_name != NULL) {
    set_has_nwt_source_name();
  } else {
    clear_has_nwt_source_name();
  }
  nwt_source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nwt_source_name);
  // @@protoc_insertion_point(field_set_allocated:artm.NormalizeModelArgs.nwt_source_name)
}

// optional string rwt_source_name = 3;
bool NormalizeModelArgs::has_rwt_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NormalizeModelArgs::set_has_rwt_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
void NormalizeModelArgs::clear_has_rwt_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void NormalizeModelArgs::clear_rwt_source_name() {
  rwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rwt_source_name();
}
 const ::std::string& NormalizeModelArgs::rwt_source_name() const {
  // @@protoc_insertion_point(field_get:artm.NormalizeModelArgs.rwt_source_name)
  return rwt_source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NormalizeModelArgs::set_rwt_source_name(const ::std::string& value) {
  set_has_rwt_source_name();
  rwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.NormalizeModelArgs.rwt_source_name)
}
 void NormalizeModelArgs::set_rwt_source_name(const char* value) {
  set_has_rwt_source_name();
  rwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.NormalizeModelArgs.rwt_source_name)
}
 void NormalizeModelArgs::set_rwt_source_name(const char* value, size_t size) {
  set_has_rwt_source_name();
  rwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.NormalizeModelArgs.rwt_source_name)
}
 ::std::string* NormalizeModelArgs::mutable_rwt_source_name() {
  set_has_rwt_source_name();
  // @@protoc_insertion_point(field_mutable:artm.NormalizeModelArgs.rwt_source_name)
  return rwt_source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NormalizeModelArgs::release_rwt_source_name() {
  // @@protoc_insertion_point(field_release:artm.NormalizeModelArgs.rwt_source_name)
  clear_has_rwt_source_name();
  return rwt_source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NormalizeModelArgs::set_allocated_rwt_source_name(::std::string* rwt_source_name) {
  if (rwt_source_name != NULL) {
    set_has_rwt_source_name();
  } else {
    clear_has_rwt_source_name();
  }
  rwt_source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rwt_source_name);
  // @@protoc_insertion_point(field_set_allocated:artm.NormalizeModelArgs.rwt_source_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportDictionaryArgs::kFileNameFieldNumber;
const int ImportDictionaryArgs::kDictionaryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportDictionaryArgs::ImportDictionaryArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ImportDictionaryArgs)
}

void ImportDictionaryArgs::InitAsDefaultInstance() {
}

ImportDictionaryArgs::ImportDictionaryArgs(const ImportDictionaryArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ImportDictionaryArgs)
}

void ImportDictionaryArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportDictionaryArgs::~ImportDictionaryArgs() {
  // @@protoc_insertion_point(destructor:artm.ImportDictionaryArgs)
  SharedDtor();
}

void ImportDictionaryArgs::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ImportDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportDictionaryArgs_descriptor_;
}

const ImportDictionaryArgs& ImportDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ImportDictionaryArgs* ImportDictionaryArgs::default_instance_ = NULL;

ImportDictionaryArgs* ImportDictionaryArgs::New(::google::protobuf::Arena* arena) const {
  ImportDictionaryArgs* n = new ImportDictionaryArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportDictionaryArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ImportDictionaryArgs)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_name()) {
      file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dictionary_name()) {
      dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImportDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ImportDictionaryArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ImportDictionaryArgs.file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 2;
      case 2: {
        if (tag == 18) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ImportDictionaryArgs.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ImportDictionaryArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ImportDictionaryArgs)
  return false;
#undef DO_
}

void ImportDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ImportDictionaryArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImportDictionaryArgs.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImportDictionaryArgs.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dictionary_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ImportDictionaryArgs)
}

::google::protobuf::uint8* ImportDictionaryArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ImportDictionaryArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImportDictionaryArgs.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ImportDictionaryArgs.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dictionary_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ImportDictionaryArgs)
  return target;
}

int ImportDictionaryArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ImportDictionaryArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string dictionary_name = 2;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ImportDictionaryArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImportDictionaryArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportDictionaryArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ImportDictionaryArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ImportDictionaryArgs)
    MergeFrom(*source);
  }
}

void ImportDictionaryArgs::MergeFrom(const ImportDictionaryArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ImportDictionaryArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImportDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ImportDictionaryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportDictionaryArgs::CopyFrom(const ImportDictionaryArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ImportDictionaryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportDictionaryArgs::IsInitialized() const {

  return true;
}

void ImportDictionaryArgs::Swap(ImportDictionaryArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportDictionaryArgs::InternalSwap(ImportDictionaryArgs* other) {
  file_name_.Swap(&other->file_name_);
  dictionary_name_.Swap(&other->dictionary_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportDictionaryArgs_descriptor_;
  metadata.reflection = ImportDictionaryArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportDictionaryArgs

// optional string file_name = 1;
bool ImportDictionaryArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImportDictionaryArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ImportDictionaryArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImportDictionaryArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& ImportDictionaryArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ImportDictionaryArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportDictionaryArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImportDictionaryArgs.file_name)
}
 void ImportDictionaryArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImportDictionaryArgs.file_name)
}
 void ImportDictionaryArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImportDictionaryArgs.file_name)
}
 ::std::string* ImportDictionaryArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ImportDictionaryArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImportDictionaryArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ImportDictionaryArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportDictionaryArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImportDictionaryArgs.file_name)
}

// optional string dictionary_name = 2;
bool ImportDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImportDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ImportDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImportDictionaryArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& ImportDictionaryArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.ImportDictionaryArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImportDictionaryArgs.dictionary_name)
}
 void ImportDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImportDictionaryArgs.dictionary_name)
}
 void ImportDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImportDictionaryArgs.dictionary_name)
}
 ::std::string* ImportDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.ImportDictionaryArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImportDictionaryArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.ImportDictionaryArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImportDictionaryArgs.dictionary_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportDictionaryArgs::kFileNameFieldNumber;
const int ExportDictionaryArgs::kDictionaryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportDictionaryArgs::ExportDictionaryArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ExportDictionaryArgs)
}

void ExportDictionaryArgs::InitAsDefaultInstance() {
}

ExportDictionaryArgs::ExportDictionaryArgs(const ExportDictionaryArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ExportDictionaryArgs)
}

void ExportDictionaryArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExportDictionaryArgs::~ExportDictionaryArgs() {
  // @@protoc_insertion_point(destructor:artm.ExportDictionaryArgs)
  SharedDtor();
}

void ExportDictionaryArgs::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExportDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportDictionaryArgs_descriptor_;
}

const ExportDictionaryArgs& ExportDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ExportDictionaryArgs* ExportDictionaryArgs::default_instance_ = NULL;

ExportDictionaryArgs* ExportDictionaryArgs::New(::google::protobuf::Arena* arena) const {
  ExportDictionaryArgs* n = new ExportDictionaryArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExportDictionaryArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ExportDictionaryArgs)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_name()) {
      file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dictionary_name()) {
      dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExportDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ExportDictionaryArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ExportDictionaryArgs.file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 2;
      case 2: {
        if (tag == 18) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ExportDictionaryArgs.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ExportDictionaryArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ExportDictionaryArgs)
  return false;
#undef DO_
}

void ExportDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ExportDictionaryArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ExportDictionaryArgs.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ExportDictionaryArgs.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dictionary_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ExportDictionaryArgs)
}

::google::protobuf::uint8* ExportDictionaryArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ExportDictionaryArgs)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ExportDictionaryArgs.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ExportDictionaryArgs.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dictionary_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ExportDictionaryArgs)
  return target;
}

int ExportDictionaryArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ExportDictionaryArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string dictionary_name = 2;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ExportDictionaryArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExportDictionaryArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportDictionaryArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ExportDictionaryArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ExportDictionaryArgs)
    MergeFrom(*source);
  }
}

void ExportDictionaryArgs::MergeFrom(const ExportDictionaryArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ExportDictionaryArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExportDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ExportDictionaryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportDictionaryArgs::CopyFrom(const ExportDictionaryArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ExportDictionaryArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportDictionaryArgs::IsInitialized() const {

  return true;
}

void ExportDictionaryArgs::Swap(ExportDictionaryArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportDictionaryArgs::InternalSwap(ExportDictionaryArgs* other) {
  file_name_.Swap(&other->file_name_);
  dictionary_name_.Swap(&other->dictionary_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExportDictionaryArgs_descriptor_;
  metadata.reflection = ExportDictionaryArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportDictionaryArgs

// optional string file_name = 1;
bool ExportDictionaryArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExportDictionaryArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ExportDictionaryArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExportDictionaryArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
 const ::std::string& ExportDictionaryArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ExportDictionaryArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportDictionaryArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ExportDictionaryArgs.file_name)
}
 void ExportDictionaryArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ExportDictionaryArgs.file_name)
}
 void ExportDictionaryArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ExportDictionaryArgs.file_name)
}
 ::std::string* ExportDictionaryArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ExportDictionaryArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportDictionaryArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ExportDictionaryArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportDictionaryArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ExportDictionaryArgs.file_name)
}

// optional string dictionary_name = 2;
bool ExportDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExportDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ExportDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExportDictionaryArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& ExportDictionaryArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.ExportDictionaryArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ExportDictionaryArgs.dictionary_name)
}
 void ExportDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ExportDictionaryArgs.dictionary_name)
}
 void ExportDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ExportDictionaryArgs.dictionary_name)
}
 ::std::string* ExportDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.ExportDictionaryArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportDictionaryArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.ExportDictionaryArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ExportDictionaryArgs.dictionary_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DuplicateMasterComponentArgs::DuplicateMasterComponentArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.DuplicateMasterComponentArgs)
}

void DuplicateMasterComponentArgs::InitAsDefaultInstance() {
}

DuplicateMasterComponentArgs::DuplicateMasterComponentArgs(const DuplicateMasterComponentArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.DuplicateMasterComponentArgs)
}

void DuplicateMasterComponentArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplicateMasterComponentArgs::~DuplicateMasterComponentArgs() {
  // @@protoc_insertion_point(destructor:artm.DuplicateMasterComponentArgs)
  SharedDtor();
}

void DuplicateMasterComponentArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuplicateMasterComponentArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplicateMasterComponentArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplicateMasterComponentArgs_descriptor_;
}

const DuplicateMasterComponentArgs& DuplicateMasterComponentArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DuplicateMasterComponentArgs* DuplicateMasterComponentArgs::default_instance_ = NULL;

DuplicateMasterComponentArgs* DuplicateMasterComponentArgs::New(::google::protobuf::Arena* arena) const {
  DuplicateMasterComponentArgs* n = new DuplicateMasterComponentArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DuplicateMasterComponentArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.DuplicateMasterComponentArgs)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DuplicateMasterComponentArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.DuplicateMasterComponentArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:artm.DuplicateMasterComponentArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.DuplicateMasterComponentArgs)
  return false;
#undef DO_
}

void DuplicateMasterComponentArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.DuplicateMasterComponentArgs)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.DuplicateMasterComponentArgs)
}

::google::protobuf::uint8* DuplicateMasterComponentArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.DuplicateMasterComponentArgs)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.DuplicateMasterComponentArgs)
  return target;
}

int DuplicateMasterComponentArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.DuplicateMasterComponentArgs)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplicateMasterComponentArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.DuplicateMasterComponentArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DuplicateMasterComponentArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DuplicateMasterComponentArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.DuplicateMasterComponentArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.DuplicateMasterComponentArgs)
    MergeFrom(*source);
  }
}

void DuplicateMasterComponentArgs::MergeFrom(const DuplicateMasterComponentArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.DuplicateMasterComponentArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DuplicateMasterComponentArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.DuplicateMasterComponentArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplicateMasterComponentArgs::CopyFrom(const DuplicateMasterComponentArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.DuplicateMasterComponentArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateMasterComponentArgs::IsInitialized() const {

  return true;
}

void DuplicateMasterComponentArgs::Swap(DuplicateMasterComponentArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DuplicateMasterComponentArgs::InternalSwap(DuplicateMasterComponentArgs* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DuplicateMasterComponentArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplicateMasterComponentArgs_descriptor_;
  metadata.reflection = DuplicateMasterComponentArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DuplicateMasterComponentArgs

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMasterComponentInfoArgs::GetMasterComponentInfoArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.GetMasterComponentInfoArgs)
}

void GetMasterComponentInfoArgs::InitAsDefaultInstance() {
}

GetMasterComponentInfoArgs::GetMasterComponentInfoArgs(const GetMasterComponentInfoArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.GetMasterComponentInfoArgs)
}

void GetMasterComponentInfoArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMasterComponentInfoArgs::~GetMasterComponentInfoArgs() {
  // @@protoc_insertion_point(destructor:artm.GetMasterComponentInfoArgs)
  SharedDtor();
}

void GetMasterComponentInfoArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMasterComponentInfoArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMasterComponentInfoArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMasterComponentInfoArgs_descriptor_;
}

const GetMasterComponentInfoArgs& GetMasterComponentInfoArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetMasterComponentInfoArgs* GetMasterComponentInfoArgs::default_instance_ = NULL;

GetMasterComponentInfoArgs* GetMasterComponentInfoArgs::New(::google::protobuf::Arena* arena) const {
  GetMasterComponentInfoArgs* n = new GetMasterComponentInfoArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMasterComponentInfoArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.GetMasterComponentInfoArgs)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetMasterComponentInfoArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.GetMasterComponentInfoArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:artm.GetMasterComponentInfoArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.GetMasterComponentInfoArgs)
  return false;
#undef DO_
}

void GetMasterComponentInfoArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.GetMasterComponentInfoArgs)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.GetMasterComponentInfoArgs)
}

::google::protobuf::uint8* GetMasterComponentInfoArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.GetMasterComponentInfoArgs)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.GetMasterComponentInfoArgs)
  return target;
}

int GetMasterComponentInfoArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.GetMasterComponentInfoArgs)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMasterComponentInfoArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.GetMasterComponentInfoArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetMasterComponentInfoArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMasterComponentInfoArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.GetMasterComponentInfoArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.GetMasterComponentInfoArgs)
    MergeFrom(*source);
  }
}

void GetMasterComponentInfoArgs::MergeFrom(const GetMasterComponentInfoArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.GetMasterComponentInfoArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetMasterComponentInfoArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.GetMasterComponentInfoArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMasterComponentInfoArgs::CopyFrom(const GetMasterComponentInfoArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.GetMasterComponentInfoArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMasterComponentInfoArgs::IsInitialized() const {

  return true;
}

void GetMasterComponentInfoArgs::Swap(GetMasterComponentInfoArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMasterComponentInfoArgs::InternalSwap(GetMasterComponentInfoArgs* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMasterComponentInfoArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMasterComponentInfoArgs_descriptor_;
  metadata.reflection = GetMasterComponentInfoArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMasterComponentInfoArgs

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterComponentInfo_RegularizerInfo::kNameFieldNumber;
const int MasterComponentInfo_RegularizerInfo::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterComponentInfo_RegularizerInfo::MasterComponentInfo_RegularizerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.MasterComponentInfo.RegularizerInfo)
}

void MasterComponentInfo_RegularizerInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_RegularizerInfo::MasterComponentInfo_RegularizerInfo(const MasterComponentInfo_RegularizerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.MasterComponentInfo.RegularizerInfo)
}

void MasterComponentInfo_RegularizerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_RegularizerInfo::~MasterComponentInfo_RegularizerInfo() {
  // @@protoc_insertion_point(destructor:artm.MasterComponentInfo.RegularizerInfo)
  SharedDtor();
}

void MasterComponentInfo_RegularizerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_RegularizerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_RegularizerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_RegularizerInfo_descriptor_;
}

const MasterComponentInfo_RegularizerInfo& MasterComponentInfo_RegularizerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_RegularizerInfo* MasterComponentInfo_RegularizerInfo::default_instance_ = NULL;

MasterComponentInfo_RegularizerInfo* MasterComponentInfo_RegularizerInfo::New(::google::protobuf::Arena* arena) const {
  MasterComponentInfo_RegularizerInfo* n = new MasterComponentInfo_RegularizerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterComponentInfo_RegularizerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.MasterComponentInfo.RegularizerInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MasterComponentInfo_RegularizerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.MasterComponentInfo.RegularizerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterComponentInfo.RegularizerInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterComponentInfo.RegularizerInfo.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.MasterComponentInfo.RegularizerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.MasterComponentInfo.RegularizerInfo)
  return false;
#undef DO_
}

void MasterComponentInfo_RegularizerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.MasterComponentInfo.RegularizerInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.RegularizerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.RegularizerInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.MasterComponentInfo.RegularizerInfo)
}

::google::protobuf::uint8* MasterComponentInfo_RegularizerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.MasterComponentInfo.RegularizerInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.RegularizerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.RegularizerInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.MasterComponentInfo.RegularizerInfo)
  return target;
}

int MasterComponentInfo_RegularizerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.MasterComponentInfo.RegularizerInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_RegularizerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.MasterComponentInfo.RegularizerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MasterComponentInfo_RegularizerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterComponentInfo_RegularizerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.MasterComponentInfo.RegularizerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.MasterComponentInfo.RegularizerInfo)
    MergeFrom(*source);
  }
}

void MasterComponentInfo_RegularizerInfo::MergeFrom(const MasterComponentInfo_RegularizerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.MasterComponentInfo.RegularizerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MasterComponentInfo_RegularizerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.MasterComponentInfo.RegularizerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_RegularizerInfo::CopyFrom(const MasterComponentInfo_RegularizerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.MasterComponentInfo.RegularizerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_RegularizerInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_RegularizerInfo::Swap(MasterComponentInfo_RegularizerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterComponentInfo_RegularizerInfo::InternalSwap(MasterComponentInfo_RegularizerInfo* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterComponentInfo_RegularizerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_RegularizerInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_RegularizerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterComponentInfo_ScoreInfo::kNameFieldNumber;
const int MasterComponentInfo_ScoreInfo::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterComponentInfo_ScoreInfo::MasterComponentInfo_ScoreInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.MasterComponentInfo.ScoreInfo)
}

void MasterComponentInfo_ScoreInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_ScoreInfo::MasterComponentInfo_ScoreInfo(const MasterComponentInfo_ScoreInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.MasterComponentInfo.ScoreInfo)
}

void MasterComponentInfo_ScoreInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_ScoreInfo::~MasterComponentInfo_ScoreInfo() {
  // @@protoc_insertion_point(destructor:artm.MasterComponentInfo.ScoreInfo)
  SharedDtor();
}

void MasterComponentInfo_ScoreInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_ScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_ScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_ScoreInfo_descriptor_;
}

const MasterComponentInfo_ScoreInfo& MasterComponentInfo_ScoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_ScoreInfo* MasterComponentInfo_ScoreInfo::default_instance_ = NULL;

MasterComponentInfo_ScoreInfo* MasterComponentInfo_ScoreInfo::New(::google::protobuf::Arena* arena) const {
  MasterComponentInfo_ScoreInfo* n = new MasterComponentInfo_ScoreInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterComponentInfo_ScoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.MasterComponentInfo.ScoreInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MasterComponentInfo_ScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.MasterComponentInfo.ScoreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterComponentInfo.ScoreInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterComponentInfo.ScoreInfo.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.MasterComponentInfo.ScoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.MasterComponentInfo.ScoreInfo)
  return false;
#undef DO_
}

void MasterComponentInfo_ScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.MasterComponentInfo.ScoreInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.ScoreInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.ScoreInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.MasterComponentInfo.ScoreInfo)
}

::google::protobuf::uint8* MasterComponentInfo_ScoreInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.MasterComponentInfo.ScoreInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.ScoreInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.ScoreInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.MasterComponentInfo.ScoreInfo)
  return target;
}

int MasterComponentInfo_ScoreInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.MasterComponentInfo.ScoreInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_ScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.MasterComponentInfo.ScoreInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MasterComponentInfo_ScoreInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterComponentInfo_ScoreInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.MasterComponentInfo.ScoreInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.MasterComponentInfo.ScoreInfo)
    MergeFrom(*source);
  }
}

void MasterComponentInfo_ScoreInfo::MergeFrom(const MasterComponentInfo_ScoreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.MasterComponentInfo.ScoreInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MasterComponentInfo_ScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.MasterComponentInfo.ScoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_ScoreInfo::CopyFrom(const MasterComponentInfo_ScoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.MasterComponentInfo.ScoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_ScoreInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_ScoreInfo::Swap(MasterComponentInfo_ScoreInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterComponentInfo_ScoreInfo::InternalSwap(MasterComponentInfo_ScoreInfo* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterComponentInfo_ScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_ScoreInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_ScoreInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterComponentInfo_DictionaryInfo::kNameFieldNumber;
const int MasterComponentInfo_DictionaryInfo::kNumEntriesFieldNumber;
const int MasterComponentInfo_DictionaryInfo::kByteSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterComponentInfo_DictionaryInfo::MasterComponentInfo_DictionaryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.MasterComponentInfo.DictionaryInfo)
}

void MasterComponentInfo_DictionaryInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_DictionaryInfo::MasterComponentInfo_DictionaryInfo(const MasterComponentInfo_DictionaryInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.MasterComponentInfo.DictionaryInfo)
}

void MasterComponentInfo_DictionaryInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_entries_ = GOOGLE_LONGLONG(0);
  byte_size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_DictionaryInfo::~MasterComponentInfo_DictionaryInfo() {
  // @@protoc_insertion_point(destructor:artm.MasterComponentInfo.DictionaryInfo)
  SharedDtor();
}

void MasterComponentInfo_DictionaryInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_DictionaryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_DictionaryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_DictionaryInfo_descriptor_;
}

const MasterComponentInfo_DictionaryInfo& MasterComponentInfo_DictionaryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_DictionaryInfo* MasterComponentInfo_DictionaryInfo::default_instance_ = NULL;

MasterComponentInfo_DictionaryInfo* MasterComponentInfo_DictionaryInfo::New(::google::protobuf::Arena* arena) const {
  MasterComponentInfo_DictionaryInfo* n = new MasterComponentInfo_DictionaryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterComponentInfo_DictionaryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.MasterComponentInfo.DictionaryInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MasterComponentInfo_DictionaryInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MasterComponentInfo_DictionaryInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(num_entries_, byte_size_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MasterComponentInfo_DictionaryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.MasterComponentInfo.DictionaryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterComponentInfo.DictionaryInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_entries;
        break;
      }

      // optional int64 num_entries = 2;
      case 2: {
        if (tag == 16) {
         parse_num_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_entries_)));
          set_has_num_entries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_byte_size;
        break;
      }

      // optional int64 byte_size = 3;
      case 3: {
        if (tag == 24) {
         parse_byte_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &byte_size_)));
          set_has_byte_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.MasterComponentInfo.DictionaryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.MasterComponentInfo.DictionaryInfo)
  return false;
#undef DO_
}

void MasterComponentInfo_DictionaryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.MasterComponentInfo.DictionaryInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.DictionaryInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 num_entries = 2;
  if (has_num_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_entries(), output);
  }

  // optional int64 byte_size = 3;
  if (has_byte_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->byte_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.MasterComponentInfo.DictionaryInfo)
}

::google::protobuf::uint8* MasterComponentInfo_DictionaryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.MasterComponentInfo.DictionaryInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.DictionaryInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 num_entries = 2;
  if (has_num_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_entries(), target);
  }

  // optional int64 byte_size = 3;
  if (has_byte_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->byte_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.MasterComponentInfo.DictionaryInfo)
  return target;
}

int MasterComponentInfo_DictionaryInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.MasterComponentInfo.DictionaryInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 num_entries = 2;
    if (has_num_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_entries());
    }

    // optional int64 byte_size = 3;
    if (has_byte_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->byte_size());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_DictionaryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.MasterComponentInfo.DictionaryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MasterComponentInfo_DictionaryInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterComponentInfo_DictionaryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.MasterComponentInfo.DictionaryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.MasterComponentInfo.DictionaryInfo)
    MergeFrom(*source);
  }
}

void MasterComponentInfo_DictionaryInfo::MergeFrom(const MasterComponentInfo_DictionaryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.MasterComponentInfo.DictionaryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_num_entries()) {
      set_num_entries(from.num_entries());
    }
    if (from.has_byte_size()) {
      set_byte_size(from.byte_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MasterComponentInfo_DictionaryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.MasterComponentInfo.DictionaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_DictionaryInfo::CopyFrom(const MasterComponentInfo_DictionaryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.MasterComponentInfo.DictionaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_DictionaryInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_DictionaryInfo::Swap(MasterComponentInfo_DictionaryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterComponentInfo_DictionaryInfo::InternalSwap(MasterComponentInfo_DictionaryInfo* other) {
  name_.Swap(&other->name_);
  std::swap(num_entries_, other->num_entries_);
  std::swap(byte_size_, other->byte_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterComponentInfo_DictionaryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_DictionaryInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_DictionaryInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterComponentInfo_BatchInfo::kNameFieldNumber;
const int MasterComponentInfo_BatchInfo::kNumItemsFieldNumber;
const int MasterComponentInfo_BatchInfo::kNumTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterComponentInfo_BatchInfo::MasterComponentInfo_BatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.MasterComponentInfo.BatchInfo)
}

void MasterComponentInfo_BatchInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_BatchInfo::MasterComponentInfo_BatchInfo(const MasterComponentInfo_BatchInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.MasterComponentInfo.BatchInfo)
}

void MasterComponentInfo_BatchInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_items_ = 0;
  num_tokens_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_BatchInfo::~MasterComponentInfo_BatchInfo() {
  // @@protoc_insertion_point(destructor:artm.MasterComponentInfo.BatchInfo)
  SharedDtor();
}

void MasterComponentInfo_BatchInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_BatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_BatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_BatchInfo_descriptor_;
}

const MasterComponentInfo_BatchInfo& MasterComponentInfo_BatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_BatchInfo* MasterComponentInfo_BatchInfo::default_instance_ = NULL;

MasterComponentInfo_BatchInfo* MasterComponentInfo_BatchInfo::New(::google::protobuf::Arena* arena) const {
  MasterComponentInfo_BatchInfo* n = new MasterComponentInfo_BatchInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterComponentInfo_BatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.MasterComponentInfo.BatchInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MasterComponentInfo_BatchInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MasterComponentInfo_BatchInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(num_items_, num_tokens_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MasterComponentInfo_BatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.MasterComponentInfo.BatchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterComponentInfo.BatchInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_items;
        break;
      }

      // optional int32 num_items = 2;
      case 2: {
        if (tag == 16) {
         parse_num_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_items_)));
          set_has_num_items();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_tokens;
        break;
      }

      // optional int32 num_tokens = 3;
      case 3: {
        if (tag == 24) {
         parse_num_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tokens_)));
          set_has_num_tokens();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.MasterComponentInfo.BatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.MasterComponentInfo.BatchInfo)
  return false;
#undef DO_
}

void MasterComponentInfo_BatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.MasterComponentInfo.BatchInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.BatchInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 num_items = 2;
  if (has_num_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_items(), output);
  }

  // optional int32 num_tokens = 3;
  if (has_num_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_tokens(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.MasterComponentInfo.BatchInfo)
}

::google::protobuf::uint8* MasterComponentInfo_BatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.MasterComponentInfo.BatchInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.BatchInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 num_items = 2;
  if (has_num_items()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_items(), target);
  }

  // optional int32 num_tokens = 3;
  if (has_num_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_tokens(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.MasterComponentInfo.BatchInfo)
  return target;
}

int MasterComponentInfo_BatchInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.MasterComponentInfo.BatchInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 num_items = 2;
    if (has_num_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_items());
    }

    // optional int32 num_tokens = 3;
    if (has_num_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_tokens());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_BatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.MasterComponentInfo.BatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MasterComponentInfo_BatchInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterComponentInfo_BatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.MasterComponentInfo.BatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.MasterComponentInfo.BatchInfo)
    MergeFrom(*source);
  }
}

void MasterComponentInfo_BatchInfo::MergeFrom(const MasterComponentInfo_BatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.MasterComponentInfo.BatchInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_num_items()) {
      set_num_items(from.num_items());
    }
    if (from.has_num_tokens()) {
      set_num_tokens(from.num_tokens());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MasterComponentInfo_BatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.MasterComponentInfo.BatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_BatchInfo::CopyFrom(const MasterComponentInfo_BatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.MasterComponentInfo.BatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_BatchInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_BatchInfo::Swap(MasterComponentInfo_BatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterComponentInfo_BatchInfo::InternalSwap(MasterComponentInfo_BatchInfo* other) {
  name_.Swap(&other->name_);
  std::swap(num_items_, other->num_items_);
  std::swap(num_tokens_, other->num_tokens_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterComponentInfo_BatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_BatchInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_BatchInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterComponentInfo_ModelInfo::kNameFieldNumber;
const int MasterComponentInfo_ModelInfo::kTypeFieldNumber;
const int MasterComponentInfo_ModelInfo::kNumTopicsFieldNumber;
const int MasterComponentInfo_ModelInfo::kNumTokensFieldNumber;
const int MasterComponentInfo_ModelInfo::kByteSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterComponentInfo_ModelInfo::MasterComponentInfo_ModelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.MasterComponentInfo.ModelInfo)
}

void MasterComponentInfo_ModelInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_ModelInfo::MasterComponentInfo_ModelInfo(const MasterComponentInfo_ModelInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.MasterComponentInfo.ModelInfo)
}

void MasterComponentInfo_ModelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_topics_ = 0;
  num_tokens_ = 0;
  byte_size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_ModelInfo::~MasterComponentInfo_ModelInfo() {
  // @@protoc_insertion_point(destructor:artm.MasterComponentInfo.ModelInfo)
  SharedDtor();
}

void MasterComponentInfo_ModelInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_ModelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_ModelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_ModelInfo_descriptor_;
}

const MasterComponentInfo_ModelInfo& MasterComponentInfo_ModelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_ModelInfo* MasterComponentInfo_ModelInfo::default_instance_ = NULL;

MasterComponentInfo_ModelInfo* MasterComponentInfo_ModelInfo::New(::google::protobuf::Arena* arena) const {
  MasterComponentInfo_ModelInfo* n = new MasterComponentInfo_ModelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterComponentInfo_ModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.MasterComponentInfo.ModelInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MasterComponentInfo_ModelInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MasterComponentInfo_ModelInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(num_topics_, byte_size_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MasterComponentInfo_ModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.MasterComponentInfo.ModelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterComponentInfo.ModelInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterComponentInfo.ModelInfo.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_topics;
        break;
      }

      // optional int32 num_topics = 3;
      case 3: {
        if (tag == 24) {
         parse_num_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_topics_)));
          set_has_num_topics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_tokens;
        break;
      }

      // optional int32 num_tokens = 4;
      case 4: {
        if (tag == 32) {
         parse_num_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tokens_)));
          set_has_num_tokens();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_byte_size;
        break;
      }

      // optional int64 byte_size = 5;
      case 5: {
        if (tag == 40) {
         parse_byte_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &byte_size_)));
          set_has_byte_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.MasterComponentInfo.ModelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.MasterComponentInfo.ModelInfo)
  return false;
#undef DO_
}

void MasterComponentInfo_ModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.MasterComponentInfo.ModelInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.ModelInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.ModelInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional int32 num_topics = 3;
  if (has_num_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_topics(), output);
  }

  // optional int32 num_tokens = 4;
  if (has_num_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_tokens(), output);
  }

  // optional int64 byte_size = 5;
  if (has_byte_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->byte_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.MasterComponentInfo.ModelInfo)
}

::google::protobuf::uint8* MasterComponentInfo_ModelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.MasterComponentInfo.ModelInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.ModelInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.ModelInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int32 num_topics = 3;
  if (has_num_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_topics(), target);
  }

  // optional int32 num_tokens = 4;
  if (has_num_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_tokens(), target);
  }

  // optional int64 byte_size = 5;
  if (has_byte_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->byte_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.MasterComponentInfo.ModelInfo)
  return target;
}

int MasterComponentInfo_ModelInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.MasterComponentInfo.ModelInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 num_topics = 3;
    if (has_num_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_topics());
    }

    // optional int32 num_tokens = 4;
    if (has_num_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_tokens());
    }

    // optional int64 byte_size = 5;
    if (has_byte_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->byte_size());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_ModelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.MasterComponentInfo.ModelInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MasterComponentInfo_ModelInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterComponentInfo_ModelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.MasterComponentInfo.ModelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.MasterComponentInfo.ModelInfo)
    MergeFrom(*source);
  }
}

void MasterComponentInfo_ModelInfo::MergeFrom(const MasterComponentInfo_ModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.MasterComponentInfo.ModelInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_num_topics()) {
      set_num_topics(from.num_topics());
    }
    if (from.has_num_tokens()) {
      set_num_tokens(from.num_tokens());
    }
    if (from.has_byte_size()) {
      set_byte_size(from.byte_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MasterComponentInfo_ModelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.MasterComponentInfo.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_ModelInfo::CopyFrom(const MasterComponentInfo_ModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.MasterComponentInfo.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_ModelInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_ModelInfo::Swap(MasterComponentInfo_ModelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterComponentInfo_ModelInfo::InternalSwap(MasterComponentInfo_ModelInfo* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  std::swap(num_topics_, other->num_topics_);
  std::swap(num_tokens_, other->num_tokens_);
  std::swap(byte_size_, other->byte_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterComponentInfo_ModelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_ModelInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_ModelInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterComponentInfo_CacheEntryInfo::kKeyFieldNumber;
const int MasterComponentInfo_CacheEntryInfo::kByteSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterComponentInfo_CacheEntryInfo::MasterComponentInfo_CacheEntryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.MasterComponentInfo.CacheEntryInfo)
}

void MasterComponentInfo_CacheEntryInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_CacheEntryInfo::MasterComponentInfo_CacheEntryInfo(const MasterComponentInfo_CacheEntryInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.MasterComponentInfo.CacheEntryInfo)
}

void MasterComponentInfo_CacheEntryInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  byte_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_CacheEntryInfo::~MasterComponentInfo_CacheEntryInfo() {
  // @@protoc_insertion_point(destructor:artm.MasterComponentInfo.CacheEntryInfo)
  SharedDtor();
}

void MasterComponentInfo_CacheEntryInfo::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_CacheEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_CacheEntryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_CacheEntryInfo_descriptor_;
}

const MasterComponentInfo_CacheEntryInfo& MasterComponentInfo_CacheEntryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_CacheEntryInfo* MasterComponentInfo_CacheEntryInfo::default_instance_ = NULL;

MasterComponentInfo_CacheEntryInfo* MasterComponentInfo_CacheEntryInfo::New(::google::protobuf::Arena* arena) const {
  MasterComponentInfo_CacheEntryInfo* n = new MasterComponentInfo_CacheEntryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterComponentInfo_CacheEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.MasterComponentInfo.CacheEntryInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    byte_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MasterComponentInfo_CacheEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.MasterComponentInfo.CacheEntryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterComponentInfo.CacheEntryInfo.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_byte_size;
        break;
      }

      // optional int32 byte_size = 2;
      case 2: {
        if (tag == 16) {
         parse_byte_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byte_size_)));
          set_has_byte_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.MasterComponentInfo.CacheEntryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.MasterComponentInfo.CacheEntryInfo)
  return false;
#undef DO_
}

void MasterComponentInfo_CacheEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.MasterComponentInfo.CacheEntryInfo)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.CacheEntryInfo.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional int32 byte_size = 2;
  if (has_byte_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->byte_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.MasterComponentInfo.CacheEntryInfo)
}

::google::protobuf::uint8* MasterComponentInfo_CacheEntryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.MasterComponentInfo.CacheEntryInfo)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterComponentInfo.CacheEntryInfo.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional int32 byte_size = 2;
  if (has_byte_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->byte_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.MasterComponentInfo.CacheEntryInfo)
  return target;
}

int MasterComponentInfo_CacheEntryInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.MasterComponentInfo.CacheEntryInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 byte_size = 2;
    if (has_byte_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byte_size());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_CacheEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.MasterComponentInfo.CacheEntryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MasterComponentInfo_CacheEntryInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterComponentInfo_CacheEntryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.MasterComponentInfo.CacheEntryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.MasterComponentInfo.CacheEntryInfo)
    MergeFrom(*source);
  }
}

void MasterComponentInfo_CacheEntryInfo::MergeFrom(const MasterComponentInfo_CacheEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.MasterComponentInfo.CacheEntryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_byte_size()) {
      set_byte_size(from.byte_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MasterComponentInfo_CacheEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.MasterComponentInfo.CacheEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_CacheEntryInfo::CopyFrom(const MasterComponentInfo_CacheEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.MasterComponentInfo.CacheEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_CacheEntryInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_CacheEntryInfo::Swap(MasterComponentInfo_CacheEntryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterComponentInfo_CacheEntryInfo::InternalSwap(MasterComponentInfo_CacheEntryInfo* other) {
  key_.Swap(&other->key_);
  std::swap(byte_size_, other->byte_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterComponentInfo_CacheEntryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_CacheEntryInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_CacheEntryInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterComponentInfo::kConfigFieldNumber;
const int MasterComponentInfo::kRegularizerFieldNumber;
const int MasterComponentInfo::kScoreFieldNumber;
const int MasterComponentInfo::kDictionaryFieldNumber;
const int MasterComponentInfo::kModelFieldNumber;
const int MasterComponentInfo::kCacheEntryFieldNumber;
const int MasterComponentInfo::kProcessorQueueSizeFieldNumber;
const int MasterComponentInfo::kBatchFieldNumber;
const int MasterComponentInfo::kNumProcessorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterComponentInfo::MasterComponentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.MasterComponentInfo)
}

void MasterComponentInfo::InitAsDefaultInstance() {
  config_ = const_cast< ::artm::MasterModelConfig*>(&::artm::MasterModelConfig::default_instance());
}

MasterComponentInfo::MasterComponentInfo(const MasterComponentInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.MasterComponentInfo)
}

void MasterComponentInfo::SharedCtor() {
  _cached_size_ = 0;
  config_ = NULL;
  processor_queue_size_ = 0;
  num_processors_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo::~MasterComponentInfo() {
  // @@protoc_insertion_point(destructor:artm.MasterComponentInfo)
  SharedDtor();
}

void MasterComponentInfo::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void MasterComponentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_descriptor_;
}

const MasterComponentInfo& MasterComponentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo* MasterComponentInfo::default_instance_ = NULL;

MasterComponentInfo* MasterComponentInfo::New(::google::protobuf::Arena* arena) const {
  MasterComponentInfo* n = new MasterComponentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterComponentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.MasterComponentInfo)
  if (_has_bits_[0 / 32] & 65u) {
    if (has_config()) {
      if (config_ != NULL) config_->::artm::MasterModelConfig::Clear();
    }
    processor_queue_size_ = 0;
  }
  num_processors_ = 0;
  regularizer_.Clear();
  score_.Clear();
  dictionary_.Clear();
  model_.Clear();
  cache_entry_.Clear();
  batch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MasterComponentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.MasterComponentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.MasterModelConfig config = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_regularizer;
        break;
      }

      // repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
      case 3: {
        if (tag == 26) {
         parse_regularizer:
          DO_(input->IncrementRecursionDepth());
         parse_loop_regularizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_regularizer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_regularizer;
        if (input->ExpectTag(34)) goto parse_loop_score;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_score;
        if (input->ExpectTag(42)) goto parse_loop_dictionary;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_dictionary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dictionary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_dictionary;
        if (input->ExpectTag(50)) goto parse_loop_model;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .artm.MasterComponentInfo.ModelInfo model = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_model;
        if (input->ExpectTag(58)) goto parse_loop_cache_entry;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cache_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cache_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_cache_entry;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_processor_queue_size;
        break;
      }

      // optional int32 processor_queue_size = 9;
      case 9: {
        if (tag == 72) {
         parse_processor_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processor_queue_size_)));
          set_has_processor_queue_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_batch;
        break;
      }

      // repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
      case 10: {
        if (tag == 82) {
         parse_batch:
          DO_(input->IncrementRecursionDepth());
         parse_loop_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_batch;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(88)) goto parse_num_processors;
        break;
      }

      // optional int32 num_processors = 11;
      case 11: {
        if (tag == 88) {
         parse_num_processors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_processors_)));
          set_has_num_processors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.MasterComponentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.MasterComponentInfo)
  return false;
#undef DO_
}

void MasterComponentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.MasterComponentInfo)
  // optional .artm.MasterModelConfig config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
  for (unsigned int i = 0, n = this->regularizer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->regularizer(i), output);
  }

  // repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
  for (unsigned int i = 0, n = this->score_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->score(i), output);
  }

  // repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
  for (unsigned int i = 0, n = this->dictionary_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dictionary(i), output);
  }

  // repeated .artm.MasterComponentInfo.ModelInfo model = 6;
  for (unsigned int i = 0, n = this->model_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->model(i), output);
  }

  // repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
  for (unsigned int i = 0, n = this->cache_entry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cache_entry(i), output);
  }

  // optional int32 processor_queue_size = 9;
  if (has_processor_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->processor_queue_size(), output);
  }

  // repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
  for (unsigned int i = 0, n = this->batch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->batch(i), output);
  }

  // optional int32 num_processors = 11;
  if (has_num_processors()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->num_processors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.MasterComponentInfo)
}

::google::protobuf::uint8* MasterComponentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.MasterComponentInfo)
  // optional .artm.MasterModelConfig config = 2;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, false, target);
  }

  // repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
  for (unsigned int i = 0, n = this->regularizer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->regularizer(i), false, target);
  }

  // repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
  for (unsigned int i = 0, n = this->score_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->score(i), false, target);
  }

  // repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
  for (unsigned int i = 0, n = this->dictionary_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->dictionary(i), false, target);
  }

  // repeated .artm.MasterComponentInfo.ModelInfo model = 6;
  for (unsigned int i = 0, n = this->model_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->model(i), false, target);
  }

  // repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
  for (unsigned int i = 0, n = this->cache_entry_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->cache_entry(i), false, target);
  }

  // optional int32 processor_queue_size = 9;
  if (has_processor_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->processor_queue_size(), target);
  }

  // repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
  for (unsigned int i = 0, n = this->batch_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->batch(i), false, target);
  }

  // optional int32 num_processors = 11;
  if (has_num_processors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->num_processors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.MasterComponentInfo)
  return target;
}

int MasterComponentInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.MasterComponentInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 65u) {
    // optional .artm.MasterModelConfig config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_);
    }

    // optional int32 processor_queue_size = 9;
    if (has_processor_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processor_queue_size());
    }

  }
  // optional int32 num_processors = 11;
  if (has_num_processors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_processors());
  }

  // repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
  total_size += 1 * this->regularizer_size();
  for (int i = 0; i < this->regularizer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regularizer(i));
  }

  // repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
  total_size += 1 * this->score_size();
  for (int i = 0; i < this->score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score(i));
  }

  // repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
  total_size += 1 * this->dictionary_size();
  for (int i = 0; i < this->dictionary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dictionary(i));
  }

  // repeated .artm.MasterComponentInfo.ModelInfo model = 6;
  total_size += 1 * this->model_size();
  for (int i = 0; i < this->model_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model(i));
  }

  // repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
  total_size += 1 * this->cache_entry_size();
  for (int i = 0; i < this->cache_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cache_entry(i));
  }

  // repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
  total_size += 1 * this->batch_size();
  for (int i = 0; i < this->batch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.MasterComponentInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MasterComponentInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterComponentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.MasterComponentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.MasterComponentInfo)
    MergeFrom(*source);
  }
}

void MasterComponentInfo::MergeFrom(const MasterComponentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.MasterComponentInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  regularizer_.MergeFrom(from.regularizer_);
  score_.MergeFrom(from.score_);
  dictionary_.MergeFrom(from.dictionary_);
  model_.MergeFrom(from.model_);
  cache_entry_.MergeFrom(from.cache_entry_);
  batch_.MergeFrom(from.batch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      mutable_config()->::artm::MasterModelConfig::MergeFrom(from.config());
    }
    if (from.has_processor_queue_size()) {
      set_processor_queue_size(from.processor_queue_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_processors()) {
      set_num_processors(from.num_processors());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MasterComponentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.MasterComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo::CopyFrom(const MasterComponentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.MasterComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo::Swap(MasterComponentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterComponentInfo::InternalSwap(MasterComponentInfo* other) {
  std::swap(config_, other->config_);
  regularizer_.UnsafeArenaSwap(&other->regularizer_);
  score_.UnsafeArenaSwap(&other->score_);
  dictionary_.UnsafeArenaSwap(&other->dictionary_);
  model_.UnsafeArenaSwap(&other->model_);
  cache_entry_.UnsafeArenaSwap(&other->cache_entry_);
  std::swap(processor_queue_size_, other->processor_queue_size_);
  batch_.UnsafeArenaSwap(&other->batch_);
  std::swap(num_processors_, other->num_processors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterComponentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MasterComponentInfo_RegularizerInfo

// optional string name = 1;
bool MasterComponentInfo_RegularizerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MasterComponentInfo_RegularizerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MasterComponentInfo_RegularizerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MasterComponentInfo_RegularizerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MasterComponentInfo_RegularizerInfo::name() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.RegularizerInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_RegularizerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.RegularizerInfo.name)
}
 void MasterComponentInfo_RegularizerInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.RegularizerInfo.name)
}
 void MasterComponentInfo_RegularizerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.RegularizerInfo.name)
}
 ::std::string* MasterComponentInfo_RegularizerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.RegularizerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterComponentInfo_RegularizerInfo::release_name() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.RegularizerInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_RegularizerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.RegularizerInfo.name)
}

// optional string type = 2;
bool MasterComponentInfo_RegularizerInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MasterComponentInfo_RegularizerInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void MasterComponentInfo_RegularizerInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void MasterComponentInfo_RegularizerInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& MasterComponentInfo_RegularizerInfo::type() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.RegularizerInfo.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_RegularizerInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.RegularizerInfo.type)
}
 void MasterComponentInfo_RegularizerInfo::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.RegularizerInfo.type)
}
 void MasterComponentInfo_RegularizerInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.RegularizerInfo.type)
}
 ::std::string* MasterComponentInfo_RegularizerInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.RegularizerInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterComponentInfo_RegularizerInfo::release_type() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.RegularizerInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_RegularizerInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.RegularizerInfo.type)
}

// -------------------------------------------------------------------

// MasterComponentInfo_ScoreInfo

// optional string name = 1;
bool MasterComponentInfo_ScoreInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MasterComponentInfo_ScoreInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MasterComponentInfo_ScoreInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MasterComponentInfo_ScoreInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MasterComponentInfo_ScoreInfo::name() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ScoreInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_ScoreInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ScoreInfo.name)
}
 void MasterComponentInfo_ScoreInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.ScoreInfo.name)
}
 void MasterComponentInfo_ScoreInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.ScoreInfo.name)
}
 ::std::string* MasterComponentInfo_ScoreInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.ScoreInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterComponentInfo_ScoreInfo::release_name() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.ScoreInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_ScoreInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.ScoreInfo.name)
}

// optional string type = 2;
bool MasterComponentInfo_ScoreInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MasterComponentInfo_ScoreInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void MasterComponentInfo_ScoreInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void MasterComponentInfo_ScoreInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& MasterComponentInfo_ScoreInfo::type() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ScoreInfo.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_ScoreInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ScoreInfo.type)
}
 void MasterComponentInfo_ScoreInfo::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.ScoreInfo.type)
}
 void MasterComponentInfo_ScoreInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.ScoreInfo.type)
}
 ::std::string* MasterComponentInfo_ScoreInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.ScoreInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterComponentInfo_ScoreInfo::release_type() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.ScoreInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_ScoreInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.ScoreInfo.type)
}

// -------------------------------------------------------------------

// MasterComponentInfo_DictionaryInfo

// optional string name = 1;
bool MasterComponentInfo_DictionaryInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MasterComponentInfo_DictionaryInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MasterComponentInfo_DictionaryInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MasterComponentInfo_DictionaryInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MasterComponentInfo_DictionaryInfo::name() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.DictionaryInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_DictionaryInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.DictionaryInfo.name)
}
 void MasterComponentInfo_DictionaryInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.DictionaryInfo.name)
}
 void MasterComponentInfo_DictionaryInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.DictionaryInfo.name)
}
 ::std::string* MasterComponentInfo_DictionaryInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.DictionaryInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterComponentInfo_DictionaryInfo::release_name() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.DictionaryInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_DictionaryInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.DictionaryInfo.name)
}

// optional int64 num_entries = 2;
bool MasterComponentInfo_DictionaryInfo::has_num_entries() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MasterComponentInfo_DictionaryInfo::set_has_num_entries() {
  _has_bits_[0] |= 0x00000002u;
}
void MasterComponentInfo_DictionaryInfo::clear_has_num_entries() {
  _has_bits_[0] &= ~0x00000002u;
}
void MasterComponentInfo_DictionaryInfo::clear_num_entries() {
  num_entries_ = GOOGLE_LONGLONG(0);
  clear_has_num_entries();
}
 ::google::protobuf::int64 MasterComponentInfo_DictionaryInfo::num_entries() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.DictionaryInfo.num_entries)
  return num_entries_;
}
 void MasterComponentInfo_DictionaryInfo::set_num_entries(::google::protobuf::int64 value) {
  set_has_num_entries();
  num_entries_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.DictionaryInfo.num_entries)
}

// optional int64 byte_size = 3;
bool MasterComponentInfo_DictionaryInfo::has_byte_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MasterComponentInfo_DictionaryInfo::set_has_byte_size() {
  _has_bits_[0] |= 0x00000004u;
}
void MasterComponentInfo_DictionaryInfo::clear_has_byte_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void MasterComponentInfo_DictionaryInfo::clear_byte_size() {
  byte_size_ = GOOGLE_LONGLONG(0);
  clear_has_byte_size();
}
 ::google::protobuf::int64 MasterComponentInfo_DictionaryInfo::byte_size() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.DictionaryInfo.byte_size)
  return byte_size_;
}
 void MasterComponentInfo_DictionaryInfo::set_byte_size(::google::protobuf::int64 value) {
  set_has_byte_size();
  byte_size_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.DictionaryInfo.byte_size)
}

// -------------------------------------------------------------------

// MasterComponentInfo_BatchInfo

// optional string name = 1;
bool MasterComponentInfo_BatchInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MasterComponentInfo_BatchInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MasterComponentInfo_BatchInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MasterComponentInfo_BatchInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MasterComponentInfo_BatchInfo::name() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.BatchInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_BatchInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.BatchInfo.name)
}
 void MasterComponentInfo_BatchInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.BatchInfo.name)
}
 void MasterComponentInfo_BatchInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.BatchInfo.name)
}
 ::std::string* MasterComponentInfo_BatchInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.BatchInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterComponentInfo_BatchInfo::release_name() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.BatchInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_BatchInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.BatchInfo.name)
}

// optional int32 num_items = 2;
bool MasterComponentInfo_BatchInfo::has_num_items() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MasterComponentInfo_BatchInfo::set_has_num_items() {
  _has_bits_[0] |= 0x00000002u;
}
void MasterComponentInfo_BatchInfo::clear_has_num_items() {
  _has_bits_[0] &= ~0x00000002u;
}
void MasterComponentInfo_BatchInfo::clear_num_items() {
  num_items_ = 0;
  clear_has_num_items();
}
 ::google::protobuf::int32 MasterComponentInfo_BatchInfo::num_items() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.BatchInfo.num_items)
  return num_items_;
}
 void MasterComponentInfo_BatchInfo::set_num_items(::google::protobuf::int32 value) {
  set_has_num_items();
  num_items_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.BatchInfo.num_items)
}

// optional int32 num_tokens = 3;
bool MasterComponentInfo_BatchInfo::has_num_tokens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MasterComponentInfo_BatchInfo::set_has_num_tokens() {
  _has_bits_[0] |= 0x00000004u;
}
void MasterComponentInfo_BatchInfo::clear_has_num_tokens() {
  _has_bits_[0] &= ~0x00000004u;
}
void MasterComponentInfo_BatchInfo::clear_num_tokens() {
  num_tokens_ = 0;
  clear_has_num_tokens();
}
 ::google::protobuf::int32 MasterComponentInfo_BatchInfo::num_tokens() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.BatchInfo.num_tokens)
  return num_tokens_;
}
 void MasterComponentInfo_BatchInfo::set_num_tokens(::google::protobuf::int32 value) {
  set_has_num_tokens();
  num_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.BatchInfo.num_tokens)
}

// -------------------------------------------------------------------

// MasterComponentInfo_ModelInfo

// optional string name = 1;
bool MasterComponentInfo_ModelInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MasterComponentInfo_ModelInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MasterComponentInfo_ModelInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MasterComponentInfo_ModelInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MasterComponentInfo_ModelInfo::name() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ModelInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_ModelInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ModelInfo.name)
}
 void MasterComponentInfo_ModelInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.ModelInfo.name)
}
 void MasterComponentInfo_ModelInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.ModelInfo.name)
}
 ::std::string* MasterComponentInfo_ModelInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.ModelInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterComponentInfo_ModelInfo::release_name() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.ModelInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_ModelInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.ModelInfo.name)
}

// optional string type = 2;
bool MasterComponentInfo_ModelInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MasterComponentInfo_ModelInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void MasterComponentInfo_ModelInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void MasterComponentInfo_ModelInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& MasterComponentInfo_ModelInfo::type() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ModelInfo.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_ModelInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ModelInfo.type)
}
 void MasterComponentInfo_ModelInfo::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.ModelInfo.type)
}
 void MasterComponentInfo_ModelInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.ModelInfo.type)
}
 ::std::string* MasterComponentInfo_ModelInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.ModelInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterComponentInfo_ModelInfo::release_type() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.ModelInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_ModelInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.ModelInfo.type)
}

// optional int32 num_topics = 3;
bool MasterComponentInfo_ModelInfo::has_num_topics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MasterComponentInfo_ModelInfo::set_has_num_topics() {
  _has_bits_[0] |= 0x00000004u;
}
void MasterComponentInfo_ModelInfo::clear_has_num_topics() {
  _has_bits_[0] &= ~0x00000004u;
}
void MasterComponentInfo_ModelInfo::clear_num_topics() {
  num_topics_ = 0;
  clear_has_num_topics();
}
 ::google::protobuf::int32 MasterComponentInfo_ModelInfo::num_topics() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ModelInfo.num_topics)
  return num_topics_;
}
 void MasterComponentInfo_ModelInfo::set_num_topics(::google::protobuf::int32 value) {
  set_has_num_topics();
  num_topics_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ModelInfo.num_topics)
}

// optional int32 num_tokens = 4;
bool MasterComponentInfo_ModelInfo::has_num_tokens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MasterComponentInfo_ModelInfo::set_has_num_tokens() {
  _has_bits_[0] |= 0x00000008u;
}
void MasterComponentInfo_ModelInfo::clear_has_num_tokens() {
  _has_bits_[0] &= ~0x00000008u;
}
void MasterComponentInfo_ModelInfo::clear_num_tokens() {
  num_tokens_ = 0;
  clear_has_num_tokens();
}
 ::google::protobuf::int32 MasterComponentInfo_ModelInfo::num_tokens() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ModelInfo.num_tokens)
  return num_tokens_;
}
 void MasterComponentInfo_ModelInfo::set_num_tokens(::google::protobuf::int32 value) {
  set_has_num_tokens();
  num_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ModelInfo.num_tokens)
}

// optional int64 byte_size = 5;
bool MasterComponentInfo_ModelInfo::has_byte_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MasterComponentInfo_ModelInfo::set_has_byte_size() {
  _has_bits_[0] |= 0x00000010u;
}
void MasterComponentInfo_ModelInfo::clear_has_byte_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void MasterComponentInfo_ModelInfo::clear_byte_size() {
  byte_size_ = GOOGLE_LONGLONG(0);
  clear_has_byte_size();
}
 ::google::protobuf::int64 MasterComponentInfo_ModelInfo::byte_size() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ModelInfo.byte_size)
  return byte_size_;
}
 void MasterComponentInfo_ModelInfo::set_byte_size(::google::protobuf::int64 value) {
  set_has_byte_size();
  byte_size_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ModelInfo.byte_size)
}

// -------------------------------------------------------------------

// MasterComponentInfo_CacheEntryInfo

// optional string key = 1;
bool MasterComponentInfo_CacheEntryInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MasterComponentInfo_CacheEntryInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MasterComponentInfo_CacheEntryInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MasterComponentInfo_CacheEntryInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& MasterComponentInfo_CacheEntryInfo::key() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.CacheEntryInfo.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_CacheEntryInfo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.CacheEntryInfo.key)
}
 void MasterComponentInfo_CacheEntryInfo::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.CacheEntryInfo.key)
}
 void MasterComponentInfo_CacheEntryInfo::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.CacheEntryInfo.key)
}
 ::std::string* MasterComponentInfo_CacheEntryInfo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.CacheEntryInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterComponentInfo_CacheEntryInfo::release_key() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.CacheEntryInfo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterComponentInfo_CacheEntryInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.CacheEntryInfo.key)
}

// optional int32 byte_size = 2;
bool MasterComponentInfo_CacheEntryInfo::has_byte_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MasterComponentInfo_CacheEntryInfo::set_has_byte_size() {
  _has_bits_[0] |= 0x00000002u;
}
void MasterComponentInfo_CacheEntryInfo::clear_has_byte_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void MasterComponentInfo_CacheEntryInfo::clear_byte_size() {
  byte_size_ = 0;
  clear_has_byte_size();
}
 ::google::protobuf::int32 MasterComponentInfo_CacheEntryInfo::byte_size() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.CacheEntryInfo.byte_size)
  return byte_size_;
}
 void MasterComponentInfo_CacheEntryInfo::set_byte_size(::google::protobuf::int32 value) {
  set_has_byte_size();
  byte_size_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.CacheEntryInfo.byte_size)
}

// -------------------------------------------------------------------

// MasterComponentInfo

// optional .artm.MasterModelConfig config = 2;
bool MasterComponentInfo::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MasterComponentInfo::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
void MasterComponentInfo::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void MasterComponentInfo::clear_config() {
  if (config_ != NULL) config_->::artm::MasterModelConfig::Clear();
  clear_has_config();
}
const ::artm::MasterModelConfig& MasterComponentInfo::config() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::artm::MasterModelConfig* MasterComponentInfo::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::artm::MasterModelConfig;
  }
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.config)
  return config_;
}
::artm::MasterModelConfig* MasterComponentInfo::release_config() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.config)
  clear_has_config();
  ::artm::MasterModelConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void MasterComponentInfo::set_allocated_config(::artm::MasterModelConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.config)
}

// repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
int MasterComponentInfo::regularizer_size() const {
  return regularizer_.size();
}
void MasterComponentInfo::clear_regularizer() {
  regularizer_.Clear();
}
const ::artm::MasterComponentInfo_RegularizerInfo& MasterComponentInfo::regularizer(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.regularizer)
  return regularizer_.Get(index);
}
::artm::MasterComponentInfo_RegularizerInfo* MasterComponentInfo::mutable_regularizer(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.regularizer)
  return regularizer_.Mutable(index);
}
::artm::MasterComponentInfo_RegularizerInfo* MasterComponentInfo::add_regularizer() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.regularizer)
  return regularizer_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo >*
MasterComponentInfo::mutable_regularizer() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.regularizer)
  return &regularizer_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo >&
MasterComponentInfo::regularizer() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.regularizer)
  return regularizer_;
}

// repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
int MasterComponentInfo::score_size() const {
  return score_.size();
}
void MasterComponentInfo::clear_score() {
  score_.Clear();
}
const ::artm::MasterComponentInfo_ScoreInfo& MasterComponentInfo::score(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.score)
  return score_.Get(index);
}
::artm::MasterComponentInfo_ScoreInfo* MasterComponentInfo::mutable_score(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.score)
  return score_.Mutable(index);
}
::artm::MasterComponentInfo_ScoreInfo* MasterComponentInfo::add_score() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.score)
  return score_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo >*
MasterComponentInfo::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.score)
  return &score_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo >&
MasterComponentInfo::score() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.score)
  return score_;
}

// repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
int MasterComponentInfo::dictionary_size() const {
  return dictionary_.size();
}
void MasterComponentInfo::clear_dictionary() {
  dictionary_.Clear();
}
const ::artm::MasterComponentInfo_DictionaryInfo& MasterComponentInfo::dictionary(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.dictionary)
  return dictionary_.Get(index);
}
::artm::MasterComponentInfo_DictionaryInfo* MasterComponentInfo::mutable_dictionary(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.dictionary)
  return dictionary_.Mutable(index);
}
::artm::MasterComponentInfo_DictionaryInfo* MasterComponentInfo::add_dictionary() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.dictionary)
  return dictionary_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo >*
MasterComponentInfo::mutable_dictionary() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.dictionary)
  return &dictionary_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo >&
MasterComponentInfo::dictionary() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.dictionary)
  return dictionary_;
}

// repeated .artm.MasterComponentInfo.ModelInfo model = 6;
int MasterComponentInfo::model_size() const {
  return model_.size();
}
void MasterComponentInfo::clear_model() {
  model_.Clear();
}
const ::artm::MasterComponentInfo_ModelInfo& MasterComponentInfo::model(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.model)
  return model_.Get(index);
}
::artm::MasterComponentInfo_ModelInfo* MasterComponentInfo::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.model)
  return model_.Mutable(index);
}
::artm::MasterComponentInfo_ModelInfo* MasterComponentInfo::add_model() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.model)
  return model_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo >*
MasterComponentInfo::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.model)
  return &model_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo >&
MasterComponentInfo::model() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.model)
  return model_;
}

// repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
int MasterComponentInfo::cache_entry_size() const {
  return cache_entry_.size();
}
void MasterComponentInfo::clear_cache_entry() {
  cache_entry_.Clear();
}
const ::artm::MasterComponentInfo_CacheEntryInfo& MasterComponentInfo::cache_entry(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.cache_entry)
  return cache_entry_.Get(index);
}
::artm::MasterComponentInfo_CacheEntryInfo* MasterComponentInfo::mutable_cache_entry(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.cache_entry)
  return cache_entry_.Mutable(index);
}
::artm::MasterComponentInfo_CacheEntryInfo* MasterComponentInfo::add_cache_entry() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.cache_entry)
  return cache_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo >*
MasterComponentInfo::mutable_cache_entry() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.cache_entry)
  return &cache_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo >&
MasterComponentInfo::cache_entry() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.cache_entry)
  return cache_entry_;
}

// optional int32 processor_queue_size = 9;
bool MasterComponentInfo::has_processor_queue_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MasterComponentInfo::set_has_processor_queue_size() {
  _has_bits_[0] |= 0x00000040u;
}
void MasterComponentInfo::clear_has_processor_queue_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void MasterComponentInfo::clear_processor_queue_size() {
  processor_queue_size_ = 0;
  clear_has_processor_queue_size();
}
 ::google::protobuf::int32 MasterComponentInfo::processor_queue_size() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.processor_queue_size)
  return processor_queue_size_;
}
 void MasterComponentInfo::set_processor_queue_size(::google::protobuf::int32 value) {
  set_has_processor_queue_size();
  processor_queue_size_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.processor_queue_size)
}

// repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
int MasterComponentInfo::batch_size() const {
  return batch_.size();
}
void MasterComponentInfo::clear_batch() {
  batch_.Clear();
}
const ::artm::MasterComponentInfo_BatchInfo& MasterComponentInfo::batch(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.batch)
  return batch_.Get(index);
}
::artm::MasterComponentInfo_BatchInfo* MasterComponentInfo::mutable_batch(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.batch)
  return batch_.Mutable(index);
}
::artm::MasterComponentInfo_BatchInfo* MasterComponentInfo::add_batch() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.batch)
  return batch_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo >*
MasterComponentInfo::mutable_batch() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.batch)
  return &batch_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo >&
MasterComponentInfo::batch() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.batch)
  return batch_;
}

// optional int32 num_processors = 11;
bool MasterComponentInfo::has_num_processors() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MasterComponentInfo::set_has_num_processors() {
  _has_bits_[0] |= 0x00000100u;
}
void MasterComponentInfo::clear_has_num_processors() {
  _has_bits_[0] &= ~0x00000100u;
}
void MasterComponentInfo::clear_num_processors() {
  num_processors_ = 0;
  clear_has_num_processors();
}
 ::google::protobuf::int32 MasterComponentInfo::num_processors() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.num_processors)
  return num_processors_;
}
 void MasterComponentInfo::set_num_processors(::google::protobuf::int32 value) {
  set_has_num_processors();
  num_processors_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.num_processors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportBatchesArgs::kBatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportBatchesArgs::ImportBatchesArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ImportBatchesArgs)
}

void ImportBatchesArgs::InitAsDefaultInstance() {
}

ImportBatchesArgs::ImportBatchesArgs(const ImportBatchesArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ImportBatchesArgs)
}

void ImportBatchesArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportBatchesArgs::~ImportBatchesArgs() {
  // @@protoc_insertion_point(destructor:artm.ImportBatchesArgs)
  SharedDtor();
}

void ImportBatchesArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImportBatchesArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportBatchesArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportBatchesArgs_descriptor_;
}

const ImportBatchesArgs& ImportBatchesArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ImportBatchesArgs* ImportBatchesArgs::default_instance_ = NULL;

ImportBatchesArgs* ImportBatchesArgs::New(::google::protobuf::Arena* arena) const {
  ImportBatchesArgs* n = new ImportBatchesArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportBatchesArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ImportBatchesArgs)
  batch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImportBatchesArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ImportBatchesArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.Batch batch = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_batch;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ImportBatchesArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ImportBatchesArgs)
  return false;
#undef DO_
}

void ImportBatchesArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ImportBatchesArgs)
  // repeated .artm.Batch batch = 3;
  for (unsigned int i = 0, n = this->batch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->batch(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ImportBatchesArgs)
}

::google::protobuf::uint8* ImportBatchesArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ImportBatchesArgs)
  // repeated .artm.Batch batch = 3;
  for (unsigned int i = 0, n = this->batch_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->batch(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ImportBatchesArgs)
  return target;
}

int ImportBatchesArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ImportBatchesArgs)
  int total_size = 0;

  // repeated .artm.Batch batch = 3;
  total_size += 1 * this->batch_size();
  for (int i = 0; i < this->batch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportBatchesArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ImportBatchesArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImportBatchesArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportBatchesArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ImportBatchesArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ImportBatchesArgs)
    MergeFrom(*source);
  }
}

void ImportBatchesArgs::MergeFrom(const ImportBatchesArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ImportBatchesArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  batch_.MergeFrom(from.batch_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImportBatchesArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ImportBatchesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportBatchesArgs::CopyFrom(const ImportBatchesArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ImportBatchesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportBatchesArgs::IsInitialized() const {

  return true;
}

void ImportBatchesArgs::Swap(ImportBatchesArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportBatchesArgs::InternalSwap(ImportBatchesArgs* other) {
  batch_.UnsafeArenaSwap(&other->batch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportBatchesArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportBatchesArgs_descriptor_;
  metadata.reflection = ImportBatchesArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportBatchesArgs

// repeated .artm.Batch batch = 3;
int ImportBatchesArgs::batch_size() const {
  return batch_.size();
}
void ImportBatchesArgs::clear_batch() {
  batch_.Clear();
}
const ::artm::Batch& ImportBatchesArgs::batch(int index) const {
  // @@protoc_insertion_point(field_get:artm.ImportBatchesArgs.batch)
  return batch_.Get(index);
}
::artm::Batch* ImportBatchesArgs::mutable_batch(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ImportBatchesArgs.batch)
  return batch_.Mutable(index);
}
::artm::Batch* ImportBatchesArgs::add_batch() {
  // @@protoc_insertion_point(field_add:artm.ImportBatchesArgs.batch)
  return batch_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::Batch >*
ImportBatchesArgs::mutable_batch() {
  // @@protoc_insertion_point(field_mutable_list:artm.ImportBatchesArgs.batch)
  return &batch_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
ImportBatchesArgs::batch() const {
  // @@protoc_insertion_point(field_list:artm.ImportBatchesArgs.batch)
  return batch_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AwaitOperationArgs::kTimeoutMillisecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AwaitOperationArgs::AwaitOperationArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.AwaitOperationArgs)
}

void AwaitOperationArgs::InitAsDefaultInstance() {
}

AwaitOperationArgs::AwaitOperationArgs(const AwaitOperationArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.AwaitOperationArgs)
}

void AwaitOperationArgs::SharedCtor() {
  _cached_size_ = 0;
  timeout_milliseconds_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AwaitOperationArgs::~AwaitOperationArgs() {
  // @@protoc_insertion_point(destructor:artm.AwaitOperationArgs)
  SharedDtor();
}

void AwaitOperationArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AwaitOperationArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AwaitOperationArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AwaitOperationArgs_descriptor_;
}

const AwaitOperationArgs& AwaitOperationArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

AwaitOperationArgs* AwaitOperationArgs::default_instance_ = NULL;

AwaitOperationArgs* AwaitOperationArgs::New(::google::protobuf::Arena* arena) const {
  AwaitOperationArgs* n = new AwaitOperationArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AwaitOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.AwaitOperationArgs)
  timeout_milliseconds_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AwaitOperationArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.AwaitOperationArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timeout_milliseconds = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_milliseconds_)));
          set_has_timeout_milliseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.AwaitOperationArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.AwaitOperationArgs)
  return false;
#undef DO_
}

void AwaitOperationArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.AwaitOperationArgs)
  // optional int32 timeout_milliseconds = 1 [default = -1];
  if (has_timeout_milliseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timeout_milliseconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.AwaitOperationArgs)
}

::google::protobuf::uint8* AwaitOperationArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.AwaitOperationArgs)
  // optional int32 timeout_milliseconds = 1 [default = -1];
  if (has_timeout_milliseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timeout_milliseconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.AwaitOperationArgs)
  return target;
}

int AwaitOperationArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.AwaitOperationArgs)
  int total_size = 0;

  // optional int32 timeout_milliseconds = 1 [default = -1];
  if (has_timeout_milliseconds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeout_milliseconds());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AwaitOperationArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.AwaitOperationArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AwaitOperationArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AwaitOperationArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.AwaitOperationArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.AwaitOperationArgs)
    MergeFrom(*source);
  }
}

void AwaitOperationArgs::MergeFrom(const AwaitOperationArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.AwaitOperationArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout_milliseconds()) {
      set_timeout_milliseconds(from.timeout_milliseconds());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AwaitOperationArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.AwaitOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwaitOperationArgs::CopyFrom(const AwaitOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.AwaitOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwaitOperationArgs::IsInitialized() const {

  return true;
}

void AwaitOperationArgs::Swap(AwaitOperationArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AwaitOperationArgs::InternalSwap(AwaitOperationArgs* other) {
  std::swap(timeout_milliseconds_, other->timeout_milliseconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AwaitOperationArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AwaitOperationArgs_descriptor_;
  metadata.reflection = AwaitOperationArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AwaitOperationArgs

// optional int32 timeout_milliseconds = 1 [default = -1];
bool AwaitOperationArgs::has_timeout_milliseconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AwaitOperationArgs::set_has_timeout_milliseconds() {
  _has_bits_[0] |= 0x00000001u;
}
void AwaitOperationArgs::clear_has_timeout_milliseconds() {
  _has_bits_[0] &= ~0x00000001u;
}
void AwaitOperationArgs::clear_timeout_milliseconds() {
  timeout_milliseconds_ = -1;
  clear_has_timeout_milliseconds();
}
 ::google::protobuf::int32 AwaitOperationArgs::timeout_milliseconds() const {
  // @@protoc_insertion_point(field_get:artm.AwaitOperationArgs.timeout_milliseconds)
  return timeout_milliseconds_;
}
 void AwaitOperationArgs::set_timeout_milliseconds(::google::protobuf::int32 value) {
  set_has_timeout_milliseconds();
  timeout_milliseconds_ = value;
  // @@protoc_insertion_point(field_set:artm.AwaitOperationArgs.timeout_milliseconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* MasterModelConfig::_default_pwt_name_ = NULL;
::std::string* MasterModelConfig::_default_nwt_name_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterModelConfig::kTopicNameFieldNumber;
const int MasterModelConfig::kClassIdFieldNumber;
const int MasterModelConfig::kClassWeightFieldNumber;
const int MasterModelConfig::kScoreConfigFieldNumber;
const int MasterModelConfig::kRegularizerConfigFieldNumber;
const int MasterModelConfig::kNumProcessorsFieldNumber;
const int MasterModelConfig::kPwtNameFieldNumber;
const int MasterModelConfig::kNwtNameFieldNumber;
const int MasterModelConfig::kNumDocumentPassesFieldNumber;
const int MasterModelConfig::kReuseThetaFieldNumber;
const int MasterModelConfig::kOptForAvxFieldNumber;
const int MasterModelConfig::kDiskCachePathFieldNumber;
const int MasterModelConfig::kCacheThetaFieldNumber;
const int MasterModelConfig::kPtdNameFieldNumber;
const int MasterModelConfig::kTransactionTypenameFieldNumber;
const int MasterModelConfig::kTransactionWeightFieldNumber;
const int MasterModelConfig::kParentMasterModelIdFieldNumber;
const int MasterModelConfig::kParentMasterModelWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterModelConfig::MasterModelConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.MasterModelConfig)
}

void MasterModelConfig::InitAsDefaultInstance() {
}

MasterModelConfig::MasterModelConfig(const MasterModelConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.MasterModelConfig)
}

void MasterModelConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_processors_ = 0;
  pwt_name_.UnsafeSetDefault(_default_pwt_name_);
  nwt_name_.UnsafeSetDefault(_default_nwt_name_);
  num_document_passes_ = 0;
  reuse_theta_ = false;
  opt_for_avx_ = true;
  disk_cache_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cache_theta_ = false;
  ptd_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_master_model_id_ = 0;
  parent_master_model_weight_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterModelConfig::~MasterModelConfig() {
  // @@protoc_insertion_point(destructor:artm.MasterModelConfig)
  SharedDtor();
}

void MasterModelConfig::SharedDtor() {
  pwt_name_.DestroyNoArena(_default_pwt_name_);
  nwt_name_.DestroyNoArena(_default_nwt_name_);
  disk_cache_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptd_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MasterModelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterModelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterModelConfig_descriptor_;
}

const MasterModelConfig& MasterModelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterModelConfig* MasterModelConfig::default_instance_ = NULL;

MasterModelConfig* MasterModelConfig::New(::google::protobuf::Arena* arena) const {
  MasterModelConfig* n = new MasterModelConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterModelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.MasterModelConfig)
  if (_has_bits_[0 / 32] & 224u) {
    num_processors_ = 0;
    if (has_pwt_name()) {
      pwt_name_.ClearToDefaultNoArena(_default_pwt_name_);
    }
    if (has_nwt_name()) {
      nwt_name_.ClearToDefaultNoArena(_default_nwt_name_);
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    num_document_passes_ = 0;
    reuse_theta_ = false;
    opt_for_avx_ = true;
    if (has_disk_cache_path()) {
      disk_cache_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cache_theta_ = false;
    if (has_ptd_name()) {
      ptd_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 196608u) {
    parent_master_model_id_ = 0;
    parent_master_model_weight_ = 1;
  }
  topic_name_.Clear();
  class_id_.Clear();
  class_weight_.Clear();
  score_config_.Clear();
  regularizer_config_.Clear();
  transaction_typename_.Clear();
  transaction_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MasterModelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.MasterModelConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (tag == 10) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterModelConfig.topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (tag == 18) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterModelConfig.class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(29)) goto parse_class_weight;
        break;
      }

      // repeated float class_weight = 3;
      case 3: {
        if (tag == 29) {
         parse_class_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_class_weight())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_class_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_class_weight;
        if (input->ExpectTag(34)) goto parse_score_config;
        break;
      }

      // repeated .artm.ScoreConfig score_config = 4;
      case 4: {
        if (tag == 34) {
         parse_score_config:
          DO_(input->IncrementRecursionDepth());
         parse_loop_score_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_score_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_score_config;
        if (input->ExpectTag(42)) goto parse_loop_regularizer_config;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .artm.RegularizerConfig regularizer_config = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_regularizer_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_regularizer_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_regularizer_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_num_processors;
        break;
      }

      // optional int32 num_processors = 6;
      case 6: {
        if (tag == 48) {
         parse_num_processors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_processors_)));
          set_has_num_processors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pwt_name;
        break;
      }

      // optional string pwt_name = 7 [default = "pwt"];
      case 7: {
        if (tag == 58) {
         parse_pwt_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwt_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwt_name().data(), this->pwt_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterModelConfig.pwt_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_nwt_name;
        break;
      }

      // optional string nwt_name = 8 [default = "nwt"];
      case 8: {
        if (tag == 66) {
         parse_nwt_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwt_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nwt_name().data(), this->nwt_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterModelConfig.nwt_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_document_passes;
        break;
      }

      // optional int32 num_document_passes = 9;
      case 9: {
        if (tag == 72) {
         parse_num_document_passes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_document_passes_)));
          set_has_num_document_passes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reuse_theta;
        break;
      }

      // optional bool reuse_theta = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_reuse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reuse_theta_)));
          set_has_reuse_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_opt_for_avx;
        break;
      }

      // optional bool opt_for_avx = 11 [default = true];
      case 11: {
        if (tag == 88) {
         parse_opt_for_avx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opt_for_avx_)));
          set_has_opt_for_avx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_disk_cache_path;
        break;
      }

      // optional string disk_cache_path = 13;
      case 13: {
        if (tag == 106) {
         parse_disk_cache_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_cache_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->disk_cache_path().data(), this->disk_cache_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterModelConfig.disk_cache_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_cache_theta;
        break;
      }

      // optional bool cache_theta = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_cache_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_theta_)));
          set_has_cache_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_ptd_name;
        break;
      }

      // optional string ptd_name = 16 [default = ""];
      case 16: {
        if (tag == 130) {
         parse_ptd_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ptd_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ptd_name().data(), this->ptd_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterModelConfig.ptd_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_transaction_typename;
        break;
      }

      // repeated string transaction_typename = 17;
      case 17: {
        if (tag == 138) {
         parse_transaction_typename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_transaction_typename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transaction_typename(this->transaction_typename_size() - 1).data(),
            this->transaction_typename(this->transaction_typename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.MasterModelConfig.transaction_typename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_transaction_typename;
        if (input->ExpectTag(149)) goto parse_transaction_weight;
        break;
      }

      // repeated float transaction_weight = 18;
      case 18: {
        if (tag == 149) {
         parse_transaction_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 149, input, this->mutable_transaction_weight())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_transaction_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_transaction_weight;
        if (input->ExpectTag(152)) goto parse_parent_master_model_id;
        break;
      }

      // optional int32 parent_master_model_id = 19;
      case 19: {
        if (tag == 152) {
         parse_parent_master_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_master_model_id_)));
          set_has_parent_master_model_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_parent_master_model_weight;
        break;
      }

      // optional float parent_master_model_weight = 20 [default = 1];
      case 20: {
        if (tag == 165) {
         parse_parent_master_model_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parent_master_model_weight_)));
          set_has_parent_master_model_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.MasterModelConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.MasterModelConfig)
  return false;
#undef DO_
}

void MasterModelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.MasterModelConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.class_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // repeated float class_weight = 3;
  for (int i = 0; i < this->class_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->class_weight(i), output);
  }

  // repeated .artm.ScoreConfig score_config = 4;
  for (unsigned int i = 0, n = this->score_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->score_config(i), output);
  }

  // repeated .artm.RegularizerConfig regularizer_config = 5;
  for (unsigned int i = 0, n = this->regularizer_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->regularizer_config(i), output);
  }

  // optional int32 num_processors = 6;
  if (has_num_processors()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_processors(), output);
  }

  // optional string pwt_name = 7 [default = "pwt"];
  if (has_pwt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwt_name().data(), this->pwt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.pwt_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pwt_name(), output);
  }

  // optional string nwt_name = 8 [default = "nwt"];
  if (has_nwt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_name().data(), this->nwt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.nwt_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->nwt_name(), output);
  }

  // optional int32 num_document_passes = 9;
  if (has_num_document_passes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_document_passes(), output);
  }

  // optional bool reuse_theta = 10 [default = false];
  if (has_reuse_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->reuse_theta(), output);
  }

  // optional bool opt_for_avx = 11 [default = true];
  if (has_opt_for_avx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->opt_for_avx(), output);
  }

  // optional string disk_cache_path = 13;
  if (has_disk_cache_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->disk_cache_path().data(), this->disk_cache_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.disk_cache_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->disk_cache_path(), output);
  }

  // optional bool cache_theta = 15 [default = false];
  if (has_cache_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->cache_theta(), output);
  }

  // optional string ptd_name = 16 [default = ""];
  if (has_ptd_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ptd_name().data(), this->ptd_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.ptd_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->ptd_name(), output);
  }

  // repeated string transaction_typename = 17;
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_typename(i).data(), this->transaction_typename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.transaction_typename");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->transaction_typename(i), output);
  }

  // repeated float transaction_weight = 18;
  for (int i = 0; i < this->transaction_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      18, this->transaction_weight(i), output);
  }

  // optional int32 parent_master_model_id = 19;
  if (has_parent_master_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->parent_master_model_id(), output);
  }

  // optional float parent_master_model_weight = 20 [default = 1];
  if (has_parent_master_model_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->parent_master_model_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.MasterModelConfig)
}

::google::protobuf::uint8* MasterModelConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.MasterModelConfig)
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.topic_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.class_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // repeated float class_weight = 3;
  for (int i = 0; i < this->class_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->class_weight(i), target);
  }

  // repeated .artm.ScoreConfig score_config = 4;
  for (unsigned int i = 0, n = this->score_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->score_config(i), false, target);
  }

  // repeated .artm.RegularizerConfig regularizer_config = 5;
  for (unsigned int i = 0, n = this->regularizer_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->regularizer_config(i), false, target);
  }

  // optional int32 num_processors = 6;
  if (has_num_processors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_processors(), target);
  }

  // optional string pwt_name = 7 [default = "pwt"];
  if (has_pwt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwt_name().data(), this->pwt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.pwt_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pwt_name(), target);
  }

  // optional string nwt_name = 8 [default = "nwt"];
  if (has_nwt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nwt_name().data(), this->nwt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.nwt_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->nwt_name(), target);
  }

  // optional int32 num_document_passes = 9;
  if (has_num_document_passes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_document_passes(), target);
  }

  // optional bool reuse_theta = 10 [default = false];
  if (has_reuse_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->reuse_theta(), target);
  }

  // optional bool opt_for_avx = 11 [default = true];
  if (has_opt_for_avx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->opt_for_avx(), target);
  }

  // optional string disk_cache_path = 13;
  if (has_disk_cache_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->disk_cache_path().data(), this->disk_cache_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.disk_cache_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->disk_cache_path(), target);
  }

  // optional bool cache_theta = 15 [default = false];
  if (has_cache_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->cache_theta(), target);
  }

  // optional string ptd_name = 16 [default = ""];
  if (has_ptd_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ptd_name().data(), this->ptd_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.ptd_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->ptd_name(), target);
  }

  // repeated string transaction_typename = 17;
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_typename(i).data(), this->transaction_typename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.MasterModelConfig.transaction_typename");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->transaction_typename(i), target);
  }

  // repeated float transaction_weight = 18;
  for (int i = 0; i < this->transaction_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(18, this->transaction_weight(i), target);
  }

  // optional int32 parent_master_model_id = 19;
  if (has_parent_master_model_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->parent_master_model_id(), target);
  }

  // optional float parent_master_model_weight = 20 [default = 1];
  if (has_parent_master_model_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->parent_master_model_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.MasterModelConfig)
  return target;
}

int MasterModelConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.MasterModelConfig)
  int total_size = 0;

  if (_has_bits_[5 / 32] & 224u) {
    // optional int32 num_processors = 6;
    if (has_num_processors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_processors());
    }

    // optional string pwt_name = 7 [default = "pwt"];
    if (has_pwt_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwt_name());
    }

    // optional string nwt_name = 8 [default = "nwt"];
    if (has_nwt_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwt_name());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int32 num_document_passes = 9;
    if (has_num_document_passes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_document_passes());
    }

    // optional bool reuse_theta = 10 [default = false];
    if (has_reuse_theta()) {
      total_size += 1 + 1;
    }

    // optional bool opt_for_avx = 11 [default = true];
    if (has_opt_for_avx()) {
      total_size += 1 + 1;
    }

    // optional string disk_cache_path = 13;
    if (has_disk_cache_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_cache_path());
    }

    // optional bool cache_theta = 15 [default = false];
    if (has_cache_theta()) {
      total_size += 1 + 1;
    }

    // optional string ptd_name = 16 [default = ""];
    if (has_ptd_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ptd_name());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int32 parent_master_model_id = 19;
    if (has_parent_master_model_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_master_model_id());
    }

    // optional float parent_master_model_weight = 20 [default = 1];
    if (has_parent_master_model_weight()) {
      total_size += 2 + 4;
    }

  }
  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated float class_weight = 3;
  {
    int data_size = 0;
    data_size = 4 * this->class_weight_size();
    total_size += 1 * this->class_weight_size() + data_size;
  }

  // repeated .artm.ScoreConfig score_config = 4;
  total_size += 1 * this->score_config_size();
  for (int i = 0; i < this->score_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_config(i));
  }

  // repeated .artm.RegularizerConfig regularizer_config = 5;
  total_size += 1 * this->regularizer_config_size();
  for (int i = 0; i < this->regularizer_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regularizer_config(i));
  }

  // repeated string transaction_typename = 17;
  total_size += 2 * this->transaction_typename_size();
  for (int i = 0; i < this->transaction_typename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->transaction_typename(i));
  }

  // repeated float transaction_weight = 18;
  {
    int data_size = 0;
    data_size = 4 * this->transaction_weight_size();
    total_size += 2 * this->transaction_weight_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterModelConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.MasterModelConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MasterModelConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterModelConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.MasterModelConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.MasterModelConfig)
    MergeFrom(*source);
  }
}

void MasterModelConfig::MergeFrom(const MasterModelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.MasterModelConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  topic_name_.MergeFrom(from.topic_name_);
  class_id_.MergeFrom(from.class_id_);
  class_weight_.MergeFrom(from.class_weight_);
  score_config_.MergeFrom(from.score_config_);
  regularizer_config_.MergeFrom(from.regularizer_config_);
  transaction_typename_.MergeFrom(from.transaction_typename_);
  transaction_weight_.MergeFrom(from.transaction_weight_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_num_processors()) {
      set_num_processors(from.num_processors());
    }
    if (from.has_pwt_name()) {
      set_has_pwt_name();
      pwt_name_.AssignWithDefault(_default_pwt_name_, from.pwt_name_);
    }
    if (from.has_nwt_name()) {
      set_has_nwt_name();
      nwt_name_.AssignWithDefault(_default_nwt_name_, from.nwt_name_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_document_passes()) {
      set_num_document_passes(from.num_document_passes());
    }
    if (from.has_reuse_theta()) {
      set_reuse_theta(from.reuse_theta());
    }
    if (from.has_opt_for_avx()) {
      set_opt_for_avx(from.opt_for_avx());
    }
    if (from.has_disk_cache_path()) {
      set_has_disk_cache_path();
      disk_cache_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disk_cache_path_);
    }
    if (from.has_cache_theta()) {
      set_cache_theta(from.cache_theta());
    }
    if (from.has_ptd_name()) {
      set_has_ptd_name();
      ptd_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ptd_name_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_parent_master_model_id()) {
      set_parent_master_model_id(from.parent_master_model_id());
    }
    if (from.has_parent_master_model_weight()) {
      set_parent_master_model_weight(from.parent_master_model_weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MasterModelConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.MasterModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterModelConfig::CopyFrom(const MasterModelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.MasterModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterModelConfig::IsInitialized() const {

  return true;
}

void MasterModelConfig::Swap(MasterModelConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterModelConfig::InternalSwap(MasterModelConfig* other) {
  topic_name_.UnsafeArenaSwap(&other->topic_name_);
  class_id_.UnsafeArenaSwap(&other->class_id_);
  class_weight_.UnsafeArenaSwap(&other->class_weight_);
  score_config_.UnsafeArenaSwap(&other->score_config_);
  regularizer_config_.UnsafeArenaSwap(&other->regularizer_config_);
  std::swap(num_processors_, other->num_processors_);
  pwt_name_.Swap(&other->pwt_name_);
  nwt_name_.Swap(&other->nwt_name_);
  std::swap(num_document_passes_, other->num_document_passes_);
  std::swap(reuse_theta_, other->reuse_theta_);
  std::swap(opt_for_avx_, other->opt_for_avx_);
  disk_cache_path_.Swap(&other->disk_cache_path_);
  std::swap(cache_theta_, other->cache_theta_);
  ptd_name_.Swap(&other->ptd_name_);
  transaction_typename_.UnsafeArenaSwap(&other->transaction_typename_);
  transaction_weight_.UnsafeArenaSwap(&other->transaction_weight_);
  std::swap(parent_master_model_id_, other->parent_master_model_id_);
  std::swap(parent_master_model_weight_, other->parent_master_model_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterModelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterModelConfig_descriptor_;
  metadata.reflection = MasterModelConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MasterModelConfig

// repeated string topic_name = 1;
int MasterModelConfig::topic_name_size() const {
  return topic_name_.size();
}
void MasterModelConfig::clear_topic_name() {
  topic_name_.Clear();
}
 const ::std::string& MasterModelConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.topic_name)
  return topic_name_.Get(index);
}
 ::std::string* MasterModelConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.topic_name)
  return topic_name_.Mutable(index);
}
 void MasterModelConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
 void MasterModelConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.topic_name)
}
 void MasterModelConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.topic_name)
}
 ::std::string* MasterModelConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.MasterModelConfig.topic_name)
  return topic_name_.Add();
}
 void MasterModelConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.topic_name)
}
 void MasterModelConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.MasterModelConfig.topic_name)
}
 void MasterModelConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.MasterModelConfig.topic_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MasterModelConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.topic_name)
  return topic_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MasterModelConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
int MasterModelConfig::class_id_size() const {
  return class_id_.size();
}
void MasterModelConfig::clear_class_id() {
  class_id_.Clear();
}
 const ::std::string& MasterModelConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.class_id)
  return class_id_.Get(index);
}
 ::std::string* MasterModelConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.class_id)
  return class_id_.Mutable(index);
}
 void MasterModelConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
 void MasterModelConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.class_id)
}
 void MasterModelConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.class_id)
}
 ::std::string* MasterModelConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.MasterModelConfig.class_id)
  return class_id_.Add();
}
 void MasterModelConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.class_id)
}
 void MasterModelConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.MasterModelConfig.class_id)
}
 void MasterModelConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.MasterModelConfig.class_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MasterModelConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.class_id)
  return class_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MasterModelConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.class_id)
  return &class_id_;
}

// repeated float class_weight = 3;
int MasterModelConfig::class_weight_size() const {
  return class_weight_.size();
}
void MasterModelConfig::clear_class_weight() {
  class_weight_.Clear();
}
 float MasterModelConfig::class_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.class_weight)
  return class_weight_.Get(index);
}
 void MasterModelConfig::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.class_weight)
}
 void MasterModelConfig::add_class_weight(float value) {
  class_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.class_weight)
}
 const ::google::protobuf::RepeatedField< float >&
MasterModelConfig::class_weight() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.class_weight)
  return class_weight_;
}
 ::google::protobuf::RepeatedField< float >*
MasterModelConfig::mutable_class_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.class_weight)
  return &class_weight_;
}

// repeated .artm.ScoreConfig score_config = 4;
int MasterModelConfig::score_config_size() const {
  return score_config_.size();
}
void MasterModelConfig::clear_score_config() {
  score_config_.Clear();
}
const ::artm::ScoreConfig& MasterModelConfig::score_config(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.score_config)
  return score_config_.Get(index);
}
::artm::ScoreConfig* MasterModelConfig::mutable_score_config(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.score_config)
  return score_config_.Mutable(index);
}
::artm::ScoreConfig* MasterModelConfig::add_score_config() {
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.score_config)
  return score_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig >*
MasterModelConfig::mutable_score_config() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.score_config)
  return &score_config_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig >&
MasterModelConfig::score_config() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.score_config)
  return score_config_;
}

// repeated .artm.RegularizerConfig regularizer_config = 5;
int MasterModelConfig::regularizer_config_size() const {
  return regularizer_config_.size();
}
void MasterModelConfig::clear_regularizer_config() {
  regularizer_config_.Clear();
}
const ::artm::RegularizerConfig& MasterModelConfig::regularizer_config(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.regularizer_config)
  return regularizer_config_.Get(index);
}
::artm::RegularizerConfig* MasterModelConfig::mutable_regularizer_config(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.regularizer_config)
  return regularizer_config_.Mutable(index);
}
::artm::RegularizerConfig* MasterModelConfig::add_regularizer_config() {
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.regularizer_config)
  return regularizer_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig >*
MasterModelConfig::mutable_regularizer_config() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.regularizer_config)
  return &regularizer_config_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig >&
MasterModelConfig::regularizer_config() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.regularizer_config)
  return regularizer_config_;
}

// optional int32 num_processors = 6;
bool MasterModelConfig::has_num_processors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MasterModelConfig::set_has_num_processors() {
  _has_bits_[0] |= 0x00000020u;
}
void MasterModelConfig::clear_has_num_processors() {
  _has_bits_[0] &= ~0x00000020u;
}
void MasterModelConfig::clear_num_processors() {
  num_processors_ = 0;
  clear_has_num_processors();
}
 ::google::protobuf::int32 MasterModelConfig::num_processors() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.num_processors)
  return num_processors_;
}
 void MasterModelConfig::set_num_processors(::google::protobuf::int32 value) {
  set_has_num_processors();
  num_processors_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.num_processors)
}

// optional string pwt_name = 7 [default = "pwt"];
bool MasterModelConfig::has_pwt_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MasterModelConfig::set_has_pwt_name() {
  _has_bits_[0] |= 0x00000040u;
}
void MasterModelConfig::clear_has_pwt_name() {
  _has_bits_[0] &= ~0x00000040u;
}
void MasterModelConfig::clear_pwt_name() {
  pwt_name_.ClearToDefaultNoArena(_default_pwt_name_);
  clear_has_pwt_name();
}
 const ::std::string& MasterModelConfig::pwt_name() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.pwt_name)
  return pwt_name_.GetNoArena(_default_pwt_name_);
}
 void MasterModelConfig::set_pwt_name(const ::std::string& value) {
  set_has_pwt_name();
  pwt_name_.SetNoArena(_default_pwt_name_, value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.pwt_name)
}
 void MasterModelConfig::set_pwt_name(const char* value) {
  set_has_pwt_name();
  pwt_name_.SetNoArena(_default_pwt_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.pwt_name)
}
 void MasterModelConfig::set_pwt_name(const char* value, size_t size) {
  set_has_pwt_name();
  pwt_name_.SetNoArena(_default_pwt_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.pwt_name)
}
 ::std::string* MasterModelConfig::mutable_pwt_name() {
  set_has_pwt_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.pwt_name)
  return pwt_name_.MutableNoArena(_default_pwt_name_);
}
 ::std::string* MasterModelConfig::release_pwt_name() {
  // @@protoc_insertion_point(field_release:artm.MasterModelConfig.pwt_name)
  clear_has_pwt_name();
  return pwt_name_.ReleaseNoArena(_default_pwt_name_);
}
 void MasterModelConfig::set_allocated_pwt_name(::std::string* pwt_name) {
  if (pwt_name != NULL) {
    set_has_pwt_name();
  } else {
    clear_has_pwt_name();
  }
  pwt_name_.SetAllocatedNoArena(_default_pwt_name_, pwt_name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterModelConfig.pwt_name)
}

// optional string nwt_name = 8 [default = "nwt"];
bool MasterModelConfig::has_nwt_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MasterModelConfig::set_has_nwt_name() {
  _has_bits_[0] |= 0x00000080u;
}
void MasterModelConfig::clear_has_nwt_name() {
  _has_bits_[0] &= ~0x00000080u;
}
void MasterModelConfig::clear_nwt_name() {
  nwt_name_.ClearToDefaultNoArena(_default_nwt_name_);
  clear_has_nwt_name();
}
 const ::std::string& MasterModelConfig::nwt_name() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.nwt_name)
  return nwt_name_.GetNoArena(_default_nwt_name_);
}
 void MasterModelConfig::set_nwt_name(const ::std::string& value) {
  set_has_nwt_name();
  nwt_name_.SetNoArena(_default_nwt_name_, value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.nwt_name)
}
 void MasterModelConfig::set_nwt_name(const char* value) {
  set_has_nwt_name();
  nwt_name_.SetNoArena(_default_nwt_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.nwt_name)
}
 void MasterModelConfig::set_nwt_name(const char* value, size_t size) {
  set_has_nwt_name();
  nwt_name_.SetNoArena(_default_nwt_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.nwt_name)
}
 ::std::string* MasterModelConfig::mutable_nwt_name() {
  set_has_nwt_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.nwt_name)
  return nwt_name_.MutableNoArena(_default_nwt_name_);
}
 ::std::string* MasterModelConfig::release_nwt_name() {
  // @@protoc_insertion_point(field_release:artm.MasterModelConfig.nwt_name)
  clear_has_nwt_name();
  return nwt_name_.ReleaseNoArena(_default_nwt_name_);
}
 void MasterModelConfig::set_allocated_nwt_name(::std::string* nwt_name) {
  if (nwt_name != NULL) {
    set_has_nwt_name();
  } else {
    clear_has_nwt_name();
  }
  nwt_name_.SetAllocatedNoArena(_default_nwt_name_, nwt_name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterModelConfig.nwt_name)
}

// optional int32 num_document_passes = 9;
bool MasterModelConfig::has_num_document_passes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MasterModelConfig::set_has_num_document_passes() {
  _has_bits_[0] |= 0x00000100u;
}
void MasterModelConfig::clear_has_num_document_passes() {
  _has_bits_[0] &= ~0x00000100u;
}
void MasterModelConfig::clear_num_document_passes() {
  num_document_passes_ = 0;
  clear_has_num_document_passes();
}
 ::google::protobuf::int32 MasterModelConfig::num_document_passes() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.num_document_passes)
  return num_document_passes_;
}
 void MasterModelConfig::set_num_document_passes(::google::protobuf::int32 value) {
  set_has_num_document_passes();
  num_document_passes_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.num_document_passes)
}

// optional bool reuse_theta = 10 [default = false];
bool MasterModelConfig::has_reuse_theta() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MasterModelConfig::set_has_reuse_theta() {
  _has_bits_[0] |= 0x00000200u;
}
void MasterModelConfig::clear_has_reuse_theta() {
  _has_bits_[0] &= ~0x00000200u;
}
void MasterModelConfig::clear_reuse_theta() {
  reuse_theta_ = false;
  clear_has_reuse_theta();
}
 bool MasterModelConfig::reuse_theta() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.reuse_theta)
  return reuse_theta_;
}
 void MasterModelConfig::set_reuse_theta(bool value) {
  set_has_reuse_theta();
  reuse_theta_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.reuse_theta)
}

// optional bool opt_for_avx = 11 [default = true];
bool MasterModelConfig::has_opt_for_avx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MasterModelConfig::set_has_opt_for_avx() {
  _has_bits_[0] |= 0x00000400u;
}
void MasterModelConfig::clear_has_opt_for_avx() {
  _has_bits_[0] &= ~0x00000400u;
}
void MasterModelConfig::clear_opt_for_avx() {
  opt_for_avx_ = true;
  clear_has_opt_for_avx();
}
 bool MasterModelConfig::opt_for_avx() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.opt_for_avx)
  return opt_for_avx_;
}
 void MasterModelConfig::set_opt_for_avx(bool value) {
  set_has_opt_for_avx();
  opt_for_avx_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.opt_for_avx)
}

// optional string disk_cache_path = 13;
bool MasterModelConfig::has_disk_cache_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MasterModelConfig::set_has_disk_cache_path() {
  _has_bits_[0] |= 0x00000800u;
}
void MasterModelConfig::clear_has_disk_cache_path() {
  _has_bits_[0] &= ~0x00000800u;
}
void MasterModelConfig::clear_disk_cache_path() {
  disk_cache_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_disk_cache_path();
}
 const ::std::string& MasterModelConfig::disk_cache_path() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.disk_cache_path)
  return disk_cache_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterModelConfig::set_disk_cache_path(const ::std::string& value) {
  set_has_disk_cache_path();
  disk_cache_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.disk_cache_path)
}
 void MasterModelConfig::set_disk_cache_path(const char* value) {
  set_has_disk_cache_path();
  disk_cache_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.disk_cache_path)
}
 void MasterModelConfig::set_disk_cache_path(const char* value, size_t size) {
  set_has_disk_cache_path();
  disk_cache_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.disk_cache_path)
}
 ::std::string* MasterModelConfig::mutable_disk_cache_path() {
  set_has_disk_cache_path();
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.disk_cache_path)
  return disk_cache_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterModelConfig::release_disk_cache_path() {
  // @@protoc_insertion_point(field_release:artm.MasterModelConfig.disk_cache_path)
  clear_has_disk_cache_path();
  return disk_cache_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterModelConfig::set_allocated_disk_cache_path(::std::string* disk_cache_path) {
  if (disk_cache_path != NULL) {
    set_has_disk_cache_path();
  } else {
    clear_has_disk_cache_path();
  }
  disk_cache_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disk_cache_path);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterModelConfig.disk_cache_path)
}

// optional bool cache_theta = 15 [default = false];
bool MasterModelConfig::has_cache_theta() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MasterModelConfig::set_has_cache_theta() {
  _has_bits_[0] |= 0x00001000u;
}
void MasterModelConfig::clear_has_cache_theta() {
  _has_bits_[0] &= ~0x00001000u;
}
void MasterModelConfig::clear_cache_theta() {
  cache_theta_ = false;
  clear_has_cache_theta();
}
 bool MasterModelConfig::cache_theta() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.cache_theta)
  return cache_theta_;
}
 void MasterModelConfig::set_cache_theta(bool value) {
  set_has_cache_theta();
  cache_theta_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.cache_theta)
}

// optional string ptd_name = 16 [default = ""];
bool MasterModelConfig::has_ptd_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MasterModelConfig::set_has_ptd_name() {
  _has_bits_[0] |= 0x00002000u;
}
void MasterModelConfig::clear_has_ptd_name() {
  _has_bits_[0] &= ~0x00002000u;
}
void MasterModelConfig::clear_ptd_name() {
  ptd_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ptd_name();
}
 const ::std::string& MasterModelConfig::ptd_name() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.ptd_name)
  return ptd_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterModelConfig::set_ptd_name(const ::std::string& value) {
  set_has_ptd_name();
  ptd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.ptd_name)
}
 void MasterModelConfig::set_ptd_name(const char* value) {
  set_has_ptd_name();
  ptd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.ptd_name)
}
 void MasterModelConfig::set_ptd_name(const char* value, size_t size) {
  set_has_ptd_name();
  ptd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.ptd_name)
}
 ::std::string* MasterModelConfig::mutable_ptd_name() {
  set_has_ptd_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.ptd_name)
  return ptd_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MasterModelConfig::release_ptd_name() {
  // @@protoc_insertion_point(field_release:artm.MasterModelConfig.ptd_name)
  clear_has_ptd_name();
  return ptd_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MasterModelConfig::set_allocated_ptd_name(::std::string* ptd_name) {
  if (ptd_name != NULL) {
    set_has_ptd_name();
  } else {
    clear_has_ptd_name();
  }
  ptd_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ptd_name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterModelConfig.ptd_name)
}

// repeated string transaction_typename = 17;
int MasterModelConfig::transaction_typename_size() const {
  return transaction_typename_.size();
}
void MasterModelConfig::clear_transaction_typename() {
  transaction_typename_.Clear();
}
 const ::std::string& MasterModelConfig::transaction_typename(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.transaction_typename)
  return transaction_typename_.Get(index);
}
 ::std::string* MasterModelConfig::mutable_transaction_typename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.transaction_typename)
  return transaction_typename_.Mutable(index);
}
 void MasterModelConfig::set_transaction_typename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.transaction_typename)
  transaction_typename_.Mutable(index)->assign(value);
}
 void MasterModelConfig::set_transaction_typename(int index, const char* value) {
  transaction_typename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.transaction_typename)
}
 void MasterModelConfig::set_transaction_typename(int index, const char* value, size_t size) {
  transaction_typename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.transaction_typename)
}
 ::std::string* MasterModelConfig::add_transaction_typename() {
  // @@protoc_insertion_point(field_add_mutable:artm.MasterModelConfig.transaction_typename)
  return transaction_typename_.Add();
}
 void MasterModelConfig::add_transaction_typename(const ::std::string& value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.transaction_typename)
}
 void MasterModelConfig::add_transaction_typename(const char* value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.MasterModelConfig.transaction_typename)
}
 void MasterModelConfig::add_transaction_typename(const char* value, size_t size) {
  transaction_typename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.MasterModelConfig.transaction_typename)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MasterModelConfig::transaction_typename() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.transaction_typename)
  return transaction_typename_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MasterModelConfig::mutable_transaction_typename() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.transaction_typename)
  return &transaction_typename_;
}

// repeated float transaction_weight = 18;
int MasterModelConfig::transaction_weight_size() const {
  return transaction_weight_.size();
}
void MasterModelConfig::clear_transaction_weight() {
  transaction_weight_.Clear();
}
 float MasterModelConfig::transaction_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.transaction_weight)
  return transaction_weight_.Get(index);
}
 void MasterModelConfig::set_transaction_weight(int index, float value) {
  transaction_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.transaction_weight)
}
 void MasterModelConfig::add_transaction_weight(float value) {
  transaction_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.transaction_weight)
}
 const ::google::protobuf::RepeatedField< float >&
MasterModelConfig::transaction_weight() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.transaction_weight)
  return transaction_weight_;
}
 ::google::protobuf::RepeatedField< float >*
MasterModelConfig::mutable_transaction_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.transaction_weight)
  return &transaction_weight_;
}

// optional int32 parent_master_model_id = 19;
bool MasterModelConfig::has_parent_master_model_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void MasterModelConfig::set_has_parent_master_model_id() {
  _has_bits_[0] |= 0x00010000u;
}
void MasterModelConfig::clear_has_parent_master_model_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void MasterModelConfig::clear_parent_master_model_id() {
  parent_master_model_id_ = 0;
  clear_has_parent_master_model_id();
}
 ::google::protobuf::int32 MasterModelConfig::parent_master_model_id() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.parent_master_model_id)
  return parent_master_model_id_;
}
 void MasterModelConfig::set_parent_master_model_id(::google::protobuf::int32 value) {
  set_has_parent_master_model_id();
  parent_master_model_id_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.parent_master_model_id)
}

// optional float parent_master_model_weight = 20 [default = 1];
bool MasterModelConfig::has_parent_master_model_weight() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void MasterModelConfig::set_has_parent_master_model_weight() {
  _has_bits_[0] |= 0x00020000u;
}
void MasterModelConfig::clear_has_parent_master_model_weight() {
  _has_bits_[0] &= ~0x00020000u;
}
void MasterModelConfig::clear_parent_master_model_weight() {
  parent_master_model_weight_ = 1;
  clear_has_parent_master_model_weight();
}
 float MasterModelConfig::parent_master_model_weight() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.parent_master_model_weight)
  return parent_master_model_weight_;
}
 void MasterModelConfig::set_parent_master_model_weight(float value) {
  set_has_parent_master_model_weight();
  parent_master_model_weight_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.parent_master_model_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FitOfflineMasterModelArgs::kBatchFilenameFieldNumber;
const int FitOfflineMasterModelArgs::kBatchWeightFieldNumber;
const int FitOfflineMasterModelArgs::kNumCollectionPassesFieldNumber;
const int FitOfflineMasterModelArgs::kBatchFolderFieldNumber;
const int FitOfflineMasterModelArgs::kResetNwtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FitOfflineMasterModelArgs::FitOfflineMasterModelArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.FitOfflineMasterModelArgs)
}

void FitOfflineMasterModelArgs::InitAsDefaultInstance() {
}

FitOfflineMasterModelArgs::FitOfflineMasterModelArgs(const FitOfflineMasterModelArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.FitOfflineMasterModelArgs)
}

void FitOfflineMasterModelArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_collection_passes_ = 1;
  batch_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reset_nwt_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FitOfflineMasterModelArgs::~FitOfflineMasterModelArgs() {
  // @@protoc_insertion_point(destructor:artm.FitOfflineMasterModelArgs)
  SharedDtor();
}

void FitOfflineMasterModelArgs::SharedDtor() {
  batch_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FitOfflineMasterModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FitOfflineMasterModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FitOfflineMasterModelArgs_descriptor_;
}

const FitOfflineMasterModelArgs& FitOfflineMasterModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

FitOfflineMasterModelArgs* FitOfflineMasterModelArgs::default_instance_ = NULL;

FitOfflineMasterModelArgs* FitOfflineMasterModelArgs::New(::google::protobuf::Arena* arena) const {
  FitOfflineMasterModelArgs* n = new FitOfflineMasterModelArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FitOfflineMasterModelArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.FitOfflineMasterModelArgs)
  if (_has_bits_[0 / 32] & 28u) {
    num_collection_passes_ = 1;
    if (has_batch_folder()) {
      batch_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    reset_nwt_ = true;
  }
  batch_filename_.Clear();
  batch_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FitOfflineMasterModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.FitOfflineMasterModelArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string batch_filename = 1;
      case 1: {
        if (tag == 10) {
         parse_batch_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->batch_filename(this->batch_filename_size() - 1).data(),
            this->batch_filename(this->batch_filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.FitOfflineMasterModelArgs.batch_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_batch_filename;
        if (input->ExpectTag(21)) goto parse_batch_weight;
        break;
      }

      // repeated float batch_weight = 2;
      case 2: {
        if (tag == 21) {
         parse_batch_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_batch_weight())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_batch_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_batch_weight;
        if (input->ExpectTag(24)) goto parse_num_collection_passes;
        break;
      }

      // optional int32 num_collection_passes = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_num_collection_passes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_collection_passes_)));
          set_has_num_collection_passes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_batch_folder;
        break;
      }

      // optional string batch_folder = 4;
      case 4: {
        if (tag == 34) {
         parse_batch_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->batch_folder().data(), this->batch_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.FitOfflineMasterModelArgs.batch_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reset_nwt;
        break;
      }

      // optional bool reset_nwt = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_reset_nwt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_nwt_)));
          set_has_reset_nwt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.FitOfflineMasterModelArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.FitOfflineMasterModelArgs)
  return false;
#undef DO_
}

void FitOfflineMasterModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.FitOfflineMasterModelArgs)
  // repeated string batch_filename = 1;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FitOfflineMasterModelArgs.batch_filename");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->batch_filename(i), output);
  }

  // repeated float batch_weight = 2;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->batch_weight(i), output);
  }

  // optional int32 num_collection_passes = 3 [default = 1];
  if (has_num_collection_passes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_collection_passes(), output);
  }

  // optional string batch_folder = 4;
  if (has_batch_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_folder().data(), this->batch_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FitOfflineMasterModelArgs.batch_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->batch_folder(), output);
  }

  // optional bool reset_nwt = 5 [default = true];
  if (has_reset_nwt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->reset_nwt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.FitOfflineMasterModelArgs)
}

::google::protobuf::uint8* FitOfflineMasterModelArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.FitOfflineMasterModelArgs)
  // repeated string batch_filename = 1;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FitOfflineMasterModelArgs.batch_filename");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->batch_filename(i), target);
  }

  // repeated float batch_weight = 2;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->batch_weight(i), target);
  }

  // optional int32 num_collection_passes = 3 [default = 1];
  if (has_num_collection_passes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_collection_passes(), target);
  }

  // optional string batch_folder = 4;
  if (has_batch_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_folder().data(), this->batch_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FitOfflineMasterModelArgs.batch_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->batch_folder(), target);
  }

  // optional bool reset_nwt = 5 [default = true];
  if (has_reset_nwt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->reset_nwt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.FitOfflineMasterModelArgs)
  return target;
}

int FitOfflineMasterModelArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.FitOfflineMasterModelArgs)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 28u) {
    // optional int32 num_collection_passes = 3 [default = 1];
    if (has_num_collection_passes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_collection_passes());
    }

    // optional string batch_folder = 4;
    if (has_batch_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->batch_folder());
    }

    // optional bool reset_nwt = 5 [default = true];
    if (has_reset_nwt()) {
      total_size += 1 + 1;
    }

  }
  // repeated string batch_filename = 1;
  total_size += 1 * this->batch_filename_size();
  for (int i = 0; i < this->batch_filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_filename(i));
  }

  // repeated float batch_weight = 2;
  {
    int data_size = 0;
    data_size = 4 * this->batch_weight_size();
    total_size += 1 * this->batch_weight_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FitOfflineMasterModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.FitOfflineMasterModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FitOfflineMasterModelArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FitOfflineMasterModelArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.FitOfflineMasterModelArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.FitOfflineMasterModelArgs)
    MergeFrom(*source);
  }
}

void FitOfflineMasterModelArgs::MergeFrom(const FitOfflineMasterModelArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.FitOfflineMasterModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  batch_filename_.MergeFrom(from.batch_filename_);
  batch_weight_.MergeFrom(from.batch_weight_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_num_collection_passes()) {
      set_num_collection_passes(from.num_collection_passes());
    }
    if (from.has_batch_folder()) {
      set_has_batch_folder();
      batch_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.batch_folder_);
    }
    if (from.has_reset_nwt()) {
      set_reset_nwt(from.reset_nwt());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FitOfflineMasterModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.FitOfflineMasterModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FitOfflineMasterModelArgs::CopyFrom(const FitOfflineMasterModelArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.FitOfflineMasterModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitOfflineMasterModelArgs::IsInitialized() const {

  return true;
}

void FitOfflineMasterModelArgs::Swap(FitOfflineMasterModelArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FitOfflineMasterModelArgs::InternalSwap(FitOfflineMasterModelArgs* other) {
  batch_filename_.UnsafeArenaSwap(&other->batch_filename_);
  batch_weight_.UnsafeArenaSwap(&other->batch_weight_);
  std::swap(num_collection_passes_, other->num_collection_passes_);
  batch_folder_.Swap(&other->batch_folder_);
  std::swap(reset_nwt_, other->reset_nwt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FitOfflineMasterModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FitOfflineMasterModelArgs_descriptor_;
  metadata.reflection = FitOfflineMasterModelArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FitOfflineMasterModelArgs

// repeated string batch_filename = 1;
int FitOfflineMasterModelArgs::batch_filename_size() const {
  return batch_filename_.size();
}
void FitOfflineMasterModelArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
 const ::std::string& FitOfflineMasterModelArgs::batch_filename(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOfflineMasterModelArgs.batch_filename)
  return batch_filename_.Get(index);
}
 ::std::string* FitOfflineMasterModelArgs::mutable_batch_filename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.FitOfflineMasterModelArgs.batch_filename)
  return batch_filename_.Mutable(index);
}
 void FitOfflineMasterModelArgs::set_batch_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.FitOfflineMasterModelArgs.batch_filename)
  batch_filename_.Mutable(index)->assign(value);
}
 void FitOfflineMasterModelArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.FitOfflineMasterModelArgs.batch_filename)
}
 void FitOfflineMasterModelArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.FitOfflineMasterModelArgs.batch_filename)
}
 ::std::string* FitOfflineMasterModelArgs::add_batch_filename() {
  // @@protoc_insertion_point(field_add_mutable:artm.FitOfflineMasterModelArgs.batch_filename)
  return batch_filename_.Add();
}
 void FitOfflineMasterModelArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.FitOfflineMasterModelArgs.batch_filename)
}
 void FitOfflineMasterModelArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.FitOfflineMasterModelArgs.batch_filename)
}
 void FitOfflineMasterModelArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.FitOfflineMasterModelArgs.batch_filename)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
FitOfflineMasterModelArgs::batch_filename() const {
  // @@protoc_insertion_point(field_list:artm.FitOfflineMasterModelArgs.batch_filename)
  return batch_filename_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
FitOfflineMasterModelArgs::mutable_batch_filename() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOfflineMasterModelArgs.batch_filename)
  return &batch_filename_;
}

// repeated float batch_weight = 2;
int FitOfflineMasterModelArgs::batch_weight_size() const {
  return batch_weight_.size();
}
void FitOfflineMasterModelArgs::clear_batch_weight() {
  batch_weight_.Clear();
}
 float FitOfflineMasterModelArgs::batch_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOfflineMasterModelArgs.batch_weight)
  return batch_weight_.Get(index);
}
 void FitOfflineMasterModelArgs::set_batch_weight(int index, float value) {
  batch_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FitOfflineMasterModelArgs.batch_weight)
}
 void FitOfflineMasterModelArgs::add_batch_weight(float value) {
  batch_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FitOfflineMasterModelArgs.batch_weight)
}
 const ::google::protobuf::RepeatedField< float >&
FitOfflineMasterModelArgs::batch_weight() const {
  // @@protoc_insertion_point(field_list:artm.FitOfflineMasterModelArgs.batch_weight)
  return batch_weight_;
}
 ::google::protobuf::RepeatedField< float >*
FitOfflineMasterModelArgs::mutable_batch_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOfflineMasterModelArgs.batch_weight)
  return &batch_weight_;
}

// optional int32 num_collection_passes = 3 [default = 1];
bool FitOfflineMasterModelArgs::has_num_collection_passes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FitOfflineMasterModelArgs::set_has_num_collection_passes() {
  _has_bits_[0] |= 0x00000004u;
}
void FitOfflineMasterModelArgs::clear_has_num_collection_passes() {
  _has_bits_[0] &= ~0x00000004u;
}
void FitOfflineMasterModelArgs::clear_num_collection_passes() {
  num_collection_passes_ = 1;
  clear_has_num_collection_passes();
}
 ::google::protobuf::int32 FitOfflineMasterModelArgs::num_collection_passes() const {
  // @@protoc_insertion_point(field_get:artm.FitOfflineMasterModelArgs.num_collection_passes)
  return num_collection_passes_;
}
 void FitOfflineMasterModelArgs::set_num_collection_passes(::google::protobuf::int32 value) {
  set_has_num_collection_passes();
  num_collection_passes_ = value;
  // @@protoc_insertion_point(field_set:artm.FitOfflineMasterModelArgs.num_collection_passes)
}

// optional string batch_folder = 4;
bool FitOfflineMasterModelArgs::has_batch_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FitOfflineMasterModelArgs::set_has_batch_folder() {
  _has_bits_[0] |= 0x00000008u;
}
void FitOfflineMasterModelArgs::clear_has_batch_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
void FitOfflineMasterModelArgs::clear_batch_folder() {
  batch_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_batch_folder();
}
 const ::std::string& FitOfflineMasterModelArgs::batch_folder() const {
  // @@protoc_insertion_point(field_get:artm.FitOfflineMasterModelArgs.batch_folder)
  return batch_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FitOfflineMasterModelArgs::set_batch_folder(const ::std::string& value) {
  set_has_batch_folder();
  batch_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.FitOfflineMasterModelArgs.batch_folder)
}
 void FitOfflineMasterModelArgs::set_batch_folder(const char* value) {
  set_has_batch_folder();
  batch_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.FitOfflineMasterModelArgs.batch_folder)
}
 void FitOfflineMasterModelArgs::set_batch_folder(const char* value, size_t size) {
  set_has_batch_folder();
  batch_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.FitOfflineMasterModelArgs.batch_folder)
}
 ::std::string* FitOfflineMasterModelArgs::mutable_batch_folder() {
  set_has_batch_folder();
  // @@protoc_insertion_point(field_mutable:artm.FitOfflineMasterModelArgs.batch_folder)
  return batch_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FitOfflineMasterModelArgs::release_batch_folder() {
  // @@protoc_insertion_point(field_release:artm.FitOfflineMasterModelArgs.batch_folder)
  clear_has_batch_folder();
  return batch_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FitOfflineMasterModelArgs::set_allocated_batch_folder(::std::string* batch_folder) {
  if (batch_folder != NULL) {
    set_has_batch_folder();
  } else {
    clear_has_batch_folder();
  }
  batch_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), batch_folder);
  // @@protoc_insertion_point(field_set_allocated:artm.FitOfflineMasterModelArgs.batch_folder)
}

// optional bool reset_nwt = 5 [default = true];
bool FitOfflineMasterModelArgs::has_reset_nwt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FitOfflineMasterModelArgs::set_has_reset_nwt() {
  _has_bits_[0] |= 0x00000010u;
}
void FitOfflineMasterModelArgs::clear_has_reset_nwt() {
  _has_bits_[0] &= ~0x00000010u;
}
void FitOfflineMasterModelArgs::clear_reset_nwt() {
  reset_nwt_ = true;
  clear_has_reset_nwt();
}
 bool FitOfflineMasterModelArgs::reset_nwt() const {
  // @@protoc_insertion_point(field_get:artm.FitOfflineMasterModelArgs.reset_nwt)
  return reset_nwt_;
}
 void FitOfflineMasterModelArgs::set_reset_nwt(bool value) {
  set_has_reset_nwt();
  reset_nwt_ = value;
  // @@protoc_insertion_point(field_set:artm.FitOfflineMasterModelArgs.reset_nwt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FitOnlineMasterModelArgs::kBatchFilenameFieldNumber;
const int FitOnlineMasterModelArgs::kBatchWeightFieldNumber;
const int FitOnlineMasterModelArgs::kUpdateAfterFieldNumber;
const int FitOnlineMasterModelArgs::kApplyWeightFieldNumber;
const int FitOnlineMasterModelArgs::kDecayWeightFieldNumber;
const int FitOnlineMasterModelArgs::kAsynchronousFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FitOnlineMasterModelArgs::FitOnlineMasterModelArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.FitOnlineMasterModelArgs)
}

void FitOnlineMasterModelArgs::InitAsDefaultInstance() {
}

FitOnlineMasterModelArgs::FitOnlineMasterModelArgs(const FitOnlineMasterModelArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.FitOnlineMasterModelArgs)
}

void FitOnlineMasterModelArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  asynchronous_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FitOnlineMasterModelArgs::~FitOnlineMasterModelArgs() {
  // @@protoc_insertion_point(destructor:artm.FitOnlineMasterModelArgs)
  SharedDtor();
}

void FitOnlineMasterModelArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FitOnlineMasterModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FitOnlineMasterModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FitOnlineMasterModelArgs_descriptor_;
}

const FitOnlineMasterModelArgs& FitOnlineMasterModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

FitOnlineMasterModelArgs* FitOnlineMasterModelArgs::default_instance_ = NULL;

FitOnlineMasterModelArgs* FitOnlineMasterModelArgs::New(::google::protobuf::Arena* arena) const {
  FitOnlineMasterModelArgs* n = new FitOnlineMasterModelArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FitOnlineMasterModelArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.FitOnlineMasterModelArgs)
  asynchronous_ = false;
  batch_filename_.Clear();
  batch_weight_.Clear();
  update_after_.Clear();
  apply_weight_.Clear();
  decay_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FitOnlineMasterModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.FitOnlineMasterModelArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string batch_filename = 1;
      case 1: {
        if (tag == 10) {
         parse_batch_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->batch_filename(this->batch_filename_size() - 1).data(),
            this->batch_filename(this->batch_filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.FitOnlineMasterModelArgs.batch_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_batch_filename;
        if (input->ExpectTag(21)) goto parse_batch_weight;
        break;
      }

      // repeated float batch_weight = 2;
      case 2: {
        if (tag == 21) {
         parse_batch_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_batch_weight())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_batch_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_batch_weight;
        if (input->ExpectTag(24)) goto parse_update_after;
        break;
      }

      // repeated int32 update_after = 3;
      case 3: {
        if (tag == 24) {
         parse_update_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_update_after())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_update_after())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_after;
        if (input->ExpectTag(37)) goto parse_apply_weight;
        break;
      }

      // repeated float apply_weight = 4;
      case 4: {
        if (tag == 37) {
         parse_apply_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_apply_weight())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_apply_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_apply_weight;
        if (input->ExpectTag(45)) goto parse_decay_weight;
        break;
      }

      // repeated float decay_weight = 5;
      case 5: {
        if (tag == 45) {
         parse_decay_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_decay_weight())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_decay_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_decay_weight;
        if (input->ExpectTag(48)) goto parse_asynchronous;
        break;
      }

      // optional bool asynchronous = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_asynchronous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &asynchronous_)));
          set_has_asynchronous();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.FitOnlineMasterModelArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.FitOnlineMasterModelArgs)
  return false;
#undef DO_
}

void FitOnlineMasterModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.FitOnlineMasterModelArgs)
  // repeated string batch_filename = 1;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FitOnlineMasterModelArgs.batch_filename");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->batch_filename(i), output);
  }

  // repeated float batch_weight = 2;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->batch_weight(i), output);
  }

  // repeated int32 update_after = 3;
  for (int i = 0; i < this->update_after_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->update_after(i), output);
  }

  // repeated float apply_weight = 4;
  for (int i = 0; i < this->apply_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->apply_weight(i), output);
  }

  // repeated float decay_weight = 5;
  for (int i = 0; i < this->decay_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->decay_weight(i), output);
  }

  // optional bool asynchronous = 6 [default = false];
  if (has_asynchronous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->asynchronous(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.FitOnlineMasterModelArgs)
}

::google::protobuf::uint8* FitOnlineMasterModelArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.FitOnlineMasterModelArgs)
  // repeated string batch_filename = 1;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.FitOnlineMasterModelArgs.batch_filename");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->batch_filename(i), target);
  }

  // repeated float batch_weight = 2;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->batch_weight(i), target);
  }

  // repeated int32 update_after = 3;
  for (int i = 0; i < this->update_after_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->update_after(i), target);
  }

  // repeated float apply_weight = 4;
  for (int i = 0; i < this->apply_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->apply_weight(i), target);
  }

  // repeated float decay_weight = 5;
  for (int i = 0; i < this->decay_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->decay_weight(i), target);
  }

  // optional bool asynchronous = 6 [default = false];
  if (has_asynchronous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->asynchronous(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.FitOnlineMasterModelArgs)
  return target;
}

int FitOnlineMasterModelArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.FitOnlineMasterModelArgs)
  int total_size = 0;

  // optional bool asynchronous = 6 [default = false];
  if (has_asynchronous()) {
    total_size += 1 + 1;
  }

  // repeated string batch_filename = 1;
  total_size += 1 * this->batch_filename_size();
  for (int i = 0; i < this->batch_filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_filename(i));
  }

  // repeated float batch_weight = 2;
  {
    int data_size = 0;
    data_size = 4 * this->batch_weight_size();
    total_size += 1 * this->batch_weight_size() + data_size;
  }

  // repeated int32 update_after = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->update_after_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->update_after(i));
    }
    total_size += 1 * this->update_after_size() + data_size;
  }

  // repeated float apply_weight = 4;
  {
    int data_size = 0;
    data_size = 4 * this->apply_weight_size();
    total_size += 1 * this->apply_weight_size() + data_size;
  }

  // repeated float decay_weight = 5;
  {
    int data_size = 0;
    data_size = 4 * this->decay_weight_size();
    total_size += 1 * this->decay_weight_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FitOnlineMasterModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.FitOnlineMasterModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FitOnlineMasterModelArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FitOnlineMasterModelArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.FitOnlineMasterModelArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.FitOnlineMasterModelArgs)
    MergeFrom(*source);
  }
}

void FitOnlineMasterModelArgs::MergeFrom(const FitOnlineMasterModelArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.FitOnlineMasterModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  batch_filename_.MergeFrom(from.batch_filename_);
  batch_weight_.MergeFrom(from.batch_weight_);
  update_after_.MergeFrom(from.update_after_);
  apply_weight_.MergeFrom(from.apply_weight_);
  decay_weight_.MergeFrom(from.decay_weight_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_asynchronous()) {
      set_asynchronous(from.asynchronous());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FitOnlineMasterModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.FitOnlineMasterModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FitOnlineMasterModelArgs::CopyFrom(const FitOnlineMasterModelArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.FitOnlineMasterModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitOnlineMasterModelArgs::IsInitialized() const {

  return true;
}

void FitOnlineMasterModelArgs::Swap(FitOnlineMasterModelArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FitOnlineMasterModelArgs::InternalSwap(FitOnlineMasterModelArgs* other) {
  batch_filename_.UnsafeArenaSwap(&other->batch_filename_);
  batch_weight_.UnsafeArenaSwap(&other->batch_weight_);
  update_after_.UnsafeArenaSwap(&other->update_after_);
  apply_weight_.UnsafeArenaSwap(&other->apply_weight_);
  decay_weight_.UnsafeArenaSwap(&other->decay_weight_);
  std::swap(asynchronous_, other->asynchronous_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FitOnlineMasterModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FitOnlineMasterModelArgs_descriptor_;
  metadata.reflection = FitOnlineMasterModelArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FitOnlineMasterModelArgs

// repeated string batch_filename = 1;
int FitOnlineMasterModelArgs::batch_filename_size() const {
  return batch_filename_.size();
}
void FitOnlineMasterModelArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
 const ::std::string& FitOnlineMasterModelArgs::batch_filename(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.batch_filename)
  return batch_filename_.Get(index);
}
 ::std::string* FitOnlineMasterModelArgs::mutable_batch_filename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.FitOnlineMasterModelArgs.batch_filename)
  return batch_filename_.Mutable(index);
}
 void FitOnlineMasterModelArgs::set_batch_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.batch_filename)
  batch_filename_.Mutable(index)->assign(value);
}
 void FitOnlineMasterModelArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.FitOnlineMasterModelArgs.batch_filename)
}
 void FitOnlineMasterModelArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.FitOnlineMasterModelArgs.batch_filename)
}
 ::std::string* FitOnlineMasterModelArgs::add_batch_filename() {
  // @@protoc_insertion_point(field_add_mutable:artm.FitOnlineMasterModelArgs.batch_filename)
  return batch_filename_.Add();
}
 void FitOnlineMasterModelArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.FitOnlineMasterModelArgs.batch_filename)
}
 void FitOnlineMasterModelArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.FitOnlineMasterModelArgs.batch_filename)
}
 void FitOnlineMasterModelArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.FitOnlineMasterModelArgs.batch_filename)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
FitOnlineMasterModelArgs::batch_filename() const {
  // @@protoc_insertion_point(field_list:artm.FitOnlineMasterModelArgs.batch_filename)
  return batch_filename_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
FitOnlineMasterModelArgs::mutable_batch_filename() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOnlineMasterModelArgs.batch_filename)
  return &batch_filename_;
}

// repeated float batch_weight = 2;
int FitOnlineMasterModelArgs::batch_weight_size() const {
  return batch_weight_.size();
}
void FitOnlineMasterModelArgs::clear_batch_weight() {
  batch_weight_.Clear();
}
 float FitOnlineMasterModelArgs::batch_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.batch_weight)
  return batch_weight_.Get(index);
}
 void FitOnlineMasterModelArgs::set_batch_weight(int index, float value) {
  batch_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.batch_weight)
}
 void FitOnlineMasterModelArgs::add_batch_weight(float value) {
  batch_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FitOnlineMasterModelArgs.batch_weight)
}
 const ::google::protobuf::RepeatedField< float >&
FitOnlineMasterModelArgs::batch_weight() const {
  // @@protoc_insertion_point(field_list:artm.FitOnlineMasterModelArgs.batch_weight)
  return batch_weight_;
}
 ::google::protobuf::RepeatedField< float >*
FitOnlineMasterModelArgs::mutable_batch_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOnlineMasterModelArgs.batch_weight)
  return &batch_weight_;
}

// repeated int32 update_after = 3;
int FitOnlineMasterModelArgs::update_after_size() const {
  return update_after_.size();
}
void FitOnlineMasterModelArgs::clear_update_after() {
  update_after_.Clear();
}
 ::google::protobuf::int32 FitOnlineMasterModelArgs::update_after(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.update_after)
  return update_after_.Get(index);
}
 void FitOnlineMasterModelArgs::set_update_after(int index, ::google::protobuf::int32 value) {
  update_after_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.update_after)
}
 void FitOnlineMasterModelArgs::add_update_after(::google::protobuf::int32 value) {
  update_after_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FitOnlineMasterModelArgs.update_after)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FitOnlineMasterModelArgs::update_after() const {
  // @@protoc_insertion_point(field_list:artm.FitOnlineMasterModelArgs.update_after)
  return update_after_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FitOnlineMasterModelArgs::mutable_update_after() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOnlineMasterModelArgs.update_after)
  return &update_after_;
}

// repeated float apply_weight = 4;
int FitOnlineMasterModelArgs::apply_weight_size() const {
  return apply_weight_.size();
}
void FitOnlineMasterModelArgs::clear_apply_weight() {
  apply_weight_.Clear();
}
 float FitOnlineMasterModelArgs::apply_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.apply_weight)
  return apply_weight_.Get(index);
}
 void FitOnlineMasterModelArgs::set_apply_weight(int index, float value) {
  apply_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.apply_weight)
}
 void FitOnlineMasterModelArgs::add_apply_weight(float value) {
  apply_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FitOnlineMasterModelArgs.apply_weight)
}
 const ::google::protobuf::RepeatedField< float >&
FitOnlineMasterModelArgs::apply_weight() const {
  // @@protoc_insertion_point(field_list:artm.FitOnlineMasterModelArgs.apply_weight)
  return apply_weight_;
}
 ::google::protobuf::RepeatedField< float >*
FitOnlineMasterModelArgs::mutable_apply_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOnlineMasterModelArgs.apply_weight)
  return &apply_weight_;
}

// repeated float decay_weight = 5;
int FitOnlineMasterModelArgs::decay_weight_size() const {
  return decay_weight_.size();
}
void FitOnlineMasterModelArgs::clear_decay_weight() {
  decay_weight_.Clear();
}
 float FitOnlineMasterModelArgs::decay_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.decay_weight)
  return decay_weight_.Get(index);
}
 void FitOnlineMasterModelArgs::set_decay_weight(int index, float value) {
  decay_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.decay_weight)
}
 void FitOnlineMasterModelArgs::add_decay_weight(float value) {
  decay_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FitOnlineMasterModelArgs.decay_weight)
}
 const ::google::protobuf::RepeatedField< float >&
FitOnlineMasterModelArgs::decay_weight() const {
  // @@protoc_insertion_point(field_list:artm.FitOnlineMasterModelArgs.decay_weight)
  return decay_weight_;
}
 ::google::protobuf::RepeatedField< float >*
FitOnlineMasterModelArgs::mutable_decay_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOnlineMasterModelArgs.decay_weight)
  return &decay_weight_;
}

// optional bool asynchronous = 6 [default = false];
bool FitOnlineMasterModelArgs::has_asynchronous() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FitOnlineMasterModelArgs::set_has_asynchronous() {
  _has_bits_[0] |= 0x00000020u;
}
void FitOnlineMasterModelArgs::clear_has_asynchronous() {
  _has_bits_[0] &= ~0x00000020u;
}
void FitOnlineMasterModelArgs::clear_asynchronous() {
  asynchronous_ = false;
  clear_has_asynchronous();
}
 bool FitOnlineMasterModelArgs::asynchronous() const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.asynchronous)
  return asynchronous_;
}
 void FitOnlineMasterModelArgs::set_asynchronous(bool value) {
  set_has_asynchronous();
  asynchronous_ = value;
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.asynchronous)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformMasterModelArgs::kBatchFieldNumber;
const int TransformMasterModelArgs::kBatchFilenameFieldNumber;
const int TransformMasterModelArgs::kThetaMatrixTypeFieldNumber;
const int TransformMasterModelArgs::kPredictClassIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformMasterModelArgs::TransformMasterModelArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.TransformMasterModelArgs)
}

void TransformMasterModelArgs::InitAsDefaultInstance() {
}

TransformMasterModelArgs::TransformMasterModelArgs(const TransformMasterModelArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.TransformMasterModelArgs)
}

void TransformMasterModelArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  theta_matrix_type_ = 1;
  predict_class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformMasterModelArgs::~TransformMasterModelArgs() {
  // @@protoc_insertion_point(destructor:artm.TransformMasterModelArgs)
  SharedDtor();
}

void TransformMasterModelArgs::SharedDtor() {
  predict_class_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransformMasterModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformMasterModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformMasterModelArgs_descriptor_;
}

const TransformMasterModelArgs& TransformMasterModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TransformMasterModelArgs* TransformMasterModelArgs::default_instance_ = NULL;

TransformMasterModelArgs* TransformMasterModelArgs::New(::google::protobuf::Arena* arena) const {
  TransformMasterModelArgs* n = new TransformMasterModelArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformMasterModelArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.TransformMasterModelArgs)
  if (_has_bits_[0 / 32] & 12u) {
    theta_matrix_type_ = 1;
    if (has_predict_class_id()) {
      predict_class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  batch_.Clear();
  batch_filename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransformMasterModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.TransformMasterModelArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.Batch batch = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_batch;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_batch_filename;
        break;
      }

      // repeated string batch_filename = 2;
      case 2: {
        if (tag == 18) {
         parse_batch_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->batch_filename(this->batch_filename_size() - 1).data(),
            this->batch_filename(this->batch_filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TransformMasterModelArgs.batch_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_batch_filename;
        if (input->ExpectTag(24)) goto parse_theta_matrix_type;
        break;
      }

      // optional .artm.ThetaMatrixType theta_matrix_type = 3 [default = ThetaMatrixType_Dense];
      case 3: {
        if (tag == 24) {
         parse_theta_matrix_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::ThetaMatrixType_IsValid(value)) {
            set_theta_matrix_type(static_cast< ::artm::ThetaMatrixType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_predict_class_id;
        break;
      }

      // optional string predict_class_id = 4;
      case 4: {
        if (tag == 34) {
         parse_predict_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predict_class_id().data(), this->predict_class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.TransformMasterModelArgs.predict_class_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.TransformMasterModelArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.TransformMasterModelArgs)
  return false;
#undef DO_
}

void TransformMasterModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.TransformMasterModelArgs)
  // repeated .artm.Batch batch = 1;
  for (unsigned int i = 0, n = this->batch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->batch(i), output);
  }

  // repeated string batch_filename = 2;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TransformMasterModelArgs.batch_filename");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->batch_filename(i), output);
  }

  // optional .artm.ThetaMatrixType theta_matrix_type = 3 [default = ThetaMatrixType_Dense];
  if (has_theta_matrix_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->theta_matrix_type(), output);
  }

  // optional string predict_class_id = 4;
  if (has_predict_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_class_id().data(), this->predict_class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TransformMasterModelArgs.predict_class_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->predict_class_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.TransformMasterModelArgs)
}

::google::protobuf::uint8* TransformMasterModelArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.TransformMasterModelArgs)
  // repeated .artm.Batch batch = 1;
  for (unsigned int i = 0, n = this->batch_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->batch(i), false, target);
  }

  // repeated string batch_filename = 2;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TransformMasterModelArgs.batch_filename");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->batch_filename(i), target);
  }

  // optional .artm.ThetaMatrixType theta_matrix_type = 3 [default = ThetaMatrixType_Dense];
  if (has_theta_matrix_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->theta_matrix_type(), target);
  }

  // optional string predict_class_id = 4;
  if (has_predict_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_class_id().data(), this->predict_class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.TransformMasterModelArgs.predict_class_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->predict_class_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.TransformMasterModelArgs)
  return target;
}

int TransformMasterModelArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.TransformMasterModelArgs)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 12u) {
    // optional .artm.ThetaMatrixType theta_matrix_type = 3 [default = ThetaMatrixType_Dense];
    if (has_theta_matrix_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->theta_matrix_type());
    }

    // optional string predict_class_id = 4;
    if (has_predict_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_class_id());
    }

  }
  // repeated .artm.Batch batch = 1;
  total_size += 1 * this->batch_size();
  for (int i = 0; i < this->batch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch(i));
  }

  // repeated string batch_filename = 2;
  total_size += 1 * this->batch_filename_size();
  for (int i = 0; i < this->batch_filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_filename(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformMasterModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.TransformMasterModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransformMasterModelArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformMasterModelArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.TransformMasterModelArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.TransformMasterModelArgs)
    MergeFrom(*source);
  }
}

void TransformMasterModelArgs::MergeFrom(const TransformMasterModelArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.TransformMasterModelArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  batch_.MergeFrom(from.batch_);
  batch_filename_.MergeFrom(from.batch_filename_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_theta_matrix_type()) {
      set_theta_matrix_type(from.theta_matrix_type());
    }
    if (from.has_predict_class_id()) {
      set_has_predict_class_id();
      predict_class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.predict_class_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransformMasterModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.TransformMasterModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformMasterModelArgs::CopyFrom(const TransformMasterModelArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.TransformMasterModelArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformMasterModelArgs::IsInitialized() const {

  return true;
}

void TransformMasterModelArgs::Swap(TransformMasterModelArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformMasterModelArgs::InternalSwap(TransformMasterModelArgs* other) {
  batch_.UnsafeArenaSwap(&other->batch_);
  batch_filename_.UnsafeArenaSwap(&other->batch_filename_);
  std::swap(theta_matrix_type_, other->theta_matrix_type_);
  predict_class_id_.Swap(&other->predict_class_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformMasterModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformMasterModelArgs_descriptor_;
  metadata.reflection = TransformMasterModelArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformMasterModelArgs

// repeated .artm.Batch batch = 1;
int TransformMasterModelArgs::batch_size() const {
  return batch_.size();
}
void TransformMasterModelArgs::clear_batch() {
  batch_.Clear();
}
const ::artm::Batch& TransformMasterModelArgs::batch(int index) const {
  // @@protoc_insertion_point(field_get:artm.TransformMasterModelArgs.batch)
  return batch_.Get(index);
}
::artm::Batch* TransformMasterModelArgs::mutable_batch(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TransformMasterModelArgs.batch)
  return batch_.Mutable(index);
}
::artm::Batch* TransformMasterModelArgs::add_batch() {
  // @@protoc_insertion_point(field_add:artm.TransformMasterModelArgs.batch)
  return batch_.Add();
}
::google::protobuf::RepeatedPtrField< ::artm::Batch >*
TransformMasterModelArgs::mutable_batch() {
  // @@protoc_insertion_point(field_mutable_list:artm.TransformMasterModelArgs.batch)
  return &batch_;
}
const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
TransformMasterModelArgs::batch() const {
  // @@protoc_insertion_point(field_list:artm.TransformMasterModelArgs.batch)
  return batch_;
}

// repeated string batch_filename = 2;
int TransformMasterModelArgs::batch_filename_size() const {
  return batch_filename_.size();
}
void TransformMasterModelArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
 const ::std::string& TransformMasterModelArgs::batch_filename(int index) const {
  // @@protoc_insertion_point(field_get:artm.TransformMasterModelArgs.batch_filename)
  return batch_filename_.Get(index);
}
 ::std::string* TransformMasterModelArgs::mutable_batch_filename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TransformMasterModelArgs.batch_filename)
  return batch_filename_.Mutable(index);
}
 void TransformMasterModelArgs::set_batch_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TransformMasterModelArgs.batch_filename)
  batch_filename_.Mutable(index)->assign(value);
}
 void TransformMasterModelArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TransformMasterModelArgs.batch_filename)
}
 void TransformMasterModelArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TransformMasterModelArgs.batch_filename)
}
 ::std::string* TransformMasterModelArgs::add_batch_filename() {
  // @@protoc_insertion_point(field_add_mutable:artm.TransformMasterModelArgs.batch_filename)
  return batch_filename_.Add();
}
 void TransformMasterModelArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TransformMasterModelArgs.batch_filename)
}
 void TransformMasterModelArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TransformMasterModelArgs.batch_filename)
}
 void TransformMasterModelArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TransformMasterModelArgs.batch_filename)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransformMasterModelArgs::batch_filename() const {
  // @@protoc_insertion_point(field_list:artm.TransformMasterModelArgs.batch_filename)
  return batch_filename_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TransformMasterModelArgs::mutable_batch_filename() {
  // @@protoc_insertion_point(field_mutable_list:artm.TransformMasterModelArgs.batch_filename)
  return &batch_filename_;
}

// optional .artm.ThetaMatrixType theta_matrix_type = 3 [default = ThetaMatrixType_Dense];
bool TransformMasterModelArgs::has_theta_matrix_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransformMasterModelArgs::set_has_theta_matrix_type() {
  _has_bits_[0] |= 0x00000004u;
}
void TransformMasterModelArgs::clear_has_theta_matrix_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransformMasterModelArgs::clear_theta_matrix_type() {
  theta_matrix_type_ = 1;
  clear_has_theta_matrix_type();
}
 ::artm::ThetaMatrixType TransformMasterModelArgs::theta_matrix_type() const {
  // @@protoc_insertion_point(field_get:artm.TransformMasterModelArgs.theta_matrix_type)
  return static_cast< ::artm::ThetaMatrixType >(theta_matrix_type_);
}
 void TransformMasterModelArgs::set_theta_matrix_type(::artm::ThetaMatrixType value) {
  assert(::artm::ThetaMatrixType_IsValid(value));
  set_has_theta_matrix_type();
  theta_matrix_type_ = value;
  // @@protoc_insertion_point(field_set:artm.TransformMasterModelArgs.theta_matrix_type)
}

// optional string predict_class_id = 4;
bool TransformMasterModelArgs::has_predict_class_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransformMasterModelArgs::set_has_predict_class_id() {
  _has_bits_[0] |= 0x00000008u;
}
void TransformMasterModelArgs::clear_has_predict_class_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransformMasterModelArgs::clear_predict_class_id() {
  predict_class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_predict_class_id();
}
 const ::std::string& TransformMasterModelArgs::predict_class_id() const {
  // @@protoc_insertion_point(field_get:artm.TransformMasterModelArgs.predict_class_id)
  return predict_class_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransformMasterModelArgs::set_predict_class_id(const ::std::string& value) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.TransformMasterModelArgs.predict_class_id)
}
 void TransformMasterModelArgs::set_predict_class_id(const char* value) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TransformMasterModelArgs.predict_class_id)
}
 void TransformMasterModelArgs::set_predict_class_id(const char* value, size_t size) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TransformMasterModelArgs.predict_class_id)
}
 ::std::string* TransformMasterModelArgs::mutable_predict_class_id() {
  set_has_predict_class_id();
  // @@protoc_insertion_point(field_mutable:artm.TransformMasterModelArgs.predict_class_id)
  return predict_class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransformMasterModelArgs::release_predict_class_id() {
  // @@protoc_insertion_point(field_release:artm.TransformMasterModelArgs.predict_class_id)
  clear_has_predict_class_id();
  return predict_class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransformMasterModelArgs::set_allocated_predict_class_id(::std::string* predict_class_id) {
  if (predict_class_id != NULL) {
    set_has_predict_class_id();
  } else {
    clear_has_predict_class_id();
  }
  predict_class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), predict_class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.TransformMasterModelArgs.predict_class_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigureLoggingArgs::kLogDirFieldNumber;
const int ConfigureLoggingArgs::kMinloglevelFieldNumber;
const int ConfigureLoggingArgs::kStderrthresholdFieldNumber;
const int ConfigureLoggingArgs::kLogtostderrFieldNumber;
const int ConfigureLoggingArgs::kColorlogtostderrFieldNumber;
const int ConfigureLoggingArgs::kAlsologtostderrFieldNumber;
const int ConfigureLoggingArgs::kLogbufsecsFieldNumber;
const int ConfigureLoggingArgs::kLogbuflevelFieldNumber;
const int ConfigureLoggingArgs::kMaxLogSizeFieldNumber;
const int ConfigureLoggingArgs::kStopLoggingIfFullDiskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigureLoggingArgs::ConfigureLoggingArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ConfigureLoggingArgs)
}

void ConfigureLoggingArgs::InitAsDefaultInstance() {
}

ConfigureLoggingArgs::ConfigureLoggingArgs(const ConfigureLoggingArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ConfigureLoggingArgs)
}

void ConfigureLoggingArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  log_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minloglevel_ = 0;
  stderrthreshold_ = 0;
  logtostderr_ = false;
  colorlogtostderr_ = false;
  alsologtostderr_ = false;
  logbufsecs_ = 0;
  logbuflevel_ = 0;
  max_log_size_ = 0;
  stop_logging_if_full_disk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigureLoggingArgs::~ConfigureLoggingArgs() {
  // @@protoc_insertion_point(destructor:artm.ConfigureLoggingArgs)
  SharedDtor();
}

void ConfigureLoggingArgs::SharedDtor() {
  log_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConfigureLoggingArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigureLoggingArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigureLoggingArgs_descriptor_;
}

const ConfigureLoggingArgs& ConfigureLoggingArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ConfigureLoggingArgs* ConfigureLoggingArgs::default_instance_ = NULL;

ConfigureLoggingArgs* ConfigureLoggingArgs::New(::google::protobuf::Arena* arena) const {
  ConfigureLoggingArgs* n = new ConfigureLoggingArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigureLoggingArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ConfigureLoggingArgs)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConfigureLoggingArgs, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfigureLoggingArgs*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(minloglevel_, alsologtostderr_);
    ZR_(logbufsecs_, logbuflevel_);
    if (has_log_dir()) {
      log_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    max_log_size_ = 0;
    stop_logging_if_full_disk_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfigureLoggingArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ConfigureLoggingArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string log_dir = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_dir().data(), this->log_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artm.ConfigureLoggingArgs.log_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minloglevel;
        break;
      }

      // optional int32 minloglevel = 2;
      case 2: {
        if (tag == 16) {
         parse_minloglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minloglevel_)));
          set_has_minloglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stderrthreshold;
        break;
      }

      // optional int32 stderrthreshold = 3;
      case 3: {
        if (tag == 24) {
         parse_stderrthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stderrthreshold_)));
          set_has_stderrthreshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_logtostderr;
        break;
      }

      // optional bool logtostderr = 4;
      case 4: {
        if (tag == 32) {
         parse_logtostderr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logtostderr_)));
          set_has_logtostderr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_colorlogtostderr;
        break;
      }

      // optional bool colorlogtostderr = 5;
      case 5: {
        if (tag == 40) {
         parse_colorlogtostderr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &colorlogtostderr_)));
          set_has_colorlogtostderr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_alsologtostderr;
        break;
      }

      // optional bool alsologtostderr = 6;
      case 6: {
        if (tag == 48) {
         parse_alsologtostderr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alsologtostderr_)));
          set_has_alsologtostderr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_logbufsecs;
        break;
      }

      // optional int32 logbufsecs = 7;
      case 7: {
        if (tag == 56) {
         parse_logbufsecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logbufsecs_)));
          set_has_logbufsecs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_logbuflevel;
        break;
      }

      // optional int32 logbuflevel = 8;
      case 8: {
        if (tag == 64) {
         parse_logbuflevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logbuflevel_)));
          set_has_logbuflevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_log_size;
        break;
      }

      // optional int32 max_log_size = 9;
      case 9: {
        if (tag == 72) {
         parse_max_log_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_log_size_)));
          set_has_max_log_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_stop_logging_if_full_disk;
        break;
      }

      // optional bool stop_logging_if_full_disk = 10;
      case 10: {
        if (tag == 80) {
         parse_stop_logging_if_full_disk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_logging_if_full_disk_)));
          set_has_stop_logging_if_full_disk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ConfigureLoggingArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ConfigureLoggingArgs)
  return false;
#undef DO_
}

void ConfigureLoggingArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ConfigureLoggingArgs)
  // optional string log_dir = 1;
  if (has_log_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ConfigureLoggingArgs.log_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->log_dir(), output);
  }

  // optional int32 minloglevel = 2;
  if (has_minloglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minloglevel(), output);
  }

  // optional int32 stderrthreshold = 3;
  if (has_stderrthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stderrthreshold(), output);
  }

  // optional bool logtostderr = 4;
  if (has_logtostderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->logtostderr(), output);
  }

  // optional bool colorlogtostderr = 5;
  if (has_colorlogtostderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->colorlogtostderr(), output);
  }

  // optional bool alsologtostderr = 6;
  if (has_alsologtostderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->alsologtostderr(), output);
  }

  // optional int32 logbufsecs = 7;
  if (has_logbufsecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->logbufsecs(), output);
  }

  // optional int32 logbuflevel = 8;
  if (has_logbuflevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->logbuflevel(), output);
  }

  // optional int32 max_log_size = 9;
  if (has_max_log_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_log_size(), output);
  }

  // optional bool stop_logging_if_full_disk = 10;
  if (has_stop_logging_if_full_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->stop_logging_if_full_disk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ConfigureLoggingArgs)
}

::google::protobuf::uint8* ConfigureLoggingArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ConfigureLoggingArgs)
  // optional string log_dir = 1;
  if (has_log_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artm.ConfigureLoggingArgs.log_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log_dir(), target);
  }

  // optional int32 minloglevel = 2;
  if (has_minloglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minloglevel(), target);
  }

  // optional int32 stderrthreshold = 3;
  if (has_stderrthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stderrthreshold(), target);
  }

  // optional bool logtostderr = 4;
  if (has_logtostderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->logtostderr(), target);
  }

  // optional bool colorlogtostderr = 5;
  if (has_colorlogtostderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->colorlogtostderr(), target);
  }

  // optional bool alsologtostderr = 6;
  if (has_alsologtostderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->alsologtostderr(), target);
  }

  // optional int32 logbufsecs = 7;
  if (has_logbufsecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->logbufsecs(), target);
  }

  // optional int32 logbuflevel = 8;
  if (has_logbuflevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->logbuflevel(), target);
  }

  // optional int32 max_log_size = 9;
  if (has_max_log_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_log_size(), target);
  }

  // optional bool stop_logging_if_full_disk = 10;
  if (has_stop_logging_if_full_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->stop_logging_if_full_disk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ConfigureLoggingArgs)
  return target;
}

int ConfigureLoggingArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ConfigureLoggingArgs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string log_dir = 1;
    if (has_log_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_dir());
    }

    // optional int32 minloglevel = 2;
    if (has_minloglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minloglevel());
    }

    // optional int32 stderrthreshold = 3;
    if (has_stderrthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stderrthreshold());
    }

    // optional bool logtostderr = 4;
    if (has_logtostderr()) {
      total_size += 1 + 1;
    }

    // optional bool colorlogtostderr = 5;
    if (has_colorlogtostderr()) {
      total_size += 1 + 1;
    }

    // optional bool alsologtostderr = 6;
    if (has_alsologtostderr()) {
      total_size += 1 + 1;
    }

    // optional int32 logbufsecs = 7;
    if (has_logbufsecs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logbufsecs());
    }

    // optional int32 logbuflevel = 8;
    if (has_logbuflevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logbuflevel());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 max_log_size = 9;
    if (has_max_log_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_log_size());
    }

    // optional bool stop_logging_if_full_disk = 10;
    if (has_stop_logging_if_full_disk()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigureLoggingArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ConfigureLoggingArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfigureLoggingArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigureLoggingArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ConfigureLoggingArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ConfigureLoggingArgs)
    MergeFrom(*source);
  }
}

void ConfigureLoggingArgs::MergeFrom(const ConfigureLoggingArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ConfigureLoggingArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_dir()) {
      set_has_log_dir();
      log_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_dir_);
    }
    if (from.has_minloglevel()) {
      set_minloglevel(from.minloglevel());
    }
    if (from.has_stderrthreshold()) {
      set_stderrthreshold(from.stderrthreshold());
    }
    if (from.has_logtostderr()) {
      set_logtostderr(from.logtostderr());
    }
    if (from.has_colorlogtostderr()) {
      set_colorlogtostderr(from.colorlogtostderr());
    }
    if (from.has_alsologtostderr()) {
      set_alsologtostderr(from.alsologtostderr());
    }
    if (from.has_logbufsecs()) {
      set_logbufsecs(from.logbufsecs());
    }
    if (from.has_logbuflevel()) {
      set_logbuflevel(from.logbuflevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_log_size()) {
      set_max_log_size(from.max_log_size());
    }
    if (from.has_stop_logging_if_full_disk()) {
      set_stop_logging_if_full_disk(from.stop_logging_if_full_disk());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConfigureLoggingArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ConfigureLoggingArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigureLoggingArgs::CopyFrom(const ConfigureLoggingArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ConfigureLoggingArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigureLoggingArgs::IsInitialized() const {

  return true;
}

void ConfigureLoggingArgs::Swap(ConfigureLoggingArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigureLoggingArgs::InternalSwap(ConfigureLoggingArgs* other) {
  log_dir_.Swap(&other->log_dir_);
  std::swap(minloglevel_, other->minloglevel_);
  std::swap(stderrthreshold_, other->stderrthreshold_);
  std::swap(logtostderr_, other->logtostderr_);
  std::swap(colorlogtostderr_, other->colorlogtostderr_);
  std::swap(alsologtostderr_, other->alsologtostderr_);
  std::swap(logbufsecs_, other->logbufsecs_);
  std::swap(logbuflevel_, other->logbuflevel_);
  std::swap(max_log_size_, other->max_log_size_);
  std::swap(stop_logging_if_full_disk_, other->stop_logging_if_full_disk_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigureLoggingArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigureLoggingArgs_descriptor_;
  metadata.reflection = ConfigureLoggingArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigureLoggingArgs

// optional string log_dir = 1;
bool ConfigureLoggingArgs::has_log_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfigureLoggingArgs::set_has_log_dir() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfigureLoggingArgs::clear_has_log_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfigureLoggingArgs::clear_log_dir() {
  log_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_dir();
}
 const ::std::string& ConfigureLoggingArgs::log_dir() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.log_dir)
  return log_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigureLoggingArgs::set_log_dir(const ::std::string& value) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.log_dir)
}
 void ConfigureLoggingArgs::set_log_dir(const char* value) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ConfigureLoggingArgs.log_dir)
}
 void ConfigureLoggingArgs::set_log_dir(const char* value, size_t size) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ConfigureLoggingArgs.log_dir)
}
 ::std::string* ConfigureLoggingArgs::mutable_log_dir() {
  set_has_log_dir();
  // @@protoc_insertion_point(field_mutable:artm.ConfigureLoggingArgs.log_dir)
  return log_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConfigureLoggingArgs::release_log_dir() {
  // @@protoc_insertion_point(field_release:artm.ConfigureLoggingArgs.log_dir)
  clear_has_log_dir();
  return log_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigureLoggingArgs::set_allocated_log_dir(::std::string* log_dir) {
  if (log_dir != NULL) {
    set_has_log_dir();
  } else {
    clear_has_log_dir();
  }
  log_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_dir);
  // @@protoc_insertion_point(field_set_allocated:artm.ConfigureLoggingArgs.log_dir)
}

// optional int32 minloglevel = 2;
bool ConfigureLoggingArgs::has_minloglevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfigureLoggingArgs::set_has_minloglevel() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfigureLoggingArgs::clear_has_minloglevel() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfigureLoggingArgs::clear_minloglevel() {
  minloglevel_ = 0;
  clear_has_minloglevel();
}
 ::google::protobuf::int32 ConfigureLoggingArgs::minloglevel() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.minloglevel)
  return minloglevel_;
}
 void ConfigureLoggingArgs::set_minloglevel(::google::protobuf::int32 value) {
  set_has_minloglevel();
  minloglevel_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.minloglevel)
}

// optional int32 stderrthreshold = 3;
bool ConfigureLoggingArgs::has_stderrthreshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfigureLoggingArgs::set_has_stderrthreshold() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfigureLoggingArgs::clear_has_stderrthreshold() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfigureLoggingArgs::clear_stderrthreshold() {
  stderrthreshold_ = 0;
  clear_has_stderrthreshold();
}
 ::google::protobuf::int32 ConfigureLoggingArgs::stderrthreshold() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.stderrthreshold)
  return stderrthreshold_;
}
 void ConfigureLoggingArgs::set_stderrthreshold(::google::protobuf::int32 value) {
  set_has_stderrthreshold();
  stderrthreshold_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.stderrthreshold)
}

// optional bool logtostderr = 4;
bool ConfigureLoggingArgs::has_logtostderr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConfigureLoggingArgs::set_has_logtostderr() {
  _has_bits_[0] |= 0x00000008u;
}
void ConfigureLoggingArgs::clear_has_logtostderr() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConfigureLoggingArgs::clear_logtostderr() {
  logtostderr_ = false;
  clear_has_logtostderr();
}
 bool ConfigureLoggingArgs::logtostderr() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.logtostderr)
  return logtostderr_;
}
 void ConfigureLoggingArgs::set_logtostderr(bool value) {
  set_has_logtostderr();
  logtostderr_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.logtostderr)
}

// optional bool colorlogtostderr = 5;
bool ConfigureLoggingArgs::has_colorlogtostderr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConfigureLoggingArgs::set_has_colorlogtostderr() {
  _has_bits_[0] |= 0x00000010u;
}
void ConfigureLoggingArgs::clear_has_colorlogtostderr() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConfigureLoggingArgs::clear_colorlogtostderr() {
  colorlogtostderr_ = false;
  clear_has_colorlogtostderr();
}
 bool ConfigureLoggingArgs::colorlogtostderr() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.colorlogtostderr)
  return colorlogtostderr_;
}
 void ConfigureLoggingArgs::set_colorlogtostderr(bool value) {
  set_has_colorlogtostderr();
  colorlogtostderr_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.colorlogtostderr)
}

// optional bool alsologtostderr = 6;
bool ConfigureLoggingArgs::has_alsologtostderr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConfigureLoggingArgs::set_has_alsologtostderr() {
  _has_bits_[0] |= 0x00000020u;
}
void ConfigureLoggingArgs::clear_has_alsologtostderr() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConfigureLoggingArgs::clear_alsologtostderr() {
  alsologtostderr_ = false;
  clear_has_alsologtostderr();
}
 bool ConfigureLoggingArgs::alsologtostderr() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.alsologtostderr)
  return alsologtostderr_;
}
 void ConfigureLoggingArgs::set_alsologtostderr(bool value) {
  set_has_alsologtostderr();
  alsologtostderr_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.alsologtostderr)
}

// optional int32 logbufsecs = 7;
bool ConfigureLoggingArgs::has_logbufsecs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConfigureLoggingArgs::set_has_logbufsecs() {
  _has_bits_[0] |= 0x00000040u;
}
void ConfigureLoggingArgs::clear_has_logbufsecs() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConfigureLoggingArgs::clear_logbufsecs() {
  logbufsecs_ = 0;
  clear_has_logbufsecs();
}
 ::google::protobuf::int32 ConfigureLoggingArgs::logbufsecs() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.logbufsecs)
  return logbufsecs_;
}
 void ConfigureLoggingArgs::set_logbufsecs(::google::protobuf::int32 value) {
  set_has_logbufsecs();
  logbufsecs_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.logbufsecs)
}

// optional int32 logbuflevel = 8;
bool ConfigureLoggingArgs::has_logbuflevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConfigureLoggingArgs::set_has_logbuflevel() {
  _has_bits_[0] |= 0x00000080u;
}
void ConfigureLoggingArgs::clear_has_logbuflevel() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConfigureLoggingArgs::clear_logbuflevel() {
  logbuflevel_ = 0;
  clear_has_logbuflevel();
}
 ::google::protobuf::int32 ConfigureLoggingArgs::logbuflevel() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.logbuflevel)
  return logbuflevel_;
}
 void ConfigureLoggingArgs::set_logbuflevel(::google::protobuf::int32 value) {
  set_has_logbuflevel();
  logbuflevel_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.logbuflevel)
}

// optional int32 max_log_size = 9;
bool ConfigureLoggingArgs::has_max_log_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConfigureLoggingArgs::set_has_max_log_size() {
  _has_bits_[0] |= 0x00000100u;
}
void ConfigureLoggingArgs::clear_has_max_log_size() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConfigureLoggingArgs::clear_max_log_size() {
  max_log_size_ = 0;
  clear_has_max_log_size();
}
 ::google::protobuf::int32 ConfigureLoggingArgs::max_log_size() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.max_log_size)
  return max_log_size_;
}
 void ConfigureLoggingArgs::set_max_log_size(::google::protobuf::int32 value) {
  set_has_max_log_size();
  max_log_size_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.max_log_size)
}

// optional bool stop_logging_if_full_disk = 10;
bool ConfigureLoggingArgs::has_stop_logging_if_full_disk() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConfigureLoggingArgs::set_has_stop_logging_if_full_disk() {
  _has_bits_[0] |= 0x00000200u;
}
void ConfigureLoggingArgs::clear_has_stop_logging_if_full_disk() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConfigureLoggingArgs::clear_stop_logging_if_full_disk() {
  stop_logging_if_full_disk_ = false;
  clear_has_stop_logging_if_full_disk();
}
 bool ConfigureLoggingArgs::stop_logging_if_full_disk() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.stop_logging_if_full_disk)
  return stop_logging_if_full_disk_;
}
 void ConfigureLoggingArgs::set_stop_logging_if_full_disk(bool value) {
  set_has_stop_logging_if_full_disk();
  stop_logging_if_full_disk_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.stop_logging_if_full_disk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearThetaCacheArgs::ClearThetaCacheArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ClearThetaCacheArgs)
}

void ClearThetaCacheArgs::InitAsDefaultInstance() {
}

ClearThetaCacheArgs::ClearThetaCacheArgs(const ClearThetaCacheArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ClearThetaCacheArgs)
}

void ClearThetaCacheArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearThetaCacheArgs::~ClearThetaCacheArgs() {
  // @@protoc_insertion_point(destructor:artm.ClearThetaCacheArgs)
  SharedDtor();
}

void ClearThetaCacheArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearThetaCacheArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearThetaCacheArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearThetaCacheArgs_descriptor_;
}

const ClearThetaCacheArgs& ClearThetaCacheArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ClearThetaCacheArgs* ClearThetaCacheArgs::default_instance_ = NULL;

ClearThetaCacheArgs* ClearThetaCacheArgs::New(::google::protobuf::Arena* arena) const {
  ClearThetaCacheArgs* n = new ClearThetaCacheArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearThetaCacheArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ClearThetaCacheArgs)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClearThetaCacheArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ClearThetaCacheArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ClearThetaCacheArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ClearThetaCacheArgs)
  return false;
#undef DO_
}

void ClearThetaCacheArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ClearThetaCacheArgs)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ClearThetaCacheArgs)
}

::google::protobuf::uint8* ClearThetaCacheArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ClearThetaCacheArgs)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ClearThetaCacheArgs)
  return target;
}

int ClearThetaCacheArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ClearThetaCacheArgs)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearThetaCacheArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ClearThetaCacheArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClearThetaCacheArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearThetaCacheArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ClearThetaCacheArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ClearThetaCacheArgs)
    MergeFrom(*source);
  }
}

void ClearThetaCacheArgs::MergeFrom(const ClearThetaCacheArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ClearThetaCacheArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClearThetaCacheArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ClearThetaCacheArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearThetaCacheArgs::CopyFrom(const ClearThetaCacheArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ClearThetaCacheArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearThetaCacheArgs::IsInitialized() const {

  return true;
}

void ClearThetaCacheArgs::Swap(ClearThetaCacheArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearThetaCacheArgs::InternalSwap(ClearThetaCacheArgs* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearThetaCacheArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearThetaCacheArgs_descriptor_;
  metadata.reflection = ClearThetaCacheArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearThetaCacheArgs

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearScoreCacheArgs::ClearScoreCacheArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ClearScoreCacheArgs)
}

void ClearScoreCacheArgs::InitAsDefaultInstance() {
}

ClearScoreCacheArgs::ClearScoreCacheArgs(const ClearScoreCacheArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ClearScoreCacheArgs)
}

void ClearScoreCacheArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearScoreCacheArgs::~ClearScoreCacheArgs() {
  // @@protoc_insertion_point(destructor:artm.ClearScoreCacheArgs)
  SharedDtor();
}

void ClearScoreCacheArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearScoreCacheArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearScoreCacheArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearScoreCacheArgs_descriptor_;
}

const ClearScoreCacheArgs& ClearScoreCacheArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ClearScoreCacheArgs* ClearScoreCacheArgs::default_instance_ = NULL;

ClearScoreCacheArgs* ClearScoreCacheArgs::New(::google::protobuf::Arena* arena) const {
  ClearScoreCacheArgs* n = new ClearScoreCacheArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearScoreCacheArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ClearScoreCacheArgs)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClearScoreCacheArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ClearScoreCacheArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ClearScoreCacheArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ClearScoreCacheArgs)
  return false;
#undef DO_
}

void ClearScoreCacheArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ClearScoreCacheArgs)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ClearScoreCacheArgs)
}

::google::protobuf::uint8* ClearScoreCacheArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ClearScoreCacheArgs)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ClearScoreCacheArgs)
  return target;
}

int ClearScoreCacheArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ClearScoreCacheArgs)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearScoreCacheArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ClearScoreCacheArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClearScoreCacheArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearScoreCacheArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ClearScoreCacheArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ClearScoreCacheArgs)
    MergeFrom(*source);
  }
}

void ClearScoreCacheArgs::MergeFrom(const ClearScoreCacheArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ClearScoreCacheArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClearScoreCacheArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ClearScoreCacheArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearScoreCacheArgs::CopyFrom(const ClearScoreCacheArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ClearScoreCacheArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearScoreCacheArgs::IsInitialized() const {

  return true;
}

void ClearScoreCacheArgs::Swap(ClearScoreCacheArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearScoreCacheArgs::InternalSwap(ClearScoreCacheArgs* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearScoreCacheArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearScoreCacheArgs_descriptor_;
  metadata.reflection = ClearScoreCacheArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearScoreCacheArgs

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearScoreArrayCacheArgs::ClearScoreArrayCacheArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:artm.ClearScoreArrayCacheArgs)
}

void ClearScoreArrayCacheArgs::InitAsDefaultInstance() {
}

ClearScoreArrayCacheArgs::ClearScoreArrayCacheArgs(const ClearScoreArrayCacheArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:artm.ClearScoreArrayCacheArgs)
}

void ClearScoreArrayCacheArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearScoreArrayCacheArgs::~ClearScoreArrayCacheArgs() {
  // @@protoc_insertion_point(destructor:artm.ClearScoreArrayCacheArgs)
  SharedDtor();
}

void ClearScoreArrayCacheArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearScoreArrayCacheArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearScoreArrayCacheArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearScoreArrayCacheArgs_descriptor_;
}

const ClearScoreArrayCacheArgs& ClearScoreArrayCacheArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ClearScoreArrayCacheArgs* ClearScoreArrayCacheArgs::default_instance_ = NULL;

ClearScoreArrayCacheArgs* ClearScoreArrayCacheArgs::New(::google::protobuf::Arena* arena) const {
  ClearScoreArrayCacheArgs* n = new ClearScoreArrayCacheArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearScoreArrayCacheArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:artm.ClearScoreArrayCacheArgs)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClearScoreArrayCacheArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:artm.ClearScoreArrayCacheArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:artm.ClearScoreArrayCacheArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:artm.ClearScoreArrayCacheArgs)
  return false;
#undef DO_
}

void ClearScoreArrayCacheArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:artm.ClearScoreArrayCacheArgs)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:artm.ClearScoreArrayCacheArgs)
}

::google::protobuf::uint8* ClearScoreArrayCacheArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:artm.ClearScoreArrayCacheArgs)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artm.ClearScoreArrayCacheArgs)
  return target;
}

int ClearScoreArrayCacheArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:artm.ClearScoreArrayCacheArgs)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearScoreArrayCacheArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:artm.ClearScoreArrayCacheArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClearScoreArrayCacheArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearScoreArrayCacheArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:artm.ClearScoreArrayCacheArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:artm.ClearScoreArrayCacheArgs)
    MergeFrom(*source);
  }
}

void ClearScoreArrayCacheArgs::MergeFrom(const ClearScoreArrayCacheArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artm.ClearScoreArrayCacheArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClearScoreArrayCacheArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:artm.ClearScoreArrayCacheArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearScoreArrayCacheArgs::CopyFrom(const ClearScoreArrayCacheArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artm.ClearScoreArrayCacheArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearScoreArrayCacheArgs::IsInitialized() const {

  return true;
}

void ClearScoreArrayCacheArgs::Swap(ClearScoreArrayCacheArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearScoreArrayCacheArgs::InternalSwap(ClearScoreArrayCacheArgs* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearScoreArrayCacheArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearScoreArrayCacheArgs_descriptor_;
  metadata.reflection = ClearScoreArrayCacheArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearScoreArrayCacheArgs

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace artm

// @@protoc_insertion_point(global_scope)
