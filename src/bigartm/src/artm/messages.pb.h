// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artm/messages.proto

#ifndef PROTOBUF_artm_2fmessages_2eproto__INCLUDED
#define PROTOBUF_artm_2fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace artm {

// Internal implementation detail -- do not call these.
void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
void protobuf_AssignDesc_artm_2fmessages_2eproto();
void protobuf_ShutdownFile_artm_2fmessages_2eproto();

class AttachModelArgs;
class AwaitOperationArgs;
class BackgroundTokensRatioScore;
class BackgroundTokensRatioScoreConfig;
class Batch;
class BitermsPhiConfig;
class BoolArray;
class ClassPrecisionScore;
class ClassPrecisionScoreConfig;
class ClearScoreArrayCacheArgs;
class ClearScoreCacheArgs;
class ClearThetaCacheArgs;
class CollectionParserConfig;
class CollectionParserInfo;
class ConfigureLoggingArgs;
class CooccurrenceCollectorConfig;
class DecorrelatorPhiConfig;
class DictionaryData;
class DuplicateMasterComponentArgs;
class ExportDictionaryArgs;
class ExportModelArgs;
class ExportScoreTrackerArgs;
class Field;
class FilterDictionaryArgs;
class FitOfflineMasterModelArgs;
class FitOnlineMasterModelArgs;
class FloatArray;
class GatherDictionaryArgs;
class GetDictionaryArgs;
class GetMasterComponentInfoArgs;
class GetScoreArrayArgs;
class GetScoreValueArgs;
class GetThetaMatrixArgs;
class GetTopicModelArgs;
class HierarchySparsingThetaConfig;
class ImportBatchesArgs;
class ImportDictionaryArgs;
class ImportModelArgs;
class ImportScoreTrackerArgs;
class ImproveCoherencePhiConfig;
class InitializeModelArgs;
class IntArray;
class Item;
class ItemsProcessedScore;
class ItemsProcessedScoreConfig;
class LabelRegularizationPhiConfig;
class MasterComponentInfo;
class MasterComponentInfo_BatchInfo;
class MasterComponentInfo_CacheEntryInfo;
class MasterComponentInfo_DictionaryInfo;
class MasterComponentInfo_ModelInfo;
class MasterComponentInfo_RegularizerInfo;
class MasterComponentInfo_ScoreInfo;
class MasterModelConfig;
class MergeModelArgs;
class MultiLanguagePhiConfig;
class NetPlsaPhiConfig;
class NormalizeModelArgs;
class PeakMemoryScore;
class PeakMemoryScoreConfig;
class PerplexityScore;
class PerplexityScoreConfig;
class PerplexityScore_TransactionNameInfo;
class ProcessBatchesArgs;
class ProcessBatchesResult;
class RegularizeModelArgs;
class RegularizerConfig;
class RegularizerSettings;
class ScoreArray;
class ScoreConfig;
class ScoreData;
class SmoothPtdwConfig;
class SmoothSparsePhiConfig;
class SmoothSparseThetaConfig;
class SmoothTimeInTopicsPhiConfig;
class SparsityPhiScore;
class SparsityPhiScoreConfig;
class SparsityThetaScore;
class SparsityThetaScoreConfig;
class SpecifiedSparsePhiConfig;
class StringArray;
class ThetaMatrix;
class ThetaSnippetScore;
class ThetaSnippetScoreConfig;
class TopTokensScore;
class TopTokensScoreConfig;
class TopicKernelScore;
class TopicKernelScoreConfig;
class TopicMassPhiScore;
class TopicMassPhiScoreConfig;
class TopicModel;
class TopicSegmentationPtdwConfig;
class TopicSelectionThetaConfig;
class TransformConfig;
class TransformMasterModelArgs;

enum SpecifiedSparsePhiConfig_SparseMode {
  SpecifiedSparsePhiConfig_SparseMode_SparseTopics = 0,
  SpecifiedSparsePhiConfig_SparseMode_SparseTokens = 1
};
DLL_PUBLIC bool SpecifiedSparsePhiConfig_SparseMode_IsValid(int value);
const SpecifiedSparsePhiConfig_SparseMode SpecifiedSparsePhiConfig_SparseMode_SparseMode_MIN = SpecifiedSparsePhiConfig_SparseMode_SparseTopics;
const SpecifiedSparsePhiConfig_SparseMode SpecifiedSparsePhiConfig_SparseMode_SparseMode_MAX = SpecifiedSparsePhiConfig_SparseMode_SparseTokens;
const int SpecifiedSparsePhiConfig_SparseMode_SparseMode_ARRAYSIZE = SpecifiedSparsePhiConfig_SparseMode_SparseMode_MAX + 1;

DLL_PUBLIC const ::google::protobuf::EnumDescriptor* SpecifiedSparsePhiConfig_SparseMode_descriptor();
inline const ::std::string& SpecifiedSparsePhiConfig_SparseMode_Name(SpecifiedSparsePhiConfig_SparseMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpecifiedSparsePhiConfig_SparseMode_descriptor(), value);
}
inline bool SpecifiedSparsePhiConfig_SparseMode_Parse(
    const ::std::string& name, SpecifiedSparsePhiConfig_SparseMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpecifiedSparsePhiConfig_SparseMode>(
    SpecifiedSparsePhiConfig_SparseMode_descriptor(), name, value);
}
enum SmoothPtdwConfig_SmoothType {
  SmoothPtdwConfig_SmoothType_MovingAverage = 1,
  SmoothPtdwConfig_SmoothType_MovingProduct = 2
};
DLL_PUBLIC bool SmoothPtdwConfig_SmoothType_IsValid(int value);
const SmoothPtdwConfig_SmoothType SmoothPtdwConfig_SmoothType_SmoothType_MIN = SmoothPtdwConfig_SmoothType_MovingAverage;
const SmoothPtdwConfig_SmoothType SmoothPtdwConfig_SmoothType_SmoothType_MAX = SmoothPtdwConfig_SmoothType_MovingProduct;
const int SmoothPtdwConfig_SmoothType_SmoothType_ARRAYSIZE = SmoothPtdwConfig_SmoothType_SmoothType_MAX + 1;

DLL_PUBLIC const ::google::protobuf::EnumDescriptor* SmoothPtdwConfig_SmoothType_descriptor();
inline const ::std::string& SmoothPtdwConfig_SmoothType_Name(SmoothPtdwConfig_SmoothType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SmoothPtdwConfig_SmoothType_descriptor(), value);
}
inline bool SmoothPtdwConfig_SmoothType_Parse(
    const ::std::string& name, SmoothPtdwConfig_SmoothType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SmoothPtdwConfig_SmoothType>(
    SmoothPtdwConfig_SmoothType_descriptor(), name, value);
}
enum TransformConfig_TransformType {
  TransformConfig_TransformType_Logarithm = 0,
  TransformConfig_TransformType_Polynomial = 1,
  TransformConfig_TransformType_Constant = 2
};
DLL_PUBLIC bool TransformConfig_TransformType_IsValid(int value);
const TransformConfig_TransformType TransformConfig_TransformType_TransformType_MIN = TransformConfig_TransformType_Logarithm;
const TransformConfig_TransformType TransformConfig_TransformType_TransformType_MAX = TransformConfig_TransformType_Constant;
const int TransformConfig_TransformType_TransformType_ARRAYSIZE = TransformConfig_TransformType_TransformType_MAX + 1;

DLL_PUBLIC const ::google::protobuf::EnumDescriptor* TransformConfig_TransformType_descriptor();
inline const ::std::string& TransformConfig_TransformType_Name(TransformConfig_TransformType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransformConfig_TransformType_descriptor(), value);
}
inline bool TransformConfig_TransformType_Parse(
    const ::std::string& name, TransformConfig_TransformType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransformConfig_TransformType>(
    TransformConfig_TransformType_descriptor(), name, value);
}
enum PerplexityScoreConfig_Type {
  PerplexityScoreConfig_Type_UnigramDocumentModel = 0,
  PerplexityScoreConfig_Type_UnigramCollectionModel = 1
};
DLL_PUBLIC bool PerplexityScoreConfig_Type_IsValid(int value);
const PerplexityScoreConfig_Type PerplexityScoreConfig_Type_Type_MIN = PerplexityScoreConfig_Type_UnigramDocumentModel;
const PerplexityScoreConfig_Type PerplexityScoreConfig_Type_Type_MAX = PerplexityScoreConfig_Type_UnigramCollectionModel;
const int PerplexityScoreConfig_Type_Type_ARRAYSIZE = PerplexityScoreConfig_Type_Type_MAX + 1;

DLL_PUBLIC const ::google::protobuf::EnumDescriptor* PerplexityScoreConfig_Type_descriptor();
inline const ::std::string& PerplexityScoreConfig_Type_Name(PerplexityScoreConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerplexityScoreConfig_Type_descriptor(), value);
}
inline bool PerplexityScoreConfig_Type_Parse(
    const ::std::string& name, PerplexityScoreConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerplexityScoreConfig_Type>(
    PerplexityScoreConfig_Type_descriptor(), name, value);
}
enum CollectionParserConfig_CollectionFormat {
  CollectionParserConfig_CollectionFormat_BagOfWordsUci = 0,
  CollectionParserConfig_CollectionFormat_MatrixMarket = 1,
  CollectionParserConfig_CollectionFormat_VowpalWabbit = 2
};
DLL_PUBLIC bool CollectionParserConfig_CollectionFormat_IsValid(int value);
const CollectionParserConfig_CollectionFormat CollectionParserConfig_CollectionFormat_CollectionFormat_MIN = CollectionParserConfig_CollectionFormat_BagOfWordsUci;
const CollectionParserConfig_CollectionFormat CollectionParserConfig_CollectionFormat_CollectionFormat_MAX = CollectionParserConfig_CollectionFormat_VowpalWabbit;
const int CollectionParserConfig_CollectionFormat_CollectionFormat_ARRAYSIZE = CollectionParserConfig_CollectionFormat_CollectionFormat_MAX + 1;

DLL_PUBLIC const ::google::protobuf::EnumDescriptor* CollectionParserConfig_CollectionFormat_descriptor();
inline const ::std::string& CollectionParserConfig_CollectionFormat_Name(CollectionParserConfig_CollectionFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    CollectionParserConfig_CollectionFormat_descriptor(), value);
}
inline bool CollectionParserConfig_CollectionFormat_Parse(
    const ::std::string& name, CollectionParserConfig_CollectionFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CollectionParserConfig_CollectionFormat>(
    CollectionParserConfig_CollectionFormat_descriptor(), name, value);
}
enum CollectionParserConfig_BatchNameType {
  CollectionParserConfig_BatchNameType_Guid = 0,
  CollectionParserConfig_BatchNameType_Code = 1
};
DLL_PUBLIC bool CollectionParserConfig_BatchNameType_IsValid(int value);
const CollectionParserConfig_BatchNameType CollectionParserConfig_BatchNameType_BatchNameType_MIN = CollectionParserConfig_BatchNameType_Guid;
const CollectionParserConfig_BatchNameType CollectionParserConfig_BatchNameType_BatchNameType_MAX = CollectionParserConfig_BatchNameType_Code;
const int CollectionParserConfig_BatchNameType_BatchNameType_ARRAYSIZE = CollectionParserConfig_BatchNameType_BatchNameType_MAX + 1;

DLL_PUBLIC const ::google::protobuf::EnumDescriptor* CollectionParserConfig_BatchNameType_descriptor();
inline const ::std::string& CollectionParserConfig_BatchNameType_Name(CollectionParserConfig_BatchNameType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CollectionParserConfig_BatchNameType_descriptor(), value);
}
inline bool CollectionParserConfig_BatchNameType_Parse(
    const ::std::string& name, CollectionParserConfig_BatchNameType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CollectionParserConfig_BatchNameType>(
    CollectionParserConfig_BatchNameType_descriptor(), name, value);
}
enum RegularizerType {
  RegularizerType_SmoothSparseTheta = 0,
  RegularizerType_SmoothSparsePhi = 1,
  RegularizerType_DecorrelatorPhi = 2,
  RegularizerType_MultiLanguagePhi = 3,
  RegularizerType_LabelRegularizationPhi = 4,
  RegularizerType_SpecifiedSparsePhi = 5,
  RegularizerType_ImproveCoherencePhi = 6,
  RegularizerType_SmoothPtdw = 7,
  RegularizerType_TopicSelectionTheta = 8,
  RegularizerType_BitermsPhi = 9,
  RegularizerType_HierarchySparsingTheta = 10,
  RegularizerType_TopicSegmentationPtdw = 11,
  RegularizerType_SmoothTimeInTopicsPhi = 12,
  RegularizerType_NetPlsaPhi = 13,
  RegularizerType_Unknown = 9999
};
DLL_PUBLIC bool RegularizerType_IsValid(int value);
const RegularizerType RegularizerType_MIN = RegularizerType_SmoothSparseTheta;
const RegularizerType RegularizerType_MAX = RegularizerType_Unknown;
const int RegularizerType_ARRAYSIZE = RegularizerType_MAX + 1;

DLL_PUBLIC const ::google::protobuf::EnumDescriptor* RegularizerType_descriptor();
inline const ::std::string& RegularizerType_Name(RegularizerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegularizerType_descriptor(), value);
}
inline bool RegularizerType_Parse(
    const ::std::string& name, RegularizerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegularizerType>(
    RegularizerType_descriptor(), name, value);
}
enum ScoreType {
  ScoreType_Perplexity = 0,
  ScoreType_SparsityTheta = 1,
  ScoreType_SparsityPhi = 2,
  ScoreType_ItemsProcessed = 3,
  ScoreType_TopTokens = 4,
  ScoreType_ThetaSnippet = 5,
  ScoreType_TopicKernel = 6,
  ScoreType_TopicMassPhi = 7,
  ScoreType_ClassPrecision = 8,
  ScoreType_PeakMemory = 9,
  ScoreType_BackgroundTokensRatio = 10,
  ScoreType_Unknown = 9999
};
DLL_PUBLIC bool ScoreType_IsValid(int value);
const ScoreType ScoreType_MIN = ScoreType_Perplexity;
const ScoreType ScoreType_MAX = ScoreType_Unknown;
const int ScoreType_ARRAYSIZE = ScoreType_MAX + 1;

DLL_PUBLIC const ::google::protobuf::EnumDescriptor* ScoreType_descriptor();
inline const ::std::string& ScoreType_Name(ScoreType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScoreType_descriptor(), value);
}
inline bool ScoreType_Parse(
    const ::std::string& name, ScoreType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScoreType>(
    ScoreType_descriptor(), name, value);
}
enum MatrixLayout {
  MatrixLayout_Dense = 0,
  MatrixLayout_Sparse = 1
};
DLL_PUBLIC bool MatrixLayout_IsValid(int value);
const MatrixLayout MatrixLayout_MIN = MatrixLayout_Dense;
const MatrixLayout MatrixLayout_MAX = MatrixLayout_Sparse;
const int MatrixLayout_ARRAYSIZE = MatrixLayout_MAX + 1;

DLL_PUBLIC const ::google::protobuf::EnumDescriptor* MatrixLayout_descriptor();
inline const ::std::string& MatrixLayout_Name(MatrixLayout value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatrixLayout_descriptor(), value);
}
inline bool MatrixLayout_Parse(
    const ::std::string& name, MatrixLayout* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatrixLayout>(
    MatrixLayout_descriptor(), name, value);
}
enum ThetaMatrixType {
  ThetaMatrixType_None = 0,
  ThetaMatrixType_Dense = 1,
  ThetaMatrixType_Sparse = 2,
  ThetaMatrixType_Cache = 3,
  ThetaMatrixType_DensePtdw = 4,
  ThetaMatrixType_SparsePtdw = 5
};
DLL_PUBLIC bool ThetaMatrixType_IsValid(int value);
const ThetaMatrixType ThetaMatrixType_MIN = ThetaMatrixType_None;
const ThetaMatrixType ThetaMatrixType_MAX = ThetaMatrixType_SparsePtdw;
const int ThetaMatrixType_ARRAYSIZE = ThetaMatrixType_MAX + 1;

DLL_PUBLIC const ::google::protobuf::EnumDescriptor* ThetaMatrixType_descriptor();
inline const ::std::string& ThetaMatrixType_Name(ThetaMatrixType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ThetaMatrixType_descriptor(), value);
}
inline bool ThetaMatrixType_Parse(
    const ::std::string& name, ThetaMatrixType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ThetaMatrixType>(
    ThetaMatrixType_descriptor(), name, value);
}
// ===================================================================

class DLL_PUBLIC FloatArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.FloatArray) */ {
 public:
  FloatArray();
  virtual ~FloatArray();

  FloatArray(const FloatArray& from);

  inline FloatArray& operator=(const FloatArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatArray& default_instance();

  void Swap(FloatArray* other);

  // implements Message ----------------------------------------------

  inline FloatArray* New() const { return New(NULL); }

  FloatArray* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatArray& from);
  void MergeFrom(const FloatArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float value = 1 [packed = true];
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.FloatArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static FloatArray* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC BoolArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.BoolArray) */ {
 public:
  BoolArray();
  virtual ~BoolArray();

  BoolArray(const BoolArray& from);

  inline BoolArray& operator=(const BoolArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoolArray& default_instance();

  void Swap(BoolArray* other);

  // implements Message ----------------------------------------------

  inline BoolArray* New() const { return New(NULL); }

  BoolArray* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoolArray& from);
  void MergeFrom(const BoolArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoolArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool value = 1 [packed = true];
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  bool value(int index) const;
  void set_value(int index, bool value);
  void add_value(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      value() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.BoolArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > value_;
  mutable int _value_cached_byte_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static BoolArray* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC IntArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.IntArray) */ {
 public:
  IntArray();
  virtual ~IntArray();

  IntArray(const IntArray& from);

  inline IntArray& operator=(const IntArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntArray& default_instance();

  void Swap(IntArray* other);

  // implements Message ----------------------------------------------

  inline IntArray* New() const { return New(NULL); }

  IntArray* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntArray& from);
  void MergeFrom(const IntArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IntArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 value = 1 [packed = true];
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value(int index) const;
  void set_value(int index, ::google::protobuf::int32 value);
  void add_value(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.IntArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;
  mutable int _value_cached_byte_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static IntArray* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC StringArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.StringArray) */ {
 public:
  StringArray();
  virtual ~StringArray();

  StringArray(const StringArray& from);

  inline StringArray& operator=(const StringArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringArray& default_instance();

  void Swap(StringArray* other);

  // implements Message ----------------------------------------------

  inline StringArray* New() const { return New(NULL); }

  StringArray* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringArray& from);
  void MergeFrom(const StringArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value(int index) const;
  ::std::string* mutable_value(int index);
  void set_value(int index, const ::std::string& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  ::std::string* add_value();
  void add_value(const ::std::string& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:artm.StringArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static StringArray* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  inline Item* New() const { return New(NULL); }

  Item* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // repeated .artm.Field field = 2;
  int field_size() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::artm::Field& field(int index) const;
  ::artm::Field* mutable_field(int index);
  ::artm::Field* add_field();
  ::google::protobuf::RepeatedPtrField< ::artm::Field >*
      mutable_field();
  const ::google::protobuf::RepeatedPtrField< ::artm::Field >&
      field() const;

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // repeated int32 token_id = 4;
  int token_id_size() const;
  void clear_token_id();
  static const int kTokenIdFieldNumber = 4;
  ::google::protobuf::int32 token_id(int index) const;
  void set_token_id(int index, ::google::protobuf::int32 value);
  void add_token_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      token_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_token_id();

  // repeated float token_weight = 5;
  int token_weight_size() const;
  void clear_token_weight();
  static const int kTokenWeightFieldNumber = 5;
  float token_weight(int index) const;
  void set_token_weight(int index, float value);
  void add_token_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      token_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_token_weight();

  // repeated int32 transaction_start_index = 6;
  int transaction_start_index_size() const;
  void clear_transaction_start_index();
  static const int kTransactionStartIndexFieldNumber = 6;
  ::google::protobuf::int32 transaction_start_index(int index) const;
  void set_transaction_start_index(int index, ::google::protobuf::int32 value);
  void add_transaction_start_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      transaction_start_index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_transaction_start_index();

  // repeated int32 transaction_typename_id = 7;
  int transaction_typename_id_size() const;
  void clear_transaction_typename_id();
  static const int kTransactionTypenameIdFieldNumber = 7;
  ::google::protobuf::int32 transaction_typename_id(int index) const;
  void set_transaction_typename_id(int index, ::google::protobuf::int32 value);
  void add_transaction_typename_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      transaction_typename_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_transaction_typename_id();

  // @@protoc_insertion_point(class_scope:artm.Item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::artm::Field > field_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > token_id_;
  ::google::protobuf::RepeatedField< float > token_weight_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > transaction_start_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > transaction_typename_id_;
  ::google::protobuf::int32 id_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC Field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.Field) */ {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Field& default_instance();

  void Swap(Field* other);

  // implements Message ----------------------------------------------

  inline Field* New() const { return New(NULL); }

  Field* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = "@body"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated int32 token_id = 2;
  int token_id_size() const;
  void clear_token_id();
  static const int kTokenIdFieldNumber = 2;
  ::google::protobuf::int32 token_id(int index) const;
  void set_token_id(int index, ::google::protobuf::int32 value);
  void add_token_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      token_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_token_id();

  // repeated int32 token_count = 3;
  int token_count_size() const;
  void clear_token_count();
  static const int kTokenCountFieldNumber = 3;
  ::google::protobuf::int32 token_count(int index) const;
  void set_token_count(int index, ::google::protobuf::int32 value);
  void add_token_count(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      token_count() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_token_count();

  // repeated int32 token_offset = 4;
  int token_offset_size() const;
  void clear_token_offset();
  static const int kTokenOffsetFieldNumber = 4;
  ::google::protobuf::int32 token_offset(int index) const;
  void set_token_offset(int index, ::google::protobuf::int32 value);
  void add_token_offset(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      token_offset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_token_offset();

  // optional string string_value = 5;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 5;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional int64 int_value = 6;
  bool has_int_value() const;
  void clear_int_value();
  static const int kIntValueFieldNumber = 6;
  ::google::protobuf::int64 int_value() const;
  void set_int_value(::google::protobuf::int64 value);

  // optional double double_value = 7;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 7;
  double double_value() const;
  void set_double_value(double value);

  // optional string date_value = 8;
  bool has_date_value() const;
  void clear_date_value();
  static const int kDateValueFieldNumber = 8;
  const ::std::string& date_value() const;
  void set_date_value(const ::std::string& value);
  void set_date_value(const char* value);
  void set_date_value(const char* value, size_t size);
  ::std::string* mutable_date_value();
  ::std::string* release_date_value();
  void set_allocated_date_value(::std::string* date_value);

  // repeated string string_array = 16;
  int string_array_size() const;
  void clear_string_array();
  static const int kStringArrayFieldNumber = 16;
  const ::std::string& string_array(int index) const;
  ::std::string* mutable_string_array(int index);
  void set_string_array(int index, const ::std::string& value);
  void set_string_array(int index, const char* value);
  void set_string_array(int index, const char* value, size_t size);
  ::std::string* add_string_array();
  void add_string_array(const ::std::string& value);
  void add_string_array(const char* value);
  void add_string_array(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string_array() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_array();

  // repeated int64 int_array = 17;
  int int_array_size() const;
  void clear_int_array();
  static const int kIntArrayFieldNumber = 17;
  ::google::protobuf::int64 int_array(int index) const;
  void set_int_array(int index, ::google::protobuf::int64 value);
  void add_int_array(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      int_array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_int_array();

  // repeated double double_array = 18;
  int double_array_size() const;
  void clear_double_array();
  static const int kDoubleArrayFieldNumber = 18;
  double double_array(int index) const;
  void set_double_array(int index, double value);
  void add_double_array(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_array() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_array();

  // repeated string date_array = 19;
  int date_array_size() const;
  void clear_date_array();
  static const int kDateArrayFieldNumber = 19;
  const ::std::string& date_array(int index) const;
  ::std::string* mutable_date_array(int index);
  void set_date_array(int index, const ::std::string& value);
  void set_date_array(int index, const char* value);
  void set_date_array(int index, const char* value, size_t size);
  ::std::string* add_date_array();
  void add_date_array(const ::std::string& value);
  void add_date_array(const char* value);
  void add_date_array(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& date_array() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_date_array();

  // repeated float token_weight = 20;
  int token_weight_size() const;
  void clear_token_weight();
  static const int kTokenWeightFieldNumber = 20;
  float token_weight(int index) const;
  void set_token_weight(int index, float value);
  void add_token_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      token_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_token_weight();

  // @@protoc_insertion_point(class_scope:artm.Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_string_value();
  inline void clear_has_string_value();
  inline void set_has_int_value();
  inline void clear_has_int_value();
  inline void set_has_double_value();
  inline void clear_has_double_value();
  inline void set_has_date_value();
  inline void clear_has_date_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > token_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > token_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > token_offset_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  ::google::protobuf::int64 int_value_;
  double double_value_;
  ::google::protobuf::internal::ArenaStringPtr date_value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_array_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > int_array_;
  ::google::protobuf::RepeatedField< double > double_array_;
  ::google::protobuf::RepeatedPtrField< ::std::string> date_array_;
  ::google::protobuf::RepeatedField< float > token_weight_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static Field* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC Batch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.Batch) */ {
 public:
  Batch();
  virtual ~Batch();

  Batch(const Batch& from);

  inline Batch& operator=(const Batch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Batch& default_instance();

  void Swap(Batch* other);

  // implements Message ----------------------------------------------

  inline Batch* New() const { return New(NULL); }

  Batch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Batch& from);
  void MergeFrom(const Batch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Batch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string token = 1;
  int token_size() const;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token(int index) const;
  ::std::string* mutable_token(int index);
  void set_token(int index, const ::std::string& value);
  void set_token(int index, const char* value);
  void set_token(int index, const char* value, size_t size);
  ::std::string* add_token();
  void add_token(const ::std::string& value);
  void add_token(const char* value);
  void add_token(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated string class_id = 2;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated .artm.Item item = 3;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 3;
  const ::artm::Item& item(int index) const;
  ::artm::Item* mutable_item(int index);
  ::artm::Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::artm::Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::artm::Item >&
      item() const;

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string id = 5;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 5;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // repeated string transaction_typename = 6;
  int transaction_typename_size() const;
  void clear_transaction_typename();
  static const int kTransactionTypenameFieldNumber = 6;
  const ::std::string& transaction_typename(int index) const;
  ::std::string* mutable_transaction_typename(int index);
  void set_transaction_typename(int index, const ::std::string& value);
  void set_transaction_typename(int index, const char* value);
  void set_transaction_typename(int index, const char* value, size_t size);
  ::std::string* add_transaction_typename();
  void add_transaction_typename(const ::std::string& value);
  void add_transaction_typename(const char* value);
  void add_transaction_typename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& transaction_typename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_transaction_typename();

  // @@protoc_insertion_point(class_scope:artm.Batch)
 private:
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::Item > item_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> transaction_typename_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static Batch* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC RegularizerSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.RegularizerSettings) */ {
 public:
  RegularizerSettings();
  virtual ~RegularizerSettings();

  RegularizerSettings(const RegularizerSettings& from);

  inline RegularizerSettings& operator=(const RegularizerSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegularizerSettings& default_instance();

  void Swap(RegularizerSettings* other);

  // implements Message ----------------------------------------------

  inline RegularizerSettings* New() const { return New(NULL); }

  RegularizerSettings* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegularizerSettings& from);
  void MergeFrom(const RegularizerSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegularizerSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float tau = 2;
  bool has_tau() const;
  void clear_tau();
  static const int kTauFieldNumber = 2;
  float tau() const;
  void set_tau(float value);

  // optional float gamma = 3;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 3;
  float gamma() const;
  void set_gamma(float value);

  // @@protoc_insertion_point(class_scope:artm.RegularizerSettings)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_tau();
  inline void clear_has_tau();
  inline void set_has_gamma();
  inline void clear_has_gamma();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float tau_;
  float gamma_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static RegularizerSettings* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC RegularizerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.RegularizerConfig) */ {
 public:
  RegularizerConfig();
  virtual ~RegularizerConfig();

  RegularizerConfig(const RegularizerConfig& from);

  inline RegularizerConfig& operator=(const RegularizerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegularizerConfig& default_instance();

  void Swap(RegularizerConfig* other);

  // implements Message ----------------------------------------------

  inline RegularizerConfig* New() const { return New(NULL); }

  RegularizerConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegularizerConfig& from);
  void MergeFrom(const RegularizerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegularizerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .artm.RegularizerType type = 2 [default = RegularizerType_Unknown];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::artm::RegularizerType type() const;
  void set_type(::artm::RegularizerType value);

  // optional bytes config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  void set_config(const char* value);
  void set_config(const void* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // optional float tau = 4;
  bool has_tau() const;
  void clear_tau();
  static const int kTauFieldNumber = 4;
  float tau() const;
  void set_tau(float value);

  // optional float gamma = 5;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 5;
  float gamma() const;
  void set_gamma(float value);

  // optional string config_json = 6;
  bool has_config_json() const;
  void clear_config_json();
  static const int kConfigJsonFieldNumber = 6;
  const ::std::string& config_json() const;
  void set_config_json(const ::std::string& value);
  void set_config_json(const char* value);
  void set_config_json(const char* value, size_t size);
  ::std::string* mutable_config_json();
  ::std::string* release_config_json();
  void set_allocated_config_json(::std::string* config_json);

  // @@protoc_insertion_point(class_scope:artm.RegularizerConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_tau();
  inline void clear_has_tau();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_config_json();
  inline void clear_has_config_json();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  int type_;
  float tau_;
  ::google::protobuf::internal::ArenaStringPtr config_json_;
  float gamma_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static RegularizerConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC SmoothSparseThetaConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.SmoothSparseThetaConfig) */ {
 public:
  SmoothSparseThetaConfig();
  virtual ~SmoothSparseThetaConfig();

  SmoothSparseThetaConfig(const SmoothSparseThetaConfig& from);

  inline SmoothSparseThetaConfig& operator=(const SmoothSparseThetaConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothSparseThetaConfig& default_instance();

  void Swap(SmoothSparseThetaConfig* other);

  // implements Message ----------------------------------------------

  inline SmoothSparseThetaConfig* New() const { return New(NULL); }

  SmoothSparseThetaConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmoothSparseThetaConfig& from);
  void MergeFrom(const SmoothSparseThetaConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmoothSparseThetaConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated float alpha_iter = 2;
  int alpha_iter_size() const;
  void clear_alpha_iter();
  static const int kAlphaIterFieldNumber = 2;
  float alpha_iter(int index) const;
  void set_alpha_iter(int index, float value);
  void add_alpha_iter(float value);
  const ::google::protobuf::RepeatedField< float >&
      alpha_iter() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_alpha_iter();

  // optional .artm.TransformConfig transform_config = 3;
  bool has_transform_config() const;
  void clear_transform_config();
  static const int kTransformConfigFieldNumber = 3;
  const ::artm::TransformConfig& transform_config() const;
  ::artm::TransformConfig* mutable_transform_config();
  ::artm::TransformConfig* release_transform_config();
  void set_allocated_transform_config(::artm::TransformConfig* transform_config);

  // repeated string item_title = 4;
  int item_title_size() const;
  void clear_item_title();
  static const int kItemTitleFieldNumber = 4;
  const ::std::string& item_title(int index) const;
  ::std::string* mutable_item_title(int index);
  void set_item_title(int index, const ::std::string& value);
  void set_item_title(int index, const char* value);
  void set_item_title(int index, const char* value, size_t size);
  ::std::string* add_item_title();
  void add_item_title(const ::std::string& value);
  void add_item_title(const char* value);
  void add_item_title(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& item_title() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_item_title();

  // repeated .artm.FloatArray item_topic_multiplier = 5;
  int item_topic_multiplier_size() const;
  void clear_item_topic_multiplier();
  static const int kItemTopicMultiplierFieldNumber = 5;
  const ::artm::FloatArray& item_topic_multiplier(int index) const;
  ::artm::FloatArray* mutable_item_topic_multiplier(int index);
  ::artm::FloatArray* add_item_topic_multiplier();
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_item_topic_multiplier();
  const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      item_topic_multiplier() const;

  // @@protoc_insertion_point(class_scope:artm.SmoothSparseThetaConfig)
 private:
  inline void set_has_transform_config();
  inline void clear_has_transform_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedField< float > alpha_iter_;
  ::artm::TransformConfig* transform_config_;
  ::google::protobuf::RepeatedPtrField< ::std::string> item_title_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > item_topic_multiplier_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SmoothSparseThetaConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC SmoothSparsePhiConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.SmoothSparsePhiConfig) */ {
 public:
  SmoothSparsePhiConfig();
  virtual ~SmoothSparsePhiConfig();

  SmoothSparsePhiConfig(const SmoothSparsePhiConfig& from);

  inline SmoothSparsePhiConfig& operator=(const SmoothSparsePhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothSparsePhiConfig& default_instance();

  void Swap(SmoothSparsePhiConfig* other);

  // implements Message ----------------------------------------------

  inline SmoothSparsePhiConfig* New() const { return New(NULL); }

  SmoothSparsePhiConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmoothSparsePhiConfig& from);
  void MergeFrom(const SmoothSparsePhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmoothSparsePhiConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string class_id = 2;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional string dictionary_name = 3;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 3;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // optional .artm.TransformConfig transform_config = 4;
  bool has_transform_config() const;
  void clear_transform_config();
  static const int kTransformConfigFieldNumber = 4;
  const ::artm::TransformConfig& transform_config() const;
  ::artm::TransformConfig* mutable_transform_config();
  ::artm::TransformConfig* release_transform_config();
  void set_allocated_transform_config(::artm::TransformConfig* transform_config);

  // @@protoc_insertion_point(class_scope:artm.SmoothSparsePhiConfig)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();
  inline void set_has_transform_config();
  inline void clear_has_transform_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  ::artm::TransformConfig* transform_config_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SmoothSparsePhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC DecorrelatorPhiConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.DecorrelatorPhiConfig) */ {
 public:
  DecorrelatorPhiConfig();
  virtual ~DecorrelatorPhiConfig();

  DecorrelatorPhiConfig(const DecorrelatorPhiConfig& from);

  inline DecorrelatorPhiConfig& operator=(const DecorrelatorPhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecorrelatorPhiConfig& default_instance();

  void Swap(DecorrelatorPhiConfig* other);

  // implements Message ----------------------------------------------

  inline DecorrelatorPhiConfig* New() const { return New(NULL); }

  DecorrelatorPhiConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DecorrelatorPhiConfig& from);
  void MergeFrom(const DecorrelatorPhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DecorrelatorPhiConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string class_id = 2;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated string first_topic_name = 3;
  int first_topic_name_size() const;
  void clear_first_topic_name();
  static const int kFirstTopicNameFieldNumber = 3;
  const ::std::string& first_topic_name(int index) const;
  ::std::string* mutable_first_topic_name(int index);
  void set_first_topic_name(int index, const ::std::string& value);
  void set_first_topic_name(int index, const char* value);
  void set_first_topic_name(int index, const char* value, size_t size);
  ::std::string* add_first_topic_name();
  void add_first_topic_name(const ::std::string& value);
  void add_first_topic_name(const char* value);
  void add_first_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& first_topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_first_topic_name();

  // repeated string second_topic_name = 4;
  int second_topic_name_size() const;
  void clear_second_topic_name();
  static const int kSecondTopicNameFieldNumber = 4;
  const ::std::string& second_topic_name(int index) const;
  ::std::string* mutable_second_topic_name(int index);
  void set_second_topic_name(int index, const ::std::string& value);
  void set_second_topic_name(int index, const char* value);
  void set_second_topic_name(int index, const char* value, size_t size);
  ::std::string* add_second_topic_name();
  void add_second_topic_name(const ::std::string& value);
  void add_second_topic_name(const char* value);
  void add_second_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& second_topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_second_topic_name();

  // repeated float value = 5;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 5;
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.DecorrelatorPhiConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> first_topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> second_topic_name_;
  ::google::protobuf::RepeatedField< float > value_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DecorrelatorPhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC MultiLanguagePhiConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.MultiLanguagePhiConfig) */ {
 public:
  MultiLanguagePhiConfig();
  virtual ~MultiLanguagePhiConfig();

  MultiLanguagePhiConfig(const MultiLanguagePhiConfig& from);

  inline MultiLanguagePhiConfig& operator=(const MultiLanguagePhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiLanguagePhiConfig& default_instance();

  void Swap(MultiLanguagePhiConfig* other);

  // implements Message ----------------------------------------------

  inline MultiLanguagePhiConfig* New() const { return New(NULL); }

  MultiLanguagePhiConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiLanguagePhiConfig& from);
  void MergeFrom(const MultiLanguagePhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiLanguagePhiConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.MultiLanguagePhiConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MultiLanguagePhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC LabelRegularizationPhiConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.LabelRegularizationPhiConfig) */ {
 public:
  LabelRegularizationPhiConfig();
  virtual ~LabelRegularizationPhiConfig();

  LabelRegularizationPhiConfig(const LabelRegularizationPhiConfig& from);

  inline LabelRegularizationPhiConfig& operator=(const LabelRegularizationPhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelRegularizationPhiConfig& default_instance();

  void Swap(LabelRegularizationPhiConfig* other);

  // implements Message ----------------------------------------------

  inline LabelRegularizationPhiConfig* New() const { return New(NULL); }

  LabelRegularizationPhiConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelRegularizationPhiConfig& from);
  void MergeFrom(const LabelRegularizationPhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LabelRegularizationPhiConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string class_id = 2;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional string dictionary_name = 3;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 3;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.LabelRegularizationPhiConfig)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static LabelRegularizationPhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC SpecifiedSparsePhiConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.SpecifiedSparsePhiConfig) */ {
 public:
  SpecifiedSparsePhiConfig();
  virtual ~SpecifiedSparsePhiConfig();

  SpecifiedSparsePhiConfig(const SpecifiedSparsePhiConfig& from);

  inline SpecifiedSparsePhiConfig& operator=(const SpecifiedSparsePhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecifiedSparsePhiConfig& default_instance();

  void Swap(SpecifiedSparsePhiConfig* other);

  // implements Message ----------------------------------------------

  inline SpecifiedSparsePhiConfig* New() const { return New(NULL); }

  SpecifiedSparsePhiConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecifiedSparsePhiConfig& from);
  void MergeFrom(const SpecifiedSparsePhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpecifiedSparsePhiConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SpecifiedSparsePhiConfig_SparseMode SparseMode;
  static const SparseMode SparseTopics =
    SpecifiedSparsePhiConfig_SparseMode_SparseTopics;
  static const SparseMode SparseTokens =
    SpecifiedSparsePhiConfig_SparseMode_SparseTokens;
  static inline bool SparseMode_IsValid(int value) {
    return SpecifiedSparsePhiConfig_SparseMode_IsValid(value);
  }
  static const SparseMode SparseMode_MIN =
    SpecifiedSparsePhiConfig_SparseMode_SparseMode_MIN;
  static const SparseMode SparseMode_MAX =
    SpecifiedSparsePhiConfig_SparseMode_SparseMode_MAX;
  static const int SparseMode_ARRAYSIZE =
    SpecifiedSparsePhiConfig_SparseMode_SparseMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SparseMode_descriptor() {
    return SpecifiedSparsePhiConfig_SparseMode_descriptor();
  }
  static inline const ::std::string& SparseMode_Name(SparseMode value) {
    return SpecifiedSparsePhiConfig_SparseMode_Name(value);
  }
  static inline bool SparseMode_Parse(const ::std::string& name,
      SparseMode* value) {
    return SpecifiedSparsePhiConfig_SparseMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional string class_id = 2 [default = "@default_class"];
  bool has_class_id() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id() const;
  void set_class_id(const ::std::string& value);
  void set_class_id(const char* value);
  void set_class_id(const char* value, size_t size);
  ::std::string* mutable_class_id();
  ::std::string* release_class_id();
  void set_allocated_class_id(::std::string* class_id);

  // optional int32 max_elements_count = 3 [default = 20];
  bool has_max_elements_count() const;
  void clear_max_elements_count();
  static const int kMaxElementsCountFieldNumber = 3;
  ::google::protobuf::int32 max_elements_count() const;
  void set_max_elements_count(::google::protobuf::int32 value);

  // optional float probability_threshold = 4 [default = 0.99];
  bool has_probability_threshold() const;
  void clear_probability_threshold();
  static const int kProbabilityThresholdFieldNumber = 4;
  float probability_threshold() const;
  void set_probability_threshold(float value);

  // optional .artm.SpecifiedSparsePhiConfig.SparseMode mode = 5 [default = SparseTopics];
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 5;
  ::artm::SpecifiedSparsePhiConfig_SparseMode mode() const;
  void set_mode(::artm::SpecifiedSparsePhiConfig_SparseMode value);

  // @@protoc_insertion_point(class_scope:artm.SpecifiedSparsePhiConfig)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_max_elements_count();
  inline void clear_has_max_elements_count();
  inline void set_has_probability_threshold();
  inline void clear_has_probability_threshold();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  static ::std::string* _default_class_id_;
  ::google::protobuf::internal::ArenaStringPtr class_id_;
  ::google::protobuf::int32 max_elements_count_;
  float probability_threshold_;
  int mode_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SpecifiedSparsePhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ImproveCoherencePhiConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ImproveCoherencePhiConfig) */ {
 public:
  ImproveCoherencePhiConfig();
  virtual ~ImproveCoherencePhiConfig();

  ImproveCoherencePhiConfig(const ImproveCoherencePhiConfig& from);

  inline ImproveCoherencePhiConfig& operator=(const ImproveCoherencePhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImproveCoherencePhiConfig& default_instance();

  void Swap(ImproveCoherencePhiConfig* other);

  // implements Message ----------------------------------------------

  inline ImproveCoherencePhiConfig* New() const { return New(NULL); }

  ImproveCoherencePhiConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImproveCoherencePhiConfig& from);
  void MergeFrom(const ImproveCoherencePhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImproveCoherencePhiConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string class_id = 2;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional string dictionary_name = 3;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 3;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.ImproveCoherencePhiConfig)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ImproveCoherencePhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC SmoothPtdwConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.SmoothPtdwConfig) */ {
 public:
  SmoothPtdwConfig();
  virtual ~SmoothPtdwConfig();

  SmoothPtdwConfig(const SmoothPtdwConfig& from);

  inline SmoothPtdwConfig& operator=(const SmoothPtdwConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothPtdwConfig& default_instance();

  void Swap(SmoothPtdwConfig* other);

  // implements Message ----------------------------------------------

  inline SmoothPtdwConfig* New() const { return New(NULL); }

  SmoothPtdwConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmoothPtdwConfig& from);
  void MergeFrom(const SmoothPtdwConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmoothPtdwConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SmoothPtdwConfig_SmoothType SmoothType;
  static const SmoothType MovingAverage =
    SmoothPtdwConfig_SmoothType_MovingAverage;
  static const SmoothType MovingProduct =
    SmoothPtdwConfig_SmoothType_MovingProduct;
  static inline bool SmoothType_IsValid(int value) {
    return SmoothPtdwConfig_SmoothType_IsValid(value);
  }
  static const SmoothType SmoothType_MIN =
    SmoothPtdwConfig_SmoothType_SmoothType_MIN;
  static const SmoothType SmoothType_MAX =
    SmoothPtdwConfig_SmoothType_SmoothType_MAX;
  static const int SmoothType_ARRAYSIZE =
    SmoothPtdwConfig_SmoothType_SmoothType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SmoothType_descriptor() {
    return SmoothPtdwConfig_SmoothType_descriptor();
  }
  static inline const ::std::string& SmoothType_Name(SmoothType value) {
    return SmoothPtdwConfig_SmoothType_Name(value);
  }
  static inline bool SmoothType_Parse(const ::std::string& name,
      SmoothType* value) {
    return SmoothPtdwConfig_SmoothType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.SmoothPtdwConfig.SmoothType type = 1 [default = MovingAverage];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::artm::SmoothPtdwConfig_SmoothType type() const;
  void set_type(::artm::SmoothPtdwConfig_SmoothType value);

  // optional int32 window = 3 [default = 10];
  bool has_window() const;
  void clear_window();
  static const int kWindowFieldNumber = 3;
  ::google::protobuf::int32 window() const;
  void set_window(::google::protobuf::int32 value);

  // optional float threshold = 4 [default = 1];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 4;
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:artm.SmoothPtdwConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_window();
  inline void clear_has_window();
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 window_;
  float threshold_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SmoothPtdwConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC TopicSelectionThetaConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.TopicSelectionThetaConfig) */ {
 public:
  TopicSelectionThetaConfig();
  virtual ~TopicSelectionThetaConfig();

  TopicSelectionThetaConfig(const TopicSelectionThetaConfig& from);

  inline TopicSelectionThetaConfig& operator=(const TopicSelectionThetaConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicSelectionThetaConfig& default_instance();

  void Swap(TopicSelectionThetaConfig* other);

  // implements Message ----------------------------------------------

  inline TopicSelectionThetaConfig* New() const { return New(NULL); }

  TopicSelectionThetaConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicSelectionThetaConfig& from);
  void MergeFrom(const TopicSelectionThetaConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicSelectionThetaConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated float topic_value = 2;
  int topic_value_size() const;
  void clear_topic_value();
  static const int kTopicValueFieldNumber = 2;
  float topic_value(int index) const;
  void set_topic_value(int index, float value);
  void add_topic_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      topic_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_topic_value();

  // repeated float alpha_iter = 3;
  int alpha_iter_size() const;
  void clear_alpha_iter();
  static const int kAlphaIterFieldNumber = 3;
  float alpha_iter(int index) const;
  void set_alpha_iter(int index, float value);
  void add_alpha_iter(float value);
  const ::google::protobuf::RepeatedField< float >&
      alpha_iter() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_alpha_iter();

  // @@protoc_insertion_point(class_scope:artm.TopicSelectionThetaConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedField< float > topic_value_;
  ::google::protobuf::RepeatedField< float > alpha_iter_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicSelectionThetaConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC BitermsPhiConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.BitermsPhiConfig) */ {
 public:
  BitermsPhiConfig();
  virtual ~BitermsPhiConfig();

  BitermsPhiConfig(const BitermsPhiConfig& from);

  inline BitermsPhiConfig& operator=(const BitermsPhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitermsPhiConfig& default_instance();

  void Swap(BitermsPhiConfig* other);

  // implements Message ----------------------------------------------

  inline BitermsPhiConfig* New() const { return New(NULL); }

  BitermsPhiConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitermsPhiConfig& from);
  void MergeFrom(const BitermsPhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BitermsPhiConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string class_id = 2;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional string dictionary_name = 3;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 3;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.BitermsPhiConfig)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static BitermsPhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC HierarchySparsingThetaConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.HierarchySparsingThetaConfig) */ {
 public:
  HierarchySparsingThetaConfig();
  virtual ~HierarchySparsingThetaConfig();

  HierarchySparsingThetaConfig(const HierarchySparsingThetaConfig& from);

  inline HierarchySparsingThetaConfig& operator=(const HierarchySparsingThetaConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HierarchySparsingThetaConfig& default_instance();

  void Swap(HierarchySparsingThetaConfig* other);

  // implements Message ----------------------------------------------

  inline HierarchySparsingThetaConfig* New() const { return New(NULL); }

  HierarchySparsingThetaConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HierarchySparsingThetaConfig& from);
  void MergeFrom(const HierarchySparsingThetaConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HierarchySparsingThetaConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated float parent_topic_proportion = 2;
  int parent_topic_proportion_size() const;
  void clear_parent_topic_proportion();
  static const int kParentTopicProportionFieldNumber = 2;
  float parent_topic_proportion(int index) const;
  void set_parent_topic_proportion(int index, float value);
  void add_parent_topic_proportion(float value);
  const ::google::protobuf::RepeatedField< float >&
      parent_topic_proportion() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_parent_topic_proportion();

  // repeated float alpha_iter = 3;
  int alpha_iter_size() const;
  void clear_alpha_iter();
  static const int kAlphaIterFieldNumber = 3;
  float alpha_iter(int index) const;
  void set_alpha_iter(int index, float value);
  void add_alpha_iter(float value);
  const ::google::protobuf::RepeatedField< float >&
      alpha_iter() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_alpha_iter();

  // @@protoc_insertion_point(class_scope:artm.HierarchySparsingThetaConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedField< float > parent_topic_proportion_;
  ::google::protobuf::RepeatedField< float > alpha_iter_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static HierarchySparsingThetaConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC TopicSegmentationPtdwConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.TopicSegmentationPtdwConfig) */ {
 public:
  TopicSegmentationPtdwConfig();
  virtual ~TopicSegmentationPtdwConfig();

  TopicSegmentationPtdwConfig(const TopicSegmentationPtdwConfig& from);

  inline TopicSegmentationPtdwConfig& operator=(const TopicSegmentationPtdwConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicSegmentationPtdwConfig& default_instance();

  void Swap(TopicSegmentationPtdwConfig* other);

  // implements Message ----------------------------------------------

  inline TopicSegmentationPtdwConfig* New() const { return New(NULL); }

  TopicSegmentationPtdwConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicSegmentationPtdwConfig& from);
  void MergeFrom(const TopicSegmentationPtdwConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicSegmentationPtdwConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string background_topic_names = 1;
  int background_topic_names_size() const;
  void clear_background_topic_names();
  static const int kBackgroundTopicNamesFieldNumber = 1;
  const ::std::string& background_topic_names(int index) const;
  ::std::string* mutable_background_topic_names(int index);
  void set_background_topic_names(int index, const ::std::string& value);
  void set_background_topic_names(int index, const char* value);
  void set_background_topic_names(int index, const char* value, size_t size);
  ::std::string* add_background_topic_names();
  void add_background_topic_names(const ::std::string& value);
  void add_background_topic_names(const char* value);
  void add_background_topic_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& background_topic_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_background_topic_names();

  // optional int32 window = 3 [default = 10];
  bool has_window() const;
  void clear_window();
  static const int kWindowFieldNumber = 3;
  ::google::protobuf::int32 window() const;
  void set_window(::google::protobuf::int32 value);

  // optional float threshold = 4 [default = 0.5];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 4;
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:artm.TopicSegmentationPtdwConfig)
 private:
  inline void set_has_window();
  inline void clear_has_window();
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> background_topic_names_;
  ::google::protobuf::int32 window_;
  float threshold_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicSegmentationPtdwConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC SmoothTimeInTopicsPhiConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.SmoothTimeInTopicsPhiConfig) */ {
 public:
  SmoothTimeInTopicsPhiConfig();
  virtual ~SmoothTimeInTopicsPhiConfig();

  SmoothTimeInTopicsPhiConfig(const SmoothTimeInTopicsPhiConfig& from);

  inline SmoothTimeInTopicsPhiConfig& operator=(const SmoothTimeInTopicsPhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothTimeInTopicsPhiConfig& default_instance();

  void Swap(SmoothTimeInTopicsPhiConfig* other);

  // implements Message ----------------------------------------------

  inline SmoothTimeInTopicsPhiConfig* New() const { return New(NULL); }

  SmoothTimeInTopicsPhiConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmoothTimeInTopicsPhiConfig& from);
  void MergeFrom(const SmoothTimeInTopicsPhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmoothTimeInTopicsPhiConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional string class_id = 2 [default = "@default_class"];
  bool has_class_id() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id() const;
  void set_class_id(const ::std::string& value);
  void set_class_id(const char* value);
  void set_class_id(const char* value, size_t size);
  ::std::string* mutable_class_id();
  ::std::string* release_class_id();
  void set_allocated_class_id(::std::string* class_id);

  // @@protoc_insertion_point(class_scope:artm.SmoothTimeInTopicsPhiConfig)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  static ::std::string* _default_class_id_;
  ::google::protobuf::internal::ArenaStringPtr class_id_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SmoothTimeInTopicsPhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC NetPlsaPhiConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.NetPlsaPhiConfig) */ {
 public:
  NetPlsaPhiConfig();
  virtual ~NetPlsaPhiConfig();

  NetPlsaPhiConfig(const NetPlsaPhiConfig& from);

  inline NetPlsaPhiConfig& operator=(const NetPlsaPhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetPlsaPhiConfig& default_instance();

  void Swap(NetPlsaPhiConfig* other);

  // implements Message ----------------------------------------------

  inline NetPlsaPhiConfig* New() const { return New(NULL); }

  NetPlsaPhiConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetPlsaPhiConfig& from);
  void MergeFrom(const NetPlsaPhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetPlsaPhiConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string class_id = 1;
  bool has_class_id() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  const ::std::string& class_id() const;
  void set_class_id(const ::std::string& value);
  void set_class_id(const char* value);
  void set_class_id(const char* value, size_t size);
  ::std::string* mutable_class_id();
  ::std::string* release_class_id();
  void set_allocated_class_id(::std::string* class_id);

  // repeated string topic_name = 2;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 2;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string vertex_name = 3;
  int vertex_name_size() const;
  void clear_vertex_name();
  static const int kVertexNameFieldNumber = 3;
  const ::std::string& vertex_name(int index) const;
  ::std::string* mutable_vertex_name(int index);
  void set_vertex_name(int index, const ::std::string& value);
  void set_vertex_name(int index, const char* value);
  void set_vertex_name(int index, const char* value, size_t size);
  ::std::string* add_vertex_name();
  void add_vertex_name(const ::std::string& value);
  void add_vertex_name(const char* value);
  void add_vertex_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& vertex_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_vertex_name();

  // repeated float vertex_weight = 4;
  int vertex_weight_size() const;
  void clear_vertex_weight();
  static const int kVertexWeightFieldNumber = 4;
  float vertex_weight(int index) const;
  void set_vertex_weight(int index, float value);
  void add_vertex_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      vertex_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_vertex_weight();

  // repeated int32 first_vertex_index = 5;
  int first_vertex_index_size() const;
  void clear_first_vertex_index();
  static const int kFirstVertexIndexFieldNumber = 5;
  ::google::protobuf::int32 first_vertex_index(int index) const;
  void set_first_vertex_index(int index, ::google::protobuf::int32 value);
  void add_first_vertex_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      first_vertex_index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_first_vertex_index();

  // repeated int32 second_vertex_index = 6;
  int second_vertex_index_size() const;
  void clear_second_vertex_index();
  static const int kSecondVertexIndexFieldNumber = 6;
  ::google::protobuf::int32 second_vertex_index(int index) const;
  void set_second_vertex_index(int index, ::google::protobuf::int32 value);
  void add_second_vertex_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      second_vertex_index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_second_vertex_index();

  // repeated float edge_weight = 7;
  int edge_weight_size() const;
  void clear_edge_weight();
  static const int kEdgeWeightFieldNumber = 7;
  float edge_weight(int index) const;
  void set_edge_weight(int index, float value);
  void add_edge_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      edge_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_edge_weight();

  // optional bool symmetric_edge_weights = 8 [default = false];
  bool has_symmetric_edge_weights() const;
  void clear_symmetric_edge_weights();
  static const int kSymmetricEdgeWeightsFieldNumber = 8;
  bool symmetric_edge_weights() const;
  void set_symmetric_edge_weights(bool value);

  // @@protoc_insertion_point(class_scope:artm.NetPlsaPhiConfig)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_symmetric_edge_weights();
  inline void clear_has_symmetric_edge_weights();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr class_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> vertex_name_;
  ::google::protobuf::RepeatedField< float > vertex_weight_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > first_vertex_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > second_vertex_index_;
  ::google::protobuf::RepeatedField< float > edge_weight_;
  bool symmetric_edge_weights_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static NetPlsaPhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC TransformConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.TransformConfig) */ {
 public:
  TransformConfig();
  virtual ~TransformConfig();

  TransformConfig(const TransformConfig& from);

  inline TransformConfig& operator=(const TransformConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformConfig& default_instance();

  void Swap(TransformConfig* other);

  // implements Message ----------------------------------------------

  inline TransformConfig* New() const { return New(NULL); }

  TransformConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformConfig& from);
  void MergeFrom(const TransformConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransformConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TransformConfig_TransformType TransformType;
  static const TransformType Logarithm =
    TransformConfig_TransformType_Logarithm;
  static const TransformType Polynomial =
    TransformConfig_TransformType_Polynomial;
  static const TransformType Constant =
    TransformConfig_TransformType_Constant;
  static inline bool TransformType_IsValid(int value) {
    return TransformConfig_TransformType_IsValid(value);
  }
  static const TransformType TransformType_MIN =
    TransformConfig_TransformType_TransformType_MIN;
  static const TransformType TransformType_MAX =
    TransformConfig_TransformType_TransformType_MAX;
  static const int TransformType_ARRAYSIZE =
    TransformConfig_TransformType_TransformType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransformType_descriptor() {
    return TransformConfig_TransformType_descriptor();
  }
  static inline const ::std::string& TransformType_Name(TransformType value) {
    return TransformConfig_TransformType_Name(value);
  }
  static inline bool TransformType_Parse(const ::std::string& name,
      TransformType* value) {
    return TransformConfig_TransformType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.TransformConfig.TransformType type = 1 [default = Constant];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::artm::TransformConfig_TransformType type() const;
  void set_type(::artm::TransformConfig_TransformType value);

  // optional float n = 2 [default = 1];
  bool has_n() const;
  void clear_n();
  static const int kNFieldNumber = 2;
  float n() const;
  void set_n(float value);

  // optional float a = 3 [default = 1];
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 3;
  float a() const;
  void set_a(float value);

  // @@protoc_insertion_point(class_scope:artm.TransformConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_n();
  inline void clear_has_n();
  inline void set_has_a();
  inline void clear_has_a();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  float n_;
  float a_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TransformConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ScoreConfig) */ {
 public:
  ScoreConfig();
  virtual ~ScoreConfig();

  ScoreConfig(const ScoreConfig& from);

  inline ScoreConfig& operator=(const ScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreConfig& default_instance();

  void Swap(ScoreConfig* other);

  // implements Message ----------------------------------------------

  inline ScoreConfig* New() const { return New(NULL); }

  ScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreConfig& from);
  void MergeFrom(const ScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::artm::ScoreType type() const;
  void set_type(::artm::ScoreType value);

  // optional bytes config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  void set_config(const char* value);
  void set_config(const void* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // optional string model_name = 4;
  bool has_model_name() const;
  void clear_model_name();
  static const int kModelNameFieldNumber = 4;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // optional string config_json = 5;
  bool has_config_json() const;
  void clear_config_json();
  static const int kConfigJsonFieldNumber = 5;
  const ::std::string& config_json() const;
  void set_config_json(const ::std::string& value);
  void set_config_json(const char* value);
  void set_config_json(const char* value, size_t size);
  ::std::string* mutable_config_json();
  ::std::string* release_config_json();
  void set_allocated_config_json(::std::string* config_json);

  // @@protoc_insertion_point(class_scope:artm.ScoreConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_config_json();
  inline void clear_has_config_json();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  ::google::protobuf::internal::ArenaStringPtr config_json_;
  int type_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ScoreData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ScoreData) */ {
 public:
  ScoreData();
  virtual ~ScoreData();

  ScoreData(const ScoreData& from);

  inline ScoreData& operator=(const ScoreData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreData& default_instance();

  void Swap(ScoreData* other);

  // implements Message ----------------------------------------------

  inline ScoreData* New() const { return New(NULL); }

  ScoreData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreData& from);
  void MergeFrom(const ScoreData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScoreData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::artm::ScoreType type() const;
  void set_type(::artm::ScoreType value);

  // optional bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string data_json = 4;
  bool has_data_json() const;
  void clear_data_json();
  static const int kDataJsonFieldNumber = 4;
  const ::std::string& data_json() const;
  void set_data_json(const ::std::string& value);
  void set_data_json(const char* value);
  void set_data_json(const char* value, size_t size);
  ::std::string* mutable_data_json();
  ::std::string* release_data_json();
  void set_allocated_data_json(::std::string* data_json);

  // @@protoc_insertion_point(class_scope:artm.ScoreData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_data_json();
  inline void clear_has_data_json();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr data_json_;
  int type_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ScoreData* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ScoreArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ScoreArray) */ {
 public:
  ScoreArray();
  virtual ~ScoreArray();

  ScoreArray(const ScoreArray& from);

  inline ScoreArray& operator=(const ScoreArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreArray& default_instance();

  void Swap(ScoreArray* other);

  // implements Message ----------------------------------------------

  inline ScoreArray* New() const { return New(NULL); }

  ScoreArray* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreArray& from);
  void MergeFrom(const ScoreArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScoreArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .artm.ScoreData score = 1;
  int score_size() const;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  const ::artm::ScoreData& score(int index) const;
  ::artm::ScoreData* mutable_score(int index);
  ::artm::ScoreData* add_score();
  ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >*
      mutable_score();
  const ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >&
      score() const;

  // @@protoc_insertion_point(class_scope:artm.ScoreArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::artm::ScoreData > score_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ScoreArray* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC PerplexityScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.PerplexityScoreConfig) */ {
 public:
  PerplexityScoreConfig();
  virtual ~PerplexityScoreConfig();

  PerplexityScoreConfig(const PerplexityScoreConfig& from);

  inline PerplexityScoreConfig& operator=(const PerplexityScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerplexityScoreConfig& default_instance();

  void Swap(PerplexityScoreConfig* other);

  // implements Message ----------------------------------------------

  inline PerplexityScoreConfig* New() const { return New(NULL); }

  PerplexityScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerplexityScoreConfig& from);
  void MergeFrom(const PerplexityScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerplexityScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PerplexityScoreConfig_Type Type;
  static const Type UnigramDocumentModel =
    PerplexityScoreConfig_Type_UnigramDocumentModel;
  static const Type UnigramCollectionModel =
    PerplexityScoreConfig_Type_UnigramCollectionModel;
  static inline bool Type_IsValid(int value) {
    return PerplexityScoreConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PerplexityScoreConfig_Type_Type_MIN;
  static const Type Type_MAX =
    PerplexityScoreConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PerplexityScoreConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PerplexityScoreConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PerplexityScoreConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PerplexityScoreConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.PerplexityScoreConfig.Type model_type = 1 [default = UnigramDocumentModel];
  bool has_model_type() const;
  void clear_model_type();
  static const int kModelTypeFieldNumber = 1;
  ::artm::PerplexityScoreConfig_Type model_type() const;
  void set_model_type(::artm::PerplexityScoreConfig_Type value);

  // optional string dictionary_name = 2;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 2;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // repeated string class_id = 3;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 3;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated string transaction_typename = 4;
  int transaction_typename_size() const;
  void clear_transaction_typename();
  static const int kTransactionTypenameFieldNumber = 4;
  const ::std::string& transaction_typename(int index) const;
  ::std::string* mutable_transaction_typename(int index);
  void set_transaction_typename(int index, const ::std::string& value);
  void set_transaction_typename(int index, const char* value);
  void set_transaction_typename(int index, const char* value, size_t size);
  ::std::string* add_transaction_typename();
  void add_transaction_typename(const ::std::string& value);
  void add_transaction_typename(const char* value);
  void add_transaction_typename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& transaction_typename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_transaction_typename();

  // @@protoc_insertion_point(class_scope:artm.PerplexityScoreConfig)
 private:
  inline void set_has_model_type();
  inline void clear_has_model_type();
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> transaction_typename_;
  int model_type_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static PerplexityScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC PerplexityScore_TransactionNameInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.PerplexityScore.TransactionNameInfo) */ {
 public:
  PerplexityScore_TransactionNameInfo();
  virtual ~PerplexityScore_TransactionNameInfo();

  PerplexityScore_TransactionNameInfo(const PerplexityScore_TransactionNameInfo& from);

  inline PerplexityScore_TransactionNameInfo& operator=(const PerplexityScore_TransactionNameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerplexityScore_TransactionNameInfo& default_instance();

  void Swap(PerplexityScore_TransactionNameInfo* other);

  // implements Message ----------------------------------------------

  inline PerplexityScore_TransactionNameInfo* New() const { return New(NULL); }

  PerplexityScore_TransactionNameInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerplexityScore_TransactionNameInfo& from);
  void MergeFrom(const PerplexityScore_TransactionNameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerplexityScore_TransactionNameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string transaction_typename = 1;
  bool has_transaction_typename() const;
  void clear_transaction_typename();
  static const int kTransactionTypenameFieldNumber = 1;
  const ::std::string& transaction_typename() const;
  void set_transaction_typename(const ::std::string& value);
  void set_transaction_typename(const char* value);
  void set_transaction_typename(const char* value, size_t size);
  ::std::string* mutable_transaction_typename();
  ::std::string* release_transaction_typename();
  void set_allocated_transaction_typename(::std::string* transaction_typename);

  // optional double raw = 2;
  bool has_raw() const;
  void clear_raw();
  static const int kRawFieldNumber = 2;
  double raw() const;
  void set_raw(double value);

  // optional double normalizer = 3;
  bool has_normalizer() const;
  void clear_normalizer();
  static const int kNormalizerFieldNumber = 3;
  double normalizer() const;
  void set_normalizer(double value);

  // optional int64 zero_words = 4;
  bool has_zero_words() const;
  void clear_zero_words();
  static const int kZeroWordsFieldNumber = 4;
  ::google::protobuf::int64 zero_words() const;
  void set_zero_words(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.PerplexityScore.TransactionNameInfo)
 private:
  inline void set_has_transaction_typename();
  inline void clear_has_transaction_typename();
  inline void set_has_raw();
  inline void clear_has_raw();
  inline void set_has_normalizer();
  inline void clear_has_normalizer();
  inline void set_has_zero_words();
  inline void clear_has_zero_words();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr transaction_typename_;
  double raw_;
  double normalizer_;
  ::google::protobuf::int64 zero_words_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static PerplexityScore_TransactionNameInfo* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC PerplexityScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.PerplexityScore) */ {
 public:
  PerplexityScore();
  virtual ~PerplexityScore();

  PerplexityScore(const PerplexityScore& from);

  inline PerplexityScore& operator=(const PerplexityScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerplexityScore& default_instance();

  void Swap(PerplexityScore* other);

  // implements Message ----------------------------------------------

  inline PerplexityScore* New() const { return New(NULL); }

  PerplexityScore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerplexityScore& from);
  void MergeFrom(const PerplexityScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerplexityScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PerplexityScore_TransactionNameInfo TransactionNameInfo;

  // accessors -------------------------------------------------------

  // optional float value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // optional double raw = 2;
  bool has_raw() const;
  void clear_raw();
  static const int kRawFieldNumber = 2;
  double raw() const;
  void set_raw(double value);

  // optional double normalizer = 3;
  bool has_normalizer() const;
  void clear_normalizer();
  static const int kNormalizerFieldNumber = 3;
  double normalizer() const;
  void set_normalizer(double value);

  // optional int64 zero_words = 4;
  bool has_zero_words() const;
  void clear_zero_words();
  static const int kZeroWordsFieldNumber = 4;
  ::google::protobuf::int64 zero_words() const;
  void set_zero_words(::google::protobuf::int64 value);

  // repeated .artm.PerplexityScore.TransactionNameInfo transaction_typename_info = 5;
  int transaction_typename_info_size() const;
  void clear_transaction_typename_info();
  static const int kTransactionTypenameInfoFieldNumber = 5;
  const ::artm::PerplexityScore_TransactionNameInfo& transaction_typename_info(int index) const;
  ::artm::PerplexityScore_TransactionNameInfo* mutable_transaction_typename_info(int index);
  ::artm::PerplexityScore_TransactionNameInfo* add_transaction_typename_info();
  ::google::protobuf::RepeatedPtrField< ::artm::PerplexityScore_TransactionNameInfo >*
      mutable_transaction_typename_info();
  const ::google::protobuf::RepeatedPtrField< ::artm::PerplexityScore_TransactionNameInfo >&
      transaction_typename_info() const;

  // @@protoc_insertion_point(class_scope:artm.PerplexityScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_raw();
  inline void clear_has_raw();
  inline void set_has_normalizer();
  inline void clear_has_normalizer();
  inline void set_has_zero_words();
  inline void clear_has_zero_words();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double raw_;
  double normalizer_;
  ::google::protobuf::int64 zero_words_;
  ::google::protobuf::RepeatedPtrField< ::artm::PerplexityScore_TransactionNameInfo > transaction_typename_info_;
  float value_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static PerplexityScore* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC SparsityThetaScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.SparsityThetaScoreConfig) */ {
 public:
  SparsityThetaScoreConfig();
  virtual ~SparsityThetaScoreConfig();

  SparsityThetaScoreConfig(const SparsityThetaScoreConfig& from);

  inline SparsityThetaScoreConfig& operator=(const SparsityThetaScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparsityThetaScoreConfig& default_instance();

  void Swap(SparsityThetaScoreConfig* other);

  // implements Message ----------------------------------------------

  inline SparsityThetaScoreConfig* New() const { return New(NULL); }

  SparsityThetaScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparsityThetaScoreConfig& from);
  void MergeFrom(const SparsityThetaScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparsityThetaScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float eps = 3 [default = 1e-37];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 3;
  float eps() const;
  void set_eps(float value);

  // repeated string topic_name = 4;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 4;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // @@protoc_insertion_point(class_scope:artm.SparsityThetaScoreConfig)
 private:
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  float eps_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SparsityThetaScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC SparsityThetaScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.SparsityThetaScore) */ {
 public:
  SparsityThetaScore();
  virtual ~SparsityThetaScore();

  SparsityThetaScore(const SparsityThetaScore& from);

  inline SparsityThetaScore& operator=(const SparsityThetaScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparsityThetaScore& default_instance();

  void Swap(SparsityThetaScore* other);

  // implements Message ----------------------------------------------

  inline SparsityThetaScore* New() const { return New(NULL); }

  SparsityThetaScore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparsityThetaScore& from);
  void MergeFrom(const SparsityThetaScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparsityThetaScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // optional int64 zero_topics = 2;
  bool has_zero_topics() const;
  void clear_zero_topics();
  static const int kZeroTopicsFieldNumber = 2;
  ::google::protobuf::int64 zero_topics() const;
  void set_zero_topics(::google::protobuf::int64 value);

  // optional int64 total_topics = 3;
  bool has_total_topics() const;
  void clear_total_topics();
  static const int kTotalTopicsFieldNumber = 3;
  ::google::protobuf::int64 total_topics() const;
  void set_total_topics(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.SparsityThetaScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_zero_topics();
  inline void clear_has_zero_topics();
  inline void set_has_total_topics();
  inline void clear_has_total_topics();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 zero_topics_;
  ::google::protobuf::int64 total_topics_;
  float value_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SparsityThetaScore* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC SparsityPhiScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.SparsityPhiScoreConfig) */ {
 public:
  SparsityPhiScoreConfig();
  virtual ~SparsityPhiScoreConfig();

  SparsityPhiScoreConfig(const SparsityPhiScoreConfig& from);

  inline SparsityPhiScoreConfig& operator=(const SparsityPhiScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparsityPhiScoreConfig& default_instance();

  void Swap(SparsityPhiScoreConfig* other);

  // implements Message ----------------------------------------------

  inline SparsityPhiScoreConfig* New() const { return New(NULL); }

  SparsityPhiScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparsityPhiScoreConfig& from);
  void MergeFrom(const SparsityPhiScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparsityPhiScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float eps = 1 [default = 1e-37];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 1;
  float eps() const;
  void set_eps(float value);

  // optional string class_id = 2 [default = "@default_class"];
  bool has_class_id() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id() const;
  void set_class_id(const ::std::string& value);
  void set_class_id(const char* value);
  void set_class_id(const char* value, size_t size);
  ::std::string* mutable_class_id();
  ::std::string* release_class_id();
  void set_allocated_class_id(::std::string* class_id);

  // repeated string topic_name = 3;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // @@protoc_insertion_point(class_scope:artm.SparsityPhiScoreConfig)
 private:
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_class_id_;
  ::google::protobuf::internal::ArenaStringPtr class_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  float eps_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SparsityPhiScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC SparsityPhiScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.SparsityPhiScore) */ {
 public:
  SparsityPhiScore();
  virtual ~SparsityPhiScore();

  SparsityPhiScore(const SparsityPhiScore& from);

  inline SparsityPhiScore& operator=(const SparsityPhiScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparsityPhiScore& default_instance();

  void Swap(SparsityPhiScore* other);

  // implements Message ----------------------------------------------

  inline SparsityPhiScore* New() const { return New(NULL); }

  SparsityPhiScore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparsityPhiScore& from);
  void MergeFrom(const SparsityPhiScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparsityPhiScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // optional int64 zero_tokens = 2;
  bool has_zero_tokens() const;
  void clear_zero_tokens();
  static const int kZeroTokensFieldNumber = 2;
  ::google::protobuf::int64 zero_tokens() const;
  void set_zero_tokens(::google::protobuf::int64 value);

  // optional int64 total_tokens = 3;
  bool has_total_tokens() const;
  void clear_total_tokens();
  static const int kTotalTokensFieldNumber = 3;
  ::google::protobuf::int64 total_tokens() const;
  void set_total_tokens(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.SparsityPhiScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_zero_tokens();
  inline void clear_has_zero_tokens();
  inline void set_has_total_tokens();
  inline void clear_has_total_tokens();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 zero_tokens_;
  ::google::protobuf::int64 total_tokens_;
  float value_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SparsityPhiScore* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ItemsProcessedScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ItemsProcessedScoreConfig) */ {
 public:
  ItemsProcessedScoreConfig();
  virtual ~ItemsProcessedScoreConfig();

  ItemsProcessedScoreConfig(const ItemsProcessedScoreConfig& from);

  inline ItemsProcessedScoreConfig& operator=(const ItemsProcessedScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemsProcessedScoreConfig& default_instance();

  void Swap(ItemsProcessedScoreConfig* other);

  // implements Message ----------------------------------------------

  inline ItemsProcessedScoreConfig* New() const { return New(NULL); }

  ItemsProcessedScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemsProcessedScoreConfig& from);
  void MergeFrom(const ItemsProcessedScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ItemsProcessedScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.ItemsProcessedScoreConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ItemsProcessedScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ItemsProcessedScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ItemsProcessedScore) */ {
 public:
  ItemsProcessedScore();
  virtual ~ItemsProcessedScore();

  ItemsProcessedScore(const ItemsProcessedScore& from);

  inline ItemsProcessedScore& operator=(const ItemsProcessedScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemsProcessedScore& default_instance();

  void Swap(ItemsProcessedScore* other);

  // implements Message ----------------------------------------------

  inline ItemsProcessedScore* New() const { return New(NULL); }

  ItemsProcessedScore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemsProcessedScore& from);
  void MergeFrom(const ItemsProcessedScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ItemsProcessedScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 value = 1 [default = 0];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // optional int32 num_batches = 2 [default = 0];
  bool has_num_batches() const;
  void clear_num_batches();
  static const int kNumBatchesFieldNumber = 2;
  ::google::protobuf::int32 num_batches() const;
  void set_num_batches(::google::protobuf::int32 value);

  // optional float token_weight = 3 [default = 0];
  bool has_token_weight() const;
  void clear_token_weight();
  static const int kTokenWeightFieldNumber = 3;
  float token_weight() const;
  void set_token_weight(float value);

  // optional float token_weight_in_effect = 4 [default = 0];
  bool has_token_weight_in_effect() const;
  void clear_token_weight_in_effect();
  static const int kTokenWeightInEffectFieldNumber = 4;
  float token_weight_in_effect() const;
  void set_token_weight_in_effect(float value);

  // @@protoc_insertion_point(class_scope:artm.ItemsProcessedScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_num_batches();
  inline void clear_has_num_batches();
  inline void set_has_token_weight();
  inline void clear_has_token_weight();
  inline void set_has_token_weight_in_effect();
  inline void clear_has_token_weight_in_effect();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 num_batches_;
  float token_weight_;
  float token_weight_in_effect_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ItemsProcessedScore* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC TopTokensScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.TopTokensScoreConfig) */ {
 public:
  TopTokensScoreConfig();
  virtual ~TopTokensScoreConfig();

  TopTokensScoreConfig(const TopTokensScoreConfig& from);

  inline TopTokensScoreConfig& operator=(const TopTokensScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopTokensScoreConfig& default_instance();

  void Swap(TopTokensScoreConfig* other);

  // implements Message ----------------------------------------------

  inline TopTokensScoreConfig* New() const { return New(NULL); }

  TopTokensScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopTokensScoreConfig& from);
  void MergeFrom(const TopTokensScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopTokensScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_tokens = 1 [default = 10];
  bool has_num_tokens() const;
  void clear_num_tokens();
  static const int kNumTokensFieldNumber = 1;
  ::google::protobuf::int32 num_tokens() const;
  void set_num_tokens(::google::protobuf::int32 value);

  // optional string class_id = 2 [default = "@default_class"];
  bool has_class_id() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id() const;
  void set_class_id(const ::std::string& value);
  void set_class_id(const char* value);
  void set_class_id(const char* value, size_t size);
  ::std::string* mutable_class_id();
  ::std::string* release_class_id();
  void set_allocated_class_id(::std::string* class_id);

  // repeated string topic_name = 3;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional string cooccurrence_dictionary_name = 4;
  bool has_cooccurrence_dictionary_name() const;
  void clear_cooccurrence_dictionary_name();
  static const int kCooccurrenceDictionaryNameFieldNumber = 4;
  const ::std::string& cooccurrence_dictionary_name() const;
  void set_cooccurrence_dictionary_name(const ::std::string& value);
  void set_cooccurrence_dictionary_name(const char* value);
  void set_cooccurrence_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_cooccurrence_dictionary_name();
  ::std::string* release_cooccurrence_dictionary_name();
  void set_allocated_cooccurrence_dictionary_name(::std::string* cooccurrence_dictionary_name);

  // optional float eps = 5 [default = 1e-37];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 5;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:artm.TopTokensScoreConfig)
 private:
  inline void set_has_num_tokens();
  inline void clear_has_num_tokens();
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_cooccurrence_dictionary_name();
  inline void clear_has_cooccurrence_dictionary_name();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_class_id_;
  ::google::protobuf::internal::ArenaStringPtr class_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::int32 num_tokens_;
  float eps_;
  ::google::protobuf::internal::ArenaStringPtr cooccurrence_dictionary_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopTokensScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC TopTokensScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.TopTokensScore) */ {
 public:
  TopTokensScore();
  virtual ~TopTokensScore();

  TopTokensScore(const TopTokensScore& from);

  inline TopTokensScore& operator=(const TopTokensScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopTokensScore& default_instance();

  void Swap(TopTokensScore* other);

  // implements Message ----------------------------------------------

  inline TopTokensScore* New() const { return New(NULL); }

  TopTokensScore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopTokensScore& from);
  void MergeFrom(const TopTokensScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopTokensScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_entries = 1;
  bool has_num_entries() const;
  void clear_num_entries();
  static const int kNumEntriesFieldNumber = 1;
  ::google::protobuf::int32 num_entries() const;
  void set_num_entries(::google::protobuf::int32 value);

  // repeated string topic_name = 2;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 2;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated int32 topic_index = 3;
  int topic_index_size() const;
  void clear_topic_index();
  static const int kTopicIndexFieldNumber = 3;
  ::google::protobuf::int32 topic_index(int index) const;
  void set_topic_index(int index, ::google::protobuf::int32 value);
  void add_topic_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      topic_index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_topic_index();

  // repeated string token = 4;
  int token_size() const;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token(int index) const;
  ::std::string* mutable_token(int index);
  void set_token(int index, const ::std::string& value);
  void set_token(int index, const char* value);
  void set_token(int index, const char* value, size_t size);
  ::std::string* add_token();
  void add_token(const ::std::string& value);
  void add_token(const char* value);
  void add_token(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated float weight = 5;
  int weight_size() const;
  void clear_weight();
  static const int kWeightFieldNumber = 5;
  float weight(int index) const;
  void set_weight(int index, float value);
  void add_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight();

  // repeated float coherence = 6;
  int coherence_size() const;
  void clear_coherence();
  static const int kCoherenceFieldNumber = 6;
  float coherence(int index) const;
  void set_coherence(int index, float value);
  void add_coherence(float value);
  const ::google::protobuf::RepeatedField< float >&
      coherence() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_coherence();

  // optional float average_coherence = 7;
  bool has_average_coherence() const;
  void clear_average_coherence();
  static const int kAverageCoherenceFieldNumber = 7;
  float average_coherence() const;
  void set_average_coherence(float value);

  // @@protoc_insertion_point(class_scope:artm.TopTokensScore)
 private:
  inline void set_has_num_entries();
  inline void clear_has_num_entries();
  inline void set_has_average_coherence();
  inline void clear_has_average_coherence();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > topic_index_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::int32 num_entries_;
  float average_coherence_;
  ::google::protobuf::RepeatedField< float > weight_;
  ::google::protobuf::RepeatedField< float > coherence_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopTokensScore* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ThetaSnippetScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ThetaSnippetScoreConfig) */ {
 public:
  ThetaSnippetScoreConfig();
  virtual ~ThetaSnippetScoreConfig();

  ThetaSnippetScoreConfig(const ThetaSnippetScoreConfig& from);

  inline ThetaSnippetScoreConfig& operator=(const ThetaSnippetScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThetaSnippetScoreConfig& default_instance();

  void Swap(ThetaSnippetScoreConfig* other);

  // implements Message ----------------------------------------------

  inline ThetaSnippetScoreConfig* New() const { return New(NULL); }

  ThetaSnippetScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThetaSnippetScoreConfig& from);
  void MergeFrom(const ThetaSnippetScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ThetaSnippetScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_items = 4 [default = 10];
  bool has_num_items() const;
  void clear_num_items();
  static const int kNumItemsFieldNumber = 4;
  ::google::protobuf::int32 num_items() const;
  void set_num_items(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.ThetaSnippetScoreConfig)
 private:
  inline void set_has_num_items();
  inline void clear_has_num_items();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_items_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ThetaSnippetScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ThetaSnippetScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ThetaSnippetScore) */ {
 public:
  ThetaSnippetScore();
  virtual ~ThetaSnippetScore();

  ThetaSnippetScore(const ThetaSnippetScore& from);

  inline ThetaSnippetScore& operator=(const ThetaSnippetScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThetaSnippetScore& default_instance();

  void Swap(ThetaSnippetScore* other);

  // implements Message ----------------------------------------------

  inline ThetaSnippetScore* New() const { return New(NULL); }

  ThetaSnippetScore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThetaSnippetScore& from);
  void MergeFrom(const ThetaSnippetScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ThetaSnippetScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 item_id = 1;
  int item_id_size() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  ::google::protobuf::int32 item_id(int index) const;
  void set_item_id(int index, ::google::protobuf::int32 value);
  void add_item_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated .artm.FloatArray values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::artm::FloatArray& values(int index) const;
  ::artm::FloatArray* mutable_values(int index);
  ::artm::FloatArray* add_values();
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_values();
  const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      values() const;

  // @@protoc_insertion_point(class_scope:artm.ThetaSnippetScore)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > values_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ThetaSnippetScore* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC TopicKernelScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.TopicKernelScoreConfig) */ {
 public:
  TopicKernelScoreConfig();
  virtual ~TopicKernelScoreConfig();

  TopicKernelScoreConfig(const TopicKernelScoreConfig& from);

  inline TopicKernelScoreConfig& operator=(const TopicKernelScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicKernelScoreConfig& default_instance();

  void Swap(TopicKernelScoreConfig* other);

  // implements Message ----------------------------------------------

  inline TopicKernelScoreConfig* New() const { return New(NULL); }

  TopicKernelScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicKernelScoreConfig& from);
  void MergeFrom(const TopicKernelScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicKernelScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float eps = 1 [default = 1e-37];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 1;
  float eps() const;
  void set_eps(float value);

  // optional string class_id = 2 [default = "@default_class"];
  bool has_class_id() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id() const;
  void set_class_id(const ::std::string& value);
  void set_class_id(const char* value);
  void set_class_id(const char* value, size_t size);
  ::std::string* mutable_class_id();
  ::std::string* release_class_id();
  void set_allocated_class_id(::std::string* class_id);

  // repeated string topic_name = 3;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional float probability_mass_threshold = 4 [default = 0.1];
  bool has_probability_mass_threshold() const;
  void clear_probability_mass_threshold();
  static const int kProbabilityMassThresholdFieldNumber = 4;
  float probability_mass_threshold() const;
  void set_probability_mass_threshold(float value);

  // optional string cooccurrence_dictionary_name = 5;
  bool has_cooccurrence_dictionary_name() const;
  void clear_cooccurrence_dictionary_name();
  static const int kCooccurrenceDictionaryNameFieldNumber = 5;
  const ::std::string& cooccurrence_dictionary_name() const;
  void set_cooccurrence_dictionary_name(const ::std::string& value);
  void set_cooccurrence_dictionary_name(const char* value);
  void set_cooccurrence_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_cooccurrence_dictionary_name();
  ::std::string* release_cooccurrence_dictionary_name();
  void set_allocated_cooccurrence_dictionary_name(::std::string* cooccurrence_dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.TopicKernelScoreConfig)
 private:
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_probability_mass_threshold();
  inline void clear_has_probability_mass_threshold();
  inline void set_has_cooccurrence_dictionary_name();
  inline void clear_has_cooccurrence_dictionary_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_class_id_;
  ::google::protobuf::internal::ArenaStringPtr class_id_;
  float eps_;
  float probability_mass_threshold_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::internal::ArenaStringPtr cooccurrence_dictionary_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicKernelScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC TopicKernelScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.TopicKernelScore) */ {
 public:
  TopicKernelScore();
  virtual ~TopicKernelScore();

  TopicKernelScore(const TopicKernelScore& from);

  inline TopicKernelScore& operator=(const TopicKernelScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicKernelScore& default_instance();

  void Swap(TopicKernelScore* other);

  // implements Message ----------------------------------------------

  inline TopicKernelScore* New() const { return New(NULL); }

  TopicKernelScore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicKernelScore& from);
  void MergeFrom(const TopicKernelScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicKernelScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float kernel_size = 1;
  int kernel_size_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 1;
  float kernel_size(int index) const;
  void set_kernel_size(int index, float value);
  void add_kernel_size(float value);
  const ::google::protobuf::RepeatedField< float >&
      kernel_size() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_kernel_size();

  // repeated float kernel_purity = 2;
  int kernel_purity_size() const;
  void clear_kernel_purity();
  static const int kKernelPurityFieldNumber = 2;
  float kernel_purity(int index) const;
  void set_kernel_purity(int index, float value);
  void add_kernel_purity(float value);
  const ::google::protobuf::RepeatedField< float >&
      kernel_purity() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_kernel_purity();

  // repeated float kernel_contrast = 3;
  int kernel_contrast_size() const;
  void clear_kernel_contrast();
  static const int kKernelContrastFieldNumber = 3;
  float kernel_contrast(int index) const;
  void set_kernel_contrast(int index, float value);
  void add_kernel_contrast(float value);
  const ::google::protobuf::RepeatedField< float >&
      kernel_contrast() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_kernel_contrast();

  // optional float average_kernel_size = 4;
  bool has_average_kernel_size() const;
  void clear_average_kernel_size();
  static const int kAverageKernelSizeFieldNumber = 4;
  float average_kernel_size() const;
  void set_average_kernel_size(float value);

  // optional float average_kernel_purity = 5;
  bool has_average_kernel_purity() const;
  void clear_average_kernel_purity();
  static const int kAverageKernelPurityFieldNumber = 5;
  float average_kernel_purity() const;
  void set_average_kernel_purity(float value);

  // optional float average_kernel_contrast = 6;
  bool has_average_kernel_contrast() const;
  void clear_average_kernel_contrast();
  static const int kAverageKernelContrastFieldNumber = 6;
  float average_kernel_contrast() const;
  void set_average_kernel_contrast(float value);

  // repeated float coherence = 7;
  int coherence_size() const;
  void clear_coherence();
  static const int kCoherenceFieldNumber = 7;
  float coherence(int index) const;
  void set_coherence(int index, float value);
  void add_coherence(float value);
  const ::google::protobuf::RepeatedField< float >&
      coherence() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_coherence();

  // optional float average_coherence = 8;
  bool has_average_coherence() const;
  void clear_average_coherence();
  static const int kAverageCoherenceFieldNumber = 8;
  float average_coherence() const;
  void set_average_coherence(float value);

  // repeated .artm.StringArray kernel_tokens = 9;
  int kernel_tokens_size() const;
  void clear_kernel_tokens();
  static const int kKernelTokensFieldNumber = 9;
  const ::artm::StringArray& kernel_tokens(int index) const;
  ::artm::StringArray* mutable_kernel_tokens(int index);
  ::artm::StringArray* add_kernel_tokens();
  ::google::protobuf::RepeatedPtrField< ::artm::StringArray >*
      mutable_kernel_tokens();
  const ::google::protobuf::RepeatedPtrField< ::artm::StringArray >&
      kernel_tokens() const;

  // repeated string topic_name = 10;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 10;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // @@protoc_insertion_point(class_scope:artm.TopicKernelScore)
 private:
  inline void set_has_average_kernel_size();
  inline void clear_has_average_kernel_size();
  inline void set_has_average_kernel_purity();
  inline void clear_has_average_kernel_purity();
  inline void set_has_average_kernel_contrast();
  inline void clear_has_average_kernel_contrast();
  inline void set_has_average_coherence();
  inline void clear_has_average_coherence();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > kernel_size_;
  ::google::protobuf::RepeatedField< float > kernel_purity_;
  ::google::protobuf::RepeatedField< float > kernel_contrast_;
  float average_kernel_size_;
  float average_kernel_purity_;
  ::google::protobuf::RepeatedField< float > coherence_;
  float average_kernel_contrast_;
  float average_coherence_;
  ::google::protobuf::RepeatedPtrField< ::artm::StringArray > kernel_tokens_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicKernelScore* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC TopicMassPhiScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.TopicMassPhiScoreConfig) */ {
 public:
  TopicMassPhiScoreConfig();
  virtual ~TopicMassPhiScoreConfig();

  TopicMassPhiScoreConfig(const TopicMassPhiScoreConfig& from);

  inline TopicMassPhiScoreConfig& operator=(const TopicMassPhiScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicMassPhiScoreConfig& default_instance();

  void Swap(TopicMassPhiScoreConfig* other);

  // implements Message ----------------------------------------------

  inline TopicMassPhiScoreConfig* New() const { return New(NULL); }

  TopicMassPhiScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicMassPhiScoreConfig& from);
  void MergeFrom(const TopicMassPhiScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicMassPhiScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float eps = 1 [default = 1e-37];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 1;
  float eps() const;
  void set_eps(float value);

  // repeated string class_id = 2;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated string topic_name = 3;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // @@protoc_insertion_point(class_scope:artm.TopicMassPhiScoreConfig)
 private:
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  float eps_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicMassPhiScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC TopicMassPhiScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.TopicMassPhiScore) */ {
 public:
  TopicMassPhiScore();
  virtual ~TopicMassPhiScore();

  TopicMassPhiScore(const TopicMassPhiScore& from);

  inline TopicMassPhiScore& operator=(const TopicMassPhiScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicMassPhiScore& default_instance();

  void Swap(TopicMassPhiScore* other);

  // implements Message ----------------------------------------------

  inline TopicMassPhiScore* New() const { return New(NULL); }

  TopicMassPhiScore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicMassPhiScore& from);
  void MergeFrom(const TopicMassPhiScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicMassPhiScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // repeated string topic_name = 2;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 2;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated float topic_ratio = 3;
  int topic_ratio_size() const;
  void clear_topic_ratio();
  static const int kTopicRatioFieldNumber = 3;
  float topic_ratio(int index) const;
  void set_topic_ratio(int index, float value);
  void add_topic_ratio(float value);
  const ::google::protobuf::RepeatedField< float >&
      topic_ratio() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_topic_ratio();

  // repeated float topic_mass = 4;
  int topic_mass_size() const;
  void clear_topic_mass();
  static const int kTopicMassFieldNumber = 4;
  float topic_mass(int index) const;
  void set_topic_mass(int index, float value);
  void add_topic_mass(float value);
  const ::google::protobuf::RepeatedField< float >&
      topic_mass() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_topic_mass();

  // @@protoc_insertion_point(class_scope:artm.TopicMassPhiScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedField< float > topic_ratio_;
  ::google::protobuf::RepeatedField< float > topic_mass_;
  float value_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicMassPhiScore* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ClassPrecisionScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ClassPrecisionScoreConfig) */ {
 public:
  ClassPrecisionScoreConfig();
  virtual ~ClassPrecisionScoreConfig();

  ClassPrecisionScoreConfig(const ClassPrecisionScoreConfig& from);

  inline ClassPrecisionScoreConfig& operator=(const ClassPrecisionScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassPrecisionScoreConfig& default_instance();

  void Swap(ClassPrecisionScoreConfig* other);

  // implements Message ----------------------------------------------

  inline ClassPrecisionScoreConfig* New() const { return New(NULL); }

  ClassPrecisionScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassPrecisionScoreConfig& from);
  void MergeFrom(const ClassPrecisionScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClassPrecisionScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.ClassPrecisionScoreConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ClassPrecisionScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ClassPrecisionScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ClassPrecisionScore) */ {
 public:
  ClassPrecisionScore();
  virtual ~ClassPrecisionScore();

  ClassPrecisionScore(const ClassPrecisionScore& from);

  inline ClassPrecisionScore& operator=(const ClassPrecisionScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassPrecisionScore& default_instance();

  void Swap(ClassPrecisionScore* other);

  // implements Message ----------------------------------------------

  inline ClassPrecisionScore* New() const { return New(NULL); }

  ClassPrecisionScore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassPrecisionScore& from);
  void MergeFrom(const ClassPrecisionScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClassPrecisionScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // optional float error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  float error() const;
  void set_error(float value);

  // optional float total = 3;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 3;
  float total() const;
  void set_total(float value);

  // @@protoc_insertion_point(class_scope:artm.ClassPrecisionScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float value_;
  float error_;
  float total_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ClassPrecisionScore* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC PeakMemoryScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.PeakMemoryScoreConfig) */ {
 public:
  PeakMemoryScoreConfig();
  virtual ~PeakMemoryScoreConfig();

  PeakMemoryScoreConfig(const PeakMemoryScoreConfig& from);

  inline PeakMemoryScoreConfig& operator=(const PeakMemoryScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeakMemoryScoreConfig& default_instance();

  void Swap(PeakMemoryScoreConfig* other);

  // implements Message ----------------------------------------------

  inline PeakMemoryScoreConfig* New() const { return New(NULL); }

  PeakMemoryScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeakMemoryScoreConfig& from);
  void MergeFrom(const PeakMemoryScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeakMemoryScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.PeakMemoryScoreConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static PeakMemoryScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC PeakMemoryScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.PeakMemoryScore) */ {
 public:
  PeakMemoryScore();
  virtual ~PeakMemoryScore();

  PeakMemoryScore(const PeakMemoryScore& from);

  inline PeakMemoryScore& operator=(const PeakMemoryScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeakMemoryScore& default_instance();

  void Swap(PeakMemoryScore* other);

  // implements Message ----------------------------------------------

  inline PeakMemoryScore* New() const { return New(NULL); }

  PeakMemoryScore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeakMemoryScore& from);
  void MergeFrom(const PeakMemoryScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeakMemoryScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.PeakMemoryScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 value_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static PeakMemoryScore* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC BackgroundTokensRatioScoreConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.BackgroundTokensRatioScoreConfig) */ {
 public:
  BackgroundTokensRatioScoreConfig();
  virtual ~BackgroundTokensRatioScoreConfig();

  BackgroundTokensRatioScoreConfig(const BackgroundTokensRatioScoreConfig& from);

  inline BackgroundTokensRatioScoreConfig& operator=(const BackgroundTokensRatioScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackgroundTokensRatioScoreConfig& default_instance();

  void Swap(BackgroundTokensRatioScoreConfig* other);

  // implements Message ----------------------------------------------

  inline BackgroundTokensRatioScoreConfig* New() const { return New(NULL); }

  BackgroundTokensRatioScoreConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackgroundTokensRatioScoreConfig& from);
  void MergeFrom(const BackgroundTokensRatioScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundTokensRatioScoreConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float delta_threshold = 1 [default = 0.5];
  bool has_delta_threshold() const;
  void clear_delta_threshold();
  static const int kDeltaThresholdFieldNumber = 1;
  float delta_threshold() const;
  void set_delta_threshold(float value);

  // optional bool save_tokens = 2 [default = true];
  bool has_save_tokens() const;
  void clear_save_tokens();
  static const int kSaveTokensFieldNumber = 2;
  bool save_tokens() const;
  void set_save_tokens(bool value);

  // optional bool direct_kl = 3 [default = true];
  bool has_direct_kl() const;
  void clear_direct_kl();
  static const int kDirectKlFieldNumber = 3;
  bool direct_kl() const;
  void set_direct_kl(bool value);

  // optional string class_id = 4 [default = "@default_class"];
  bool has_class_id() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 4;
  const ::std::string& class_id() const;
  void set_class_id(const ::std::string& value);
  void set_class_id(const char* value);
  void set_class_id(const char* value, size_t size);
  ::std::string* mutable_class_id();
  ::std::string* release_class_id();
  void set_allocated_class_id(::std::string* class_id);

  // @@protoc_insertion_point(class_scope:artm.BackgroundTokensRatioScoreConfig)
 private:
  inline void set_has_delta_threshold();
  inline void clear_has_delta_threshold();
  inline void set_has_save_tokens();
  inline void clear_has_save_tokens();
  inline void set_has_direct_kl();
  inline void clear_has_direct_kl();
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float delta_threshold_;
  bool save_tokens_;
  bool direct_kl_;
  static ::std::string* _default_class_id_;
  ::google::protobuf::internal::ArenaStringPtr class_id_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static BackgroundTokensRatioScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC BackgroundTokensRatioScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.BackgroundTokensRatioScore) */ {
 public:
  BackgroundTokensRatioScore();
  virtual ~BackgroundTokensRatioScore();

  BackgroundTokensRatioScore(const BackgroundTokensRatioScore& from);

  inline BackgroundTokensRatioScore& operator=(const BackgroundTokensRatioScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackgroundTokensRatioScore& default_instance();

  void Swap(BackgroundTokensRatioScore* other);

  // implements Message ----------------------------------------------

  inline BackgroundTokensRatioScore* New() const { return New(NULL); }

  BackgroundTokensRatioScore* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackgroundTokensRatioScore& from);
  void MergeFrom(const BackgroundTokensRatioScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundTokensRatioScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // repeated string token = 2;
  int token_size() const;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token(int index) const;
  ::std::string* mutable_token(int index);
  void set_token(int index, const ::std::string& value);
  void set_token(int index, const char* value);
  void set_token(int index, const char* value, size_t size);
  ::std::string* add_token();
  void add_token(const ::std::string& value);
  void add_token(const char* value);
  void add_token(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // @@protoc_insertion_point(class_scope:artm.BackgroundTokensRatioScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  float value_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static BackgroundTokensRatioScore* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC TopicModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.TopicModel) */ {
 public:
  TopicModel();
  virtual ~TopicModel();

  TopicModel(const TopicModel& from);

  inline TopicModel& operator=(const TopicModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicModel& default_instance();

  void Swap(TopicModel* other);

  // implements Message ----------------------------------------------

  inline TopicModel* New() const { return New(NULL); }

  TopicModel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicModel& from);
  void MergeFrom(const TopicModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = "@model"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 num_topics = 2;
  bool has_num_topics() const;
  void clear_num_topics();
  static const int kNumTopicsFieldNumber = 2;
  ::google::protobuf::int32 num_topics() const;
  void set_num_topics(::google::protobuf::int32 value);

  // repeated string topic_name = 3;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string token = 4;
  int token_size() const;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token(int index) const;
  ::std::string* mutable_token(int index);
  void set_token(int index, const ::std::string& value);
  void set_token(int index, const char* value);
  void set_token(int index, const char* value, size_t size);
  ::std::string* add_token();
  void add_token(const ::std::string& value);
  void add_token(const char* value);
  void add_token(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated .artm.FloatArray token_weights = 5;
  int token_weights_size() const;
  void clear_token_weights();
  static const int kTokenWeightsFieldNumber = 5;
  const ::artm::FloatArray& token_weights(int index) const;
  ::artm::FloatArray* mutable_token_weights(int index);
  ::artm::FloatArray* add_token_weights();
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_token_weights();
  const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      token_weights() const;

  // repeated string class_id = 6;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 6;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated .artm.IntArray topic_indices = 8;
  int topic_indices_size() const;
  void clear_topic_indices();
  static const int kTopicIndicesFieldNumber = 8;
  const ::artm::IntArray& topic_indices(int index) const;
  ::artm::IntArray* mutable_topic_indices(int index);
  ::artm::IntArray* add_topic_indices();
  ::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
      mutable_topic_indices();
  const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
      topic_indices() const;

  // optional int64 num_values = 9;
  bool has_num_values() const;
  void clear_num_values();
  static const int kNumValuesFieldNumber = 9;
  ::google::protobuf::int64 num_values() const;
  void set_num_values(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.TopicModel)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_num_topics();
  inline void clear_has_num_topics();
  inline void set_has_num_values();
  inline void clear_has_num_values();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > token_weights_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::IntArray > topic_indices_;
  ::google::protobuf::int64 num_values_;
  ::google::protobuf::int32 num_topics_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicModel* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ThetaMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ThetaMatrix) */ {
 public:
  ThetaMatrix();
  virtual ~ThetaMatrix();

  ThetaMatrix(const ThetaMatrix& from);

  inline ThetaMatrix& operator=(const ThetaMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThetaMatrix& default_instance();

  void Swap(ThetaMatrix* other);

  // implements Message ----------------------------------------------

  inline ThetaMatrix* New() const { return New(NULL); }

  ThetaMatrix* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThetaMatrix& from);
  void MergeFrom(const ThetaMatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ThetaMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 item_id = 2;
  int item_id_size() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  ::google::protobuf::int32 item_id(int index) const;
  void set_item_id(int index, ::google::protobuf::int32 value);
  void add_item_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated .artm.FloatArray item_weights = 3;
  int item_weights_size() const;
  void clear_item_weights();
  static const int kItemWeightsFieldNumber = 3;
  const ::artm::FloatArray& item_weights(int index) const;
  ::artm::FloatArray* mutable_item_weights(int index);
  ::artm::FloatArray* add_item_weights();
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_item_weights();
  const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      item_weights() const;

  // repeated string topic_name = 4;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 4;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional int32 num_topics = 5;
  bool has_num_topics() const;
  void clear_num_topics();
  static const int kNumTopicsFieldNumber = 5;
  ::google::protobuf::int32 num_topics() const;
  void set_num_topics(::google::protobuf::int32 value);

  // repeated string item_title = 6;
  int item_title_size() const;
  void clear_item_title();
  static const int kItemTitleFieldNumber = 6;
  const ::std::string& item_title(int index) const;
  ::std::string* mutable_item_title(int index);
  void set_item_title(int index, const ::std::string& value);
  void set_item_title(int index, const char* value);
  void set_item_title(int index, const char* value, size_t size);
  ::std::string* add_item_title();
  void add_item_title(const ::std::string& value);
  void add_item_title(const char* value);
  void add_item_title(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& item_title() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_item_title();

  // repeated .artm.IntArray topic_indices = 7;
  int topic_indices_size() const;
  void clear_topic_indices();
  static const int kTopicIndicesFieldNumber = 7;
  const ::artm::IntArray& topic_indices(int index) const;
  ::artm::IntArray* mutable_topic_indices(int index);
  ::artm::IntArray* add_topic_indices();
  ::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
      mutable_topic_indices();
  const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
      topic_indices() const;

  // optional int64 num_values = 8;
  bool has_num_values() const;
  void clear_num_values();
  static const int kNumValuesFieldNumber = 8;
  ::google::protobuf::int64 num_values() const;
  void set_num_values(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.ThetaMatrix)
 private:
  inline void set_has_num_topics();
  inline void clear_has_num_topics();
  inline void set_has_num_values();
  inline void clear_has_num_values();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > item_weights_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> item_title_;
  ::google::protobuf::RepeatedPtrField< ::artm::IntArray > topic_indices_;
  ::google::protobuf::int64 num_values_;
  ::google::protobuf::int32 num_topics_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ThetaMatrix* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC CollectionParserConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.CollectionParserConfig) */ {
 public:
  CollectionParserConfig();
  virtual ~CollectionParserConfig();

  CollectionParserConfig(const CollectionParserConfig& from);

  inline CollectionParserConfig& operator=(const CollectionParserConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectionParserConfig& default_instance();

  void Swap(CollectionParserConfig* other);

  // implements Message ----------------------------------------------

  inline CollectionParserConfig* New() const { return New(NULL); }

  CollectionParserConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectionParserConfig& from);
  void MergeFrom(const CollectionParserConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CollectionParserConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CollectionParserConfig_CollectionFormat CollectionFormat;
  static const CollectionFormat BagOfWordsUci =
    CollectionParserConfig_CollectionFormat_BagOfWordsUci;
  static const CollectionFormat MatrixMarket =
    CollectionParserConfig_CollectionFormat_MatrixMarket;
  static const CollectionFormat VowpalWabbit =
    CollectionParserConfig_CollectionFormat_VowpalWabbit;
  static inline bool CollectionFormat_IsValid(int value) {
    return CollectionParserConfig_CollectionFormat_IsValid(value);
  }
  static const CollectionFormat CollectionFormat_MIN =
    CollectionParserConfig_CollectionFormat_CollectionFormat_MIN;
  static const CollectionFormat CollectionFormat_MAX =
    CollectionParserConfig_CollectionFormat_CollectionFormat_MAX;
  static const int CollectionFormat_ARRAYSIZE =
    CollectionParserConfig_CollectionFormat_CollectionFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CollectionFormat_descriptor() {
    return CollectionParserConfig_CollectionFormat_descriptor();
  }
  static inline const ::std::string& CollectionFormat_Name(CollectionFormat value) {
    return CollectionParserConfig_CollectionFormat_Name(value);
  }
  static inline bool CollectionFormat_Parse(const ::std::string& name,
      CollectionFormat* value) {
    return CollectionParserConfig_CollectionFormat_Parse(name, value);
  }

  typedef CollectionParserConfig_BatchNameType BatchNameType;
  static const BatchNameType Guid =
    CollectionParserConfig_BatchNameType_Guid;
  static const BatchNameType Code =
    CollectionParserConfig_BatchNameType_Code;
  static inline bool BatchNameType_IsValid(int value) {
    return CollectionParserConfig_BatchNameType_IsValid(value);
  }
  static const BatchNameType BatchNameType_MIN =
    CollectionParserConfig_BatchNameType_BatchNameType_MIN;
  static const BatchNameType BatchNameType_MAX =
    CollectionParserConfig_BatchNameType_BatchNameType_MAX;
  static const int BatchNameType_ARRAYSIZE =
    CollectionParserConfig_BatchNameType_BatchNameType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BatchNameType_descriptor() {
    return CollectionParserConfig_BatchNameType_descriptor();
  }
  static inline const ::std::string& BatchNameType_Name(BatchNameType value) {
    return CollectionParserConfig_BatchNameType_Name(value);
  }
  static inline bool BatchNameType_Parse(const ::std::string& name,
      BatchNameType* value) {
    return CollectionParserConfig_BatchNameType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.CollectionParserConfig.CollectionFormat format = 1 [default = BagOfWordsUci];
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 1;
  ::artm::CollectionParserConfig_CollectionFormat format() const;
  void set_format(::artm::CollectionParserConfig_CollectionFormat value);

  // optional string docword_file_path = 2;
  bool has_docword_file_path() const;
  void clear_docword_file_path();
  static const int kDocwordFilePathFieldNumber = 2;
  const ::std::string& docword_file_path() const;
  void set_docword_file_path(const ::std::string& value);
  void set_docword_file_path(const char* value);
  void set_docword_file_path(const char* value, size_t size);
  ::std::string* mutable_docword_file_path();
  ::std::string* release_docword_file_path();
  void set_allocated_docword_file_path(::std::string* docword_file_path);

  // optional string vocab_file_path = 3;
  bool has_vocab_file_path() const;
  void clear_vocab_file_path();
  static const int kVocabFilePathFieldNumber = 3;
  const ::std::string& vocab_file_path() const;
  void set_vocab_file_path(const ::std::string& value);
  void set_vocab_file_path(const char* value);
  void set_vocab_file_path(const char* value, size_t size);
  ::std::string* mutable_vocab_file_path();
  ::std::string* release_vocab_file_path();
  void set_allocated_vocab_file_path(::std::string* vocab_file_path);

  // optional string target_folder = 4;
  bool has_target_folder() const;
  void clear_target_folder();
  static const int kTargetFolderFieldNumber = 4;
  const ::std::string& target_folder() const;
  void set_target_folder(const ::std::string& value);
  void set_target_folder(const char* value);
  void set_target_folder(const char* value, size_t size);
  ::std::string* mutable_target_folder();
  ::std::string* release_target_folder();
  void set_allocated_target_folder(::std::string* target_folder);

  // optional int32 num_items_per_batch = 5 [default = 1000];
  bool has_num_items_per_batch() const;
  void clear_num_items_per_batch();
  static const int kNumItemsPerBatchFieldNumber = 5;
  ::google::protobuf::int32 num_items_per_batch() const;
  void set_num_items_per_batch(::google::protobuf::int32 value);

  // optional bool use_unity_based_indices = 6 [default = true];
  bool has_use_unity_based_indices() const;
  void clear_use_unity_based_indices();
  static const int kUseUnityBasedIndicesFieldNumber = 6;
  bool use_unity_based_indices() const;
  void set_use_unity_based_indices(bool value);

  // optional .artm.CollectionParserConfig.BatchNameType name_type = 7 [default = Guid];
  bool has_name_type() const;
  void clear_name_type();
  static const int kNameTypeFieldNumber = 7;
  ::artm::CollectionParserConfig_BatchNameType name_type() const;
  void set_name_type(::artm::CollectionParserConfig_BatchNameType value);

  // optional int32 num_threads = 8;
  bool has_num_threads() const;
  void clear_num_threads();
  static const int kNumThreadsFieldNumber = 8;
  ::google::protobuf::int32 num_threads() const;
  void set_num_threads(::google::protobuf::int32 value);

  // repeated string class_id = 9;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 9;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional string cooc_tf_file_path = 10;
  bool has_cooc_tf_file_path() const;
  void clear_cooc_tf_file_path();
  static const int kCoocTfFilePathFieldNumber = 10;
  const ::std::string& cooc_tf_file_path() const;
  void set_cooc_tf_file_path(const ::std::string& value);
  void set_cooc_tf_file_path(const char* value);
  void set_cooc_tf_file_path(const char* value, size_t size);
  ::std::string* mutable_cooc_tf_file_path();
  ::std::string* release_cooc_tf_file_path();
  void set_allocated_cooc_tf_file_path(::std::string* cooc_tf_file_path);

  // optional string cooc_df_file_path = 11;
  bool has_cooc_df_file_path() const;
  void clear_cooc_df_file_path();
  static const int kCoocDfFilePathFieldNumber = 11;
  const ::std::string& cooc_df_file_path() const;
  void set_cooc_df_file_path(const ::std::string& value);
  void set_cooc_df_file_path(const char* value);
  void set_cooc_df_file_path(const char* value, size_t size);
  ::std::string* mutable_cooc_df_file_path();
  ::std::string* release_cooc_df_file_path();
  void set_allocated_cooc_df_file_path(::std::string* cooc_df_file_path);

  // optional string ppmi_tf_file_path = 12;
  bool has_ppmi_tf_file_path() const;
  void clear_ppmi_tf_file_path();
  static const int kPpmiTfFilePathFieldNumber = 12;
  const ::std::string& ppmi_tf_file_path() const;
  void set_ppmi_tf_file_path(const ::std::string& value);
  void set_ppmi_tf_file_path(const char* value);
  void set_ppmi_tf_file_path(const char* value, size_t size);
  ::std::string* mutable_ppmi_tf_file_path();
  ::std::string* release_ppmi_tf_file_path();
  void set_allocated_ppmi_tf_file_path(::std::string* ppmi_tf_file_path);

  // optional string ppmi_df_file_path = 13;
  bool has_ppmi_df_file_path() const;
  void clear_ppmi_df_file_path();
  static const int kPpmiDfFilePathFieldNumber = 13;
  const ::std::string& ppmi_df_file_path() const;
  void set_ppmi_df_file_path(const ::std::string& value);
  void set_ppmi_df_file_path(const char* value);
  void set_ppmi_df_file_path(const char* value, size_t size);
  ::std::string* mutable_ppmi_df_file_path();
  ::std::string* release_ppmi_df_file_path();
  void set_allocated_ppmi_df_file_path(::std::string* ppmi_df_file_path);

  // optional bool gather_cooc_tf = 14;
  bool has_gather_cooc_tf() const;
  void clear_gather_cooc_tf();
  static const int kGatherCoocTfFieldNumber = 14;
  bool gather_cooc_tf() const;
  void set_gather_cooc_tf(bool value);

  // optional bool gather_cooc_df = 15;
  bool has_gather_cooc_df() const;
  void clear_gather_cooc_df();
  static const int kGatherCoocDfFieldNumber = 15;
  bool gather_cooc_df() const;
  void set_gather_cooc_df(bool value);

  // optional bool gather_cooc = 16;
  bool has_gather_cooc() const;
  void clear_gather_cooc();
  static const int kGatherCoocFieldNumber = 16;
  bool gather_cooc() const;
  void set_gather_cooc(bool value);

  // optional int32 cooc_window_width = 17 [default = 10];
  bool has_cooc_window_width() const;
  void clear_cooc_window_width();
  static const int kCoocWindowWidthFieldNumber = 17;
  ::google::protobuf::int32 cooc_window_width() const;
  void set_cooc_window_width(::google::protobuf::int32 value);

  // optional int32 cooc_min_tf = 18 [default = 1];
  bool has_cooc_min_tf() const;
  void clear_cooc_min_tf();
  static const int kCoocMinTfFieldNumber = 18;
  ::google::protobuf::int32 cooc_min_tf() const;
  void set_cooc_min_tf(::google::protobuf::int32 value);

  // optional int32 cooc_min_df = 19 [default = 1];
  bool has_cooc_min_df() const;
  void clear_cooc_min_df();
  static const int kCoocMinDfFieldNumber = 19;
  ::google::protobuf::int32 cooc_min_df() const;
  void set_cooc_min_df(::google::protobuf::int32 value);

  // optional bool store_symmetric_cooc_values = 20 [default = false];
  bool has_store_symmetric_cooc_values() const;
  void clear_store_symmetric_cooc_values();
  static const int kStoreSymmetricCoocValuesFieldNumber = 20;
  bool store_symmetric_cooc_values() const;
  void set_store_symmetric_cooc_values(bool value);

  // @@protoc_insertion_point(class_scope:artm.CollectionParserConfig)
 private:
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_docword_file_path();
  inline void clear_has_docword_file_path();
  inline void set_has_vocab_file_path();
  inline void clear_has_vocab_file_path();
  inline void set_has_target_folder();
  inline void clear_has_target_folder();
  inline void set_has_num_items_per_batch();
  inline void clear_has_num_items_per_batch();
  inline void set_has_use_unity_based_indices();
  inline void clear_has_use_unity_based_indices();
  inline void set_has_name_type();
  inline void clear_has_name_type();
  inline void set_has_num_threads();
  inline void clear_has_num_threads();
  inline void set_has_cooc_tf_file_path();
  inline void clear_has_cooc_tf_file_path();
  inline void set_has_cooc_df_file_path();
  inline void clear_has_cooc_df_file_path();
  inline void set_has_ppmi_tf_file_path();
  inline void clear_has_ppmi_tf_file_path();
  inline void set_has_ppmi_df_file_path();
  inline void clear_has_ppmi_df_file_path();
  inline void set_has_gather_cooc_tf();
  inline void clear_has_gather_cooc_tf();
  inline void set_has_gather_cooc_df();
  inline void clear_has_gather_cooc_df();
  inline void set_has_gather_cooc();
  inline void clear_has_gather_cooc();
  inline void set_has_cooc_window_width();
  inline void clear_has_cooc_window_width();
  inline void set_has_cooc_min_tf();
  inline void clear_has_cooc_min_tf();
  inline void set_has_cooc_min_df();
  inline void clear_has_cooc_min_df();
  inline void set_has_store_symmetric_cooc_values();
  inline void clear_has_store_symmetric_cooc_values();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr docword_file_path_;
  ::google::protobuf::internal::ArenaStringPtr vocab_file_path_;
  int format_;
  ::google::protobuf::int32 num_items_per_batch_;
  ::google::protobuf::internal::ArenaStringPtr target_folder_;
  int name_type_;
  ::google::protobuf::int32 num_threads_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::internal::ArenaStringPtr cooc_tf_file_path_;
  ::google::protobuf::internal::ArenaStringPtr cooc_df_file_path_;
  ::google::protobuf::internal::ArenaStringPtr ppmi_tf_file_path_;
  ::google::protobuf::internal::ArenaStringPtr ppmi_df_file_path_;
  bool use_unity_based_indices_;
  bool gather_cooc_tf_;
  bool gather_cooc_df_;
  bool gather_cooc_;
  ::google::protobuf::int32 cooc_window_width_;
  ::google::protobuf::int32 cooc_min_tf_;
  ::google::protobuf::int32 cooc_min_df_;
  bool store_symmetric_cooc_values_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static CollectionParserConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC CollectionParserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.CollectionParserInfo) */ {
 public:
  CollectionParserInfo();
  virtual ~CollectionParserInfo();

  CollectionParserInfo(const CollectionParserInfo& from);

  inline CollectionParserInfo& operator=(const CollectionParserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectionParserInfo& default_instance();

  void Swap(CollectionParserInfo* other);

  // implements Message ----------------------------------------------

  inline CollectionParserInfo* New() const { return New(NULL); }

  CollectionParserInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectionParserInfo& from);
  void MergeFrom(const CollectionParserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CollectionParserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 num_items = 1;
  bool has_num_items() const;
  void clear_num_items();
  static const int kNumItemsFieldNumber = 1;
  ::google::protobuf::int64 num_items() const;
  void set_num_items(::google::protobuf::int64 value);

  // optional int64 num_batches = 2;
  bool has_num_batches() const;
  void clear_num_batches();
  static const int kNumBatchesFieldNumber = 2;
  ::google::protobuf::int64 num_batches() const;
  void set_num_batches(::google::protobuf::int64 value);

  // optional int64 dictionary_size = 3;
  bool has_dictionary_size() const;
  void clear_dictionary_size();
  static const int kDictionarySizeFieldNumber = 3;
  ::google::protobuf::int64 dictionary_size() const;
  void set_dictionary_size(::google::protobuf::int64 value);

  // optional int64 num_tokens = 4;
  bool has_num_tokens() const;
  void clear_num_tokens();
  static const int kNumTokensFieldNumber = 4;
  ::google::protobuf::int64 num_tokens() const;
  void set_num_tokens(::google::protobuf::int64 value);

  // optional float total_token_weight = 5;
  bool has_total_token_weight() const;
  void clear_total_token_weight();
  static const int kTotalTokenWeightFieldNumber = 5;
  float total_token_weight() const;
  void set_total_token_weight(float value);

  // @@protoc_insertion_point(class_scope:artm.CollectionParserInfo)
 private:
  inline void set_has_num_items();
  inline void clear_has_num_items();
  inline void set_has_num_batches();
  inline void clear_has_num_batches();
  inline void set_has_dictionary_size();
  inline void clear_has_dictionary_size();
  inline void set_has_num_tokens();
  inline void clear_has_num_tokens();
  inline void set_has_total_token_weight();
  inline void clear_has_total_token_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 num_items_;
  ::google::protobuf::int64 num_batches_;
  ::google::protobuf::int64 dictionary_size_;
  ::google::protobuf::int64 num_tokens_;
  float total_token_weight_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static CollectionParserInfo* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC CooccurrenceCollectorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.CooccurrenceCollectorConfig) */ {
 public:
  CooccurrenceCollectorConfig();
  virtual ~CooccurrenceCollectorConfig();

  CooccurrenceCollectorConfig(const CooccurrenceCollectorConfig& from);

  inline CooccurrenceCollectorConfig& operator=(const CooccurrenceCollectorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CooccurrenceCollectorConfig& default_instance();

  void Swap(CooccurrenceCollectorConfig* other);

  // implements Message ----------------------------------------------

  inline CooccurrenceCollectorConfig* New() const { return New(NULL); }

  CooccurrenceCollectorConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CooccurrenceCollectorConfig& from);
  void MergeFrom(const CooccurrenceCollectorConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CooccurrenceCollectorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool gather_cooc = 1;
  bool has_gather_cooc() const;
  void clear_gather_cooc();
  static const int kGatherCoocFieldNumber = 1;
  bool gather_cooc() const;
  void set_gather_cooc(bool value);

  // optional bool gather_cooc_tf = 2;
  bool has_gather_cooc_tf() const;
  void clear_gather_cooc_tf();
  static const int kGatherCoocTfFieldNumber = 2;
  bool gather_cooc_tf() const;
  void set_gather_cooc_tf(bool value);

  // optional bool gather_cooc_df = 3;
  bool has_gather_cooc_df() const;
  void clear_gather_cooc_df();
  static const int kGatherCoocDfFieldNumber = 3;
  bool gather_cooc_df() const;
  void set_gather_cooc_df(bool value);

  // optional bool store_symmetric_cooc_values = 4;
  bool has_store_symmetric_cooc_values() const;
  void clear_store_symmetric_cooc_values();
  static const int kStoreSymmetricCoocValuesFieldNumber = 4;
  bool store_symmetric_cooc_values() const;
  void set_store_symmetric_cooc_values(bool value);

  // optional bool calculate_ppmi_tf = 5;
  bool has_calculate_ppmi_tf() const;
  void clear_calculate_ppmi_tf();
  static const int kCalculatePpmiTfFieldNumber = 5;
  bool calculate_ppmi_tf() const;
  void set_calculate_ppmi_tf(bool value);

  // optional bool calculate_ppmi_df = 6;
  bool has_calculate_ppmi_df() const;
  void clear_calculate_ppmi_df();
  static const int kCalculatePpmiDfFieldNumber = 6;
  bool calculate_ppmi_df() const;
  void set_calculate_ppmi_df(bool value);

  // optional string vw_file_path = 7;
  bool has_vw_file_path() const;
  void clear_vw_file_path();
  static const int kVwFilePathFieldNumber = 7;
  const ::std::string& vw_file_path() const;
  void set_vw_file_path(const ::std::string& value);
  void set_vw_file_path(const char* value);
  void set_vw_file_path(const char* value, size_t size);
  ::std::string* mutable_vw_file_path();
  ::std::string* release_vw_file_path();
  void set_allocated_vw_file_path(::std::string* vw_file_path);

  // optional string vocab_file_path = 8;
  bool has_vocab_file_path() const;
  void clear_vocab_file_path();
  static const int kVocabFilePathFieldNumber = 8;
  const ::std::string& vocab_file_path() const;
  void set_vocab_file_path(const ::std::string& value);
  void set_vocab_file_path(const char* value);
  void set_vocab_file_path(const char* value, size_t size);
  ::std::string* mutable_vocab_file_path();
  ::std::string* release_vocab_file_path();
  void set_allocated_vocab_file_path(::std::string* vocab_file_path);

  // optional string target_folder = 9;
  bool has_target_folder() const;
  void clear_target_folder();
  static const int kTargetFolderFieldNumber = 9;
  const ::std::string& target_folder() const;
  void set_target_folder(const ::std::string& value);
  void set_target_folder(const char* value);
  void set_target_folder(const char* value, size_t size);
  ::std::string* mutable_target_folder();
  ::std::string* release_target_folder();
  void set_allocated_target_folder(::std::string* target_folder);

  // optional string cooc_tf_file_path = 10;
  bool has_cooc_tf_file_path() const;
  void clear_cooc_tf_file_path();
  static const int kCoocTfFilePathFieldNumber = 10;
  const ::std::string& cooc_tf_file_path() const;
  void set_cooc_tf_file_path(const ::std::string& value);
  void set_cooc_tf_file_path(const char* value);
  void set_cooc_tf_file_path(const char* value, size_t size);
  ::std::string* mutable_cooc_tf_file_path();
  ::std::string* release_cooc_tf_file_path();
  void set_allocated_cooc_tf_file_path(::std::string* cooc_tf_file_path);

  // optional string cooc_df_file_path = 11;
  bool has_cooc_df_file_path() const;
  void clear_cooc_df_file_path();
  static const int kCoocDfFilePathFieldNumber = 11;
  const ::std::string& cooc_df_file_path() const;
  void set_cooc_df_file_path(const ::std::string& value);
  void set_cooc_df_file_path(const char* value);
  void set_cooc_df_file_path(const char* value, size_t size);
  ::std::string* mutable_cooc_df_file_path();
  ::std::string* release_cooc_df_file_path();
  void set_allocated_cooc_df_file_path(::std::string* cooc_df_file_path);

  // optional string ppmi_tf_file_path = 12;
  bool has_ppmi_tf_file_path() const;
  void clear_ppmi_tf_file_path();
  static const int kPpmiTfFilePathFieldNumber = 12;
  const ::std::string& ppmi_tf_file_path() const;
  void set_ppmi_tf_file_path(const ::std::string& value);
  void set_ppmi_tf_file_path(const char* value);
  void set_ppmi_tf_file_path(const char* value, size_t size);
  ::std::string* mutable_ppmi_tf_file_path();
  ::std::string* release_ppmi_tf_file_path();
  void set_allocated_ppmi_tf_file_path(::std::string* ppmi_tf_file_path);

  // optional string ppmi_df_file_path = 13;
  bool has_ppmi_df_file_path() const;
  void clear_ppmi_df_file_path();
  static const int kPpmiDfFilePathFieldNumber = 13;
  const ::std::string& ppmi_df_file_path() const;
  void set_ppmi_df_file_path(const ::std::string& value);
  void set_ppmi_df_file_path(const char* value);
  void set_ppmi_df_file_path(const char* value, size_t size);
  ::std::string* mutable_ppmi_df_file_path();
  ::std::string* release_ppmi_df_file_path();
  void set_allocated_ppmi_df_file_path(::std::string* ppmi_df_file_path);

  // optional int32 cooc_window_width = 14 [default = 10];
  bool has_cooc_window_width() const;
  void clear_cooc_window_width();
  static const int kCoocWindowWidthFieldNumber = 14;
  ::google::protobuf::int32 cooc_window_width() const;
  void set_cooc_window_width(::google::protobuf::int32 value);

  // optional int32 cooc_min_tf = 15 [default = 1];
  bool has_cooc_min_tf() const;
  void clear_cooc_min_tf();
  static const int kCoocMinTfFieldNumber = 15;
  ::google::protobuf::int32 cooc_min_tf() const;
  void set_cooc_min_tf(::google::protobuf::int32 value);

  // optional int32 cooc_min_df = 16 [default = 1];
  bool has_cooc_min_df() const;
  void clear_cooc_min_df();
  static const int kCoocMinDfFieldNumber = 16;
  ::google::protobuf::int32 cooc_min_df() const;
  void set_cooc_min_df(::google::protobuf::int32 value);

  // optional int32 max_num_of_open_files_in_a_thread = 17;
  bool has_max_num_of_open_files_in_a_thread() const;
  void clear_max_num_of_open_files_in_a_thread();
  static const int kMaxNumOfOpenFilesInAThreadFieldNumber = 17;
  ::google::protobuf::int32 max_num_of_open_files_in_a_thread() const;
  void set_max_num_of_open_files_in_a_thread(::google::protobuf::int32 value);

  // optional int32 num_items_per_batch = 18 [default = 1000];
  bool has_num_items_per_batch() const;
  void clear_num_items_per_batch();
  static const int kNumItemsPerBatchFieldNumber = 18;
  ::google::protobuf::int32 num_items_per_batch() const;
  void set_num_items_per_batch(::google::protobuf::int32 value);

  // optional int32 num_threads = 19;
  bool has_num_threads() const;
  void clear_num_threads();
  static const int kNumThreadsFieldNumber = 19;
  ::google::protobuf::int32 num_threads() const;
  void set_num_threads(::google::protobuf::int32 value);

  // optional int64 total_num_of_pairs = 20;
  bool has_total_num_of_pairs() const;
  void clear_total_num_of_pairs();
  static const int kTotalNumOfPairsFieldNumber = 20;
  ::google::protobuf::int64 total_num_of_pairs() const;
  void set_total_num_of_pairs(::google::protobuf::int64 value);

  // optional int32 total_num_of_documents = 21;
  bool has_total_num_of_documents() const;
  void clear_total_num_of_documents();
  static const int kTotalNumOfDocumentsFieldNumber = 21;
  ::google::protobuf::int32 total_num_of_documents() const;
  void set_total_num_of_documents(::google::protobuf::int32 value);

  // repeated string class_id = 22;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 22;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional int32 max_num_of_open_files_in_a_process = 23;
  bool has_max_num_of_open_files_in_a_process() const;
  void clear_max_num_of_open_files_in_a_process();
  static const int kMaxNumOfOpenFilesInAProcessFieldNumber = 23;
  ::google::protobuf::int32 max_num_of_open_files_in_a_process() const;
  void set_max_num_of_open_files_in_a_process(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.CooccurrenceCollectorConfig)
 private:
  inline void set_has_gather_cooc();
  inline void clear_has_gather_cooc();
  inline void set_has_gather_cooc_tf();
  inline void clear_has_gather_cooc_tf();
  inline void set_has_gather_cooc_df();
  inline void clear_has_gather_cooc_df();
  inline void set_has_store_symmetric_cooc_values();
  inline void clear_has_store_symmetric_cooc_values();
  inline void set_has_calculate_ppmi_tf();
  inline void clear_has_calculate_ppmi_tf();
  inline void set_has_calculate_ppmi_df();
  inline void clear_has_calculate_ppmi_df();
  inline void set_has_vw_file_path();
  inline void clear_has_vw_file_path();
  inline void set_has_vocab_file_path();
  inline void clear_has_vocab_file_path();
  inline void set_has_target_folder();
  inline void clear_has_target_folder();
  inline void set_has_cooc_tf_file_path();
  inline void clear_has_cooc_tf_file_path();
  inline void set_has_cooc_df_file_path();
  inline void clear_has_cooc_df_file_path();
  inline void set_has_ppmi_tf_file_path();
  inline void clear_has_ppmi_tf_file_path();
  inline void set_has_ppmi_df_file_path();
  inline void clear_has_ppmi_df_file_path();
  inline void set_has_cooc_window_width();
  inline void clear_has_cooc_window_width();
  inline void set_has_cooc_min_tf();
  inline void clear_has_cooc_min_tf();
  inline void set_has_cooc_min_df();
  inline void clear_has_cooc_min_df();
  inline void set_has_max_num_of_open_files_in_a_thread();
  inline void clear_has_max_num_of_open_files_in_a_thread();
  inline void set_has_num_items_per_batch();
  inline void clear_has_num_items_per_batch();
  inline void set_has_num_threads();
  inline void clear_has_num_threads();
  inline void set_has_total_num_of_pairs();
  inline void clear_has_total_num_of_pairs();
  inline void set_has_total_num_of_documents();
  inline void clear_has_total_num_of_documents();
  inline void set_has_max_num_of_open_files_in_a_process();
  inline void clear_has_max_num_of_open_files_in_a_process();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool gather_cooc_;
  bool gather_cooc_tf_;
  bool gather_cooc_df_;
  bool store_symmetric_cooc_values_;
  bool calculate_ppmi_tf_;
  bool calculate_ppmi_df_;
  ::google::protobuf::internal::ArenaStringPtr vw_file_path_;
  ::google::protobuf::internal::ArenaStringPtr vocab_file_path_;
  ::google::protobuf::internal::ArenaStringPtr target_folder_;
  ::google::protobuf::internal::ArenaStringPtr cooc_tf_file_path_;
  ::google::protobuf::internal::ArenaStringPtr cooc_df_file_path_;
  ::google::protobuf::internal::ArenaStringPtr ppmi_tf_file_path_;
  ::google::protobuf::internal::ArenaStringPtr ppmi_df_file_path_;
  ::google::protobuf::int32 cooc_window_width_;
  ::google::protobuf::int32 cooc_min_tf_;
  ::google::protobuf::int32 cooc_min_df_;
  ::google::protobuf::int32 max_num_of_open_files_in_a_thread_;
  ::google::protobuf::int32 num_items_per_batch_;
  ::google::protobuf::int32 num_threads_;
  ::google::protobuf::int64 total_num_of_pairs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::int32 total_num_of_documents_;
  ::google::protobuf::int32 max_num_of_open_files_in_a_process_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static CooccurrenceCollectorConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC InitializeModelArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.InitializeModelArgs) */ {
 public:
  InitializeModelArgs();
  virtual ~InitializeModelArgs();

  InitializeModelArgs(const InitializeModelArgs& from);

  inline InitializeModelArgs& operator=(const InitializeModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitializeModelArgs& default_instance();

  void Swap(InitializeModelArgs* other);

  // implements Message ----------------------------------------------

  inline InitializeModelArgs* New() const { return New(NULL); }

  InitializeModelArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitializeModelArgs& from);
  void MergeFrom(const InitializeModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitializeModelArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  bool has_model_name() const;
  void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // optional string dictionary_name = 2;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 2;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // repeated string topic_name = 4;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 4;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional int32 seed = 5 [default = -1];
  bool has_seed() const;
  void clear_seed();
  static const int kSeedFieldNumber = 5;
  ::google::protobuf::int32 seed() const;
  void set_seed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.InitializeModelArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();
  inline void set_has_seed();
  inline void clear_has_seed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::int32 seed_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static InitializeModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC DictionaryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.DictionaryData) */ {
 public:
  DictionaryData();
  virtual ~DictionaryData();

  DictionaryData(const DictionaryData& from);

  inline DictionaryData& operator=(const DictionaryData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictionaryData& default_instance();

  void Swap(DictionaryData* other);

  // implements Message ----------------------------------------------

  inline DictionaryData* New() const { return New(NULL); }

  DictionaryData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictionaryData& from);
  void MergeFrom(const DictionaryData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictionaryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated string token = 2;
  int token_size() const;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token(int index) const;
  ::std::string* mutable_token(int index);
  void set_token(int index, const ::std::string& value);
  void set_token(int index, const char* value);
  void set_token(int index, const char* value, size_t size);
  ::std::string* add_token();
  void add_token(const ::std::string& value);
  void add_token(const char* value);
  void add_token(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated string class_id = 3;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 3;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated float token_value = 4;
  int token_value_size() const;
  void clear_token_value();
  static const int kTokenValueFieldNumber = 4;
  float token_value(int index) const;
  void set_token_value(int index, float value);
  void add_token_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      token_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_token_value();

  // repeated float token_tf = 5;
  int token_tf_size() const;
  void clear_token_tf();
  static const int kTokenTfFieldNumber = 5;
  float token_tf(int index) const;
  void set_token_tf(int index, float value);
  void add_token_tf(float value);
  const ::google::protobuf::RepeatedField< float >&
      token_tf() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_token_tf();

  // repeated float token_df = 6;
  int token_df_size() const;
  void clear_token_df();
  static const int kTokenDfFieldNumber = 6;
  float token_df(int index) const;
  void set_token_df(int index, float value);
  void add_token_df(float value);
  const ::google::protobuf::RepeatedField< float >&
      token_df() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_token_df();

  // repeated int32 cooc_first_index = 7;
  int cooc_first_index_size() const;
  void clear_cooc_first_index();
  static const int kCoocFirstIndexFieldNumber = 7;
  ::google::protobuf::int32 cooc_first_index(int index) const;
  void set_cooc_first_index(int index, ::google::protobuf::int32 value);
  void add_cooc_first_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cooc_first_index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cooc_first_index();

  // repeated int32 cooc_second_index = 8;
  int cooc_second_index_size() const;
  void clear_cooc_second_index();
  static const int kCoocSecondIndexFieldNumber = 8;
  ::google::protobuf::int32 cooc_second_index(int index) const;
  void set_cooc_second_index(int index, ::google::protobuf::int32 value);
  void add_cooc_second_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cooc_second_index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cooc_second_index();

  // repeated float cooc_value = 9;
  int cooc_value_size() const;
  void clear_cooc_value();
  static const int kCoocValueFieldNumber = 9;
  float cooc_value(int index) const;
  void set_cooc_value(int index, float value);
  void add_cooc_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      cooc_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cooc_value();

  // optional int64 num_items_in_collection = 10;
  bool has_num_items_in_collection() const;
  void clear_num_items_in_collection();
  static const int kNumItemsInCollectionFieldNumber = 10;
  ::google::protobuf::int64 num_items_in_collection() const;
  void set_num_items_in_collection(::google::protobuf::int64 value);

  // repeated float cooc_tf = 11;
  int cooc_tf_size() const;
  void clear_cooc_tf();
  static const int kCoocTfFieldNumber = 11;
  float cooc_tf(int index) const;
  void set_cooc_tf(int index, float value);
  void add_cooc_tf(float value);
  const ::google::protobuf::RepeatedField< float >&
      cooc_tf() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cooc_tf();

  // repeated float cooc_df = 12;
  int cooc_df_size() const;
  void clear_cooc_df();
  static const int kCoocDfFieldNumber = 12;
  float cooc_df(int index) const;
  void set_cooc_df(int index, float value);
  void add_cooc_df(float value);
  const ::google::protobuf::RepeatedField< float >&
      cooc_df() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cooc_df();

  // @@protoc_insertion_point(class_scope:artm.DictionaryData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_num_items_in_collection();
  inline void clear_has_num_items_in_collection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::RepeatedField< float > token_value_;
  ::google::protobuf::RepeatedField< float > token_tf_;
  ::google::protobuf::RepeatedField< float > token_df_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cooc_first_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cooc_second_index_;
  ::google::protobuf::RepeatedField< float > cooc_value_;
  ::google::protobuf::int64 num_items_in_collection_;
  ::google::protobuf::RepeatedField< float > cooc_tf_;
  ::google::protobuf::RepeatedField< float > cooc_df_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DictionaryData* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC FilterDictionaryArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.FilterDictionaryArgs) */ {
 public:
  FilterDictionaryArgs();
  virtual ~FilterDictionaryArgs();

  FilterDictionaryArgs(const FilterDictionaryArgs& from);

  inline FilterDictionaryArgs& operator=(const FilterDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterDictionaryArgs& default_instance();

  void Swap(FilterDictionaryArgs* other);

  // implements Message ----------------------------------------------

  inline FilterDictionaryArgs* New() const { return New(NULL); }

  FilterDictionaryArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterDictionaryArgs& from);
  void MergeFrom(const FilterDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilterDictionaryArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dictionary_name = 1;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 1;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // optional string dictionary_target_name = 2;
  bool has_dictionary_target_name() const;
  void clear_dictionary_target_name();
  static const int kDictionaryTargetNameFieldNumber = 2;
  const ::std::string& dictionary_target_name() const;
  void set_dictionary_target_name(const ::std::string& value);
  void set_dictionary_target_name(const char* value);
  void set_dictionary_target_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_target_name();
  ::std::string* release_dictionary_target_name();
  void set_allocated_dictionary_target_name(::std::string* dictionary_target_name);

  // optional string class_id = 3;
  bool has_class_id() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 3;
  const ::std::string& class_id() const;
  void set_class_id(const ::std::string& value);
  void set_class_id(const char* value);
  void set_class_id(const char* value, size_t size);
  ::std::string* mutable_class_id();
  ::std::string* release_class_id();
  void set_allocated_class_id(::std::string* class_id);

  // optional float min_df = 4;
  bool has_min_df() const;
  void clear_min_df();
  static const int kMinDfFieldNumber = 4;
  float min_df() const;
  void set_min_df(float value);

  // optional float max_df = 5;
  bool has_max_df() const;
  void clear_max_df();
  static const int kMaxDfFieldNumber = 5;
  float max_df() const;
  void set_max_df(float value);

  // optional float min_df_rate = 6;
  bool has_min_df_rate() const;
  void clear_min_df_rate();
  static const int kMinDfRateFieldNumber = 6;
  float min_df_rate() const;
  void set_min_df_rate(float value);

  // optional float max_df_rate = 7;
  bool has_max_df_rate() const;
  void clear_max_df_rate();
  static const int kMaxDfRateFieldNumber = 7;
  float max_df_rate() const;
  void set_max_df_rate(float value);

  // optional float min_tf = 8;
  bool has_min_tf() const;
  void clear_min_tf();
  static const int kMinTfFieldNumber = 8;
  float min_tf() const;
  void set_min_tf(float value);

  // optional float max_tf = 9;
  bool has_max_tf() const;
  void clear_max_tf();
  static const int kMaxTfFieldNumber = 9;
  float max_tf() const;
  void set_max_tf(float value);

  // optional int64 max_dictionary_size = 10;
  bool has_max_dictionary_size() const;
  void clear_max_dictionary_size();
  static const int kMaxDictionarySizeFieldNumber = 10;
  ::google::protobuf::int64 max_dictionary_size() const;
  void set_max_dictionary_size(::google::protobuf::int64 value);

  // optional bool recalculate_value = 11 [default = false];
  bool has_recalculate_value() const;
  void clear_recalculate_value();
  static const int kRecalculateValueFieldNumber = 11;
  bool recalculate_value() const;
  void set_recalculate_value(bool value);

  // @@protoc_insertion_point(class_scope:artm.FilterDictionaryArgs)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();
  inline void set_has_dictionary_target_name();
  inline void clear_has_dictionary_target_name();
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_min_df();
  inline void clear_has_min_df();
  inline void set_has_max_df();
  inline void clear_has_max_df();
  inline void set_has_min_df_rate();
  inline void clear_has_min_df_rate();
  inline void set_has_max_df_rate();
  inline void clear_has_max_df_rate();
  inline void set_has_min_tf();
  inline void clear_has_min_tf();
  inline void set_has_max_tf();
  inline void clear_has_max_tf();
  inline void set_has_max_dictionary_size();
  inline void clear_has_max_dictionary_size();
  inline void set_has_recalculate_value();
  inline void clear_has_recalculate_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_target_name_;
  ::google::protobuf::internal::ArenaStringPtr class_id_;
  float min_df_;
  float max_df_;
  float min_df_rate_;
  float max_df_rate_;
  float min_tf_;
  float max_tf_;
  ::google::protobuf::int64 max_dictionary_size_;
  bool recalculate_value_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static FilterDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC GatherDictionaryArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.GatherDictionaryArgs) */ {
 public:
  GatherDictionaryArgs();
  virtual ~GatherDictionaryArgs();

  GatherDictionaryArgs(const GatherDictionaryArgs& from);

  inline GatherDictionaryArgs& operator=(const GatherDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GatherDictionaryArgs& default_instance();

  void Swap(GatherDictionaryArgs* other);

  // implements Message ----------------------------------------------

  inline GatherDictionaryArgs* New() const { return New(NULL); }

  GatherDictionaryArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GatherDictionaryArgs& from);
  void MergeFrom(const GatherDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GatherDictionaryArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dictionary_target_name = 1;
  bool has_dictionary_target_name() const;
  void clear_dictionary_target_name();
  static const int kDictionaryTargetNameFieldNumber = 1;
  const ::std::string& dictionary_target_name() const;
  void set_dictionary_target_name(const ::std::string& value);
  void set_dictionary_target_name(const char* value);
  void set_dictionary_target_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_target_name();
  ::std::string* release_dictionary_target_name();
  void set_allocated_dictionary_target_name(::std::string* dictionary_target_name);

  // optional string data_path = 2;
  bool has_data_path() const;
  void clear_data_path();
  static const int kDataPathFieldNumber = 2;
  const ::std::string& data_path() const;
  void set_data_path(const ::std::string& value);
  void set_data_path(const char* value);
  void set_data_path(const char* value, size_t size);
  ::std::string* mutable_data_path();
  ::std::string* release_data_path();
  void set_allocated_data_path(::std::string* data_path);

  // optional string cooc_file_path = 3;
  bool has_cooc_file_path() const;
  void clear_cooc_file_path();
  static const int kCoocFilePathFieldNumber = 3;
  const ::std::string& cooc_file_path() const;
  void set_cooc_file_path(const ::std::string& value);
  void set_cooc_file_path(const char* value);
  void set_cooc_file_path(const char* value, size_t size);
  ::std::string* mutable_cooc_file_path();
  ::std::string* release_cooc_file_path();
  void set_allocated_cooc_file_path(::std::string* cooc_file_path);

  // optional string vocab_file_path = 4;
  bool has_vocab_file_path() const;
  void clear_vocab_file_path();
  static const int kVocabFilePathFieldNumber = 4;
  const ::std::string& vocab_file_path() const;
  void set_vocab_file_path(const ::std::string& value);
  void set_vocab_file_path(const char* value);
  void set_vocab_file_path(const char* value, size_t size);
  ::std::string* mutable_vocab_file_path();
  ::std::string* release_vocab_file_path();
  void set_allocated_vocab_file_path(::std::string* vocab_file_path);

  // optional bool symmetric_cooc_values = 5 [default = false];
  bool has_symmetric_cooc_values() const;
  void clear_symmetric_cooc_values();
  static const int kSymmetricCoocValuesFieldNumber = 5;
  bool symmetric_cooc_values() const;
  void set_symmetric_cooc_values(bool value);

  // repeated string batch_path = 6;
  int batch_path_size() const;
  void clear_batch_path();
  static const int kBatchPathFieldNumber = 6;
  const ::std::string& batch_path(int index) const;
  ::std::string* mutable_batch_path(int index);
  void set_batch_path(int index, const ::std::string& value);
  void set_batch_path(int index, const char* value);
  void set_batch_path(int index, const char* value, size_t size);
  ::std::string* add_batch_path();
  void add_batch_path(const ::std::string& value);
  void add_batch_path(const char* value);
  void add_batch_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_path() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_path();

  // @@protoc_insertion_point(class_scope:artm.GatherDictionaryArgs)
 private:
  inline void set_has_dictionary_target_name();
  inline void clear_has_dictionary_target_name();
  inline void set_has_data_path();
  inline void clear_has_data_path();
  inline void set_has_cooc_file_path();
  inline void clear_has_cooc_file_path();
  inline void set_has_vocab_file_path();
  inline void clear_has_vocab_file_path();
  inline void set_has_symmetric_cooc_values();
  inline void clear_has_symmetric_cooc_values();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_target_name_;
  ::google::protobuf::internal::ArenaStringPtr data_path_;
  ::google::protobuf::internal::ArenaStringPtr cooc_file_path_;
  ::google::protobuf::internal::ArenaStringPtr vocab_file_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_path_;
  bool symmetric_cooc_values_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GatherDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC GetDictionaryArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.GetDictionaryArgs) */ {
 public:
  GetDictionaryArgs();
  virtual ~GetDictionaryArgs();

  GetDictionaryArgs(const GetDictionaryArgs& from);

  inline GetDictionaryArgs& operator=(const GetDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDictionaryArgs& default_instance();

  void Swap(GetDictionaryArgs* other);

  // implements Message ----------------------------------------------

  inline GetDictionaryArgs* New() const { return New(NULL); }

  GetDictionaryArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDictionaryArgs& from);
  void MergeFrom(const GetDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetDictionaryArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dictionary_name = 1;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 1;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.GetDictionaryArgs)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC GetTopicModelArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.GetTopicModelArgs) */ {
 public:
  GetTopicModelArgs();
  virtual ~GetTopicModelArgs();

  GetTopicModelArgs(const GetTopicModelArgs& from);

  inline GetTopicModelArgs& operator=(const GetTopicModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTopicModelArgs& default_instance();

  void Swap(GetTopicModelArgs* other);

  // implements Message ----------------------------------------------

  inline GetTopicModelArgs* New() const { return New(NULL); }

  GetTopicModelArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTopicModelArgs& from);
  void MergeFrom(const GetTopicModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetTopicModelArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  bool has_model_name() const;
  void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // repeated string topic_name = 2;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 2;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string token = 3;
  int token_size() const;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token(int index) const;
  ::std::string* mutable_token(int index);
  void set_token(int index, const ::std::string& value);
  void set_token(int index, const char* value);
  void set_token(int index, const char* value, size_t size);
  ::std::string* add_token();
  void add_token(const ::std::string& value);
  void add_token(const char* value);
  void add_token(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated string class_id = 4;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 4;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional bool use_sparse_format = 5;
  bool has_use_sparse_format() const;
  void clear_use_sparse_format();
  static const int kUseSparseFormatFieldNumber = 5;
  bool use_sparse_format() const;
  void set_use_sparse_format(bool value);

  // optional float eps = 6 [default = 1e-37];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 6;
  float eps() const;
  void set_eps(float value);

  // optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
  bool has_matrix_layout() const;
  void clear_matrix_layout();
  static const int kMatrixLayoutFieldNumber = 8;
  ::artm::MatrixLayout matrix_layout() const;
  void set_matrix_layout(::artm::MatrixLayout value);

  // @@protoc_insertion_point(class_scope:artm.GetTopicModelArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_use_sparse_format();
  inline void clear_has_use_sparse_format();
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_matrix_layout();
  inline void clear_has_matrix_layout();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  bool use_sparse_format_;
  float eps_;
  int matrix_layout_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetTopicModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC GetThetaMatrixArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.GetThetaMatrixArgs) */ {
 public:
  GetThetaMatrixArgs();
  virtual ~GetThetaMatrixArgs();

  GetThetaMatrixArgs(const GetThetaMatrixArgs& from);

  inline GetThetaMatrixArgs& operator=(const GetThetaMatrixArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetThetaMatrixArgs& default_instance();

  void Swap(GetThetaMatrixArgs* other);

  // implements Message ----------------------------------------------

  inline GetThetaMatrixArgs* New() const { return New(NULL); }

  GetThetaMatrixArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetThetaMatrixArgs& from);
  void MergeFrom(const GetThetaMatrixArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetThetaMatrixArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 3;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional bool use_sparse_format = 6;
  bool has_use_sparse_format() const;
  void clear_use_sparse_format();
  static const int kUseSparseFormatFieldNumber = 6;
  bool use_sparse_format() const;
  void set_use_sparse_format(bool value);

  // optional float eps = 7 [default = 1e-37];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 7;
  float eps() const;
  void set_eps(float value);

  // optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
  bool has_matrix_layout() const;
  void clear_matrix_layout();
  static const int kMatrixLayoutFieldNumber = 8;
  ::artm::MatrixLayout matrix_layout() const;
  void set_matrix_layout(::artm::MatrixLayout value);

  // @@protoc_insertion_point(class_scope:artm.GetThetaMatrixArgs)
 private:
  inline void set_has_use_sparse_format();
  inline void clear_has_use_sparse_format();
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_matrix_layout();
  inline void clear_has_matrix_layout();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  bool use_sparse_format_;
  float eps_;
  int matrix_layout_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetThetaMatrixArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC GetScoreValueArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.GetScoreValueArgs) */ {
 public:
  GetScoreValueArgs();
  virtual ~GetScoreValueArgs();

  GetScoreValueArgs(const GetScoreValueArgs& from);

  inline GetScoreValueArgs& operator=(const GetScoreValueArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetScoreValueArgs& default_instance();

  void Swap(GetScoreValueArgs* other);

  // implements Message ----------------------------------------------

  inline GetScoreValueArgs* New() const { return New(NULL); }

  GetScoreValueArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetScoreValueArgs& from);
  void MergeFrom(const GetScoreValueArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetScoreValueArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string score_name = 2;
  bool has_score_name() const;
  void clear_score_name();
  static const int kScoreNameFieldNumber = 2;
  const ::std::string& score_name() const;
  void set_score_name(const ::std::string& value);
  void set_score_name(const char* value);
  void set_score_name(const char* value, size_t size);
  ::std::string* mutable_score_name();
  ::std::string* release_score_name();
  void set_allocated_score_name(::std::string* score_name);

  // @@protoc_insertion_point(class_scope:artm.GetScoreValueArgs)
 private:
  inline void set_has_score_name();
  inline void clear_has_score_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr score_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetScoreValueArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC GetScoreArrayArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.GetScoreArrayArgs) */ {
 public:
  GetScoreArrayArgs();
  virtual ~GetScoreArrayArgs();

  GetScoreArrayArgs(const GetScoreArrayArgs& from);

  inline GetScoreArrayArgs& operator=(const GetScoreArrayArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetScoreArrayArgs& default_instance();

  void Swap(GetScoreArrayArgs* other);

  // implements Message ----------------------------------------------

  inline GetScoreArrayArgs* New() const { return New(NULL); }

  GetScoreArrayArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetScoreArrayArgs& from);
  void MergeFrom(const GetScoreArrayArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetScoreArrayArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string score_name = 2;
  bool has_score_name() const;
  void clear_score_name();
  static const int kScoreNameFieldNumber = 2;
  const ::std::string& score_name() const;
  void set_score_name(const ::std::string& value);
  void set_score_name(const char* value);
  void set_score_name(const char* value, size_t size);
  ::std::string* mutable_score_name();
  ::std::string* release_score_name();
  void set_allocated_score_name(::std::string* score_name);

  // @@protoc_insertion_point(class_scope:artm.GetScoreArrayArgs)
 private:
  inline void set_has_score_name();
  inline void clear_has_score_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr score_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetScoreArrayArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ExportModelArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ExportModelArgs) */ {
 public:
  ExportModelArgs();
  virtual ~ExportModelArgs();

  ExportModelArgs(const ExportModelArgs& from);

  inline ExportModelArgs& operator=(const ExportModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExportModelArgs& default_instance();

  void Swap(ExportModelArgs* other);

  // implements Message ----------------------------------------------

  inline ExportModelArgs* New() const { return New(NULL); }

  ExportModelArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExportModelArgs& from);
  void MergeFrom(const ExportModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExportModelArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // optional string model_name = 2;
  bool has_model_name() const;
  void clear_model_name();
  static const int kModelNameFieldNumber = 2;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // @@protoc_insertion_point(class_scope:artm.ExportModelArgs)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_model_name();
  inline void clear_has_model_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ExportModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ImportModelArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ImportModelArgs) */ {
 public:
  ImportModelArgs();
  virtual ~ImportModelArgs();

  ImportModelArgs(const ImportModelArgs& from);

  inline ImportModelArgs& operator=(const ImportModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportModelArgs& default_instance();

  void Swap(ImportModelArgs* other);

  // implements Message ----------------------------------------------

  inline ImportModelArgs* New() const { return New(NULL); }

  ImportModelArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportModelArgs& from);
  void MergeFrom(const ImportModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImportModelArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // optional string model_name = 2;
  bool has_model_name() const;
  void clear_model_name();
  static const int kModelNameFieldNumber = 2;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // @@protoc_insertion_point(class_scope:artm.ImportModelArgs)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_model_name();
  inline void clear_has_model_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ImportModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ExportScoreTrackerArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ExportScoreTrackerArgs) */ {
 public:
  ExportScoreTrackerArgs();
  virtual ~ExportScoreTrackerArgs();

  ExportScoreTrackerArgs(const ExportScoreTrackerArgs& from);

  inline ExportScoreTrackerArgs& operator=(const ExportScoreTrackerArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExportScoreTrackerArgs& default_instance();

  void Swap(ExportScoreTrackerArgs* other);

  // implements Message ----------------------------------------------

  inline ExportScoreTrackerArgs* New() const { return New(NULL); }

  ExportScoreTrackerArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExportScoreTrackerArgs& from);
  void MergeFrom(const ExportScoreTrackerArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExportScoreTrackerArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:artm.ExportScoreTrackerArgs)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ExportScoreTrackerArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ImportScoreTrackerArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ImportScoreTrackerArgs) */ {
 public:
  ImportScoreTrackerArgs();
  virtual ~ImportScoreTrackerArgs();

  ImportScoreTrackerArgs(const ImportScoreTrackerArgs& from);

  inline ImportScoreTrackerArgs& operator=(const ImportScoreTrackerArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportScoreTrackerArgs& default_instance();

  void Swap(ImportScoreTrackerArgs* other);

  // implements Message ----------------------------------------------

  inline ImportScoreTrackerArgs* New() const { return New(NULL); }

  ImportScoreTrackerArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportScoreTrackerArgs& from);
  void MergeFrom(const ImportScoreTrackerArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImportScoreTrackerArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:artm.ImportScoreTrackerArgs)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ImportScoreTrackerArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC AttachModelArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.AttachModelArgs) */ {
 public:
  AttachModelArgs();
  virtual ~AttachModelArgs();

  AttachModelArgs(const AttachModelArgs& from);

  inline AttachModelArgs& operator=(const AttachModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachModelArgs& default_instance();

  void Swap(AttachModelArgs* other);

  // implements Message ----------------------------------------------

  inline AttachModelArgs* New() const { return New(NULL); }

  AttachModelArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttachModelArgs& from);
  void MergeFrom(const AttachModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AttachModelArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  bool has_model_name() const;
  void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // @@protoc_insertion_point(class_scope:artm.AttachModelArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static AttachModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ProcessBatchesArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ProcessBatchesArgs) */ {
 public:
  ProcessBatchesArgs();
  virtual ~ProcessBatchesArgs();

  ProcessBatchesArgs(const ProcessBatchesArgs& from);

  inline ProcessBatchesArgs& operator=(const ProcessBatchesArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessBatchesArgs& default_instance();

  void Swap(ProcessBatchesArgs* other);

  // implements Message ----------------------------------------------

  inline ProcessBatchesArgs* New() const { return New(NULL); }

  ProcessBatchesArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessBatchesArgs& from);
  void MergeFrom(const ProcessBatchesArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessBatchesArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nwt_target_name = 1;
  bool has_nwt_target_name() const;
  void clear_nwt_target_name();
  static const int kNwtTargetNameFieldNumber = 1;
  const ::std::string& nwt_target_name() const;
  void set_nwt_target_name(const ::std::string& value);
  void set_nwt_target_name(const char* value);
  void set_nwt_target_name(const char* value, size_t size);
  ::std::string* mutable_nwt_target_name();
  ::std::string* release_nwt_target_name();
  void set_allocated_nwt_target_name(::std::string* nwt_target_name);

  // repeated string batch_filename = 2;
  int batch_filename_size() const;
  void clear_batch_filename();
  static const int kBatchFilenameFieldNumber = 2;
  const ::std::string& batch_filename(int index) const;
  ::std::string* mutable_batch_filename(int index);
  void set_batch_filename(int index, const ::std::string& value);
  void set_batch_filename(int index, const char* value);
  void set_batch_filename(int index, const char* value, size_t size);
  ::std::string* add_batch_filename();
  void add_batch_filename(const ::std::string& value);
  void add_batch_filename(const char* value);
  void add_batch_filename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_filename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_filename();

  // optional string pwt_source_name = 3;
  bool has_pwt_source_name() const;
  void clear_pwt_source_name();
  static const int kPwtSourceNameFieldNumber = 3;
  const ::std::string& pwt_source_name() const;
  void set_pwt_source_name(const ::std::string& value);
  void set_pwt_source_name(const char* value);
  void set_pwt_source_name(const char* value, size_t size);
  ::std::string* mutable_pwt_source_name();
  ::std::string* release_pwt_source_name();
  void set_allocated_pwt_source_name(::std::string* pwt_source_name);

  // optional int32 num_document_passes = 4 [default = 10];
  bool has_num_document_passes() const;
  void clear_num_document_passes();
  static const int kNumDocumentPassesFieldNumber = 4;
  ::google::protobuf::int32 num_document_passes() const;
  void set_num_document_passes(::google::protobuf::int32 value);

  // repeated string regularizer_name = 6;
  int regularizer_name_size() const;
  void clear_regularizer_name();
  static const int kRegularizerNameFieldNumber = 6;
  const ::std::string& regularizer_name(int index) const;
  ::std::string* mutable_regularizer_name(int index);
  void set_regularizer_name(int index, const ::std::string& value);
  void set_regularizer_name(int index, const char* value);
  void set_regularizer_name(int index, const char* value, size_t size);
  ::std::string* add_regularizer_name();
  void add_regularizer_name(const ::std::string& value);
  void add_regularizer_name(const char* value);
  void add_regularizer_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& regularizer_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_regularizer_name();

  // repeated float regularizer_tau = 7;
  int regularizer_tau_size() const;
  void clear_regularizer_tau();
  static const int kRegularizerTauFieldNumber = 7;
  float regularizer_tau(int index) const;
  void set_regularizer_tau(int index, float value);
  void add_regularizer_tau(float value);
  const ::google::protobuf::RepeatedField< float >&
      regularizer_tau() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_regularizer_tau();

  // repeated string class_id = 8;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 8;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated float class_weight = 9;
  int class_weight_size() const;
  void clear_class_weight();
  static const int kClassWeightFieldNumber = 9;
  float class_weight(int index) const;
  void set_class_weight(int index, float value);
  void add_class_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      class_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_class_weight();

  // optional bool reuse_theta = 10 [default = false];
  bool has_reuse_theta() const;
  void clear_reuse_theta();
  static const int kReuseThetaFieldNumber = 10;
  bool reuse_theta() const;
  void set_reuse_theta(bool value);

  // optional bool opt_for_avx = 11 [default = true];
  bool has_opt_for_avx() const;
  void clear_opt_for_avx();
  static const int kOptForAvxFieldNumber = 11;
  bool opt_for_avx() const;
  void set_opt_for_avx(bool value);

  // optional .artm.ThetaMatrixType theta_matrix_type = 14 [default = ThetaMatrixType_Cache];
  bool has_theta_matrix_type() const;
  void clear_theta_matrix_type();
  static const int kThetaMatrixTypeFieldNumber = 14;
  ::artm::ThetaMatrixType theta_matrix_type() const;
  void set_theta_matrix_type(::artm::ThetaMatrixType value);

  // repeated float batch_weight = 15;
  int batch_weight_size() const;
  void clear_batch_weight();
  static const int kBatchWeightFieldNumber = 15;
  float batch_weight(int index) const;
  void set_batch_weight(int index, float value);
  void add_batch_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      batch_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_batch_weight();

  // optional string predict_class_id = 17;
  bool has_predict_class_id() const;
  void clear_predict_class_id();
  static const int kPredictClassIdFieldNumber = 17;
  const ::std::string& predict_class_id() const;
  void set_predict_class_id(const ::std::string& value);
  void set_predict_class_id(const char* value);
  void set_predict_class_id(const char* value, size_t size);
  ::std::string* mutable_predict_class_id();
  ::std::string* release_predict_class_id();
  void set_allocated_predict_class_id(::std::string* predict_class_id);

  // repeated .artm.Batch batch = 18;
  int batch_size() const;
  void clear_batch();
  static const int kBatchFieldNumber = 18;
  const ::artm::Batch& batch(int index) const;
  ::artm::Batch* mutable_batch(int index);
  ::artm::Batch* add_batch();
  ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
      mutable_batch();
  const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
      batch() const;

  // optional bool use_random_theta = 19 [default = false];
  bool has_use_random_theta() const;
  void clear_use_random_theta();
  static const int kUseRandomThetaFieldNumber = 19;
  bool use_random_theta() const;
  void set_use_random_theta(bool value);

  // repeated string topic_name = 20;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 20;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string transaction_typename = 21;
  int transaction_typename_size() const;
  void clear_transaction_typename();
  static const int kTransactionTypenameFieldNumber = 21;
  const ::std::string& transaction_typename(int index) const;
  ::std::string* mutable_transaction_typename(int index);
  void set_transaction_typename(int index, const ::std::string& value);
  void set_transaction_typename(int index, const char* value);
  void set_transaction_typename(int index, const char* value, size_t size);
  ::std::string* add_transaction_typename();
  void add_transaction_typename(const ::std::string& value);
  void add_transaction_typename(const char* value);
  void add_transaction_typename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& transaction_typename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_transaction_typename();

  // repeated float transaction_weight = 22;
  int transaction_weight_size() const;
  void clear_transaction_weight();
  static const int kTransactionWeightFieldNumber = 22;
  float transaction_weight(int index) const;
  void set_transaction_weight(int index, float value);
  void add_transaction_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      transaction_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_transaction_weight();

  // optional bool reset_nwt = 23 [default = true];
  bool has_reset_nwt() const;
  void clear_reset_nwt();
  static const int kResetNwtFieldNumber = 23;
  bool reset_nwt() const;
  void set_reset_nwt(bool value);

  // @@protoc_insertion_point(class_scope:artm.ProcessBatchesArgs)
 private:
  inline void set_has_nwt_target_name();
  inline void clear_has_nwt_target_name();
  inline void set_has_pwt_source_name();
  inline void clear_has_pwt_source_name();
  inline void set_has_num_document_passes();
  inline void clear_has_num_document_passes();
  inline void set_has_reuse_theta();
  inline void clear_has_reuse_theta();
  inline void set_has_opt_for_avx();
  inline void clear_has_opt_for_avx();
  inline void set_has_theta_matrix_type();
  inline void clear_has_theta_matrix_type();
  inline void set_has_predict_class_id();
  inline void clear_has_predict_class_id();
  inline void set_has_use_random_theta();
  inline void clear_has_use_random_theta();
  inline void set_has_reset_nwt();
  inline void clear_has_reset_nwt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nwt_target_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_filename_;
  ::google::protobuf::internal::ArenaStringPtr pwt_source_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> regularizer_name_;
  ::google::protobuf::RepeatedField< float > regularizer_tau_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::int32 num_document_passes_;
  int theta_matrix_type_;
  ::google::protobuf::RepeatedField< float > class_weight_;
  ::google::protobuf::RepeatedField< float > batch_weight_;
  ::google::protobuf::internal::ArenaStringPtr predict_class_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::Batch > batch_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> transaction_typename_;
  ::google::protobuf::RepeatedField< float > transaction_weight_;
  bool reuse_theta_;
  bool opt_for_avx_;
  bool use_random_theta_;
  bool reset_nwt_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ProcessBatchesArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ProcessBatchesResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ProcessBatchesResult) */ {
 public:
  ProcessBatchesResult();
  virtual ~ProcessBatchesResult();

  ProcessBatchesResult(const ProcessBatchesResult& from);

  inline ProcessBatchesResult& operator=(const ProcessBatchesResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessBatchesResult& default_instance();

  void Swap(ProcessBatchesResult* other);

  // implements Message ----------------------------------------------

  inline ProcessBatchesResult* New() const { return New(NULL); }

  ProcessBatchesResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessBatchesResult& from);
  void MergeFrom(const ProcessBatchesResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessBatchesResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .artm.ScoreData score_data = 1;
  int score_data_size() const;
  void clear_score_data();
  static const int kScoreDataFieldNumber = 1;
  const ::artm::ScoreData& score_data(int index) const;
  ::artm::ScoreData* mutable_score_data(int index);
  ::artm::ScoreData* add_score_data();
  ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >*
      mutable_score_data();
  const ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >&
      score_data() const;

  // optional .artm.ThetaMatrix theta_matrix = 2;
  bool has_theta_matrix() const;
  void clear_theta_matrix();
  static const int kThetaMatrixFieldNumber = 2;
  const ::artm::ThetaMatrix& theta_matrix() const;
  ::artm::ThetaMatrix* mutable_theta_matrix();
  ::artm::ThetaMatrix* release_theta_matrix();
  void set_allocated_theta_matrix(::artm::ThetaMatrix* theta_matrix);

  // @@protoc_insertion_point(class_scope:artm.ProcessBatchesResult)
 private:
  inline void set_has_theta_matrix();
  inline void clear_has_theta_matrix();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::artm::ScoreData > score_data_;
  ::artm::ThetaMatrix* theta_matrix_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ProcessBatchesResult* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC MergeModelArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.MergeModelArgs) */ {
 public:
  MergeModelArgs();
  virtual ~MergeModelArgs();

  MergeModelArgs(const MergeModelArgs& from);

  inline MergeModelArgs& operator=(const MergeModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeModelArgs& default_instance();

  void Swap(MergeModelArgs* other);

  // implements Message ----------------------------------------------

  inline MergeModelArgs* New() const { return New(NULL); }

  MergeModelArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MergeModelArgs& from);
  void MergeFrom(const MergeModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MergeModelArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nwt_target_name = 1;
  bool has_nwt_target_name() const;
  void clear_nwt_target_name();
  static const int kNwtTargetNameFieldNumber = 1;
  const ::std::string& nwt_target_name() const;
  void set_nwt_target_name(const ::std::string& value);
  void set_nwt_target_name(const char* value);
  void set_nwt_target_name(const char* value, size_t size);
  ::std::string* mutable_nwt_target_name();
  ::std::string* release_nwt_target_name();
  void set_allocated_nwt_target_name(::std::string* nwt_target_name);

  // repeated string nwt_source_name = 2;
  int nwt_source_name_size() const;
  void clear_nwt_source_name();
  static const int kNwtSourceNameFieldNumber = 2;
  const ::std::string& nwt_source_name(int index) const;
  ::std::string* mutable_nwt_source_name(int index);
  void set_nwt_source_name(int index, const ::std::string& value);
  void set_nwt_source_name(int index, const char* value);
  void set_nwt_source_name(int index, const char* value, size_t size);
  ::std::string* add_nwt_source_name();
  void add_nwt_source_name(const ::std::string& value);
  void add_nwt_source_name(const char* value);
  void add_nwt_source_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& nwt_source_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nwt_source_name();

  // repeated float source_weight = 3;
  int source_weight_size() const;
  void clear_source_weight();
  static const int kSourceWeightFieldNumber = 3;
  float source_weight(int index) const;
  void set_source_weight(int index, float value);
  void add_source_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      source_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_source_weight();

  // repeated string topic_name = 4;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 4;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional string dictionary_name = 5;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 5;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.MergeModelArgs)
 private:
  inline void set_has_nwt_target_name();
  inline void clear_has_nwt_target_name();
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nwt_target_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nwt_source_name_;
  ::google::protobuf::RepeatedField< float > source_weight_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MergeModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC RegularizeModelArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.RegularizeModelArgs) */ {
 public:
  RegularizeModelArgs();
  virtual ~RegularizeModelArgs();

  RegularizeModelArgs(const RegularizeModelArgs& from);

  inline RegularizeModelArgs& operator=(const RegularizeModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegularizeModelArgs& default_instance();

  void Swap(RegularizeModelArgs* other);

  // implements Message ----------------------------------------------

  inline RegularizeModelArgs* New() const { return New(NULL); }

  RegularizeModelArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegularizeModelArgs& from);
  void MergeFrom(const RegularizeModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegularizeModelArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string rwt_target_name = 1;
  bool has_rwt_target_name() const;
  void clear_rwt_target_name();
  static const int kRwtTargetNameFieldNumber = 1;
  const ::std::string& rwt_target_name() const;
  void set_rwt_target_name(const ::std::string& value);
  void set_rwt_target_name(const char* value);
  void set_rwt_target_name(const char* value, size_t size);
  ::std::string* mutable_rwt_target_name();
  ::std::string* release_rwt_target_name();
  void set_allocated_rwt_target_name(::std::string* rwt_target_name);

  // optional string pwt_source_name = 2;
  bool has_pwt_source_name() const;
  void clear_pwt_source_name();
  static const int kPwtSourceNameFieldNumber = 2;
  const ::std::string& pwt_source_name() const;
  void set_pwt_source_name(const ::std::string& value);
  void set_pwt_source_name(const char* value);
  void set_pwt_source_name(const char* value, size_t size);
  ::std::string* mutable_pwt_source_name();
  ::std::string* release_pwt_source_name();
  void set_allocated_pwt_source_name(::std::string* pwt_source_name);

  // optional string nwt_source_name = 3;
  bool has_nwt_source_name() const;
  void clear_nwt_source_name();
  static const int kNwtSourceNameFieldNumber = 3;
  const ::std::string& nwt_source_name() const;
  void set_nwt_source_name(const ::std::string& value);
  void set_nwt_source_name(const char* value);
  void set_nwt_source_name(const char* value, size_t size);
  ::std::string* mutable_nwt_source_name();
  ::std::string* release_nwt_source_name();
  void set_allocated_nwt_source_name(::std::string* nwt_source_name);

  // repeated .artm.RegularizerSettings regularizer_settings = 4;
  int regularizer_settings_size() const;
  void clear_regularizer_settings();
  static const int kRegularizerSettingsFieldNumber = 4;
  const ::artm::RegularizerSettings& regularizer_settings(int index) const;
  ::artm::RegularizerSettings* mutable_regularizer_settings(int index);
  ::artm::RegularizerSettings* add_regularizer_settings();
  ::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings >*
      mutable_regularizer_settings();
  const ::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings >&
      regularizer_settings() const;

  // @@protoc_insertion_point(class_scope:artm.RegularizeModelArgs)
 private:
  inline void set_has_rwt_target_name();
  inline void clear_has_rwt_target_name();
  inline void set_has_pwt_source_name();
  inline void clear_has_pwt_source_name();
  inline void set_has_nwt_source_name();
  inline void clear_has_nwt_source_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rwt_target_name_;
  ::google::protobuf::internal::ArenaStringPtr pwt_source_name_;
  ::google::protobuf::internal::ArenaStringPtr nwt_source_name_;
  ::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings > regularizer_settings_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static RegularizeModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC NormalizeModelArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.NormalizeModelArgs) */ {
 public:
  NormalizeModelArgs();
  virtual ~NormalizeModelArgs();

  NormalizeModelArgs(const NormalizeModelArgs& from);

  inline NormalizeModelArgs& operator=(const NormalizeModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalizeModelArgs& default_instance();

  void Swap(NormalizeModelArgs* other);

  // implements Message ----------------------------------------------

  inline NormalizeModelArgs* New() const { return New(NULL); }

  NormalizeModelArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalizeModelArgs& from);
  void MergeFrom(const NormalizeModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NormalizeModelArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pwt_target_name = 1;
  bool has_pwt_target_name() const;
  void clear_pwt_target_name();
  static const int kPwtTargetNameFieldNumber = 1;
  const ::std::string& pwt_target_name() const;
  void set_pwt_target_name(const ::std::string& value);
  void set_pwt_target_name(const char* value);
  void set_pwt_target_name(const char* value, size_t size);
  ::std::string* mutable_pwt_target_name();
  ::std::string* release_pwt_target_name();
  void set_allocated_pwt_target_name(::std::string* pwt_target_name);

  // optional string nwt_source_name = 2;
  bool has_nwt_source_name() const;
  void clear_nwt_source_name();
  static const int kNwtSourceNameFieldNumber = 2;
  const ::std::string& nwt_source_name() const;
  void set_nwt_source_name(const ::std::string& value);
  void set_nwt_source_name(const char* value);
  void set_nwt_source_name(const char* value, size_t size);
  ::std::string* mutable_nwt_source_name();
  ::std::string* release_nwt_source_name();
  void set_allocated_nwt_source_name(::std::string* nwt_source_name);

  // optional string rwt_source_name = 3;
  bool has_rwt_source_name() const;
  void clear_rwt_source_name();
  static const int kRwtSourceNameFieldNumber = 3;
  const ::std::string& rwt_source_name() const;
  void set_rwt_source_name(const ::std::string& value);
  void set_rwt_source_name(const char* value);
  void set_rwt_source_name(const char* value, size_t size);
  ::std::string* mutable_rwt_source_name();
  ::std::string* release_rwt_source_name();
  void set_allocated_rwt_source_name(::std::string* rwt_source_name);

  // @@protoc_insertion_point(class_scope:artm.NormalizeModelArgs)
 private:
  inline void set_has_pwt_target_name();
  inline void clear_has_pwt_target_name();
  inline void set_has_nwt_source_name();
  inline void clear_has_nwt_source_name();
  inline void set_has_rwt_source_name();
  inline void clear_has_rwt_source_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pwt_target_name_;
  ::google::protobuf::internal::ArenaStringPtr nwt_source_name_;
  ::google::protobuf::internal::ArenaStringPtr rwt_source_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static NormalizeModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ImportDictionaryArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ImportDictionaryArgs) */ {
 public:
  ImportDictionaryArgs();
  virtual ~ImportDictionaryArgs();

  ImportDictionaryArgs(const ImportDictionaryArgs& from);

  inline ImportDictionaryArgs& operator=(const ImportDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportDictionaryArgs& default_instance();

  void Swap(ImportDictionaryArgs* other);

  // implements Message ----------------------------------------------

  inline ImportDictionaryArgs* New() const { return New(NULL); }

  ImportDictionaryArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportDictionaryArgs& from);
  void MergeFrom(const ImportDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImportDictionaryArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // optional string dictionary_name = 2;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 2;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.ImportDictionaryArgs)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ImportDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ExportDictionaryArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ExportDictionaryArgs) */ {
 public:
  ExportDictionaryArgs();
  virtual ~ExportDictionaryArgs();

  ExportDictionaryArgs(const ExportDictionaryArgs& from);

  inline ExportDictionaryArgs& operator=(const ExportDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExportDictionaryArgs& default_instance();

  void Swap(ExportDictionaryArgs* other);

  // implements Message ----------------------------------------------

  inline ExportDictionaryArgs* New() const { return New(NULL); }

  ExportDictionaryArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExportDictionaryArgs& from);
  void MergeFrom(const ExportDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExportDictionaryArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // optional string dictionary_name = 2;
  bool has_dictionary_name() const;
  void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 2;
  const ::std::string& dictionary_name() const;
  void set_dictionary_name(const ::std::string& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  ::std::string* mutable_dictionary_name();
  ::std::string* release_dictionary_name();
  void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.ExportDictionaryArgs)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr dictionary_name_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ExportDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC DuplicateMasterComponentArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.DuplicateMasterComponentArgs) */ {
 public:
  DuplicateMasterComponentArgs();
  virtual ~DuplicateMasterComponentArgs();

  DuplicateMasterComponentArgs(const DuplicateMasterComponentArgs& from);

  inline DuplicateMasterComponentArgs& operator=(const DuplicateMasterComponentArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DuplicateMasterComponentArgs& default_instance();

  void Swap(DuplicateMasterComponentArgs* other);

  // implements Message ----------------------------------------------

  inline DuplicateMasterComponentArgs* New() const { return New(NULL); }

  DuplicateMasterComponentArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DuplicateMasterComponentArgs& from);
  void MergeFrom(const DuplicateMasterComponentArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DuplicateMasterComponentArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.DuplicateMasterComponentArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DuplicateMasterComponentArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC GetMasterComponentInfoArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.GetMasterComponentInfoArgs) */ {
 public:
  GetMasterComponentInfoArgs();
  virtual ~GetMasterComponentInfoArgs();

  GetMasterComponentInfoArgs(const GetMasterComponentInfoArgs& from);

  inline GetMasterComponentInfoArgs& operator=(const GetMasterComponentInfoArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMasterComponentInfoArgs& default_instance();

  void Swap(GetMasterComponentInfoArgs* other);

  // implements Message ----------------------------------------------

  inline GetMasterComponentInfoArgs* New() const { return New(NULL); }

  GetMasterComponentInfoArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMasterComponentInfoArgs& from);
  void MergeFrom(const GetMasterComponentInfoArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMasterComponentInfoArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.GetMasterComponentInfoArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetMasterComponentInfoArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC MasterComponentInfo_RegularizerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.MasterComponentInfo.RegularizerInfo) */ {
 public:
  MasterComponentInfo_RegularizerInfo();
  virtual ~MasterComponentInfo_RegularizerInfo();

  MasterComponentInfo_RegularizerInfo(const MasterComponentInfo_RegularizerInfo& from);

  inline MasterComponentInfo_RegularizerInfo& operator=(const MasterComponentInfo_RegularizerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_RegularizerInfo& default_instance();

  void Swap(MasterComponentInfo_RegularizerInfo* other);

  // implements Message ----------------------------------------------

  inline MasterComponentInfo_RegularizerInfo* New() const { return New(NULL); }

  MasterComponentInfo_RegularizerInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_RegularizerInfo& from);
  void MergeFrom(const MasterComponentInfo_RegularizerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MasterComponentInfo_RegularizerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.RegularizerInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_RegularizerInfo* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC MasterComponentInfo_ScoreInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.MasterComponentInfo.ScoreInfo) */ {
 public:
  MasterComponentInfo_ScoreInfo();
  virtual ~MasterComponentInfo_ScoreInfo();

  MasterComponentInfo_ScoreInfo(const MasterComponentInfo_ScoreInfo& from);

  inline MasterComponentInfo_ScoreInfo& operator=(const MasterComponentInfo_ScoreInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_ScoreInfo& default_instance();

  void Swap(MasterComponentInfo_ScoreInfo* other);

  // implements Message ----------------------------------------------

  inline MasterComponentInfo_ScoreInfo* New() const { return New(NULL); }

  MasterComponentInfo_ScoreInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_ScoreInfo& from);
  void MergeFrom(const MasterComponentInfo_ScoreInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MasterComponentInfo_ScoreInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.ScoreInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_ScoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC MasterComponentInfo_DictionaryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.MasterComponentInfo.DictionaryInfo) */ {
 public:
  MasterComponentInfo_DictionaryInfo();
  virtual ~MasterComponentInfo_DictionaryInfo();

  MasterComponentInfo_DictionaryInfo(const MasterComponentInfo_DictionaryInfo& from);

  inline MasterComponentInfo_DictionaryInfo& operator=(const MasterComponentInfo_DictionaryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_DictionaryInfo& default_instance();

  void Swap(MasterComponentInfo_DictionaryInfo* other);

  // implements Message ----------------------------------------------

  inline MasterComponentInfo_DictionaryInfo* New() const { return New(NULL); }

  MasterComponentInfo_DictionaryInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_DictionaryInfo& from);
  void MergeFrom(const MasterComponentInfo_DictionaryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MasterComponentInfo_DictionaryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int64 num_entries = 2;
  bool has_num_entries() const;
  void clear_num_entries();
  static const int kNumEntriesFieldNumber = 2;
  ::google::protobuf::int64 num_entries() const;
  void set_num_entries(::google::protobuf::int64 value);

  // optional int64 byte_size = 3;
  bool has_byte_size() const;
  void clear_byte_size();
  static const int kByteSizeFieldNumber = 3;
  ::google::protobuf::int64 byte_size() const;
  void set_byte_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.DictionaryInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_num_entries();
  inline void clear_has_num_entries();
  inline void set_has_byte_size();
  inline void clear_has_byte_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 num_entries_;
  ::google::protobuf::int64 byte_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_DictionaryInfo* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC MasterComponentInfo_BatchInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.MasterComponentInfo.BatchInfo) */ {
 public:
  MasterComponentInfo_BatchInfo();
  virtual ~MasterComponentInfo_BatchInfo();

  MasterComponentInfo_BatchInfo(const MasterComponentInfo_BatchInfo& from);

  inline MasterComponentInfo_BatchInfo& operator=(const MasterComponentInfo_BatchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_BatchInfo& default_instance();

  void Swap(MasterComponentInfo_BatchInfo* other);

  // implements Message ----------------------------------------------

  inline MasterComponentInfo_BatchInfo* New() const { return New(NULL); }

  MasterComponentInfo_BatchInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_BatchInfo& from);
  void MergeFrom(const MasterComponentInfo_BatchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MasterComponentInfo_BatchInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 num_items = 2;
  bool has_num_items() const;
  void clear_num_items();
  static const int kNumItemsFieldNumber = 2;
  ::google::protobuf::int32 num_items() const;
  void set_num_items(::google::protobuf::int32 value);

  // optional int32 num_tokens = 3;
  bool has_num_tokens() const;
  void clear_num_tokens();
  static const int kNumTokensFieldNumber = 3;
  ::google::protobuf::int32 num_tokens() const;
  void set_num_tokens(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.BatchInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_num_items();
  inline void clear_has_num_items();
  inline void set_has_num_tokens();
  inline void clear_has_num_tokens();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 num_items_;
  ::google::protobuf::int32 num_tokens_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_BatchInfo* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC MasterComponentInfo_ModelInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.MasterComponentInfo.ModelInfo) */ {
 public:
  MasterComponentInfo_ModelInfo();
  virtual ~MasterComponentInfo_ModelInfo();

  MasterComponentInfo_ModelInfo(const MasterComponentInfo_ModelInfo& from);

  inline MasterComponentInfo_ModelInfo& operator=(const MasterComponentInfo_ModelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_ModelInfo& default_instance();

  void Swap(MasterComponentInfo_ModelInfo* other);

  // implements Message ----------------------------------------------

  inline MasterComponentInfo_ModelInfo* New() const { return New(NULL); }

  MasterComponentInfo_ModelInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_ModelInfo& from);
  void MergeFrom(const MasterComponentInfo_ModelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MasterComponentInfo_ModelInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional int32 num_topics = 3;
  bool has_num_topics() const;
  void clear_num_topics();
  static const int kNumTopicsFieldNumber = 3;
  ::google::protobuf::int32 num_topics() const;
  void set_num_topics(::google::protobuf::int32 value);

  // optional int32 num_tokens = 4;
  bool has_num_tokens() const;
  void clear_num_tokens();
  static const int kNumTokensFieldNumber = 4;
  ::google::protobuf::int32 num_tokens() const;
  void set_num_tokens(::google::protobuf::int32 value);

  // optional int64 byte_size = 5;
  bool has_byte_size() const;
  void clear_byte_size();
  static const int kByteSizeFieldNumber = 5;
  ::google::protobuf::int64 byte_size() const;
  void set_byte_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.ModelInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_topics();
  inline void clear_has_num_topics();
  inline void set_has_num_tokens();
  inline void clear_has_num_tokens();
  inline void set_has_byte_size();
  inline void clear_has_byte_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int32 num_topics_;
  ::google::protobuf::int32 num_tokens_;
  ::google::protobuf::int64 byte_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_ModelInfo* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC MasterComponentInfo_CacheEntryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.MasterComponentInfo.CacheEntryInfo) */ {
 public:
  MasterComponentInfo_CacheEntryInfo();
  virtual ~MasterComponentInfo_CacheEntryInfo();

  MasterComponentInfo_CacheEntryInfo(const MasterComponentInfo_CacheEntryInfo& from);

  inline MasterComponentInfo_CacheEntryInfo& operator=(const MasterComponentInfo_CacheEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_CacheEntryInfo& default_instance();

  void Swap(MasterComponentInfo_CacheEntryInfo* other);

  // implements Message ----------------------------------------------

  inline MasterComponentInfo_CacheEntryInfo* New() const { return New(NULL); }

  MasterComponentInfo_CacheEntryInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_CacheEntryInfo& from);
  void MergeFrom(const MasterComponentInfo_CacheEntryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MasterComponentInfo_CacheEntryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional int32 byte_size = 2;
  bool has_byte_size() const;
  void clear_byte_size();
  static const int kByteSizeFieldNumber = 2;
  ::google::protobuf::int32 byte_size() const;
  void set_byte_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.CacheEntryInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_byte_size();
  inline void clear_has_byte_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int32 byte_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_CacheEntryInfo* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC MasterComponentInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.MasterComponentInfo) */ {
 public:
  MasterComponentInfo();
  virtual ~MasterComponentInfo();

  MasterComponentInfo(const MasterComponentInfo& from);

  inline MasterComponentInfo& operator=(const MasterComponentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo& default_instance();

  void Swap(MasterComponentInfo* other);

  // implements Message ----------------------------------------------

  inline MasterComponentInfo* New() const { return New(NULL); }

  MasterComponentInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo& from);
  void MergeFrom(const MasterComponentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MasterComponentInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MasterComponentInfo_RegularizerInfo RegularizerInfo;
  typedef MasterComponentInfo_ScoreInfo ScoreInfo;
  typedef MasterComponentInfo_DictionaryInfo DictionaryInfo;
  typedef MasterComponentInfo_BatchInfo BatchInfo;
  typedef MasterComponentInfo_ModelInfo ModelInfo;
  typedef MasterComponentInfo_CacheEntryInfo CacheEntryInfo;

  // accessors -------------------------------------------------------

  // optional .artm.MasterModelConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::artm::MasterModelConfig& config() const;
  ::artm::MasterModelConfig* mutable_config();
  ::artm::MasterModelConfig* release_config();
  void set_allocated_config(::artm::MasterModelConfig* config);

  // repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
  int regularizer_size() const;
  void clear_regularizer();
  static const int kRegularizerFieldNumber = 3;
  const ::artm::MasterComponentInfo_RegularizerInfo& regularizer(int index) const;
  ::artm::MasterComponentInfo_RegularizerInfo* mutable_regularizer(int index);
  ::artm::MasterComponentInfo_RegularizerInfo* add_regularizer();
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo >*
      mutable_regularizer();
  const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo >&
      regularizer() const;

  // repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
  int score_size() const;
  void clear_score();
  static const int kScoreFieldNumber = 4;
  const ::artm::MasterComponentInfo_ScoreInfo& score(int index) const;
  ::artm::MasterComponentInfo_ScoreInfo* mutable_score(int index);
  ::artm::MasterComponentInfo_ScoreInfo* add_score();
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo >*
      mutable_score();
  const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo >&
      score() const;

  // repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
  int dictionary_size() const;
  void clear_dictionary();
  static const int kDictionaryFieldNumber = 5;
  const ::artm::MasterComponentInfo_DictionaryInfo& dictionary(int index) const;
  ::artm::MasterComponentInfo_DictionaryInfo* mutable_dictionary(int index);
  ::artm::MasterComponentInfo_DictionaryInfo* add_dictionary();
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo >*
      mutable_dictionary();
  const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo >&
      dictionary() const;

  // repeated .artm.MasterComponentInfo.ModelInfo model = 6;
  int model_size() const;
  void clear_model();
  static const int kModelFieldNumber = 6;
  const ::artm::MasterComponentInfo_ModelInfo& model(int index) const;
  ::artm::MasterComponentInfo_ModelInfo* mutable_model(int index);
  ::artm::MasterComponentInfo_ModelInfo* add_model();
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo >*
      mutable_model();
  const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo >&
      model() const;

  // repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
  int cache_entry_size() const;
  void clear_cache_entry();
  static const int kCacheEntryFieldNumber = 7;
  const ::artm::MasterComponentInfo_CacheEntryInfo& cache_entry(int index) const;
  ::artm::MasterComponentInfo_CacheEntryInfo* mutable_cache_entry(int index);
  ::artm::MasterComponentInfo_CacheEntryInfo* add_cache_entry();
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo >*
      mutable_cache_entry();
  const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo >&
      cache_entry() const;

  // optional int32 processor_queue_size = 9;
  bool has_processor_queue_size() const;
  void clear_processor_queue_size();
  static const int kProcessorQueueSizeFieldNumber = 9;
  ::google::protobuf::int32 processor_queue_size() const;
  void set_processor_queue_size(::google::protobuf::int32 value);

  // repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
  int batch_size() const;
  void clear_batch();
  static const int kBatchFieldNumber = 10;
  const ::artm::MasterComponentInfo_BatchInfo& batch(int index) const;
  ::artm::MasterComponentInfo_BatchInfo* mutable_batch(int index);
  ::artm::MasterComponentInfo_BatchInfo* add_batch();
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo >*
      mutable_batch();
  const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo >&
      batch() const;

  // optional int32 num_processors = 11;
  bool has_num_processors() const;
  void clear_num_processors();
  static const int kNumProcessorsFieldNumber = 11;
  ::google::protobuf::int32 num_processors() const;
  void set_num_processors(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo)
 private:
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_processor_queue_size();
  inline void clear_has_processor_queue_size();
  inline void set_has_num_processors();
  inline void clear_has_num_processors();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::artm::MasterModelConfig* config_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo > regularizer_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo > score_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo > dictionary_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo > model_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo > cache_entry_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo > batch_;
  ::google::protobuf::int32 processor_queue_size_;
  ::google::protobuf::int32 num_processors_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ImportBatchesArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ImportBatchesArgs) */ {
 public:
  ImportBatchesArgs();
  virtual ~ImportBatchesArgs();

  ImportBatchesArgs(const ImportBatchesArgs& from);

  inline ImportBatchesArgs& operator=(const ImportBatchesArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportBatchesArgs& default_instance();

  void Swap(ImportBatchesArgs* other);

  // implements Message ----------------------------------------------

  inline ImportBatchesArgs* New() const { return New(NULL); }

  ImportBatchesArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportBatchesArgs& from);
  void MergeFrom(const ImportBatchesArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImportBatchesArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .artm.Batch batch = 3;
  int batch_size() const;
  void clear_batch();
  static const int kBatchFieldNumber = 3;
  const ::artm::Batch& batch(int index) const;
  ::artm::Batch* mutable_batch(int index);
  ::artm::Batch* add_batch();
  ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
      mutable_batch();
  const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
      batch() const;

  // @@protoc_insertion_point(class_scope:artm.ImportBatchesArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::artm::Batch > batch_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ImportBatchesArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC AwaitOperationArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.AwaitOperationArgs) */ {
 public:
  AwaitOperationArgs();
  virtual ~AwaitOperationArgs();

  AwaitOperationArgs(const AwaitOperationArgs& from);

  inline AwaitOperationArgs& operator=(const AwaitOperationArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AwaitOperationArgs& default_instance();

  void Swap(AwaitOperationArgs* other);

  // implements Message ----------------------------------------------

  inline AwaitOperationArgs* New() const { return New(NULL); }

  AwaitOperationArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AwaitOperationArgs& from);
  void MergeFrom(const AwaitOperationArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AwaitOperationArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 timeout_milliseconds = 1 [default = -1];
  bool has_timeout_milliseconds() const;
  void clear_timeout_milliseconds();
  static const int kTimeoutMillisecondsFieldNumber = 1;
  ::google::protobuf::int32 timeout_milliseconds() const;
  void set_timeout_milliseconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.AwaitOperationArgs)
 private:
  inline void set_has_timeout_milliseconds();
  inline void clear_has_timeout_milliseconds();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 timeout_milliseconds_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static AwaitOperationArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC MasterModelConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.MasterModelConfig) */ {
 public:
  MasterModelConfig();
  virtual ~MasterModelConfig();

  MasterModelConfig(const MasterModelConfig& from);

  inline MasterModelConfig& operator=(const MasterModelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterModelConfig& default_instance();

  void Swap(MasterModelConfig* other);

  // implements Message ----------------------------------------------

  inline MasterModelConfig* New() const { return New(NULL); }

  MasterModelConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterModelConfig& from);
  void MergeFrom(const MasterModelConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MasterModelConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  int topic_name_size() const;
  void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topic_name(int index) const;
  ::std::string* mutable_topic_name(int index);
  void set_topic_name(int index, const ::std::string& value);
  void set_topic_name(int index, const char* value);
  void set_topic_name(int index, const char* value, size_t size);
  ::std::string* add_topic_name();
  void add_topic_name(const ::std::string& value);
  void add_topic_name(const char* value);
  void add_topic_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string class_id = 2;
  int class_id_size() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  const ::std::string& class_id(int index) const;
  ::std::string* mutable_class_id(int index);
  void set_class_id(int index, const ::std::string& value);
  void set_class_id(int index, const char* value);
  void set_class_id(int index, const char* value, size_t size);
  ::std::string* add_class_id();
  void add_class_id(const ::std::string& value);
  void add_class_id(const char* value);
  void add_class_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated float class_weight = 3;
  int class_weight_size() const;
  void clear_class_weight();
  static const int kClassWeightFieldNumber = 3;
  float class_weight(int index) const;
  void set_class_weight(int index, float value);
  void add_class_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      class_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_class_weight();

  // repeated .artm.ScoreConfig score_config = 4;
  int score_config_size() const;
  void clear_score_config();
  static const int kScoreConfigFieldNumber = 4;
  const ::artm::ScoreConfig& score_config(int index) const;
  ::artm::ScoreConfig* mutable_score_config(int index);
  ::artm::ScoreConfig* add_score_config();
  ::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig >*
      mutable_score_config();
  const ::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig >&
      score_config() const;

  // repeated .artm.RegularizerConfig regularizer_config = 5;
  int regularizer_config_size() const;
  void clear_regularizer_config();
  static const int kRegularizerConfigFieldNumber = 5;
  const ::artm::RegularizerConfig& regularizer_config(int index) const;
  ::artm::RegularizerConfig* mutable_regularizer_config(int index);
  ::artm::RegularizerConfig* add_regularizer_config();
  ::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig >*
      mutable_regularizer_config();
  const ::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig >&
      regularizer_config() const;

  // optional int32 num_processors = 6;
  bool has_num_processors() const;
  void clear_num_processors();
  static const int kNumProcessorsFieldNumber = 6;
  ::google::protobuf::int32 num_processors() const;
  void set_num_processors(::google::protobuf::int32 value);

  // optional string pwt_name = 7 [default = "pwt"];
  bool has_pwt_name() const;
  void clear_pwt_name();
  static const int kPwtNameFieldNumber = 7;
  const ::std::string& pwt_name() const;
  void set_pwt_name(const ::std::string& value);
  void set_pwt_name(const char* value);
  void set_pwt_name(const char* value, size_t size);
  ::std::string* mutable_pwt_name();
  ::std::string* release_pwt_name();
  void set_allocated_pwt_name(::std::string* pwt_name);

  // optional string nwt_name = 8 [default = "nwt"];
  bool has_nwt_name() const;
  void clear_nwt_name();
  static const int kNwtNameFieldNumber = 8;
  const ::std::string& nwt_name() const;
  void set_nwt_name(const ::std::string& value);
  void set_nwt_name(const char* value);
  void set_nwt_name(const char* value, size_t size);
  ::std::string* mutable_nwt_name();
  ::std::string* release_nwt_name();
  void set_allocated_nwt_name(::std::string* nwt_name);

  // optional int32 num_document_passes = 9;
  bool has_num_document_passes() const;
  void clear_num_document_passes();
  static const int kNumDocumentPassesFieldNumber = 9;
  ::google::protobuf::int32 num_document_passes() const;
  void set_num_document_passes(::google::protobuf::int32 value);

  // optional bool reuse_theta = 10 [default = false];
  bool has_reuse_theta() const;
  void clear_reuse_theta();
  static const int kReuseThetaFieldNumber = 10;
  bool reuse_theta() const;
  void set_reuse_theta(bool value);

  // optional bool opt_for_avx = 11 [default = true];
  bool has_opt_for_avx() const;
  void clear_opt_for_avx();
  static const int kOptForAvxFieldNumber = 11;
  bool opt_for_avx() const;
  void set_opt_for_avx(bool value);

  // optional string disk_cache_path = 13;
  bool has_disk_cache_path() const;
  void clear_disk_cache_path();
  static const int kDiskCachePathFieldNumber = 13;
  const ::std::string& disk_cache_path() const;
  void set_disk_cache_path(const ::std::string& value);
  void set_disk_cache_path(const char* value);
  void set_disk_cache_path(const char* value, size_t size);
  ::std::string* mutable_disk_cache_path();
  ::std::string* release_disk_cache_path();
  void set_allocated_disk_cache_path(::std::string* disk_cache_path);

  // optional bool cache_theta = 15 [default = false];
  bool has_cache_theta() const;
  void clear_cache_theta();
  static const int kCacheThetaFieldNumber = 15;
  bool cache_theta() const;
  void set_cache_theta(bool value);

  // optional string ptd_name = 16 [default = ""];
  bool has_ptd_name() const;
  void clear_ptd_name();
  static const int kPtdNameFieldNumber = 16;
  const ::std::string& ptd_name() const;
  void set_ptd_name(const ::std::string& value);
  void set_ptd_name(const char* value);
  void set_ptd_name(const char* value, size_t size);
  ::std::string* mutable_ptd_name();
  ::std::string* release_ptd_name();
  void set_allocated_ptd_name(::std::string* ptd_name);

  // repeated string transaction_typename = 17;
  int transaction_typename_size() const;
  void clear_transaction_typename();
  static const int kTransactionTypenameFieldNumber = 17;
  const ::std::string& transaction_typename(int index) const;
  ::std::string* mutable_transaction_typename(int index);
  void set_transaction_typename(int index, const ::std::string& value);
  void set_transaction_typename(int index, const char* value);
  void set_transaction_typename(int index, const char* value, size_t size);
  ::std::string* add_transaction_typename();
  void add_transaction_typename(const ::std::string& value);
  void add_transaction_typename(const char* value);
  void add_transaction_typename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& transaction_typename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_transaction_typename();

  // repeated float transaction_weight = 18;
  int transaction_weight_size() const;
  void clear_transaction_weight();
  static const int kTransactionWeightFieldNumber = 18;
  float transaction_weight(int index) const;
  void set_transaction_weight(int index, float value);
  void add_transaction_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      transaction_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_transaction_weight();

  // optional int32 parent_master_model_id = 19;
  bool has_parent_master_model_id() const;
  void clear_parent_master_model_id();
  static const int kParentMasterModelIdFieldNumber = 19;
  ::google::protobuf::int32 parent_master_model_id() const;
  void set_parent_master_model_id(::google::protobuf::int32 value);

  // optional float parent_master_model_weight = 20 [default = 1];
  bool has_parent_master_model_weight() const;
  void clear_parent_master_model_weight();
  static const int kParentMasterModelWeightFieldNumber = 20;
  float parent_master_model_weight() const;
  void set_parent_master_model_weight(float value);

  // @@protoc_insertion_point(class_scope:artm.MasterModelConfig)
 private:
  inline void set_has_num_processors();
  inline void clear_has_num_processors();
  inline void set_has_pwt_name();
  inline void clear_has_pwt_name();
  inline void set_has_nwt_name();
  inline void clear_has_nwt_name();
  inline void set_has_num_document_passes();
  inline void clear_has_num_document_passes();
  inline void set_has_reuse_theta();
  inline void clear_has_reuse_theta();
  inline void set_has_opt_for_avx();
  inline void clear_has_opt_for_avx();
  inline void set_has_disk_cache_path();
  inline void clear_has_disk_cache_path();
  inline void set_has_cache_theta();
  inline void clear_has_cache_theta();
  inline void set_has_ptd_name();
  inline void clear_has_ptd_name();
  inline void set_has_parent_master_model_id();
  inline void clear_has_parent_master_model_id();
  inline void set_has_parent_master_model_weight();
  inline void clear_has_parent_master_model_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::RepeatedField< float > class_weight_;
  ::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig > score_config_;
  ::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig > regularizer_config_;
  static ::std::string* _default_pwt_name_;
  ::google::protobuf::internal::ArenaStringPtr pwt_name_;
  ::google::protobuf::int32 num_processors_;
  ::google::protobuf::int32 num_document_passes_;
  static ::std::string* _default_nwt_name_;
  ::google::protobuf::internal::ArenaStringPtr nwt_name_;
  ::google::protobuf::internal::ArenaStringPtr disk_cache_path_;
  bool reuse_theta_;
  bool opt_for_avx_;
  bool cache_theta_;
  ::google::protobuf::int32 parent_master_model_id_;
  ::google::protobuf::internal::ArenaStringPtr ptd_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> transaction_typename_;
  ::google::protobuf::RepeatedField< float > transaction_weight_;
  float parent_master_model_weight_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterModelConfig* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC FitOfflineMasterModelArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.FitOfflineMasterModelArgs) */ {
 public:
  FitOfflineMasterModelArgs();
  virtual ~FitOfflineMasterModelArgs();

  FitOfflineMasterModelArgs(const FitOfflineMasterModelArgs& from);

  inline FitOfflineMasterModelArgs& operator=(const FitOfflineMasterModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FitOfflineMasterModelArgs& default_instance();

  void Swap(FitOfflineMasterModelArgs* other);

  // implements Message ----------------------------------------------

  inline FitOfflineMasterModelArgs* New() const { return New(NULL); }

  FitOfflineMasterModelArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FitOfflineMasterModelArgs& from);
  void MergeFrom(const FitOfflineMasterModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FitOfflineMasterModelArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string batch_filename = 1;
  int batch_filename_size() const;
  void clear_batch_filename();
  static const int kBatchFilenameFieldNumber = 1;
  const ::std::string& batch_filename(int index) const;
  ::std::string* mutable_batch_filename(int index);
  void set_batch_filename(int index, const ::std::string& value);
  void set_batch_filename(int index, const char* value);
  void set_batch_filename(int index, const char* value, size_t size);
  ::std::string* add_batch_filename();
  void add_batch_filename(const ::std::string& value);
  void add_batch_filename(const char* value);
  void add_batch_filename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_filename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_filename();

  // repeated float batch_weight = 2;
  int batch_weight_size() const;
  void clear_batch_weight();
  static const int kBatchWeightFieldNumber = 2;
  float batch_weight(int index) const;
  void set_batch_weight(int index, float value);
  void add_batch_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      batch_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_batch_weight();

  // optional int32 num_collection_passes = 3 [default = 1];
  bool has_num_collection_passes() const;
  void clear_num_collection_passes();
  static const int kNumCollectionPassesFieldNumber = 3;
  ::google::protobuf::int32 num_collection_passes() const;
  void set_num_collection_passes(::google::protobuf::int32 value);

  // optional string batch_folder = 4;
  bool has_batch_folder() const;
  void clear_batch_folder();
  static const int kBatchFolderFieldNumber = 4;
  const ::std::string& batch_folder() const;
  void set_batch_folder(const ::std::string& value);
  void set_batch_folder(const char* value);
  void set_batch_folder(const char* value, size_t size);
  ::std::string* mutable_batch_folder();
  ::std::string* release_batch_folder();
  void set_allocated_batch_folder(::std::string* batch_folder);

  // optional bool reset_nwt = 5 [default = true];
  bool has_reset_nwt() const;
  void clear_reset_nwt();
  static const int kResetNwtFieldNumber = 5;
  bool reset_nwt() const;
  void set_reset_nwt(bool value);

  // @@protoc_insertion_point(class_scope:artm.FitOfflineMasterModelArgs)
 private:
  inline void set_has_num_collection_passes();
  inline void clear_has_num_collection_passes();
  inline void set_has_batch_folder();
  inline void clear_has_batch_folder();
  inline void set_has_reset_nwt();
  inline void clear_has_reset_nwt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_filename_;
  ::google::protobuf::RepeatedField< float > batch_weight_;
  ::google::protobuf::internal::ArenaStringPtr batch_folder_;
  ::google::protobuf::int32 num_collection_passes_;
  bool reset_nwt_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static FitOfflineMasterModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC FitOnlineMasterModelArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.FitOnlineMasterModelArgs) */ {
 public:
  FitOnlineMasterModelArgs();
  virtual ~FitOnlineMasterModelArgs();

  FitOnlineMasterModelArgs(const FitOnlineMasterModelArgs& from);

  inline FitOnlineMasterModelArgs& operator=(const FitOnlineMasterModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FitOnlineMasterModelArgs& default_instance();

  void Swap(FitOnlineMasterModelArgs* other);

  // implements Message ----------------------------------------------

  inline FitOnlineMasterModelArgs* New() const { return New(NULL); }

  FitOnlineMasterModelArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FitOnlineMasterModelArgs& from);
  void MergeFrom(const FitOnlineMasterModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FitOnlineMasterModelArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string batch_filename = 1;
  int batch_filename_size() const;
  void clear_batch_filename();
  static const int kBatchFilenameFieldNumber = 1;
  const ::std::string& batch_filename(int index) const;
  ::std::string* mutable_batch_filename(int index);
  void set_batch_filename(int index, const ::std::string& value);
  void set_batch_filename(int index, const char* value);
  void set_batch_filename(int index, const char* value, size_t size);
  ::std::string* add_batch_filename();
  void add_batch_filename(const ::std::string& value);
  void add_batch_filename(const char* value);
  void add_batch_filename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_filename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_filename();

  // repeated float batch_weight = 2;
  int batch_weight_size() const;
  void clear_batch_weight();
  static const int kBatchWeightFieldNumber = 2;
  float batch_weight(int index) const;
  void set_batch_weight(int index, float value);
  void add_batch_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      batch_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_batch_weight();

  // repeated int32 update_after = 3;
  int update_after_size() const;
  void clear_update_after();
  static const int kUpdateAfterFieldNumber = 3;
  ::google::protobuf::int32 update_after(int index) const;
  void set_update_after(int index, ::google::protobuf::int32 value);
  void add_update_after(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      update_after() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_update_after();

  // repeated float apply_weight = 4;
  int apply_weight_size() const;
  void clear_apply_weight();
  static const int kApplyWeightFieldNumber = 4;
  float apply_weight(int index) const;
  void set_apply_weight(int index, float value);
  void add_apply_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      apply_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_apply_weight();

  // repeated float decay_weight = 5;
  int decay_weight_size() const;
  void clear_decay_weight();
  static const int kDecayWeightFieldNumber = 5;
  float decay_weight(int index) const;
  void set_decay_weight(int index, float value);
  void add_decay_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      decay_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_decay_weight();

  // optional bool asynchronous = 6 [default = false];
  bool has_asynchronous() const;
  void clear_asynchronous();
  static const int kAsynchronousFieldNumber = 6;
  bool asynchronous() const;
  void set_asynchronous(bool value);

  // @@protoc_insertion_point(class_scope:artm.FitOnlineMasterModelArgs)
 private:
  inline void set_has_asynchronous();
  inline void clear_has_asynchronous();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_filename_;
  ::google::protobuf::RepeatedField< float > batch_weight_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > update_after_;
  ::google::protobuf::RepeatedField< float > apply_weight_;
  ::google::protobuf::RepeatedField< float > decay_weight_;
  bool asynchronous_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static FitOnlineMasterModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC TransformMasterModelArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.TransformMasterModelArgs) */ {
 public:
  TransformMasterModelArgs();
  virtual ~TransformMasterModelArgs();

  TransformMasterModelArgs(const TransformMasterModelArgs& from);

  inline TransformMasterModelArgs& operator=(const TransformMasterModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformMasterModelArgs& default_instance();

  void Swap(TransformMasterModelArgs* other);

  // implements Message ----------------------------------------------

  inline TransformMasterModelArgs* New() const { return New(NULL); }

  TransformMasterModelArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformMasterModelArgs& from);
  void MergeFrom(const TransformMasterModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransformMasterModelArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .artm.Batch batch = 1;
  int batch_size() const;
  void clear_batch();
  static const int kBatchFieldNumber = 1;
  const ::artm::Batch& batch(int index) const;
  ::artm::Batch* mutable_batch(int index);
  ::artm::Batch* add_batch();
  ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
      mutable_batch();
  const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
      batch() const;

  // repeated string batch_filename = 2;
  int batch_filename_size() const;
  void clear_batch_filename();
  static const int kBatchFilenameFieldNumber = 2;
  const ::std::string& batch_filename(int index) const;
  ::std::string* mutable_batch_filename(int index);
  void set_batch_filename(int index, const ::std::string& value);
  void set_batch_filename(int index, const char* value);
  void set_batch_filename(int index, const char* value, size_t size);
  ::std::string* add_batch_filename();
  void add_batch_filename(const ::std::string& value);
  void add_batch_filename(const char* value);
  void add_batch_filename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_filename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_filename();

  // optional .artm.ThetaMatrixType theta_matrix_type = 3 [default = ThetaMatrixType_Dense];
  bool has_theta_matrix_type() const;
  void clear_theta_matrix_type();
  static const int kThetaMatrixTypeFieldNumber = 3;
  ::artm::ThetaMatrixType theta_matrix_type() const;
  void set_theta_matrix_type(::artm::ThetaMatrixType value);

  // optional string predict_class_id = 4;
  bool has_predict_class_id() const;
  void clear_predict_class_id();
  static const int kPredictClassIdFieldNumber = 4;
  const ::std::string& predict_class_id() const;
  void set_predict_class_id(const ::std::string& value);
  void set_predict_class_id(const char* value);
  void set_predict_class_id(const char* value, size_t size);
  ::std::string* mutable_predict_class_id();
  ::std::string* release_predict_class_id();
  void set_allocated_predict_class_id(::std::string* predict_class_id);

  // @@protoc_insertion_point(class_scope:artm.TransformMasterModelArgs)
 private:
  inline void set_has_theta_matrix_type();
  inline void clear_has_theta_matrix_type();
  inline void set_has_predict_class_id();
  inline void clear_has_predict_class_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::artm::Batch > batch_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_filename_;
  ::google::protobuf::internal::ArenaStringPtr predict_class_id_;
  int theta_matrix_type_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TransformMasterModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ConfigureLoggingArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ConfigureLoggingArgs) */ {
 public:
  ConfigureLoggingArgs();
  virtual ~ConfigureLoggingArgs();

  ConfigureLoggingArgs(const ConfigureLoggingArgs& from);

  inline ConfigureLoggingArgs& operator=(const ConfigureLoggingArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigureLoggingArgs& default_instance();

  void Swap(ConfigureLoggingArgs* other);

  // implements Message ----------------------------------------------

  inline ConfigureLoggingArgs* New() const { return New(NULL); }

  ConfigureLoggingArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigureLoggingArgs& from);
  void MergeFrom(const ConfigureLoggingArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigureLoggingArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string log_dir = 1;
  bool has_log_dir() const;
  void clear_log_dir();
  static const int kLogDirFieldNumber = 1;
  const ::std::string& log_dir() const;
  void set_log_dir(const ::std::string& value);
  void set_log_dir(const char* value);
  void set_log_dir(const char* value, size_t size);
  ::std::string* mutable_log_dir();
  ::std::string* release_log_dir();
  void set_allocated_log_dir(::std::string* log_dir);

  // optional int32 minloglevel = 2;
  bool has_minloglevel() const;
  void clear_minloglevel();
  static const int kMinloglevelFieldNumber = 2;
  ::google::protobuf::int32 minloglevel() const;
  void set_minloglevel(::google::protobuf::int32 value);

  // optional int32 stderrthreshold = 3;
  bool has_stderrthreshold() const;
  void clear_stderrthreshold();
  static const int kStderrthresholdFieldNumber = 3;
  ::google::protobuf::int32 stderrthreshold() const;
  void set_stderrthreshold(::google::protobuf::int32 value);

  // optional bool logtostderr = 4;
  bool has_logtostderr() const;
  void clear_logtostderr();
  static const int kLogtostderrFieldNumber = 4;
  bool logtostderr() const;
  void set_logtostderr(bool value);

  // optional bool colorlogtostderr = 5;
  bool has_colorlogtostderr() const;
  void clear_colorlogtostderr();
  static const int kColorlogtostderrFieldNumber = 5;
  bool colorlogtostderr() const;
  void set_colorlogtostderr(bool value);

  // optional bool alsologtostderr = 6;
  bool has_alsologtostderr() const;
  void clear_alsologtostderr();
  static const int kAlsologtostderrFieldNumber = 6;
  bool alsologtostderr() const;
  void set_alsologtostderr(bool value);

  // optional int32 logbufsecs = 7;
  bool has_logbufsecs() const;
  void clear_logbufsecs();
  static const int kLogbufsecsFieldNumber = 7;
  ::google::protobuf::int32 logbufsecs() const;
  void set_logbufsecs(::google::protobuf::int32 value);

  // optional int32 logbuflevel = 8;
  bool has_logbuflevel() const;
  void clear_logbuflevel();
  static const int kLogbuflevelFieldNumber = 8;
  ::google::protobuf::int32 logbuflevel() const;
  void set_logbuflevel(::google::protobuf::int32 value);

  // optional int32 max_log_size = 9;
  bool has_max_log_size() const;
  void clear_max_log_size();
  static const int kMaxLogSizeFieldNumber = 9;
  ::google::protobuf::int32 max_log_size() const;
  void set_max_log_size(::google::protobuf::int32 value);

  // optional bool stop_logging_if_full_disk = 10;
  bool has_stop_logging_if_full_disk() const;
  void clear_stop_logging_if_full_disk();
  static const int kStopLoggingIfFullDiskFieldNumber = 10;
  bool stop_logging_if_full_disk() const;
  void set_stop_logging_if_full_disk(bool value);

  // @@protoc_insertion_point(class_scope:artm.ConfigureLoggingArgs)
 private:
  inline void set_has_log_dir();
  inline void clear_has_log_dir();
  inline void set_has_minloglevel();
  inline void clear_has_minloglevel();
  inline void set_has_stderrthreshold();
  inline void clear_has_stderrthreshold();
  inline void set_has_logtostderr();
  inline void clear_has_logtostderr();
  inline void set_has_colorlogtostderr();
  inline void clear_has_colorlogtostderr();
  inline void set_has_alsologtostderr();
  inline void clear_has_alsologtostderr();
  inline void set_has_logbufsecs();
  inline void clear_has_logbufsecs();
  inline void set_has_logbuflevel();
  inline void clear_has_logbuflevel();
  inline void set_has_max_log_size();
  inline void clear_has_max_log_size();
  inline void set_has_stop_logging_if_full_disk();
  inline void clear_has_stop_logging_if_full_disk();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr log_dir_;
  ::google::protobuf::int32 minloglevel_;
  ::google::protobuf::int32 stderrthreshold_;
  bool logtostderr_;
  bool colorlogtostderr_;
  bool alsologtostderr_;
  bool stop_logging_if_full_disk_;
  ::google::protobuf::int32 logbufsecs_;
  ::google::protobuf::int32 logbuflevel_;
  ::google::protobuf::int32 max_log_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ConfigureLoggingArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ClearThetaCacheArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ClearThetaCacheArgs) */ {
 public:
  ClearThetaCacheArgs();
  virtual ~ClearThetaCacheArgs();

  ClearThetaCacheArgs(const ClearThetaCacheArgs& from);

  inline ClearThetaCacheArgs& operator=(const ClearThetaCacheArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearThetaCacheArgs& default_instance();

  void Swap(ClearThetaCacheArgs* other);

  // implements Message ----------------------------------------------

  inline ClearThetaCacheArgs* New() const { return New(NULL); }

  ClearThetaCacheArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearThetaCacheArgs& from);
  void MergeFrom(const ClearThetaCacheArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearThetaCacheArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.ClearThetaCacheArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ClearThetaCacheArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ClearScoreCacheArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ClearScoreCacheArgs) */ {
 public:
  ClearScoreCacheArgs();
  virtual ~ClearScoreCacheArgs();

  ClearScoreCacheArgs(const ClearScoreCacheArgs& from);

  inline ClearScoreCacheArgs& operator=(const ClearScoreCacheArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearScoreCacheArgs& default_instance();

  void Swap(ClearScoreCacheArgs* other);

  // implements Message ----------------------------------------------

  inline ClearScoreCacheArgs* New() const { return New(NULL); }

  ClearScoreCacheArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearScoreCacheArgs& from);
  void MergeFrom(const ClearScoreCacheArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearScoreCacheArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.ClearScoreCacheArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ClearScoreCacheArgs* default_instance_;
};
// -------------------------------------------------------------------

class DLL_PUBLIC ClearScoreArrayCacheArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:artm.ClearScoreArrayCacheArgs) */ {
 public:
  ClearScoreArrayCacheArgs();
  virtual ~ClearScoreArrayCacheArgs();

  ClearScoreArrayCacheArgs(const ClearScoreArrayCacheArgs& from);

  inline ClearScoreArrayCacheArgs& operator=(const ClearScoreArrayCacheArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearScoreArrayCacheArgs& default_instance();

  void Swap(ClearScoreArrayCacheArgs* other);

  // implements Message ----------------------------------------------

  inline ClearScoreArrayCacheArgs* New() const { return New(NULL); }

  ClearScoreArrayCacheArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearScoreArrayCacheArgs& from);
  void MergeFrom(const ClearScoreArrayCacheArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearScoreArrayCacheArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.ClearScoreArrayCacheArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void DLL_PUBLIC protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ClearScoreArrayCacheArgs* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatArray

// repeated float value = 1 [packed = true];
inline int FloatArray::value_size() const {
  return value_.size();
}
inline void FloatArray::clear_value() {
  value_.Clear();
}
inline float FloatArray::value(int index) const {
  // @@protoc_insertion_point(field_get:artm.FloatArray.value)
  return value_.Get(index);
}
inline void FloatArray::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FloatArray.value)
}
inline void FloatArray::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FloatArray.value)
}
inline const ::google::protobuf::RepeatedField< float >&
FloatArray::value() const {
  // @@protoc_insertion_point(field_list:artm.FloatArray.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
FloatArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.FloatArray.value)
  return &value_;
}

// -------------------------------------------------------------------

// BoolArray

// repeated bool value = 1 [packed = true];
inline int BoolArray::value_size() const {
  return value_.size();
}
inline void BoolArray::clear_value() {
  value_.Clear();
}
inline bool BoolArray::value(int index) const {
  // @@protoc_insertion_point(field_get:artm.BoolArray.value)
  return value_.Get(index);
}
inline void BoolArray::set_value(int index, bool value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.BoolArray.value)
}
inline void BoolArray::add_value(bool value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.BoolArray.value)
}
inline const ::google::protobuf::RepeatedField< bool >&
BoolArray::value() const {
  // @@protoc_insertion_point(field_list:artm.BoolArray.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< bool >*
BoolArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.BoolArray.value)
  return &value_;
}

// -------------------------------------------------------------------

// IntArray

// repeated int32 value = 1 [packed = true];
inline int IntArray::value_size() const {
  return value_.size();
}
inline void IntArray::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 IntArray::value(int index) const {
  // @@protoc_insertion_point(field_get:artm.IntArray.value)
  return value_.Get(index);
}
inline void IntArray::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.IntArray.value)
}
inline void IntArray::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.IntArray.value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IntArray::value() const {
  // @@protoc_insertion_point(field_list:artm.IntArray.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IntArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.IntArray.value)
  return &value_;
}

// -------------------------------------------------------------------

// StringArray

// repeated string value = 1;
inline int StringArray::value_size() const {
  return value_.size();
}
inline void StringArray::clear_value() {
  value_.Clear();
}
inline const ::std::string& StringArray::value(int index) const {
  // @@protoc_insertion_point(field_get:artm.StringArray.value)
  return value_.Get(index);
}
inline ::std::string* StringArray::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:artm.StringArray.value)
  return value_.Mutable(index);
}
inline void StringArray::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.StringArray.value)
  value_.Mutable(index)->assign(value);
}
inline void StringArray::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.StringArray.value)
}
inline void StringArray::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.StringArray.value)
}
inline ::std::string* StringArray::add_value() {
  // @@protoc_insertion_point(field_add_mutable:artm.StringArray.value)
  return value_.Add();
}
inline void StringArray::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.StringArray.value)
}
inline void StringArray::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.StringArray.value)
}
inline void StringArray::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.StringArray.value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringArray::value() const {
  // @@protoc_insertion_point(field_list:artm.StringArray.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StringArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.StringArray.value)
  return &value_;
}

// -------------------------------------------------------------------

// Item

// optional int32 id = 1;
inline bool Item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Item::id() const {
  // @@protoc_insertion_point(field_get:artm.Item.id)
  return id_;
}
inline void Item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:artm.Item.id)
}

// repeated .artm.Field field = 2;
inline int Item::field_size() const {
  return field_.size();
}
inline void Item::clear_field() {
  field_.Clear();
}
inline const ::artm::Field& Item::field(int index) const {
  // @@protoc_insertion_point(field_get:artm.Item.field)
  return field_.Get(index);
}
inline ::artm::Field* Item::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Item.field)
  return field_.Mutable(index);
}
inline ::artm::Field* Item::add_field() {
  // @@protoc_insertion_point(field_add:artm.Item.field)
  return field_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Field >*
Item::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:artm.Item.field)
  return &field_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Field >&
Item::field() const {
  // @@protoc_insertion_point(field_list:artm.Item.field)
  return field_;
}

// optional string title = 3;
inline bool Item::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Item::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Item::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Item::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Item::title() const {
  // @@protoc_insertion_point(field_get:artm.Item.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.Item.title)
}
inline void Item::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Item.title)
}
inline void Item::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Item.title)
}
inline ::std::string* Item::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:artm.Item.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_title() {
  // @@protoc_insertion_point(field_release:artm.Item.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:artm.Item.title)
}

// repeated int32 token_id = 4;
inline int Item::token_id_size() const {
  return token_id_.size();
}
inline void Item::clear_token_id() {
  token_id_.Clear();
}
inline ::google::protobuf::int32 Item::token_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.Item.token_id)
  return token_id_.Get(index);
}
inline void Item::set_token_id(int index, ::google::protobuf::int32 value) {
  token_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Item.token_id)
}
inline void Item::add_token_id(::google::protobuf::int32 value) {
  token_id_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Item.token_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item::token_id() const {
  // @@protoc_insertion_point(field_list:artm.Item.token_id)
  return token_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item::mutable_token_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.Item.token_id)
  return &token_id_;
}

// repeated float token_weight = 5;
inline int Item::token_weight_size() const {
  return token_weight_.size();
}
inline void Item::clear_token_weight() {
  token_weight_.Clear();
}
inline float Item::token_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.Item.token_weight)
  return token_weight_.Get(index);
}
inline void Item::set_token_weight(int index, float value) {
  token_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Item.token_weight)
}
inline void Item::add_token_weight(float value) {
  token_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Item.token_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
Item::token_weight() const {
  // @@protoc_insertion_point(field_list:artm.Item.token_weight)
  return token_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
Item::mutable_token_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.Item.token_weight)
  return &token_weight_;
}

// repeated int32 transaction_start_index = 6;
inline int Item::transaction_start_index_size() const {
  return transaction_start_index_.size();
}
inline void Item::clear_transaction_start_index() {
  transaction_start_index_.Clear();
}
inline ::google::protobuf::int32 Item::transaction_start_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.Item.transaction_start_index)
  return transaction_start_index_.Get(index);
}
inline void Item::set_transaction_start_index(int index, ::google::protobuf::int32 value) {
  transaction_start_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Item.transaction_start_index)
}
inline void Item::add_transaction_start_index(::google::protobuf::int32 value) {
  transaction_start_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Item.transaction_start_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item::transaction_start_index() const {
  // @@protoc_insertion_point(field_list:artm.Item.transaction_start_index)
  return transaction_start_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item::mutable_transaction_start_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.Item.transaction_start_index)
  return &transaction_start_index_;
}

// repeated int32 transaction_typename_id = 7;
inline int Item::transaction_typename_id_size() const {
  return transaction_typename_id_.size();
}
inline void Item::clear_transaction_typename_id() {
  transaction_typename_id_.Clear();
}
inline ::google::protobuf::int32 Item::transaction_typename_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.Item.transaction_typename_id)
  return transaction_typename_id_.Get(index);
}
inline void Item::set_transaction_typename_id(int index, ::google::protobuf::int32 value) {
  transaction_typename_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Item.transaction_typename_id)
}
inline void Item::add_transaction_typename_id(::google::protobuf::int32 value) {
  transaction_typename_id_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Item.transaction_typename_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item::transaction_typename_id() const {
  // @@protoc_insertion_point(field_list:artm.Item.transaction_typename_id)
  return transaction_typename_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item::mutable_transaction_typename_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.Item.transaction_typename_id)
  return &transaction_typename_id_;
}

// -------------------------------------------------------------------

// Field

// optional string name = 1 [default = "@body"];
inline bool Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Field::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
inline const ::std::string& Field::name() const {
  // @@protoc_insertion_point(field_get:artm.Field.name)
  return name_.GetNoArena(_default_name_);
}
inline void Field::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:artm.Field.name)
}
inline void Field::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Field.name)
}
inline void Field::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Field.name)
}
inline ::std::string* Field::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.Field.name)
  return name_.MutableNoArena(_default_name_);
}
inline ::std::string* Field::release_name() {
  // @@protoc_insertion_point(field_release:artm.Field.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
inline void Field::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:artm.Field.name)
}

// repeated int32 token_id = 2;
inline int Field::token_id_size() const {
  return token_id_.size();
}
inline void Field::clear_token_id() {
  token_id_.Clear();
}
inline ::google::protobuf::int32 Field::token_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.token_id)
  return token_id_.Get(index);
}
inline void Field::set_token_id(int index, ::google::protobuf::int32 value) {
  token_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.token_id)
}
inline void Field::add_token_id(::google::protobuf::int32 value) {
  token_id_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.token_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Field::token_id() const {
  // @@protoc_insertion_point(field_list:artm.Field.token_id)
  return token_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Field::mutable_token_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.token_id)
  return &token_id_;
}

// repeated int32 token_count = 3;
inline int Field::token_count_size() const {
  return token_count_.size();
}
inline void Field::clear_token_count() {
  token_count_.Clear();
}
inline ::google::protobuf::int32 Field::token_count(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.token_count)
  return token_count_.Get(index);
}
inline void Field::set_token_count(int index, ::google::protobuf::int32 value) {
  token_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.token_count)
}
inline void Field::add_token_count(::google::protobuf::int32 value) {
  token_count_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.token_count)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Field::token_count() const {
  // @@protoc_insertion_point(field_list:artm.Field.token_count)
  return token_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Field::mutable_token_count() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.token_count)
  return &token_count_;
}

// repeated int32 token_offset = 4;
inline int Field::token_offset_size() const {
  return token_offset_.size();
}
inline void Field::clear_token_offset() {
  token_offset_.Clear();
}
inline ::google::protobuf::int32 Field::token_offset(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.token_offset)
  return token_offset_.Get(index);
}
inline void Field::set_token_offset(int index, ::google::protobuf::int32 value) {
  token_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.token_offset)
}
inline void Field::add_token_offset(::google::protobuf::int32 value) {
  token_offset_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.token_offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Field::token_offset() const {
  // @@protoc_insertion_point(field_list:artm.Field.token_offset)
  return token_offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Field::mutable_token_offset() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.token_offset)
  return &token_offset_;
}

// optional string string_value = 5;
inline bool Field::has_string_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Field::set_has_string_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Field::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Field::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
inline const ::std::string& Field::string_value() const {
  // @@protoc_insertion_point(field_get:artm.Field.string_value)
  return string_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Field::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.Field.string_value)
}
inline void Field::set_string_value(const char* value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Field.string_value)
}
inline void Field::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Field.string_value)
}
inline ::std::string* Field::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:artm.Field.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Field::release_string_value() {
  // @@protoc_insertion_point(field_release:artm.Field.string_value)
  clear_has_string_value();
  return string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Field::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:artm.Field.string_value)
}

// optional int64 int_value = 6;
inline bool Field::has_int_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Field::set_has_int_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Field::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Field::clear_int_value() {
  int_value_ = GOOGLE_LONGLONG(0);
  clear_has_int_value();
}
inline ::google::protobuf::int64 Field::int_value() const {
  // @@protoc_insertion_point(field_get:artm.Field.int_value)
  return int_value_;
}
inline void Field::set_int_value(::google::protobuf::int64 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:artm.Field.int_value)
}

// optional double double_value = 7;
inline bool Field::has_double_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Field::set_has_double_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Field::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Field::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double Field::double_value() const {
  // @@protoc_insertion_point(field_get:artm.Field.double_value)
  return double_value_;
}
inline void Field::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:artm.Field.double_value)
}

// optional string date_value = 8;
inline bool Field::has_date_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Field::set_has_date_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Field::clear_has_date_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Field::clear_date_value() {
  date_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date_value();
}
inline const ::std::string& Field::date_value() const {
  // @@protoc_insertion_point(field_get:artm.Field.date_value)
  return date_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Field::set_date_value(const ::std::string& value) {
  set_has_date_value();
  date_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.Field.date_value)
}
inline void Field::set_date_value(const char* value) {
  set_has_date_value();
  date_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Field.date_value)
}
inline void Field::set_date_value(const char* value, size_t size) {
  set_has_date_value();
  date_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Field.date_value)
}
inline ::std::string* Field::mutable_date_value() {
  set_has_date_value();
  // @@protoc_insertion_point(field_mutable:artm.Field.date_value)
  return date_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Field::release_date_value() {
  // @@protoc_insertion_point(field_release:artm.Field.date_value)
  clear_has_date_value();
  return date_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Field::set_allocated_date_value(::std::string* date_value) {
  if (date_value != NULL) {
    set_has_date_value();
  } else {
    clear_has_date_value();
  }
  date_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date_value);
  // @@protoc_insertion_point(field_set_allocated:artm.Field.date_value)
}

// repeated string string_array = 16;
inline int Field::string_array_size() const {
  return string_array_.size();
}
inline void Field::clear_string_array() {
  string_array_.Clear();
}
inline const ::std::string& Field::string_array(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.string_array)
  return string_array_.Get(index);
}
inline ::std::string* Field::mutable_string_array(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Field.string_array)
  return string_array_.Mutable(index);
}
inline void Field::set_string_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.Field.string_array)
  string_array_.Mutable(index)->assign(value);
}
inline void Field::set_string_array(int index, const char* value) {
  string_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.Field.string_array)
}
inline void Field::set_string_array(int index, const char* value, size_t size) {
  string_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.Field.string_array)
}
inline ::std::string* Field::add_string_array() {
  // @@protoc_insertion_point(field_add_mutable:artm.Field.string_array)
  return string_array_.Add();
}
inline void Field::add_string_array(const ::std::string& value) {
  string_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.Field.string_array)
}
inline void Field::add_string_array(const char* value) {
  string_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.Field.string_array)
}
inline void Field::add_string_array(const char* value, size_t size) {
  string_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.Field.string_array)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Field::string_array() const {
  // @@protoc_insertion_point(field_list:artm.Field.string_array)
  return string_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Field::mutable_string_array() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.string_array)
  return &string_array_;
}

// repeated int64 int_array = 17;
inline int Field::int_array_size() const {
  return int_array_.size();
}
inline void Field::clear_int_array() {
  int_array_.Clear();
}
inline ::google::protobuf::int64 Field::int_array(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.int_array)
  return int_array_.Get(index);
}
inline void Field::set_int_array(int index, ::google::protobuf::int64 value) {
  int_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.int_array)
}
inline void Field::add_int_array(::google::protobuf::int64 value) {
  int_array_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.int_array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Field::int_array() const {
  // @@protoc_insertion_point(field_list:artm.Field.int_array)
  return int_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Field::mutable_int_array() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.int_array)
  return &int_array_;
}

// repeated double double_array = 18;
inline int Field::double_array_size() const {
  return double_array_.size();
}
inline void Field::clear_double_array() {
  double_array_.Clear();
}
inline double Field::double_array(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.double_array)
  return double_array_.Get(index);
}
inline void Field::set_double_array(int index, double value) {
  double_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.double_array)
}
inline void Field::add_double_array(double value) {
  double_array_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.double_array)
}
inline const ::google::protobuf::RepeatedField< double >&
Field::double_array() const {
  // @@protoc_insertion_point(field_list:artm.Field.double_array)
  return double_array_;
}
inline ::google::protobuf::RepeatedField< double >*
Field::mutable_double_array() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.double_array)
  return &double_array_;
}

// repeated string date_array = 19;
inline int Field::date_array_size() const {
  return date_array_.size();
}
inline void Field::clear_date_array() {
  date_array_.Clear();
}
inline const ::std::string& Field::date_array(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.date_array)
  return date_array_.Get(index);
}
inline ::std::string* Field::mutable_date_array(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Field.date_array)
  return date_array_.Mutable(index);
}
inline void Field::set_date_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.Field.date_array)
  date_array_.Mutable(index)->assign(value);
}
inline void Field::set_date_array(int index, const char* value) {
  date_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.Field.date_array)
}
inline void Field::set_date_array(int index, const char* value, size_t size) {
  date_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.Field.date_array)
}
inline ::std::string* Field::add_date_array() {
  // @@protoc_insertion_point(field_add_mutable:artm.Field.date_array)
  return date_array_.Add();
}
inline void Field::add_date_array(const ::std::string& value) {
  date_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.Field.date_array)
}
inline void Field::add_date_array(const char* value) {
  date_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.Field.date_array)
}
inline void Field::add_date_array(const char* value, size_t size) {
  date_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.Field.date_array)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Field::date_array() const {
  // @@protoc_insertion_point(field_list:artm.Field.date_array)
  return date_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Field::mutable_date_array() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.date_array)
  return &date_array_;
}

// repeated float token_weight = 20;
inline int Field::token_weight_size() const {
  return token_weight_.size();
}
inline void Field::clear_token_weight() {
  token_weight_.Clear();
}
inline float Field::token_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.Field.token_weight)
  return token_weight_.Get(index);
}
inline void Field::set_token_weight(int index, float value) {
  token_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.Field.token_weight)
}
inline void Field::add_token_weight(float value) {
  token_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.Field.token_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
Field::token_weight() const {
  // @@protoc_insertion_point(field_list:artm.Field.token_weight)
  return token_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
Field::mutable_token_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.Field.token_weight)
  return &token_weight_;
}

// -------------------------------------------------------------------

// Batch

// repeated string token = 1;
inline int Batch::token_size() const {
  return token_.size();
}
inline void Batch::clear_token() {
  token_.Clear();
}
inline const ::std::string& Batch::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.Batch.token)
  return token_.Get(index);
}
inline ::std::string* Batch::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Batch.token)
  return token_.Mutable(index);
}
inline void Batch::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.Batch.token)
  token_.Mutable(index)->assign(value);
}
inline void Batch::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.Batch.token)
}
inline void Batch::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.Batch.token)
}
inline ::std::string* Batch::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.Batch.token)
  return token_.Add();
}
inline void Batch::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.Batch.token)
}
inline void Batch::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.Batch.token)
}
inline void Batch::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.Batch.token)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Batch::token() const {
  // @@protoc_insertion_point(field_list:artm.Batch.token)
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Batch::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.Batch.token)
  return &token_;
}

// repeated string class_id = 2;
inline int Batch::class_id_size() const {
  return class_id_.size();
}
inline void Batch::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& Batch::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.Batch.class_id)
  return class_id_.Get(index);
}
inline ::std::string* Batch::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Batch.class_id)
  return class_id_.Mutable(index);
}
inline void Batch::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.Batch.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void Batch::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.Batch.class_id)
}
inline void Batch::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.Batch.class_id)
}
inline ::std::string* Batch::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.Batch.class_id)
  return class_id_.Add();
}
inline void Batch::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.Batch.class_id)
}
inline void Batch::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.Batch.class_id)
}
inline void Batch::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.Batch.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Batch::class_id() const {
  // @@protoc_insertion_point(field_list:artm.Batch.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Batch::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.Batch.class_id)
  return &class_id_;
}

// repeated .artm.Item item = 3;
inline int Batch::item_size() const {
  return item_.size();
}
inline void Batch::clear_item() {
  item_.Clear();
}
inline const ::artm::Item& Batch::item(int index) const {
  // @@protoc_insertion_point(field_get:artm.Batch.item)
  return item_.Get(index);
}
inline ::artm::Item* Batch::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Batch.item)
  return item_.Mutable(index);
}
inline ::artm::Item* Batch::add_item() {
  // @@protoc_insertion_point(field_add:artm.Batch.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Item >*
Batch::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:artm.Batch.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Item >&
Batch::item() const {
  // @@protoc_insertion_point(field_list:artm.Batch.item)
  return item_;
}

// optional string description = 4;
inline bool Batch::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Batch::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Batch::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Batch::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& Batch::description() const {
  // @@protoc_insertion_point(field_get:artm.Batch.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Batch::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.Batch.description)
}
inline void Batch::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Batch.description)
}
inline void Batch::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Batch.description)
}
inline ::std::string* Batch::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:artm.Batch.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Batch::release_description() {
  // @@protoc_insertion_point(field_release:artm.Batch.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Batch::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:artm.Batch.description)
}

// optional string id = 5;
inline bool Batch::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Batch::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Batch::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Batch::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Batch::id() const {
  // @@protoc_insertion_point(field_get:artm.Batch.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Batch::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.Batch.id)
}
inline void Batch::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.Batch.id)
}
inline void Batch::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.Batch.id)
}
inline ::std::string* Batch::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:artm.Batch.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Batch::release_id() {
  // @@protoc_insertion_point(field_release:artm.Batch.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Batch::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:artm.Batch.id)
}

// repeated string transaction_typename = 6;
inline int Batch::transaction_typename_size() const {
  return transaction_typename_.size();
}
inline void Batch::clear_transaction_typename() {
  transaction_typename_.Clear();
}
inline const ::std::string& Batch::transaction_typename(int index) const {
  // @@protoc_insertion_point(field_get:artm.Batch.transaction_typename)
  return transaction_typename_.Get(index);
}
inline ::std::string* Batch::mutable_transaction_typename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.Batch.transaction_typename)
  return transaction_typename_.Mutable(index);
}
inline void Batch::set_transaction_typename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.Batch.transaction_typename)
  transaction_typename_.Mutable(index)->assign(value);
}
inline void Batch::set_transaction_typename(int index, const char* value) {
  transaction_typename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.Batch.transaction_typename)
}
inline void Batch::set_transaction_typename(int index, const char* value, size_t size) {
  transaction_typename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.Batch.transaction_typename)
}
inline ::std::string* Batch::add_transaction_typename() {
  // @@protoc_insertion_point(field_add_mutable:artm.Batch.transaction_typename)
  return transaction_typename_.Add();
}
inline void Batch::add_transaction_typename(const ::std::string& value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.Batch.transaction_typename)
}
inline void Batch::add_transaction_typename(const char* value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.Batch.transaction_typename)
}
inline void Batch::add_transaction_typename(const char* value, size_t size) {
  transaction_typename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.Batch.transaction_typename)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Batch::transaction_typename() const {
  // @@protoc_insertion_point(field_list:artm.Batch.transaction_typename)
  return transaction_typename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Batch::mutable_transaction_typename() {
  // @@protoc_insertion_point(field_mutable_list:artm.Batch.transaction_typename)
  return &transaction_typename_;
}

// -------------------------------------------------------------------

// RegularizerSettings

// optional string name = 1;
inline bool RegularizerSettings::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegularizerSettings::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegularizerSettings::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegularizerSettings::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& RegularizerSettings::name() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerSettings.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizerSettings::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizerSettings.name)
}
inline void RegularizerSettings::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizerSettings.name)
}
inline void RegularizerSettings::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizerSettings.name)
}
inline ::std::string* RegularizerSettings::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.RegularizerSettings.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegularizerSettings::release_name() {
  // @@protoc_insertion_point(field_release:artm.RegularizerSettings.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizerSettings::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizerSettings.name)
}

// optional float tau = 2;
inline bool RegularizerSettings::has_tau() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegularizerSettings::set_has_tau() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegularizerSettings::clear_has_tau() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegularizerSettings::clear_tau() {
  tau_ = 0;
  clear_has_tau();
}
inline float RegularizerSettings::tau() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerSettings.tau)
  return tau_;
}
inline void RegularizerSettings::set_tau(float value) {
  set_has_tau();
  tau_ = value;
  // @@protoc_insertion_point(field_set:artm.RegularizerSettings.tau)
}

// optional float gamma = 3;
inline bool RegularizerSettings::has_gamma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegularizerSettings::set_has_gamma() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegularizerSettings::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegularizerSettings::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float RegularizerSettings::gamma() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerSettings.gamma)
  return gamma_;
}
inline void RegularizerSettings::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:artm.RegularizerSettings.gamma)
}

// -------------------------------------------------------------------

// RegularizerConfig

// optional string name = 1;
inline bool RegularizerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegularizerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegularizerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegularizerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& RegularizerConfig::name() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.name)
}
inline void RegularizerConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizerConfig.name)
}
inline void RegularizerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizerConfig.name)
}
inline ::std::string* RegularizerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.RegularizerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegularizerConfig::release_name() {
  // @@protoc_insertion_point(field_release:artm.RegularizerConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizerConfig.name)
}

// optional .artm.RegularizerType type = 2 [default = RegularizerType_Unknown];
inline bool RegularizerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegularizerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegularizerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegularizerConfig::clear_type() {
  type_ = 9999;
  clear_has_type();
}
inline ::artm::RegularizerType RegularizerConfig::type() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.type)
  return static_cast< ::artm::RegularizerType >(type_);
}
inline void RegularizerConfig::set_type(::artm::RegularizerType value) {
  assert(::artm::RegularizerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.type)
}

// optional bytes config = 3;
inline bool RegularizerConfig::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegularizerConfig::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegularizerConfig::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegularizerConfig::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config();
}
inline const ::std::string& RegularizerConfig::config() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.config)
  return config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizerConfig::set_config(const ::std::string& value) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.config)
}
inline void RegularizerConfig::set_config(const char* value) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizerConfig.config)
}
inline void RegularizerConfig::set_config(const void* value, size_t size) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizerConfig.config)
}
inline ::std::string* RegularizerConfig::mutable_config() {
  set_has_config();
  // @@protoc_insertion_point(field_mutable:artm.RegularizerConfig.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegularizerConfig::release_config() {
  // @@protoc_insertion_point(field_release:artm.RegularizerConfig.config)
  clear_has_config();
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizerConfig::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    set_has_config();
  } else {
    clear_has_config();
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizerConfig.config)
}

// optional float tau = 4;
inline bool RegularizerConfig::has_tau() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegularizerConfig::set_has_tau() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegularizerConfig::clear_has_tau() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegularizerConfig::clear_tau() {
  tau_ = 0;
  clear_has_tau();
}
inline float RegularizerConfig::tau() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.tau)
  return tau_;
}
inline void RegularizerConfig::set_tau(float value) {
  set_has_tau();
  tau_ = value;
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.tau)
}

// optional float gamma = 5;
inline bool RegularizerConfig::has_gamma() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegularizerConfig::set_has_gamma() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegularizerConfig::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegularizerConfig::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float RegularizerConfig::gamma() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.gamma)
  return gamma_;
}
inline void RegularizerConfig::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.gamma)
}

// optional string config_json = 6;
inline bool RegularizerConfig::has_config_json() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegularizerConfig::set_has_config_json() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegularizerConfig::clear_has_config_json() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegularizerConfig::clear_config_json() {
  config_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_json();
}
inline const ::std::string& RegularizerConfig::config_json() const {
  // @@protoc_insertion_point(field_get:artm.RegularizerConfig.config_json)
  return config_json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizerConfig::set_config_json(const ::std::string& value) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizerConfig.config_json)
}
inline void RegularizerConfig::set_config_json(const char* value) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizerConfig.config_json)
}
inline void RegularizerConfig::set_config_json(const char* value, size_t size) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizerConfig.config_json)
}
inline ::std::string* RegularizerConfig::mutable_config_json() {
  set_has_config_json();
  // @@protoc_insertion_point(field_mutable:artm.RegularizerConfig.config_json)
  return config_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegularizerConfig::release_config_json() {
  // @@protoc_insertion_point(field_release:artm.RegularizerConfig.config_json)
  clear_has_config_json();
  return config_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizerConfig::set_allocated_config_json(::std::string* config_json) {
  if (config_json != NULL) {
    set_has_config_json();
  } else {
    clear_has_config_json();
  }
  config_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_json);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizerConfig.config_json)
}

// -------------------------------------------------------------------

// SmoothSparseThetaConfig

// repeated string topic_name = 1;
inline int SmoothSparseThetaConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void SmoothSparseThetaConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& SmoothSparseThetaConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparseThetaConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* SmoothSparseThetaConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparseThetaConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void SmoothSparseThetaConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SmoothSparseThetaConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void SmoothSparseThetaConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SmoothSparseThetaConfig.topic_name)
}
inline void SmoothSparseThetaConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothSparseThetaConfig.topic_name)
}
inline ::std::string* SmoothSparseThetaConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SmoothSparseThetaConfig.topic_name)
  return topic_name_.Add();
}
inline void SmoothSparseThetaConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SmoothSparseThetaConfig.topic_name)
}
inline void SmoothSparseThetaConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SmoothSparseThetaConfig.topic_name)
}
inline void SmoothSparseThetaConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SmoothSparseThetaConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothSparseThetaConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparseThetaConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothSparseThetaConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparseThetaConfig.topic_name)
  return &topic_name_;
}

// repeated float alpha_iter = 2;
inline int SmoothSparseThetaConfig::alpha_iter_size() const {
  return alpha_iter_.size();
}
inline void SmoothSparseThetaConfig::clear_alpha_iter() {
  alpha_iter_.Clear();
}
inline float SmoothSparseThetaConfig::alpha_iter(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparseThetaConfig.alpha_iter)
  return alpha_iter_.Get(index);
}
inline void SmoothSparseThetaConfig::set_alpha_iter(int index, float value) {
  alpha_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.SmoothSparseThetaConfig.alpha_iter)
}
inline void SmoothSparseThetaConfig::add_alpha_iter(float value) {
  alpha_iter_.Add(value);
  // @@protoc_insertion_point(field_add:artm.SmoothSparseThetaConfig.alpha_iter)
}
inline const ::google::protobuf::RepeatedField< float >&
SmoothSparseThetaConfig::alpha_iter() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparseThetaConfig.alpha_iter)
  return alpha_iter_;
}
inline ::google::protobuf::RepeatedField< float >*
SmoothSparseThetaConfig::mutable_alpha_iter() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparseThetaConfig.alpha_iter)
  return &alpha_iter_;
}

// optional .artm.TransformConfig transform_config = 3;
inline bool SmoothSparseThetaConfig::has_transform_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmoothSparseThetaConfig::set_has_transform_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmoothSparseThetaConfig::clear_has_transform_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmoothSparseThetaConfig::clear_transform_config() {
  if (transform_config_ != NULL) transform_config_->::artm::TransformConfig::Clear();
  clear_has_transform_config();
}
inline const ::artm::TransformConfig& SmoothSparseThetaConfig::transform_config() const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparseThetaConfig.transform_config)
  return transform_config_ != NULL ? *transform_config_ : *default_instance_->transform_config_;
}
inline ::artm::TransformConfig* SmoothSparseThetaConfig::mutable_transform_config() {
  set_has_transform_config();
  if (transform_config_ == NULL) {
    transform_config_ = new ::artm::TransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparseThetaConfig.transform_config)
  return transform_config_;
}
inline ::artm::TransformConfig* SmoothSparseThetaConfig::release_transform_config() {
  // @@protoc_insertion_point(field_release:artm.SmoothSparseThetaConfig.transform_config)
  clear_has_transform_config();
  ::artm::TransformConfig* temp = transform_config_;
  transform_config_ = NULL;
  return temp;
}
inline void SmoothSparseThetaConfig::set_allocated_transform_config(::artm::TransformConfig* transform_config) {
  delete transform_config_;
  transform_config_ = transform_config;
  if (transform_config) {
    set_has_transform_config();
  } else {
    clear_has_transform_config();
  }
  // @@protoc_insertion_point(field_set_allocated:artm.SmoothSparseThetaConfig.transform_config)
}

// repeated string item_title = 4;
inline int SmoothSparseThetaConfig::item_title_size() const {
  return item_title_.size();
}
inline void SmoothSparseThetaConfig::clear_item_title() {
  item_title_.Clear();
}
inline const ::std::string& SmoothSparseThetaConfig::item_title(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparseThetaConfig.item_title)
  return item_title_.Get(index);
}
inline ::std::string* SmoothSparseThetaConfig::mutable_item_title(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparseThetaConfig.item_title)
  return item_title_.Mutable(index);
}
inline void SmoothSparseThetaConfig::set_item_title(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SmoothSparseThetaConfig.item_title)
  item_title_.Mutable(index)->assign(value);
}
inline void SmoothSparseThetaConfig::set_item_title(int index, const char* value) {
  item_title_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SmoothSparseThetaConfig.item_title)
}
inline void SmoothSparseThetaConfig::set_item_title(int index, const char* value, size_t size) {
  item_title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothSparseThetaConfig.item_title)
}
inline ::std::string* SmoothSparseThetaConfig::add_item_title() {
  // @@protoc_insertion_point(field_add_mutable:artm.SmoothSparseThetaConfig.item_title)
  return item_title_.Add();
}
inline void SmoothSparseThetaConfig::add_item_title(const ::std::string& value) {
  item_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SmoothSparseThetaConfig.item_title)
}
inline void SmoothSparseThetaConfig::add_item_title(const char* value) {
  item_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SmoothSparseThetaConfig.item_title)
}
inline void SmoothSparseThetaConfig::add_item_title(const char* value, size_t size) {
  item_title_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SmoothSparseThetaConfig.item_title)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothSparseThetaConfig::item_title() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparseThetaConfig.item_title)
  return item_title_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothSparseThetaConfig::mutable_item_title() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparseThetaConfig.item_title)
  return &item_title_;
}

// repeated .artm.FloatArray item_topic_multiplier = 5;
inline int SmoothSparseThetaConfig::item_topic_multiplier_size() const {
  return item_topic_multiplier_.size();
}
inline void SmoothSparseThetaConfig::clear_item_topic_multiplier() {
  item_topic_multiplier_.Clear();
}
inline const ::artm::FloatArray& SmoothSparseThetaConfig::item_topic_multiplier(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparseThetaConfig.item_topic_multiplier)
  return item_topic_multiplier_.Get(index);
}
inline ::artm::FloatArray* SmoothSparseThetaConfig::mutable_item_topic_multiplier(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparseThetaConfig.item_topic_multiplier)
  return item_topic_multiplier_.Mutable(index);
}
inline ::artm::FloatArray* SmoothSparseThetaConfig::add_item_topic_multiplier() {
  // @@protoc_insertion_point(field_add:artm.SmoothSparseThetaConfig.item_topic_multiplier)
  return item_topic_multiplier_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
SmoothSparseThetaConfig::mutable_item_topic_multiplier() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparseThetaConfig.item_topic_multiplier)
  return &item_topic_multiplier_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
SmoothSparseThetaConfig::item_topic_multiplier() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparseThetaConfig.item_topic_multiplier)
  return item_topic_multiplier_;
}

// -------------------------------------------------------------------

// SmoothSparsePhiConfig

// repeated string topic_name = 1;
inline int SmoothSparsePhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void SmoothSparsePhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& SmoothSparsePhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparsePhiConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* SmoothSparsePhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparsePhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void SmoothSparsePhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SmoothSparsePhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void SmoothSparsePhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SmoothSparsePhiConfig.topic_name)
}
inline void SmoothSparsePhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothSparsePhiConfig.topic_name)
}
inline ::std::string* SmoothSparsePhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SmoothSparsePhiConfig.topic_name)
  return topic_name_.Add();
}
inline void SmoothSparsePhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SmoothSparsePhiConfig.topic_name)
}
inline void SmoothSparsePhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SmoothSparsePhiConfig.topic_name)
}
inline void SmoothSparsePhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SmoothSparsePhiConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothSparsePhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparsePhiConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothSparsePhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparsePhiConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
inline int SmoothSparsePhiConfig::class_id_size() const {
  return class_id_.size();
}
inline void SmoothSparsePhiConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& SmoothSparsePhiConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparsePhiConfig.class_id)
  return class_id_.Get(index);
}
inline ::std::string* SmoothSparsePhiConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparsePhiConfig.class_id)
  return class_id_.Mutable(index);
}
inline void SmoothSparsePhiConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SmoothSparsePhiConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void SmoothSparsePhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SmoothSparsePhiConfig.class_id)
}
inline void SmoothSparsePhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothSparsePhiConfig.class_id)
}
inline ::std::string* SmoothSparsePhiConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.SmoothSparsePhiConfig.class_id)
  return class_id_.Add();
}
inline void SmoothSparsePhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SmoothSparsePhiConfig.class_id)
}
inline void SmoothSparsePhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SmoothSparsePhiConfig.class_id)
}
inline void SmoothSparsePhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SmoothSparsePhiConfig.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothSparsePhiConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.SmoothSparsePhiConfig.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothSparsePhiConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothSparsePhiConfig.class_id)
  return &class_id_;
}

// optional string dictionary_name = 3;
inline bool SmoothSparsePhiConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmoothSparsePhiConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmoothSparsePhiConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmoothSparsePhiConfig::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& SmoothSparsePhiConfig::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparsePhiConfig.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SmoothSparsePhiConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.SmoothSparsePhiConfig.dictionary_name)
}
inline void SmoothSparsePhiConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.SmoothSparsePhiConfig.dictionary_name)
}
inline void SmoothSparsePhiConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothSparsePhiConfig.dictionary_name)
}
inline ::std::string* SmoothSparsePhiConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparsePhiConfig.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SmoothSparsePhiConfig::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.SmoothSparsePhiConfig.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SmoothSparsePhiConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.SmoothSparsePhiConfig.dictionary_name)
}

// optional .artm.TransformConfig transform_config = 4;
inline bool SmoothSparsePhiConfig::has_transform_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmoothSparsePhiConfig::set_has_transform_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SmoothSparsePhiConfig::clear_has_transform_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SmoothSparsePhiConfig::clear_transform_config() {
  if (transform_config_ != NULL) transform_config_->::artm::TransformConfig::Clear();
  clear_has_transform_config();
}
inline const ::artm::TransformConfig& SmoothSparsePhiConfig::transform_config() const {
  // @@protoc_insertion_point(field_get:artm.SmoothSparsePhiConfig.transform_config)
  return transform_config_ != NULL ? *transform_config_ : *default_instance_->transform_config_;
}
inline ::artm::TransformConfig* SmoothSparsePhiConfig::mutable_transform_config() {
  set_has_transform_config();
  if (transform_config_ == NULL) {
    transform_config_ = new ::artm::TransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:artm.SmoothSparsePhiConfig.transform_config)
  return transform_config_;
}
inline ::artm::TransformConfig* SmoothSparsePhiConfig::release_transform_config() {
  // @@protoc_insertion_point(field_release:artm.SmoothSparsePhiConfig.transform_config)
  clear_has_transform_config();
  ::artm::TransformConfig* temp = transform_config_;
  transform_config_ = NULL;
  return temp;
}
inline void SmoothSparsePhiConfig::set_allocated_transform_config(::artm::TransformConfig* transform_config) {
  delete transform_config_;
  transform_config_ = transform_config;
  if (transform_config) {
    set_has_transform_config();
  } else {
    clear_has_transform_config();
  }
  // @@protoc_insertion_point(field_set_allocated:artm.SmoothSparsePhiConfig.transform_config)
}

// -------------------------------------------------------------------

// DecorrelatorPhiConfig

// repeated string topic_name = 1;
inline int DecorrelatorPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void DecorrelatorPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& DecorrelatorPhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.DecorrelatorPhiConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* DecorrelatorPhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DecorrelatorPhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void DecorrelatorPhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DecorrelatorPhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void DecorrelatorPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DecorrelatorPhiConfig.topic_name)
}
inline void DecorrelatorPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DecorrelatorPhiConfig.topic_name)
}
inline ::std::string* DecorrelatorPhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.DecorrelatorPhiConfig.topic_name)
  return topic_name_.Add();
}
inline void DecorrelatorPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DecorrelatorPhiConfig.topic_name)
}
inline void DecorrelatorPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DecorrelatorPhiConfig.topic_name)
}
inline void DecorrelatorPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DecorrelatorPhiConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecorrelatorPhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.DecorrelatorPhiConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DecorrelatorPhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.DecorrelatorPhiConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
inline int DecorrelatorPhiConfig::class_id_size() const {
  return class_id_.size();
}
inline void DecorrelatorPhiConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& DecorrelatorPhiConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.DecorrelatorPhiConfig.class_id)
  return class_id_.Get(index);
}
inline ::std::string* DecorrelatorPhiConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DecorrelatorPhiConfig.class_id)
  return class_id_.Mutable(index);
}
inline void DecorrelatorPhiConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DecorrelatorPhiConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void DecorrelatorPhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DecorrelatorPhiConfig.class_id)
}
inline void DecorrelatorPhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DecorrelatorPhiConfig.class_id)
}
inline ::std::string* DecorrelatorPhiConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.DecorrelatorPhiConfig.class_id)
  return class_id_.Add();
}
inline void DecorrelatorPhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DecorrelatorPhiConfig.class_id)
}
inline void DecorrelatorPhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DecorrelatorPhiConfig.class_id)
}
inline void DecorrelatorPhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DecorrelatorPhiConfig.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecorrelatorPhiConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.DecorrelatorPhiConfig.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DecorrelatorPhiConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.DecorrelatorPhiConfig.class_id)
  return &class_id_;
}

// repeated string first_topic_name = 3;
inline int DecorrelatorPhiConfig::first_topic_name_size() const {
  return first_topic_name_.size();
}
inline void DecorrelatorPhiConfig::clear_first_topic_name() {
  first_topic_name_.Clear();
}
inline const ::std::string& DecorrelatorPhiConfig::first_topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.DecorrelatorPhiConfig.first_topic_name)
  return first_topic_name_.Get(index);
}
inline ::std::string* DecorrelatorPhiConfig::mutable_first_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DecorrelatorPhiConfig.first_topic_name)
  return first_topic_name_.Mutable(index);
}
inline void DecorrelatorPhiConfig::set_first_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DecorrelatorPhiConfig.first_topic_name)
  first_topic_name_.Mutable(index)->assign(value);
}
inline void DecorrelatorPhiConfig::set_first_topic_name(int index, const char* value) {
  first_topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DecorrelatorPhiConfig.first_topic_name)
}
inline void DecorrelatorPhiConfig::set_first_topic_name(int index, const char* value, size_t size) {
  first_topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DecorrelatorPhiConfig.first_topic_name)
}
inline ::std::string* DecorrelatorPhiConfig::add_first_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.DecorrelatorPhiConfig.first_topic_name)
  return first_topic_name_.Add();
}
inline void DecorrelatorPhiConfig::add_first_topic_name(const ::std::string& value) {
  first_topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DecorrelatorPhiConfig.first_topic_name)
}
inline void DecorrelatorPhiConfig::add_first_topic_name(const char* value) {
  first_topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DecorrelatorPhiConfig.first_topic_name)
}
inline void DecorrelatorPhiConfig::add_first_topic_name(const char* value, size_t size) {
  first_topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DecorrelatorPhiConfig.first_topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecorrelatorPhiConfig::first_topic_name() const {
  // @@protoc_insertion_point(field_list:artm.DecorrelatorPhiConfig.first_topic_name)
  return first_topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DecorrelatorPhiConfig::mutable_first_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.DecorrelatorPhiConfig.first_topic_name)
  return &first_topic_name_;
}

// repeated string second_topic_name = 4;
inline int DecorrelatorPhiConfig::second_topic_name_size() const {
  return second_topic_name_.size();
}
inline void DecorrelatorPhiConfig::clear_second_topic_name() {
  second_topic_name_.Clear();
}
inline const ::std::string& DecorrelatorPhiConfig::second_topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.DecorrelatorPhiConfig.second_topic_name)
  return second_topic_name_.Get(index);
}
inline ::std::string* DecorrelatorPhiConfig::mutable_second_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DecorrelatorPhiConfig.second_topic_name)
  return second_topic_name_.Mutable(index);
}
inline void DecorrelatorPhiConfig::set_second_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DecorrelatorPhiConfig.second_topic_name)
  second_topic_name_.Mutable(index)->assign(value);
}
inline void DecorrelatorPhiConfig::set_second_topic_name(int index, const char* value) {
  second_topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DecorrelatorPhiConfig.second_topic_name)
}
inline void DecorrelatorPhiConfig::set_second_topic_name(int index, const char* value, size_t size) {
  second_topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DecorrelatorPhiConfig.second_topic_name)
}
inline ::std::string* DecorrelatorPhiConfig::add_second_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.DecorrelatorPhiConfig.second_topic_name)
  return second_topic_name_.Add();
}
inline void DecorrelatorPhiConfig::add_second_topic_name(const ::std::string& value) {
  second_topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DecorrelatorPhiConfig.second_topic_name)
}
inline void DecorrelatorPhiConfig::add_second_topic_name(const char* value) {
  second_topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DecorrelatorPhiConfig.second_topic_name)
}
inline void DecorrelatorPhiConfig::add_second_topic_name(const char* value, size_t size) {
  second_topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DecorrelatorPhiConfig.second_topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecorrelatorPhiConfig::second_topic_name() const {
  // @@protoc_insertion_point(field_list:artm.DecorrelatorPhiConfig.second_topic_name)
  return second_topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DecorrelatorPhiConfig::mutable_second_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.DecorrelatorPhiConfig.second_topic_name)
  return &second_topic_name_;
}

// repeated float value = 5;
inline int DecorrelatorPhiConfig::value_size() const {
  return value_.size();
}
inline void DecorrelatorPhiConfig::clear_value() {
  value_.Clear();
}
inline float DecorrelatorPhiConfig::value(int index) const {
  // @@protoc_insertion_point(field_get:artm.DecorrelatorPhiConfig.value)
  return value_.Get(index);
}
inline void DecorrelatorPhiConfig::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DecorrelatorPhiConfig.value)
}
inline void DecorrelatorPhiConfig::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DecorrelatorPhiConfig.value)
}
inline const ::google::protobuf::RepeatedField< float >&
DecorrelatorPhiConfig::value() const {
  // @@protoc_insertion_point(field_list:artm.DecorrelatorPhiConfig.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
DecorrelatorPhiConfig::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.DecorrelatorPhiConfig.value)
  return &value_;
}

// -------------------------------------------------------------------

// MultiLanguagePhiConfig

// -------------------------------------------------------------------

// LabelRegularizationPhiConfig

// repeated string topic_name = 1;
inline int LabelRegularizationPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void LabelRegularizationPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& LabelRegularizationPhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.LabelRegularizationPhiConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* LabelRegularizationPhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.LabelRegularizationPhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void LabelRegularizationPhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.LabelRegularizationPhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void LabelRegularizationPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.LabelRegularizationPhiConfig.topic_name)
}
inline void LabelRegularizationPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.LabelRegularizationPhiConfig.topic_name)
}
inline ::std::string* LabelRegularizationPhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.LabelRegularizationPhiConfig.topic_name)
  return topic_name_.Add();
}
inline void LabelRegularizationPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.LabelRegularizationPhiConfig.topic_name)
}
inline void LabelRegularizationPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.LabelRegularizationPhiConfig.topic_name)
}
inline void LabelRegularizationPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.LabelRegularizationPhiConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LabelRegularizationPhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.LabelRegularizationPhiConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LabelRegularizationPhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.LabelRegularizationPhiConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
inline int LabelRegularizationPhiConfig::class_id_size() const {
  return class_id_.size();
}
inline void LabelRegularizationPhiConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& LabelRegularizationPhiConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.LabelRegularizationPhiConfig.class_id)
  return class_id_.Get(index);
}
inline ::std::string* LabelRegularizationPhiConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.LabelRegularizationPhiConfig.class_id)
  return class_id_.Mutable(index);
}
inline void LabelRegularizationPhiConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.LabelRegularizationPhiConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void LabelRegularizationPhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.LabelRegularizationPhiConfig.class_id)
}
inline void LabelRegularizationPhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.LabelRegularizationPhiConfig.class_id)
}
inline ::std::string* LabelRegularizationPhiConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.LabelRegularizationPhiConfig.class_id)
  return class_id_.Add();
}
inline void LabelRegularizationPhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.LabelRegularizationPhiConfig.class_id)
}
inline void LabelRegularizationPhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.LabelRegularizationPhiConfig.class_id)
}
inline void LabelRegularizationPhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.LabelRegularizationPhiConfig.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LabelRegularizationPhiConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.LabelRegularizationPhiConfig.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LabelRegularizationPhiConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.LabelRegularizationPhiConfig.class_id)
  return &class_id_;
}

// optional string dictionary_name = 3;
inline bool LabelRegularizationPhiConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelRegularizationPhiConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelRegularizationPhiConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelRegularizationPhiConfig::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& LabelRegularizationPhiConfig::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.LabelRegularizationPhiConfig.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelRegularizationPhiConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.LabelRegularizationPhiConfig.dictionary_name)
}
inline void LabelRegularizationPhiConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.LabelRegularizationPhiConfig.dictionary_name)
}
inline void LabelRegularizationPhiConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.LabelRegularizationPhiConfig.dictionary_name)
}
inline ::std::string* LabelRegularizationPhiConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.LabelRegularizationPhiConfig.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelRegularizationPhiConfig::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.LabelRegularizationPhiConfig.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelRegularizationPhiConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.LabelRegularizationPhiConfig.dictionary_name)
}

// -------------------------------------------------------------------

// SpecifiedSparsePhiConfig

// repeated string topic_name = 1;
inline int SpecifiedSparsePhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void SpecifiedSparsePhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& SpecifiedSparsePhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SpecifiedSparsePhiConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* SpecifiedSparsePhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SpecifiedSparsePhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void SpecifiedSparsePhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SpecifiedSparsePhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void SpecifiedSparsePhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SpecifiedSparsePhiConfig.topic_name)
}
inline void SpecifiedSparsePhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SpecifiedSparsePhiConfig.topic_name)
}
inline ::std::string* SpecifiedSparsePhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SpecifiedSparsePhiConfig.topic_name)
  return topic_name_.Add();
}
inline void SpecifiedSparsePhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SpecifiedSparsePhiConfig.topic_name)
}
inline void SpecifiedSparsePhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SpecifiedSparsePhiConfig.topic_name)
}
inline void SpecifiedSparsePhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SpecifiedSparsePhiConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SpecifiedSparsePhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SpecifiedSparsePhiConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SpecifiedSparsePhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SpecifiedSparsePhiConfig.topic_name)
  return &topic_name_;
}

// optional string class_id = 2 [default = "@default_class"];
inline bool SpecifiedSparsePhiConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpecifiedSparsePhiConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpecifiedSparsePhiConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpecifiedSparsePhiConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
inline const ::std::string& SpecifiedSparsePhiConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.SpecifiedSparsePhiConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
inline void SpecifiedSparsePhiConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.SpecifiedSparsePhiConfig.class_id)
}
inline void SpecifiedSparsePhiConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.SpecifiedSparsePhiConfig.class_id)
}
inline void SpecifiedSparsePhiConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.SpecifiedSparsePhiConfig.class_id)
}
inline ::std::string* SpecifiedSparsePhiConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.SpecifiedSparsePhiConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
inline ::std::string* SpecifiedSparsePhiConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.SpecifiedSparsePhiConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
inline void SpecifiedSparsePhiConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.SpecifiedSparsePhiConfig.class_id)
}

// optional int32 max_elements_count = 3 [default = 20];
inline bool SpecifiedSparsePhiConfig::has_max_elements_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpecifiedSparsePhiConfig::set_has_max_elements_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpecifiedSparsePhiConfig::clear_has_max_elements_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpecifiedSparsePhiConfig::clear_max_elements_count() {
  max_elements_count_ = 20;
  clear_has_max_elements_count();
}
inline ::google::protobuf::int32 SpecifiedSparsePhiConfig::max_elements_count() const {
  // @@protoc_insertion_point(field_get:artm.SpecifiedSparsePhiConfig.max_elements_count)
  return max_elements_count_;
}
inline void SpecifiedSparsePhiConfig::set_max_elements_count(::google::protobuf::int32 value) {
  set_has_max_elements_count();
  max_elements_count_ = value;
  // @@protoc_insertion_point(field_set:artm.SpecifiedSparsePhiConfig.max_elements_count)
}

// optional float probability_threshold = 4 [default = 0.99];
inline bool SpecifiedSparsePhiConfig::has_probability_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpecifiedSparsePhiConfig::set_has_probability_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpecifiedSparsePhiConfig::clear_has_probability_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpecifiedSparsePhiConfig::clear_probability_threshold() {
  probability_threshold_ = 0.99f;
  clear_has_probability_threshold();
}
inline float SpecifiedSparsePhiConfig::probability_threshold() const {
  // @@protoc_insertion_point(field_get:artm.SpecifiedSparsePhiConfig.probability_threshold)
  return probability_threshold_;
}
inline void SpecifiedSparsePhiConfig::set_probability_threshold(float value) {
  set_has_probability_threshold();
  probability_threshold_ = value;
  // @@protoc_insertion_point(field_set:artm.SpecifiedSparsePhiConfig.probability_threshold)
}

// optional .artm.SpecifiedSparsePhiConfig.SparseMode mode = 5 [default = SparseTopics];
inline bool SpecifiedSparsePhiConfig::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpecifiedSparsePhiConfig::set_has_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpecifiedSparsePhiConfig::clear_has_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpecifiedSparsePhiConfig::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::artm::SpecifiedSparsePhiConfig_SparseMode SpecifiedSparsePhiConfig::mode() const {
  // @@protoc_insertion_point(field_get:artm.SpecifiedSparsePhiConfig.mode)
  return static_cast< ::artm::SpecifiedSparsePhiConfig_SparseMode >(mode_);
}
inline void SpecifiedSparsePhiConfig::set_mode(::artm::SpecifiedSparsePhiConfig_SparseMode value) {
  assert(::artm::SpecifiedSparsePhiConfig_SparseMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:artm.SpecifiedSparsePhiConfig.mode)
}

// -------------------------------------------------------------------

// ImproveCoherencePhiConfig

// repeated string topic_name = 1;
inline int ImproveCoherencePhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void ImproveCoherencePhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& ImproveCoherencePhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.ImproveCoherencePhiConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* ImproveCoherencePhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ImproveCoherencePhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void ImproveCoherencePhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ImproveCoherencePhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void ImproveCoherencePhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ImproveCoherencePhiConfig.topic_name)
}
inline void ImproveCoherencePhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ImproveCoherencePhiConfig.topic_name)
}
inline ::std::string* ImproveCoherencePhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.ImproveCoherencePhiConfig.topic_name)
  return topic_name_.Add();
}
inline void ImproveCoherencePhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ImproveCoherencePhiConfig.topic_name)
}
inline void ImproveCoherencePhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ImproveCoherencePhiConfig.topic_name)
}
inline void ImproveCoherencePhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ImproveCoherencePhiConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImproveCoherencePhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.ImproveCoherencePhiConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImproveCoherencePhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.ImproveCoherencePhiConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
inline int ImproveCoherencePhiConfig::class_id_size() const {
  return class_id_.size();
}
inline void ImproveCoherencePhiConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& ImproveCoherencePhiConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.ImproveCoherencePhiConfig.class_id)
  return class_id_.Get(index);
}
inline ::std::string* ImproveCoherencePhiConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ImproveCoherencePhiConfig.class_id)
  return class_id_.Mutable(index);
}
inline void ImproveCoherencePhiConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ImproveCoherencePhiConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void ImproveCoherencePhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ImproveCoherencePhiConfig.class_id)
}
inline void ImproveCoherencePhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ImproveCoherencePhiConfig.class_id)
}
inline ::std::string* ImproveCoherencePhiConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.ImproveCoherencePhiConfig.class_id)
  return class_id_.Add();
}
inline void ImproveCoherencePhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ImproveCoherencePhiConfig.class_id)
}
inline void ImproveCoherencePhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ImproveCoherencePhiConfig.class_id)
}
inline void ImproveCoherencePhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ImproveCoherencePhiConfig.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImproveCoherencePhiConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.ImproveCoherencePhiConfig.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImproveCoherencePhiConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.ImproveCoherencePhiConfig.class_id)
  return &class_id_;
}

// optional string dictionary_name = 3;
inline bool ImproveCoherencePhiConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImproveCoherencePhiConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImproveCoherencePhiConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImproveCoherencePhiConfig::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& ImproveCoherencePhiConfig::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.ImproveCoherencePhiConfig.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImproveCoherencePhiConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImproveCoherencePhiConfig.dictionary_name)
}
inline void ImproveCoherencePhiConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImproveCoherencePhiConfig.dictionary_name)
}
inline void ImproveCoherencePhiConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImproveCoherencePhiConfig.dictionary_name)
}
inline ::std::string* ImproveCoherencePhiConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.ImproveCoherencePhiConfig.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImproveCoherencePhiConfig::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.ImproveCoherencePhiConfig.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImproveCoherencePhiConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImproveCoherencePhiConfig.dictionary_name)
}

// -------------------------------------------------------------------

// SmoothPtdwConfig

// optional .artm.SmoothPtdwConfig.SmoothType type = 1 [default = MovingAverage];
inline bool SmoothPtdwConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmoothPtdwConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmoothPtdwConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmoothPtdwConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::artm::SmoothPtdwConfig_SmoothType SmoothPtdwConfig::type() const {
  // @@protoc_insertion_point(field_get:artm.SmoothPtdwConfig.type)
  return static_cast< ::artm::SmoothPtdwConfig_SmoothType >(type_);
}
inline void SmoothPtdwConfig::set_type(::artm::SmoothPtdwConfig_SmoothType value) {
  assert(::artm::SmoothPtdwConfig_SmoothType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:artm.SmoothPtdwConfig.type)
}

// optional int32 window = 3 [default = 10];
inline bool SmoothPtdwConfig::has_window() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmoothPtdwConfig::set_has_window() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmoothPtdwConfig::clear_has_window() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmoothPtdwConfig::clear_window() {
  window_ = 10;
  clear_has_window();
}
inline ::google::protobuf::int32 SmoothPtdwConfig::window() const {
  // @@protoc_insertion_point(field_get:artm.SmoothPtdwConfig.window)
  return window_;
}
inline void SmoothPtdwConfig::set_window(::google::protobuf::int32 value) {
  set_has_window();
  window_ = value;
  // @@protoc_insertion_point(field_set:artm.SmoothPtdwConfig.window)
}

// optional float threshold = 4 [default = 1];
inline bool SmoothPtdwConfig::has_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmoothPtdwConfig::set_has_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmoothPtdwConfig::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmoothPtdwConfig::clear_threshold() {
  threshold_ = 1;
  clear_has_threshold();
}
inline float SmoothPtdwConfig::threshold() const {
  // @@protoc_insertion_point(field_get:artm.SmoothPtdwConfig.threshold)
  return threshold_;
}
inline void SmoothPtdwConfig::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:artm.SmoothPtdwConfig.threshold)
}

// -------------------------------------------------------------------

// TopicSelectionThetaConfig

// repeated string topic_name = 1;
inline int TopicSelectionThetaConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void TopicSelectionThetaConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopicSelectionThetaConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicSelectionThetaConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* TopicSelectionThetaConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicSelectionThetaConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void TopicSelectionThetaConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicSelectionThetaConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicSelectionThetaConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicSelectionThetaConfig.topic_name)
}
inline void TopicSelectionThetaConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicSelectionThetaConfig.topic_name)
}
inline ::std::string* TopicSelectionThetaConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicSelectionThetaConfig.topic_name)
  return topic_name_.Add();
}
inline void TopicSelectionThetaConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicSelectionThetaConfig.topic_name)
}
inline void TopicSelectionThetaConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicSelectionThetaConfig.topic_name)
}
inline void TopicSelectionThetaConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicSelectionThetaConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSelectionThetaConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicSelectionThetaConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSelectionThetaConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicSelectionThetaConfig.topic_name)
  return &topic_name_;
}

// repeated float topic_value = 2;
inline int TopicSelectionThetaConfig::topic_value_size() const {
  return topic_value_.size();
}
inline void TopicSelectionThetaConfig::clear_topic_value() {
  topic_value_.Clear();
}
inline float TopicSelectionThetaConfig::topic_value(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicSelectionThetaConfig.topic_value)
  return topic_value_.Get(index);
}
inline void TopicSelectionThetaConfig::set_topic_value(int index, float value) {
  topic_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicSelectionThetaConfig.topic_value)
}
inline void TopicSelectionThetaConfig::add_topic_value(float value) {
  topic_value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicSelectionThetaConfig.topic_value)
}
inline const ::google::protobuf::RepeatedField< float >&
TopicSelectionThetaConfig::topic_value() const {
  // @@protoc_insertion_point(field_list:artm.TopicSelectionThetaConfig.topic_value)
  return topic_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TopicSelectionThetaConfig::mutable_topic_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicSelectionThetaConfig.topic_value)
  return &topic_value_;
}

// repeated float alpha_iter = 3;
inline int TopicSelectionThetaConfig::alpha_iter_size() const {
  return alpha_iter_.size();
}
inline void TopicSelectionThetaConfig::clear_alpha_iter() {
  alpha_iter_.Clear();
}
inline float TopicSelectionThetaConfig::alpha_iter(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicSelectionThetaConfig.alpha_iter)
  return alpha_iter_.Get(index);
}
inline void TopicSelectionThetaConfig::set_alpha_iter(int index, float value) {
  alpha_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicSelectionThetaConfig.alpha_iter)
}
inline void TopicSelectionThetaConfig::add_alpha_iter(float value) {
  alpha_iter_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicSelectionThetaConfig.alpha_iter)
}
inline const ::google::protobuf::RepeatedField< float >&
TopicSelectionThetaConfig::alpha_iter() const {
  // @@protoc_insertion_point(field_list:artm.TopicSelectionThetaConfig.alpha_iter)
  return alpha_iter_;
}
inline ::google::protobuf::RepeatedField< float >*
TopicSelectionThetaConfig::mutable_alpha_iter() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicSelectionThetaConfig.alpha_iter)
  return &alpha_iter_;
}

// -------------------------------------------------------------------

// BitermsPhiConfig

// repeated string topic_name = 1;
inline int BitermsPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void BitermsPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& BitermsPhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.BitermsPhiConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* BitermsPhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.BitermsPhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void BitermsPhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.BitermsPhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void BitermsPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.BitermsPhiConfig.topic_name)
}
inline void BitermsPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.BitermsPhiConfig.topic_name)
}
inline ::std::string* BitermsPhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.BitermsPhiConfig.topic_name)
  return topic_name_.Add();
}
inline void BitermsPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.BitermsPhiConfig.topic_name)
}
inline void BitermsPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.BitermsPhiConfig.topic_name)
}
inline void BitermsPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.BitermsPhiConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BitermsPhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.BitermsPhiConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BitermsPhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.BitermsPhiConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
inline int BitermsPhiConfig::class_id_size() const {
  return class_id_.size();
}
inline void BitermsPhiConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& BitermsPhiConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.BitermsPhiConfig.class_id)
  return class_id_.Get(index);
}
inline ::std::string* BitermsPhiConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.BitermsPhiConfig.class_id)
  return class_id_.Mutable(index);
}
inline void BitermsPhiConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.BitermsPhiConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void BitermsPhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.BitermsPhiConfig.class_id)
}
inline void BitermsPhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.BitermsPhiConfig.class_id)
}
inline ::std::string* BitermsPhiConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.BitermsPhiConfig.class_id)
  return class_id_.Add();
}
inline void BitermsPhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.BitermsPhiConfig.class_id)
}
inline void BitermsPhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.BitermsPhiConfig.class_id)
}
inline void BitermsPhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.BitermsPhiConfig.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BitermsPhiConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.BitermsPhiConfig.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BitermsPhiConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.BitermsPhiConfig.class_id)
  return &class_id_;
}

// optional string dictionary_name = 3;
inline bool BitermsPhiConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BitermsPhiConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BitermsPhiConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BitermsPhiConfig::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& BitermsPhiConfig::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.BitermsPhiConfig.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BitermsPhiConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.BitermsPhiConfig.dictionary_name)
}
inline void BitermsPhiConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.BitermsPhiConfig.dictionary_name)
}
inline void BitermsPhiConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.BitermsPhiConfig.dictionary_name)
}
inline ::std::string* BitermsPhiConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.BitermsPhiConfig.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BitermsPhiConfig::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.BitermsPhiConfig.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BitermsPhiConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.BitermsPhiConfig.dictionary_name)
}

// -------------------------------------------------------------------

// HierarchySparsingThetaConfig

// repeated string topic_name = 1;
inline int HierarchySparsingThetaConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void HierarchySparsingThetaConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& HierarchySparsingThetaConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.HierarchySparsingThetaConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* HierarchySparsingThetaConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.HierarchySparsingThetaConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void HierarchySparsingThetaConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.HierarchySparsingThetaConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void HierarchySparsingThetaConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.HierarchySparsingThetaConfig.topic_name)
}
inline void HierarchySparsingThetaConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.HierarchySparsingThetaConfig.topic_name)
}
inline ::std::string* HierarchySparsingThetaConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.HierarchySparsingThetaConfig.topic_name)
  return topic_name_.Add();
}
inline void HierarchySparsingThetaConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.HierarchySparsingThetaConfig.topic_name)
}
inline void HierarchySparsingThetaConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.HierarchySparsingThetaConfig.topic_name)
}
inline void HierarchySparsingThetaConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.HierarchySparsingThetaConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HierarchySparsingThetaConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.HierarchySparsingThetaConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HierarchySparsingThetaConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.HierarchySparsingThetaConfig.topic_name)
  return &topic_name_;
}

// repeated float parent_topic_proportion = 2;
inline int HierarchySparsingThetaConfig::parent_topic_proportion_size() const {
  return parent_topic_proportion_.size();
}
inline void HierarchySparsingThetaConfig::clear_parent_topic_proportion() {
  parent_topic_proportion_.Clear();
}
inline float HierarchySparsingThetaConfig::parent_topic_proportion(int index) const {
  // @@protoc_insertion_point(field_get:artm.HierarchySparsingThetaConfig.parent_topic_proportion)
  return parent_topic_proportion_.Get(index);
}
inline void HierarchySparsingThetaConfig::set_parent_topic_proportion(int index, float value) {
  parent_topic_proportion_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.HierarchySparsingThetaConfig.parent_topic_proportion)
}
inline void HierarchySparsingThetaConfig::add_parent_topic_proportion(float value) {
  parent_topic_proportion_.Add(value);
  // @@protoc_insertion_point(field_add:artm.HierarchySparsingThetaConfig.parent_topic_proportion)
}
inline const ::google::protobuf::RepeatedField< float >&
HierarchySparsingThetaConfig::parent_topic_proportion() const {
  // @@protoc_insertion_point(field_list:artm.HierarchySparsingThetaConfig.parent_topic_proportion)
  return parent_topic_proportion_;
}
inline ::google::protobuf::RepeatedField< float >*
HierarchySparsingThetaConfig::mutable_parent_topic_proportion() {
  // @@protoc_insertion_point(field_mutable_list:artm.HierarchySparsingThetaConfig.parent_topic_proportion)
  return &parent_topic_proportion_;
}

// repeated float alpha_iter = 3;
inline int HierarchySparsingThetaConfig::alpha_iter_size() const {
  return alpha_iter_.size();
}
inline void HierarchySparsingThetaConfig::clear_alpha_iter() {
  alpha_iter_.Clear();
}
inline float HierarchySparsingThetaConfig::alpha_iter(int index) const {
  // @@protoc_insertion_point(field_get:artm.HierarchySparsingThetaConfig.alpha_iter)
  return alpha_iter_.Get(index);
}
inline void HierarchySparsingThetaConfig::set_alpha_iter(int index, float value) {
  alpha_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.HierarchySparsingThetaConfig.alpha_iter)
}
inline void HierarchySparsingThetaConfig::add_alpha_iter(float value) {
  alpha_iter_.Add(value);
  // @@protoc_insertion_point(field_add:artm.HierarchySparsingThetaConfig.alpha_iter)
}
inline const ::google::protobuf::RepeatedField< float >&
HierarchySparsingThetaConfig::alpha_iter() const {
  // @@protoc_insertion_point(field_list:artm.HierarchySparsingThetaConfig.alpha_iter)
  return alpha_iter_;
}
inline ::google::protobuf::RepeatedField< float >*
HierarchySparsingThetaConfig::mutable_alpha_iter() {
  // @@protoc_insertion_point(field_mutable_list:artm.HierarchySparsingThetaConfig.alpha_iter)
  return &alpha_iter_;
}

// -------------------------------------------------------------------

// TopicSegmentationPtdwConfig

// repeated string background_topic_names = 1;
inline int TopicSegmentationPtdwConfig::background_topic_names_size() const {
  return background_topic_names_.size();
}
inline void TopicSegmentationPtdwConfig::clear_background_topic_names() {
  background_topic_names_.Clear();
}
inline const ::std::string& TopicSegmentationPtdwConfig::background_topic_names(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicSegmentationPtdwConfig.background_topic_names)
  return background_topic_names_.Get(index);
}
inline ::std::string* TopicSegmentationPtdwConfig::mutable_background_topic_names(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicSegmentationPtdwConfig.background_topic_names)
  return background_topic_names_.Mutable(index);
}
inline void TopicSegmentationPtdwConfig::set_background_topic_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicSegmentationPtdwConfig.background_topic_names)
  background_topic_names_.Mutable(index)->assign(value);
}
inline void TopicSegmentationPtdwConfig::set_background_topic_names(int index, const char* value) {
  background_topic_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicSegmentationPtdwConfig.background_topic_names)
}
inline void TopicSegmentationPtdwConfig::set_background_topic_names(int index, const char* value, size_t size) {
  background_topic_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicSegmentationPtdwConfig.background_topic_names)
}
inline ::std::string* TopicSegmentationPtdwConfig::add_background_topic_names() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicSegmentationPtdwConfig.background_topic_names)
  return background_topic_names_.Add();
}
inline void TopicSegmentationPtdwConfig::add_background_topic_names(const ::std::string& value) {
  background_topic_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicSegmentationPtdwConfig.background_topic_names)
}
inline void TopicSegmentationPtdwConfig::add_background_topic_names(const char* value) {
  background_topic_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicSegmentationPtdwConfig.background_topic_names)
}
inline void TopicSegmentationPtdwConfig::add_background_topic_names(const char* value, size_t size) {
  background_topic_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicSegmentationPtdwConfig.background_topic_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSegmentationPtdwConfig::background_topic_names() const {
  // @@protoc_insertion_point(field_list:artm.TopicSegmentationPtdwConfig.background_topic_names)
  return background_topic_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSegmentationPtdwConfig::mutable_background_topic_names() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicSegmentationPtdwConfig.background_topic_names)
  return &background_topic_names_;
}

// optional int32 window = 3 [default = 10];
inline bool TopicSegmentationPtdwConfig::has_window() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicSegmentationPtdwConfig::set_has_window() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicSegmentationPtdwConfig::clear_has_window() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicSegmentationPtdwConfig::clear_window() {
  window_ = 10;
  clear_has_window();
}
inline ::google::protobuf::int32 TopicSegmentationPtdwConfig::window() const {
  // @@protoc_insertion_point(field_get:artm.TopicSegmentationPtdwConfig.window)
  return window_;
}
inline void TopicSegmentationPtdwConfig::set_window(::google::protobuf::int32 value) {
  set_has_window();
  window_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicSegmentationPtdwConfig.window)
}

// optional float threshold = 4 [default = 0.5];
inline bool TopicSegmentationPtdwConfig::has_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopicSegmentationPtdwConfig::set_has_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopicSegmentationPtdwConfig::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopicSegmentationPtdwConfig::clear_threshold() {
  threshold_ = 0.5f;
  clear_has_threshold();
}
inline float TopicSegmentationPtdwConfig::threshold() const {
  // @@protoc_insertion_point(field_get:artm.TopicSegmentationPtdwConfig.threshold)
  return threshold_;
}
inline void TopicSegmentationPtdwConfig::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicSegmentationPtdwConfig.threshold)
}

// -------------------------------------------------------------------

// SmoothTimeInTopicsPhiConfig

// repeated string topic_name = 1;
inline int SmoothTimeInTopicsPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void SmoothTimeInTopicsPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& SmoothTimeInTopicsPhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* SmoothTimeInTopicsPhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void SmoothTimeInTopicsPhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void SmoothTimeInTopicsPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SmoothTimeInTopicsPhiConfig.topic_name)
}
inline void SmoothTimeInTopicsPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothTimeInTopicsPhiConfig.topic_name)
}
inline ::std::string* SmoothTimeInTopicsPhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  return topic_name_.Add();
}
inline void SmoothTimeInTopicsPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SmoothTimeInTopicsPhiConfig.topic_name)
}
inline void SmoothTimeInTopicsPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SmoothTimeInTopicsPhiConfig.topic_name)
}
inline void SmoothTimeInTopicsPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SmoothTimeInTopicsPhiConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothTimeInTopicsPhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothTimeInTopicsPhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SmoothTimeInTopicsPhiConfig.topic_name)
  return &topic_name_;
}

// optional string class_id = 2 [default = "@default_class"];
inline bool SmoothTimeInTopicsPhiConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmoothTimeInTopicsPhiConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmoothTimeInTopicsPhiConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmoothTimeInTopicsPhiConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
inline const ::std::string& SmoothTimeInTopicsPhiConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.SmoothTimeInTopicsPhiConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
inline void SmoothTimeInTopicsPhiConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.SmoothTimeInTopicsPhiConfig.class_id)
}
inline void SmoothTimeInTopicsPhiConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.SmoothTimeInTopicsPhiConfig.class_id)
}
inline void SmoothTimeInTopicsPhiConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.SmoothTimeInTopicsPhiConfig.class_id)
}
inline ::std::string* SmoothTimeInTopicsPhiConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.SmoothTimeInTopicsPhiConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
inline ::std::string* SmoothTimeInTopicsPhiConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.SmoothTimeInTopicsPhiConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
inline void SmoothTimeInTopicsPhiConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.SmoothTimeInTopicsPhiConfig.class_id)
}

// -------------------------------------------------------------------

// NetPlsaPhiConfig

// optional string class_id = 1;
inline bool NetPlsaPhiConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetPlsaPhiConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetPlsaPhiConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetPlsaPhiConfig::clear_class_id() {
  class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_id();
}
inline const ::std::string& NetPlsaPhiConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.class_id)
  return class_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetPlsaPhiConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.class_id)
}
inline void NetPlsaPhiConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.NetPlsaPhiConfig.class_id)
}
inline void NetPlsaPhiConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.NetPlsaPhiConfig.class_id)
}
inline ::std::string* NetPlsaPhiConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.NetPlsaPhiConfig.class_id)
  return class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetPlsaPhiConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.NetPlsaPhiConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetPlsaPhiConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.NetPlsaPhiConfig.class_id)
}

// repeated string topic_name = 2;
inline int NetPlsaPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void NetPlsaPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& NetPlsaPhiConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* NetPlsaPhiConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.NetPlsaPhiConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void NetPlsaPhiConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void NetPlsaPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.NetPlsaPhiConfig.topic_name)
}
inline void NetPlsaPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.NetPlsaPhiConfig.topic_name)
}
inline ::std::string* NetPlsaPhiConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.NetPlsaPhiConfig.topic_name)
  return topic_name_.Add();
}
inline void NetPlsaPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.topic_name)
}
inline void NetPlsaPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.NetPlsaPhiConfig.topic_name)
}
inline void NetPlsaPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.NetPlsaPhiConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetPlsaPhiConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetPlsaPhiConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.topic_name)
  return &topic_name_;
}

// repeated string vertex_name = 3;
inline int NetPlsaPhiConfig::vertex_name_size() const {
  return vertex_name_.size();
}
inline void NetPlsaPhiConfig::clear_vertex_name() {
  vertex_name_.Clear();
}
inline const ::std::string& NetPlsaPhiConfig::vertex_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.vertex_name)
  return vertex_name_.Get(index);
}
inline ::std::string* NetPlsaPhiConfig::mutable_vertex_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.NetPlsaPhiConfig.vertex_name)
  return vertex_name_.Mutable(index);
}
inline void NetPlsaPhiConfig::set_vertex_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.vertex_name)
  vertex_name_.Mutable(index)->assign(value);
}
inline void NetPlsaPhiConfig::set_vertex_name(int index, const char* value) {
  vertex_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.NetPlsaPhiConfig.vertex_name)
}
inline void NetPlsaPhiConfig::set_vertex_name(int index, const char* value, size_t size) {
  vertex_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.NetPlsaPhiConfig.vertex_name)
}
inline ::std::string* NetPlsaPhiConfig::add_vertex_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.NetPlsaPhiConfig.vertex_name)
  return vertex_name_.Add();
}
inline void NetPlsaPhiConfig::add_vertex_name(const ::std::string& value) {
  vertex_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.vertex_name)
}
inline void NetPlsaPhiConfig::add_vertex_name(const char* value) {
  vertex_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.NetPlsaPhiConfig.vertex_name)
}
inline void NetPlsaPhiConfig::add_vertex_name(const char* value, size_t size) {
  vertex_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.NetPlsaPhiConfig.vertex_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetPlsaPhiConfig::vertex_name() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.vertex_name)
  return vertex_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetPlsaPhiConfig::mutable_vertex_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.vertex_name)
  return &vertex_name_;
}

// repeated float vertex_weight = 4;
inline int NetPlsaPhiConfig::vertex_weight_size() const {
  return vertex_weight_.size();
}
inline void NetPlsaPhiConfig::clear_vertex_weight() {
  vertex_weight_.Clear();
}
inline float NetPlsaPhiConfig::vertex_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.vertex_weight)
  return vertex_weight_.Get(index);
}
inline void NetPlsaPhiConfig::set_vertex_weight(int index, float value) {
  vertex_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.vertex_weight)
}
inline void NetPlsaPhiConfig::add_vertex_weight(float value) {
  vertex_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.vertex_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
NetPlsaPhiConfig::vertex_weight() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.vertex_weight)
  return vertex_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
NetPlsaPhiConfig::mutable_vertex_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.vertex_weight)
  return &vertex_weight_;
}

// repeated int32 first_vertex_index = 5;
inline int NetPlsaPhiConfig::first_vertex_index_size() const {
  return first_vertex_index_.size();
}
inline void NetPlsaPhiConfig::clear_first_vertex_index() {
  first_vertex_index_.Clear();
}
inline ::google::protobuf::int32 NetPlsaPhiConfig::first_vertex_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.first_vertex_index)
  return first_vertex_index_.Get(index);
}
inline void NetPlsaPhiConfig::set_first_vertex_index(int index, ::google::protobuf::int32 value) {
  first_vertex_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.first_vertex_index)
}
inline void NetPlsaPhiConfig::add_first_vertex_index(::google::protobuf::int32 value) {
  first_vertex_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.first_vertex_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetPlsaPhiConfig::first_vertex_index() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.first_vertex_index)
  return first_vertex_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetPlsaPhiConfig::mutable_first_vertex_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.first_vertex_index)
  return &first_vertex_index_;
}

// repeated int32 second_vertex_index = 6;
inline int NetPlsaPhiConfig::second_vertex_index_size() const {
  return second_vertex_index_.size();
}
inline void NetPlsaPhiConfig::clear_second_vertex_index() {
  second_vertex_index_.Clear();
}
inline ::google::protobuf::int32 NetPlsaPhiConfig::second_vertex_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.second_vertex_index)
  return second_vertex_index_.Get(index);
}
inline void NetPlsaPhiConfig::set_second_vertex_index(int index, ::google::protobuf::int32 value) {
  second_vertex_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.second_vertex_index)
}
inline void NetPlsaPhiConfig::add_second_vertex_index(::google::protobuf::int32 value) {
  second_vertex_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.second_vertex_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetPlsaPhiConfig::second_vertex_index() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.second_vertex_index)
  return second_vertex_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetPlsaPhiConfig::mutable_second_vertex_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.second_vertex_index)
  return &second_vertex_index_;
}

// repeated float edge_weight = 7;
inline int NetPlsaPhiConfig::edge_weight_size() const {
  return edge_weight_.size();
}
inline void NetPlsaPhiConfig::clear_edge_weight() {
  edge_weight_.Clear();
}
inline float NetPlsaPhiConfig::edge_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.edge_weight)
  return edge_weight_.Get(index);
}
inline void NetPlsaPhiConfig::set_edge_weight(int index, float value) {
  edge_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.edge_weight)
}
inline void NetPlsaPhiConfig::add_edge_weight(float value) {
  edge_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.NetPlsaPhiConfig.edge_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
NetPlsaPhiConfig::edge_weight() const {
  // @@protoc_insertion_point(field_list:artm.NetPlsaPhiConfig.edge_weight)
  return edge_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
NetPlsaPhiConfig::mutable_edge_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.NetPlsaPhiConfig.edge_weight)
  return &edge_weight_;
}

// optional bool symmetric_edge_weights = 8 [default = false];
inline bool NetPlsaPhiConfig::has_symmetric_edge_weights() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetPlsaPhiConfig::set_has_symmetric_edge_weights() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetPlsaPhiConfig::clear_has_symmetric_edge_weights() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetPlsaPhiConfig::clear_symmetric_edge_weights() {
  symmetric_edge_weights_ = false;
  clear_has_symmetric_edge_weights();
}
inline bool NetPlsaPhiConfig::symmetric_edge_weights() const {
  // @@protoc_insertion_point(field_get:artm.NetPlsaPhiConfig.symmetric_edge_weights)
  return symmetric_edge_weights_;
}
inline void NetPlsaPhiConfig::set_symmetric_edge_weights(bool value) {
  set_has_symmetric_edge_weights();
  symmetric_edge_weights_ = value;
  // @@protoc_insertion_point(field_set:artm.NetPlsaPhiConfig.symmetric_edge_weights)
}

// -------------------------------------------------------------------

// TransformConfig

// optional .artm.TransformConfig.TransformType type = 1 [default = Constant];
inline bool TransformConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformConfig::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::artm::TransformConfig_TransformType TransformConfig::type() const {
  // @@protoc_insertion_point(field_get:artm.TransformConfig.type)
  return static_cast< ::artm::TransformConfig_TransformType >(type_);
}
inline void TransformConfig::set_type(::artm::TransformConfig_TransformType value) {
  assert(::artm::TransformConfig_TransformType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:artm.TransformConfig.type)
}

// optional float n = 2 [default = 1];
inline bool TransformConfig::has_n() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformConfig::set_has_n() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformConfig::clear_has_n() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformConfig::clear_n() {
  n_ = 1;
  clear_has_n();
}
inline float TransformConfig::n() const {
  // @@protoc_insertion_point(field_get:artm.TransformConfig.n)
  return n_;
}
inline void TransformConfig::set_n(float value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:artm.TransformConfig.n)
}

// optional float a = 3 [default = 1];
inline bool TransformConfig::has_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformConfig::set_has_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformConfig::clear_has_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformConfig::clear_a() {
  a_ = 1;
  clear_has_a();
}
inline float TransformConfig::a() const {
  // @@protoc_insertion_point(field_get:artm.TransformConfig.a)
  return a_;
}
inline void TransformConfig::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:artm.TransformConfig.a)
}

// -------------------------------------------------------------------

// ScoreConfig

// optional string name = 1;
inline bool ScoreConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ScoreConfig::name() const {
  // @@protoc_insertion_point(field_get:artm.ScoreConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreConfig.name)
}
inline void ScoreConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreConfig.name)
}
inline void ScoreConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreConfig.name)
}
inline ::std::string* ScoreConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.ScoreConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScoreConfig::release_name() {
  // @@protoc_insertion_point(field_release:artm.ScoreConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreConfig.name)
}

// optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
inline bool ScoreConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoreConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScoreConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScoreConfig::clear_type() {
  type_ = 9999;
  clear_has_type();
}
inline ::artm::ScoreType ScoreConfig::type() const {
  // @@protoc_insertion_point(field_get:artm.ScoreConfig.type)
  return static_cast< ::artm::ScoreType >(type_);
}
inline void ScoreConfig::set_type(::artm::ScoreType value) {
  assert(::artm::ScoreType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:artm.ScoreConfig.type)
}

// optional bytes config = 3;
inline bool ScoreConfig::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScoreConfig::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScoreConfig::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScoreConfig::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config();
}
inline const ::std::string& ScoreConfig::config() const {
  // @@protoc_insertion_point(field_get:artm.ScoreConfig.config)
  return config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreConfig::set_config(const ::std::string& value) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreConfig.config)
}
inline void ScoreConfig::set_config(const char* value) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreConfig.config)
}
inline void ScoreConfig::set_config(const void* value, size_t size) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreConfig.config)
}
inline ::std::string* ScoreConfig::mutable_config() {
  set_has_config();
  // @@protoc_insertion_point(field_mutable:artm.ScoreConfig.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScoreConfig::release_config() {
  // @@protoc_insertion_point(field_release:artm.ScoreConfig.config)
  clear_has_config();
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreConfig::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    set_has_config();
  } else {
    clear_has_config();
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreConfig.config)
}

// optional string model_name = 4;
inline bool ScoreConfig::has_model_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScoreConfig::set_has_model_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScoreConfig::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScoreConfig::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
inline const ::std::string& ScoreConfig::model_name() const {
  // @@protoc_insertion_point(field_get:artm.ScoreConfig.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreConfig::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreConfig.model_name)
}
inline void ScoreConfig::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreConfig.model_name)
}
inline void ScoreConfig::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreConfig.model_name)
}
inline ::std::string* ScoreConfig::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.ScoreConfig.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScoreConfig::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.ScoreConfig.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreConfig::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreConfig.model_name)
}

// optional string config_json = 5;
inline bool ScoreConfig::has_config_json() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScoreConfig::set_has_config_json() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScoreConfig::clear_has_config_json() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScoreConfig::clear_config_json() {
  config_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_json();
}
inline const ::std::string& ScoreConfig::config_json() const {
  // @@protoc_insertion_point(field_get:artm.ScoreConfig.config_json)
  return config_json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreConfig::set_config_json(const ::std::string& value) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreConfig.config_json)
}
inline void ScoreConfig::set_config_json(const char* value) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreConfig.config_json)
}
inline void ScoreConfig::set_config_json(const char* value, size_t size) {
  set_has_config_json();
  config_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreConfig.config_json)
}
inline ::std::string* ScoreConfig::mutable_config_json() {
  set_has_config_json();
  // @@protoc_insertion_point(field_mutable:artm.ScoreConfig.config_json)
  return config_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScoreConfig::release_config_json() {
  // @@protoc_insertion_point(field_release:artm.ScoreConfig.config_json)
  clear_has_config_json();
  return config_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreConfig::set_allocated_config_json(::std::string* config_json) {
  if (config_json != NULL) {
    set_has_config_json();
  } else {
    clear_has_config_json();
  }
  config_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_json);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreConfig.config_json)
}

// -------------------------------------------------------------------

// ScoreData

// optional string name = 1;
inline bool ScoreData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ScoreData::name() const {
  // @@protoc_insertion_point(field_get:artm.ScoreData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreData.name)
}
inline void ScoreData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreData.name)
}
inline void ScoreData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreData.name)
}
inline ::std::string* ScoreData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.ScoreData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScoreData::release_name() {
  // @@protoc_insertion_point(field_release:artm.ScoreData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreData.name)
}

// optional .artm.ScoreType type = 2 [default = ScoreType_Unknown];
inline bool ScoreData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoreData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScoreData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScoreData::clear_type() {
  type_ = 9999;
  clear_has_type();
}
inline ::artm::ScoreType ScoreData::type() const {
  // @@protoc_insertion_point(field_get:artm.ScoreData.type)
  return static_cast< ::artm::ScoreType >(type_);
}
inline void ScoreData::set_type(::artm::ScoreType value) {
  assert(::artm::ScoreType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:artm.ScoreData.type)
}

// optional bytes data = 3;
inline bool ScoreData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScoreData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScoreData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScoreData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ScoreData::data() const {
  // @@protoc_insertion_point(field_get:artm.ScoreData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreData.data)
}
inline void ScoreData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreData.data)
}
inline void ScoreData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreData.data)
}
inline ::std::string* ScoreData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:artm.ScoreData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScoreData::release_data() {
  // @@protoc_insertion_point(field_release:artm.ScoreData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreData.data)
}

// optional string data_json = 4;
inline bool ScoreData::has_data_json() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScoreData::set_has_data_json() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScoreData::clear_has_data_json() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScoreData::clear_data_json() {
  data_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_json();
}
inline const ::std::string& ScoreData::data_json() const {
  // @@protoc_insertion_point(field_get:artm.ScoreData.data_json)
  return data_json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreData::set_data_json(const ::std::string& value) {
  set_has_data_json();
  data_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ScoreData.data_json)
}
inline void ScoreData::set_data_json(const char* value) {
  set_has_data_json();
  data_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ScoreData.data_json)
}
inline void ScoreData::set_data_json(const char* value, size_t size) {
  set_has_data_json();
  data_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ScoreData.data_json)
}
inline ::std::string* ScoreData::mutable_data_json() {
  set_has_data_json();
  // @@protoc_insertion_point(field_mutable:artm.ScoreData.data_json)
  return data_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScoreData::release_data_json() {
  // @@protoc_insertion_point(field_release:artm.ScoreData.data_json)
  clear_has_data_json();
  return data_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScoreData::set_allocated_data_json(::std::string* data_json) {
  if (data_json != NULL) {
    set_has_data_json();
  } else {
    clear_has_data_json();
  }
  data_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_json);
  // @@protoc_insertion_point(field_set_allocated:artm.ScoreData.data_json)
}

// -------------------------------------------------------------------

// ScoreArray

// repeated .artm.ScoreData score = 1;
inline int ScoreArray::score_size() const {
  return score_.size();
}
inline void ScoreArray::clear_score() {
  score_.Clear();
}
inline const ::artm::ScoreData& ScoreArray::score(int index) const {
  // @@protoc_insertion_point(field_get:artm.ScoreArray.score)
  return score_.Get(index);
}
inline ::artm::ScoreData* ScoreArray::mutable_score(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ScoreArray.score)
  return score_.Mutable(index);
}
inline ::artm::ScoreData* ScoreArray::add_score() {
  // @@protoc_insertion_point(field_add:artm.ScoreArray.score)
  return score_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >*
ScoreArray::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:artm.ScoreArray.score)
  return &score_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >&
ScoreArray::score() const {
  // @@protoc_insertion_point(field_list:artm.ScoreArray.score)
  return score_;
}

// -------------------------------------------------------------------

// PerplexityScoreConfig

// optional .artm.PerplexityScoreConfig.Type model_type = 1 [default = UnigramDocumentModel];
inline bool PerplexityScoreConfig::has_model_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerplexityScoreConfig::set_has_model_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerplexityScoreConfig::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerplexityScoreConfig::clear_model_type() {
  model_type_ = 0;
  clear_has_model_type();
}
inline ::artm::PerplexityScoreConfig_Type PerplexityScoreConfig::model_type() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScoreConfig.model_type)
  return static_cast< ::artm::PerplexityScoreConfig_Type >(model_type_);
}
inline void PerplexityScoreConfig::set_model_type(::artm::PerplexityScoreConfig_Type value) {
  assert(::artm::PerplexityScoreConfig_Type_IsValid(value));
  set_has_model_type();
  model_type_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScoreConfig.model_type)
}

// optional string dictionary_name = 2;
inline bool PerplexityScoreConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerplexityScoreConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerplexityScoreConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerplexityScoreConfig::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& PerplexityScoreConfig::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScoreConfig.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PerplexityScoreConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.PerplexityScoreConfig.dictionary_name)
}
inline void PerplexityScoreConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.PerplexityScoreConfig.dictionary_name)
}
inline void PerplexityScoreConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.PerplexityScoreConfig.dictionary_name)
}
inline ::std::string* PerplexityScoreConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.PerplexityScoreConfig.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PerplexityScoreConfig::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.PerplexityScoreConfig.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PerplexityScoreConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.PerplexityScoreConfig.dictionary_name)
}

// repeated string class_id = 3;
inline int PerplexityScoreConfig::class_id_size() const {
  return class_id_.size();
}
inline void PerplexityScoreConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& PerplexityScoreConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScoreConfig.class_id)
  return class_id_.Get(index);
}
inline ::std::string* PerplexityScoreConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.PerplexityScoreConfig.class_id)
  return class_id_.Mutable(index);
}
inline void PerplexityScoreConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.PerplexityScoreConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void PerplexityScoreConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.PerplexityScoreConfig.class_id)
}
inline void PerplexityScoreConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.PerplexityScoreConfig.class_id)
}
inline ::std::string* PerplexityScoreConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.PerplexityScoreConfig.class_id)
  return class_id_.Add();
}
inline void PerplexityScoreConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.PerplexityScoreConfig.class_id)
}
inline void PerplexityScoreConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.PerplexityScoreConfig.class_id)
}
inline void PerplexityScoreConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.PerplexityScoreConfig.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PerplexityScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.PerplexityScoreConfig.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PerplexityScoreConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.PerplexityScoreConfig.class_id)
  return &class_id_;
}

// repeated string transaction_typename = 4;
inline int PerplexityScoreConfig::transaction_typename_size() const {
  return transaction_typename_.size();
}
inline void PerplexityScoreConfig::clear_transaction_typename() {
  transaction_typename_.Clear();
}
inline const ::std::string& PerplexityScoreConfig::transaction_typename(int index) const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScoreConfig.transaction_typename)
  return transaction_typename_.Get(index);
}
inline ::std::string* PerplexityScoreConfig::mutable_transaction_typename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.PerplexityScoreConfig.transaction_typename)
  return transaction_typename_.Mutable(index);
}
inline void PerplexityScoreConfig::set_transaction_typename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.PerplexityScoreConfig.transaction_typename)
  transaction_typename_.Mutable(index)->assign(value);
}
inline void PerplexityScoreConfig::set_transaction_typename(int index, const char* value) {
  transaction_typename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.PerplexityScoreConfig.transaction_typename)
}
inline void PerplexityScoreConfig::set_transaction_typename(int index, const char* value, size_t size) {
  transaction_typename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.PerplexityScoreConfig.transaction_typename)
}
inline ::std::string* PerplexityScoreConfig::add_transaction_typename() {
  // @@protoc_insertion_point(field_add_mutable:artm.PerplexityScoreConfig.transaction_typename)
  return transaction_typename_.Add();
}
inline void PerplexityScoreConfig::add_transaction_typename(const ::std::string& value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.PerplexityScoreConfig.transaction_typename)
}
inline void PerplexityScoreConfig::add_transaction_typename(const char* value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.PerplexityScoreConfig.transaction_typename)
}
inline void PerplexityScoreConfig::add_transaction_typename(const char* value, size_t size) {
  transaction_typename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.PerplexityScoreConfig.transaction_typename)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PerplexityScoreConfig::transaction_typename() const {
  // @@protoc_insertion_point(field_list:artm.PerplexityScoreConfig.transaction_typename)
  return transaction_typename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PerplexityScoreConfig::mutable_transaction_typename() {
  // @@protoc_insertion_point(field_mutable_list:artm.PerplexityScoreConfig.transaction_typename)
  return &transaction_typename_;
}

// -------------------------------------------------------------------

// PerplexityScore_TransactionNameInfo

// optional string transaction_typename = 1;
inline bool PerplexityScore_TransactionNameInfo::has_transaction_typename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerplexityScore_TransactionNameInfo::set_has_transaction_typename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerplexityScore_TransactionNameInfo::clear_has_transaction_typename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerplexityScore_TransactionNameInfo::clear_transaction_typename() {
  transaction_typename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction_typename();
}
inline const ::std::string& PerplexityScore_TransactionNameInfo::transaction_typename() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
  return transaction_typename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PerplexityScore_TransactionNameInfo::set_transaction_typename(const ::std::string& value) {
  set_has_transaction_typename();
  transaction_typename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
}
inline void PerplexityScore_TransactionNameInfo::set_transaction_typename(const char* value) {
  set_has_transaction_typename();
  transaction_typename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
}
inline void PerplexityScore_TransactionNameInfo::set_transaction_typename(const char* value, size_t size) {
  set_has_transaction_typename();
  transaction_typename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
}
inline ::std::string* PerplexityScore_TransactionNameInfo::mutable_transaction_typename() {
  set_has_transaction_typename();
  // @@protoc_insertion_point(field_mutable:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
  return transaction_typename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PerplexityScore_TransactionNameInfo::release_transaction_typename() {
  // @@protoc_insertion_point(field_release:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
  clear_has_transaction_typename();
  return transaction_typename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PerplexityScore_TransactionNameInfo::set_allocated_transaction_typename(::std::string* transaction_typename) {
  if (transaction_typename != NULL) {
    set_has_transaction_typename();
  } else {
    clear_has_transaction_typename();
  }
  transaction_typename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_typename);
  // @@protoc_insertion_point(field_set_allocated:artm.PerplexityScore.TransactionNameInfo.transaction_typename)
}

// optional double raw = 2;
inline bool PerplexityScore_TransactionNameInfo::has_raw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerplexityScore_TransactionNameInfo::set_has_raw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerplexityScore_TransactionNameInfo::clear_has_raw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerplexityScore_TransactionNameInfo::clear_raw() {
  raw_ = 0;
  clear_has_raw();
}
inline double PerplexityScore_TransactionNameInfo::raw() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.TransactionNameInfo.raw)
  return raw_;
}
inline void PerplexityScore_TransactionNameInfo::set_raw(double value) {
  set_has_raw();
  raw_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.TransactionNameInfo.raw)
}

// optional double normalizer = 3;
inline bool PerplexityScore_TransactionNameInfo::has_normalizer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerplexityScore_TransactionNameInfo::set_has_normalizer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerplexityScore_TransactionNameInfo::clear_has_normalizer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerplexityScore_TransactionNameInfo::clear_normalizer() {
  normalizer_ = 0;
  clear_has_normalizer();
}
inline double PerplexityScore_TransactionNameInfo::normalizer() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.TransactionNameInfo.normalizer)
  return normalizer_;
}
inline void PerplexityScore_TransactionNameInfo::set_normalizer(double value) {
  set_has_normalizer();
  normalizer_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.TransactionNameInfo.normalizer)
}

// optional int64 zero_words = 4;
inline bool PerplexityScore_TransactionNameInfo::has_zero_words() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerplexityScore_TransactionNameInfo::set_has_zero_words() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerplexityScore_TransactionNameInfo::clear_has_zero_words() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerplexityScore_TransactionNameInfo::clear_zero_words() {
  zero_words_ = GOOGLE_LONGLONG(0);
  clear_has_zero_words();
}
inline ::google::protobuf::int64 PerplexityScore_TransactionNameInfo::zero_words() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.TransactionNameInfo.zero_words)
  return zero_words_;
}
inline void PerplexityScore_TransactionNameInfo::set_zero_words(::google::protobuf::int64 value) {
  set_has_zero_words();
  zero_words_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.TransactionNameInfo.zero_words)
}

// -------------------------------------------------------------------

// PerplexityScore

// optional float value = 1;
inline bool PerplexityScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerplexityScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerplexityScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerplexityScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float PerplexityScore::value() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.value)
  return value_;
}
inline void PerplexityScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.value)
}

// optional double raw = 2;
inline bool PerplexityScore::has_raw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerplexityScore::set_has_raw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerplexityScore::clear_has_raw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerplexityScore::clear_raw() {
  raw_ = 0;
  clear_has_raw();
}
inline double PerplexityScore::raw() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.raw)
  return raw_;
}
inline void PerplexityScore::set_raw(double value) {
  set_has_raw();
  raw_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.raw)
}

// optional double normalizer = 3;
inline bool PerplexityScore::has_normalizer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerplexityScore::set_has_normalizer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerplexityScore::clear_has_normalizer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerplexityScore::clear_normalizer() {
  normalizer_ = 0;
  clear_has_normalizer();
}
inline double PerplexityScore::normalizer() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.normalizer)
  return normalizer_;
}
inline void PerplexityScore::set_normalizer(double value) {
  set_has_normalizer();
  normalizer_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.normalizer)
}

// optional int64 zero_words = 4;
inline bool PerplexityScore::has_zero_words() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerplexityScore::set_has_zero_words() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerplexityScore::clear_has_zero_words() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerplexityScore::clear_zero_words() {
  zero_words_ = GOOGLE_LONGLONG(0);
  clear_has_zero_words();
}
inline ::google::protobuf::int64 PerplexityScore::zero_words() const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.zero_words)
  return zero_words_;
}
inline void PerplexityScore::set_zero_words(::google::protobuf::int64 value) {
  set_has_zero_words();
  zero_words_ = value;
  // @@protoc_insertion_point(field_set:artm.PerplexityScore.zero_words)
}

// repeated .artm.PerplexityScore.TransactionNameInfo transaction_typename_info = 5;
inline int PerplexityScore::transaction_typename_info_size() const {
  return transaction_typename_info_.size();
}
inline void PerplexityScore::clear_transaction_typename_info() {
  transaction_typename_info_.Clear();
}
inline const ::artm::PerplexityScore_TransactionNameInfo& PerplexityScore::transaction_typename_info(int index) const {
  // @@protoc_insertion_point(field_get:artm.PerplexityScore.transaction_typename_info)
  return transaction_typename_info_.Get(index);
}
inline ::artm::PerplexityScore_TransactionNameInfo* PerplexityScore::mutable_transaction_typename_info(int index) {
  // @@protoc_insertion_point(field_mutable:artm.PerplexityScore.transaction_typename_info)
  return transaction_typename_info_.Mutable(index);
}
inline ::artm::PerplexityScore_TransactionNameInfo* PerplexityScore::add_transaction_typename_info() {
  // @@protoc_insertion_point(field_add:artm.PerplexityScore.transaction_typename_info)
  return transaction_typename_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::PerplexityScore_TransactionNameInfo >*
PerplexityScore::mutable_transaction_typename_info() {
  // @@protoc_insertion_point(field_mutable_list:artm.PerplexityScore.transaction_typename_info)
  return &transaction_typename_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::PerplexityScore_TransactionNameInfo >&
PerplexityScore::transaction_typename_info() const {
  // @@protoc_insertion_point(field_list:artm.PerplexityScore.transaction_typename_info)
  return transaction_typename_info_;
}

// -------------------------------------------------------------------

// SparsityThetaScoreConfig

// optional float eps = 3 [default = 1e-37];
inline bool SparsityThetaScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparsityThetaScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparsityThetaScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparsityThetaScoreConfig::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
inline float SparsityThetaScoreConfig::eps() const {
  // @@protoc_insertion_point(field_get:artm.SparsityThetaScoreConfig.eps)
  return eps_;
}
inline void SparsityThetaScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityThetaScoreConfig.eps)
}

// repeated string topic_name = 4;
inline int SparsityThetaScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void SparsityThetaScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& SparsityThetaScoreConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SparsityThetaScoreConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* SparsityThetaScoreConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SparsityThetaScoreConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void SparsityThetaScoreConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SparsityThetaScoreConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void SparsityThetaScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SparsityThetaScoreConfig.topic_name)
}
inline void SparsityThetaScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SparsityThetaScoreConfig.topic_name)
}
inline ::std::string* SparsityThetaScoreConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SparsityThetaScoreConfig.topic_name)
  return topic_name_.Add();
}
inline void SparsityThetaScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SparsityThetaScoreConfig.topic_name)
}
inline void SparsityThetaScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SparsityThetaScoreConfig.topic_name)
}
inline void SparsityThetaScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SparsityThetaScoreConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SparsityThetaScoreConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SparsityThetaScoreConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SparsityThetaScoreConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SparsityThetaScoreConfig.topic_name)
  return &topic_name_;
}

// -------------------------------------------------------------------

// SparsityThetaScore

// optional float value = 1;
inline bool SparsityThetaScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparsityThetaScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparsityThetaScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparsityThetaScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float SparsityThetaScore::value() const {
  // @@protoc_insertion_point(field_get:artm.SparsityThetaScore.value)
  return value_;
}
inline void SparsityThetaScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityThetaScore.value)
}

// optional int64 zero_topics = 2;
inline bool SparsityThetaScore::has_zero_topics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SparsityThetaScore::set_has_zero_topics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SparsityThetaScore::clear_has_zero_topics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SparsityThetaScore::clear_zero_topics() {
  zero_topics_ = GOOGLE_LONGLONG(0);
  clear_has_zero_topics();
}
inline ::google::protobuf::int64 SparsityThetaScore::zero_topics() const {
  // @@protoc_insertion_point(field_get:artm.SparsityThetaScore.zero_topics)
  return zero_topics_;
}
inline void SparsityThetaScore::set_zero_topics(::google::protobuf::int64 value) {
  set_has_zero_topics();
  zero_topics_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityThetaScore.zero_topics)
}

// optional int64 total_topics = 3;
inline bool SparsityThetaScore::has_total_topics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SparsityThetaScore::set_has_total_topics() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SparsityThetaScore::clear_has_total_topics() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SparsityThetaScore::clear_total_topics() {
  total_topics_ = GOOGLE_LONGLONG(0);
  clear_has_total_topics();
}
inline ::google::protobuf::int64 SparsityThetaScore::total_topics() const {
  // @@protoc_insertion_point(field_get:artm.SparsityThetaScore.total_topics)
  return total_topics_;
}
inline void SparsityThetaScore::set_total_topics(::google::protobuf::int64 value) {
  set_has_total_topics();
  total_topics_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityThetaScore.total_topics)
}

// -------------------------------------------------------------------

// SparsityPhiScoreConfig

// optional float eps = 1 [default = 1e-37];
inline bool SparsityPhiScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparsityPhiScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparsityPhiScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparsityPhiScoreConfig::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
inline float SparsityPhiScoreConfig::eps() const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScoreConfig.eps)
  return eps_;
}
inline void SparsityPhiScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScoreConfig.eps)
}

// optional string class_id = 2 [default = "@default_class"];
inline bool SparsityPhiScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SparsityPhiScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SparsityPhiScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SparsityPhiScoreConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
inline const ::std::string& SparsityPhiScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScoreConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
inline void SparsityPhiScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScoreConfig.class_id)
}
inline void SparsityPhiScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.SparsityPhiScoreConfig.class_id)
}
inline void SparsityPhiScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.SparsityPhiScoreConfig.class_id)
}
inline ::std::string* SparsityPhiScoreConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.SparsityPhiScoreConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
inline ::std::string* SparsityPhiScoreConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.SparsityPhiScoreConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
inline void SparsityPhiScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.SparsityPhiScoreConfig.class_id)
}

// repeated string topic_name = 3;
inline int SparsityPhiScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void SparsityPhiScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& SparsityPhiScoreConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScoreConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* SparsityPhiScoreConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.SparsityPhiScoreConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void SparsityPhiScoreConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScoreConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void SparsityPhiScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.SparsityPhiScoreConfig.topic_name)
}
inline void SparsityPhiScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.SparsityPhiScoreConfig.topic_name)
}
inline ::std::string* SparsityPhiScoreConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.SparsityPhiScoreConfig.topic_name)
  return topic_name_.Add();
}
inline void SparsityPhiScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.SparsityPhiScoreConfig.topic_name)
}
inline void SparsityPhiScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.SparsityPhiScoreConfig.topic_name)
}
inline void SparsityPhiScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.SparsityPhiScoreConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SparsityPhiScoreConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.SparsityPhiScoreConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SparsityPhiScoreConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.SparsityPhiScoreConfig.topic_name)
  return &topic_name_;
}

// -------------------------------------------------------------------

// SparsityPhiScore

// optional float value = 1;
inline bool SparsityPhiScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparsityPhiScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparsityPhiScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparsityPhiScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float SparsityPhiScore::value() const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScore.value)
  return value_;
}
inline void SparsityPhiScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScore.value)
}

// optional int64 zero_tokens = 2;
inline bool SparsityPhiScore::has_zero_tokens() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SparsityPhiScore::set_has_zero_tokens() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SparsityPhiScore::clear_has_zero_tokens() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SparsityPhiScore::clear_zero_tokens() {
  zero_tokens_ = GOOGLE_LONGLONG(0);
  clear_has_zero_tokens();
}
inline ::google::protobuf::int64 SparsityPhiScore::zero_tokens() const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScore.zero_tokens)
  return zero_tokens_;
}
inline void SparsityPhiScore::set_zero_tokens(::google::protobuf::int64 value) {
  set_has_zero_tokens();
  zero_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScore.zero_tokens)
}

// optional int64 total_tokens = 3;
inline bool SparsityPhiScore::has_total_tokens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SparsityPhiScore::set_has_total_tokens() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SparsityPhiScore::clear_has_total_tokens() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SparsityPhiScore::clear_total_tokens() {
  total_tokens_ = GOOGLE_LONGLONG(0);
  clear_has_total_tokens();
}
inline ::google::protobuf::int64 SparsityPhiScore::total_tokens() const {
  // @@protoc_insertion_point(field_get:artm.SparsityPhiScore.total_tokens)
  return total_tokens_;
}
inline void SparsityPhiScore::set_total_tokens(::google::protobuf::int64 value) {
  set_has_total_tokens();
  total_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.SparsityPhiScore.total_tokens)
}

// -------------------------------------------------------------------

// ItemsProcessedScoreConfig

// -------------------------------------------------------------------

// ItemsProcessedScore

// optional int32 value = 1 [default = 0];
inline bool ItemsProcessedScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemsProcessedScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemsProcessedScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemsProcessedScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ItemsProcessedScore::value() const {
  // @@protoc_insertion_point(field_get:artm.ItemsProcessedScore.value)
  return value_;
}
inline void ItemsProcessedScore::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.ItemsProcessedScore.value)
}

// optional int32 num_batches = 2 [default = 0];
inline bool ItemsProcessedScore::has_num_batches() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemsProcessedScore::set_has_num_batches() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemsProcessedScore::clear_has_num_batches() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemsProcessedScore::clear_num_batches() {
  num_batches_ = 0;
  clear_has_num_batches();
}
inline ::google::protobuf::int32 ItemsProcessedScore::num_batches() const {
  // @@protoc_insertion_point(field_get:artm.ItemsProcessedScore.num_batches)
  return num_batches_;
}
inline void ItemsProcessedScore::set_num_batches(::google::protobuf::int32 value) {
  set_has_num_batches();
  num_batches_ = value;
  // @@protoc_insertion_point(field_set:artm.ItemsProcessedScore.num_batches)
}

// optional float token_weight = 3 [default = 0];
inline bool ItemsProcessedScore::has_token_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemsProcessedScore::set_has_token_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemsProcessedScore::clear_has_token_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemsProcessedScore::clear_token_weight() {
  token_weight_ = 0;
  clear_has_token_weight();
}
inline float ItemsProcessedScore::token_weight() const {
  // @@protoc_insertion_point(field_get:artm.ItemsProcessedScore.token_weight)
  return token_weight_;
}
inline void ItemsProcessedScore::set_token_weight(float value) {
  set_has_token_weight();
  token_weight_ = value;
  // @@protoc_insertion_point(field_set:artm.ItemsProcessedScore.token_weight)
}

// optional float token_weight_in_effect = 4 [default = 0];
inline bool ItemsProcessedScore::has_token_weight_in_effect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemsProcessedScore::set_has_token_weight_in_effect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemsProcessedScore::clear_has_token_weight_in_effect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemsProcessedScore::clear_token_weight_in_effect() {
  token_weight_in_effect_ = 0;
  clear_has_token_weight_in_effect();
}
inline float ItemsProcessedScore::token_weight_in_effect() const {
  // @@protoc_insertion_point(field_get:artm.ItemsProcessedScore.token_weight_in_effect)
  return token_weight_in_effect_;
}
inline void ItemsProcessedScore::set_token_weight_in_effect(float value) {
  set_has_token_weight_in_effect();
  token_weight_in_effect_ = value;
  // @@protoc_insertion_point(field_set:artm.ItemsProcessedScore.token_weight_in_effect)
}

// -------------------------------------------------------------------

// TopTokensScoreConfig

// optional int32 num_tokens = 1 [default = 10];
inline bool TopTokensScoreConfig::has_num_tokens() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopTokensScoreConfig::set_has_num_tokens() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopTokensScoreConfig::clear_has_num_tokens() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopTokensScoreConfig::clear_num_tokens() {
  num_tokens_ = 10;
  clear_has_num_tokens();
}
inline ::google::protobuf::int32 TopTokensScoreConfig::num_tokens() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScoreConfig.num_tokens)
  return num_tokens_;
}
inline void TopTokensScoreConfig::set_num_tokens(::google::protobuf::int32 value) {
  set_has_num_tokens();
  num_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.TopTokensScoreConfig.num_tokens)
}

// optional string class_id = 2 [default = "@default_class"];
inline bool TopTokensScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopTokensScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopTokensScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopTokensScoreConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
inline const ::std::string& TopTokensScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScoreConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
inline void TopTokensScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.TopTokensScoreConfig.class_id)
}
inline void TopTokensScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TopTokensScoreConfig.class_id)
}
inline void TopTokensScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TopTokensScoreConfig.class_id)
}
inline ::std::string* TopTokensScoreConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.TopTokensScoreConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
inline ::std::string* TopTokensScoreConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.TopTokensScoreConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
inline void TopTokensScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.TopTokensScoreConfig.class_id)
}

// repeated string topic_name = 3;
inline int TopTokensScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void TopTokensScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopTokensScoreConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScoreConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* TopTokensScoreConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopTokensScoreConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void TopTokensScoreConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopTokensScoreConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void TopTokensScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopTokensScoreConfig.topic_name)
}
inline void TopTokensScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopTokensScoreConfig.topic_name)
}
inline ::std::string* TopTokensScoreConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopTokensScoreConfig.topic_name)
  return topic_name_.Add();
}
inline void TopTokensScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScoreConfig.topic_name)
}
inline void TopTokensScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopTokensScoreConfig.topic_name)
}
inline void TopTokensScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopTokensScoreConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopTokensScoreConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScoreConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopTokensScoreConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScoreConfig.topic_name)
  return &topic_name_;
}

// optional string cooccurrence_dictionary_name = 4;
inline bool TopTokensScoreConfig::has_cooccurrence_dictionary_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopTokensScoreConfig::set_has_cooccurrence_dictionary_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopTokensScoreConfig::clear_has_cooccurrence_dictionary_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopTokensScoreConfig::clear_cooccurrence_dictionary_name() {
  cooccurrence_dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooccurrence_dictionary_name();
}
inline const ::std::string& TopTokensScoreConfig::cooccurrence_dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
  return cooccurrence_dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopTokensScoreConfig::set_cooccurrence_dictionary_name(const ::std::string& value) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
}
inline void TopTokensScoreConfig::set_cooccurrence_dictionary_name(const char* value) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
}
inline void TopTokensScoreConfig::set_cooccurrence_dictionary_name(const char* value, size_t size) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
}
inline ::std::string* TopTokensScoreConfig::mutable_cooccurrence_dictionary_name() {
  set_has_cooccurrence_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
  return cooccurrence_dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopTokensScoreConfig::release_cooccurrence_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
  clear_has_cooccurrence_dictionary_name();
  return cooccurrence_dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopTokensScoreConfig::set_allocated_cooccurrence_dictionary_name(::std::string* cooccurrence_dictionary_name) {
  if (cooccurrence_dictionary_name != NULL) {
    set_has_cooccurrence_dictionary_name();
  } else {
    clear_has_cooccurrence_dictionary_name();
  }
  cooccurrence_dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooccurrence_dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.TopTokensScoreConfig.cooccurrence_dictionary_name)
}

// optional float eps = 5 [default = 1e-37];
inline bool TopTokensScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopTokensScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopTokensScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopTokensScoreConfig::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
inline float TopTokensScoreConfig::eps() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScoreConfig.eps)
  return eps_;
}
inline void TopTokensScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.TopTokensScoreConfig.eps)
}

// -------------------------------------------------------------------

// TopTokensScore

// optional int32 num_entries = 1;
inline bool TopTokensScore::has_num_entries() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopTokensScore::set_has_num_entries() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopTokensScore::clear_has_num_entries() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopTokensScore::clear_num_entries() {
  num_entries_ = 0;
  clear_has_num_entries();
}
inline ::google::protobuf::int32 TopTokensScore::num_entries() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.num_entries)
  return num_entries_;
}
inline void TopTokensScore::set_num_entries(::google::protobuf::int32 value) {
  set_has_num_entries();
  num_entries_ = value;
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.num_entries)
}

// repeated string topic_name = 2;
inline int TopTokensScore::topic_name_size() const {
  return topic_name_.size();
}
inline void TopTokensScore::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopTokensScore::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* TopTokensScore::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopTokensScore.topic_name)
  return topic_name_.Mutable(index);
}
inline void TopTokensScore::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void TopTokensScore::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopTokensScore.topic_name)
}
inline void TopTokensScore::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopTokensScore.topic_name)
}
inline ::std::string* TopTokensScore::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopTokensScore.topic_name)
  return topic_name_.Add();
}
inline void TopTokensScore::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScore.topic_name)
}
inline void TopTokensScore::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopTokensScore.topic_name)
}
inline void TopTokensScore::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopTokensScore.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopTokensScore::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScore.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopTokensScore::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScore.topic_name)
  return &topic_name_;
}

// repeated int32 topic_index = 3;
inline int TopTokensScore::topic_index_size() const {
  return topic_index_.size();
}
inline void TopTokensScore::clear_topic_index() {
  topic_index_.Clear();
}
inline ::google::protobuf::int32 TopTokensScore::topic_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.topic_index)
  return topic_index_.Get(index);
}
inline void TopTokensScore::set_topic_index(int index, ::google::protobuf::int32 value) {
  topic_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.topic_index)
}
inline void TopTokensScore::add_topic_index(::google::protobuf::int32 value) {
  topic_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScore.topic_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TopTokensScore::topic_index() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScore.topic_index)
  return topic_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TopTokensScore::mutable_topic_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScore.topic_index)
  return &topic_index_;
}

// repeated string token = 4;
inline int TopTokensScore::token_size() const {
  return token_.size();
}
inline void TopTokensScore::clear_token() {
  token_.Clear();
}
inline const ::std::string& TopTokensScore::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.token)
  return token_.Get(index);
}
inline ::std::string* TopTokensScore::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopTokensScore.token)
  return token_.Mutable(index);
}
inline void TopTokensScore::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.token)
  token_.Mutable(index)->assign(value);
}
inline void TopTokensScore::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopTokensScore.token)
}
inline void TopTokensScore::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopTokensScore.token)
}
inline ::std::string* TopTokensScore::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopTokensScore.token)
  return token_.Add();
}
inline void TopTokensScore::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScore.token)
}
inline void TopTokensScore::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopTokensScore.token)
}
inline void TopTokensScore::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopTokensScore.token)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopTokensScore::token() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScore.token)
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopTokensScore::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScore.token)
  return &token_;
}

// repeated float weight = 5;
inline int TopTokensScore::weight_size() const {
  return weight_.size();
}
inline void TopTokensScore::clear_weight() {
  weight_.Clear();
}
inline float TopTokensScore::weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.weight)
  return weight_.Get(index);
}
inline void TopTokensScore::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.weight)
}
inline void TopTokensScore::add_weight(float value) {
  weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScore.weight)
}
inline const ::google::protobuf::RepeatedField< float >&
TopTokensScore::weight() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScore.weight)
  return weight_;
}
inline ::google::protobuf::RepeatedField< float >*
TopTokensScore::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScore.weight)
  return &weight_;
}

// repeated float coherence = 6;
inline int TopTokensScore::coherence_size() const {
  return coherence_.size();
}
inline void TopTokensScore::clear_coherence() {
  coherence_.Clear();
}
inline float TopTokensScore::coherence(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.coherence)
  return coherence_.Get(index);
}
inline void TopTokensScore::set_coherence(int index, float value) {
  coherence_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.coherence)
}
inline void TopTokensScore::add_coherence(float value) {
  coherence_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopTokensScore.coherence)
}
inline const ::google::protobuf::RepeatedField< float >&
TopTokensScore::coherence() const {
  // @@protoc_insertion_point(field_list:artm.TopTokensScore.coherence)
  return coherence_;
}
inline ::google::protobuf::RepeatedField< float >*
TopTokensScore::mutable_coherence() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopTokensScore.coherence)
  return &coherence_;
}

// optional float average_coherence = 7;
inline bool TopTokensScore::has_average_coherence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TopTokensScore::set_has_average_coherence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TopTokensScore::clear_has_average_coherence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TopTokensScore::clear_average_coherence() {
  average_coherence_ = 0;
  clear_has_average_coherence();
}
inline float TopTokensScore::average_coherence() const {
  // @@protoc_insertion_point(field_get:artm.TopTokensScore.average_coherence)
  return average_coherence_;
}
inline void TopTokensScore::set_average_coherence(float value) {
  set_has_average_coherence();
  average_coherence_ = value;
  // @@protoc_insertion_point(field_set:artm.TopTokensScore.average_coherence)
}

// -------------------------------------------------------------------

// ThetaSnippetScoreConfig

// optional int32 num_items = 4 [default = 10];
inline bool ThetaSnippetScoreConfig::has_num_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThetaSnippetScoreConfig::set_has_num_items() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThetaSnippetScoreConfig::clear_has_num_items() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThetaSnippetScoreConfig::clear_num_items() {
  num_items_ = 10;
  clear_has_num_items();
}
inline ::google::protobuf::int32 ThetaSnippetScoreConfig::num_items() const {
  // @@protoc_insertion_point(field_get:artm.ThetaSnippetScoreConfig.num_items)
  return num_items_;
}
inline void ThetaSnippetScoreConfig::set_num_items(::google::protobuf::int32 value) {
  set_has_num_items();
  num_items_ = value;
  // @@protoc_insertion_point(field_set:artm.ThetaSnippetScoreConfig.num_items)
}

// -------------------------------------------------------------------

// ThetaSnippetScore

// repeated int32 item_id = 1;
inline int ThetaSnippetScore::item_id_size() const {
  return item_id_.size();
}
inline void ThetaSnippetScore::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 ThetaSnippetScore::item_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaSnippetScore.item_id)
  return item_id_.Get(index);
}
inline void ThetaSnippetScore::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ThetaSnippetScore.item_id)
}
inline void ThetaSnippetScore::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ThetaSnippetScore.item_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ThetaSnippetScore::item_id() const {
  // @@protoc_insertion_point(field_list:artm.ThetaSnippetScore.item_id)
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ThetaSnippetScore::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaSnippetScore.item_id)
  return &item_id_;
}

// repeated .artm.FloatArray values = 2;
inline int ThetaSnippetScore::values_size() const {
  return values_.size();
}
inline void ThetaSnippetScore::clear_values() {
  values_.Clear();
}
inline const ::artm::FloatArray& ThetaSnippetScore::values(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaSnippetScore.values)
  return values_.Get(index);
}
inline ::artm::FloatArray* ThetaSnippetScore::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ThetaSnippetScore.values)
  return values_.Mutable(index);
}
inline ::artm::FloatArray* ThetaSnippetScore::add_values() {
  // @@protoc_insertion_point(field_add:artm.ThetaSnippetScore.values)
  return values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
ThetaSnippetScore::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaSnippetScore.values)
  return &values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
ThetaSnippetScore::values() const {
  // @@protoc_insertion_point(field_list:artm.ThetaSnippetScore.values)
  return values_;
}

// -------------------------------------------------------------------

// TopicKernelScoreConfig

// optional float eps = 1 [default = 1e-37];
inline bool TopicKernelScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicKernelScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicKernelScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicKernelScoreConfig::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
inline float TopicKernelScoreConfig::eps() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScoreConfig.eps)
  return eps_;
}
inline void TopicKernelScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScoreConfig.eps)
}

// optional string class_id = 2 [default = "@default_class"];
inline bool TopicKernelScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicKernelScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicKernelScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicKernelScoreConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
inline const ::std::string& TopicKernelScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScoreConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
inline void TopicKernelScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScoreConfig.class_id)
}
inline void TopicKernelScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TopicKernelScoreConfig.class_id)
}
inline void TopicKernelScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TopicKernelScoreConfig.class_id)
}
inline ::std::string* TopicKernelScoreConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.TopicKernelScoreConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
inline ::std::string* TopicKernelScoreConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.TopicKernelScoreConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
inline void TopicKernelScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.TopicKernelScoreConfig.class_id)
}

// repeated string topic_name = 3;
inline int TopicKernelScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void TopicKernelScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopicKernelScoreConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScoreConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* TopicKernelScoreConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicKernelScoreConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void TopicKernelScoreConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicKernelScoreConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicKernelScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicKernelScoreConfig.topic_name)
}
inline void TopicKernelScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicKernelScoreConfig.topic_name)
}
inline ::std::string* TopicKernelScoreConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicKernelScoreConfig.topic_name)
  return topic_name_.Add();
}
inline void TopicKernelScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScoreConfig.topic_name)
}
inline void TopicKernelScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicKernelScoreConfig.topic_name)
}
inline void TopicKernelScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicKernelScoreConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicKernelScoreConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScoreConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicKernelScoreConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScoreConfig.topic_name)
  return &topic_name_;
}

// optional float probability_mass_threshold = 4 [default = 0.1];
inline bool TopicKernelScoreConfig::has_probability_mass_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopicKernelScoreConfig::set_has_probability_mass_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopicKernelScoreConfig::clear_has_probability_mass_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopicKernelScoreConfig::clear_probability_mass_threshold() {
  probability_mass_threshold_ = 0.1f;
  clear_has_probability_mass_threshold();
}
inline float TopicKernelScoreConfig::probability_mass_threshold() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScoreConfig.probability_mass_threshold)
  return probability_mass_threshold_;
}
inline void TopicKernelScoreConfig::set_probability_mass_threshold(float value) {
  set_has_probability_mass_threshold();
  probability_mass_threshold_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScoreConfig.probability_mass_threshold)
}

// optional string cooccurrence_dictionary_name = 5;
inline bool TopicKernelScoreConfig::has_cooccurrence_dictionary_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopicKernelScoreConfig::set_has_cooccurrence_dictionary_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopicKernelScoreConfig::clear_has_cooccurrence_dictionary_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopicKernelScoreConfig::clear_cooccurrence_dictionary_name() {
  cooccurrence_dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooccurrence_dictionary_name();
}
inline const ::std::string& TopicKernelScoreConfig::cooccurrence_dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
  return cooccurrence_dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicKernelScoreConfig::set_cooccurrence_dictionary_name(const ::std::string& value) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
}
inline void TopicKernelScoreConfig::set_cooccurrence_dictionary_name(const char* value) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
}
inline void TopicKernelScoreConfig::set_cooccurrence_dictionary_name(const char* value, size_t size) {
  set_has_cooccurrence_dictionary_name();
  cooccurrence_dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
}
inline ::std::string* TopicKernelScoreConfig::mutable_cooccurrence_dictionary_name() {
  set_has_cooccurrence_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
  return cooccurrence_dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicKernelScoreConfig::release_cooccurrence_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
  clear_has_cooccurrence_dictionary_name();
  return cooccurrence_dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicKernelScoreConfig::set_allocated_cooccurrence_dictionary_name(::std::string* cooccurrence_dictionary_name) {
  if (cooccurrence_dictionary_name != NULL) {
    set_has_cooccurrence_dictionary_name();
  } else {
    clear_has_cooccurrence_dictionary_name();
  }
  cooccurrence_dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooccurrence_dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.TopicKernelScoreConfig.cooccurrence_dictionary_name)
}

// -------------------------------------------------------------------

// TopicKernelScore

// repeated float kernel_size = 1;
inline int TopicKernelScore::kernel_size_size() const {
  return kernel_size_.size();
}
inline void TopicKernelScore::clear_kernel_size() {
  kernel_size_.Clear();
}
inline float TopicKernelScore::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.kernel_size)
  return kernel_size_.Get(index);
}
inline void TopicKernelScore::set_kernel_size(int index, float value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.kernel_size)
}
inline void TopicKernelScore::add_kernel_size(float value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.kernel_size)
}
inline const ::google::protobuf::RepeatedField< float >&
TopicKernelScore::kernel_size() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< float >*
TopicKernelScore::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.kernel_size)
  return &kernel_size_;
}

// repeated float kernel_purity = 2;
inline int TopicKernelScore::kernel_purity_size() const {
  return kernel_purity_.size();
}
inline void TopicKernelScore::clear_kernel_purity() {
  kernel_purity_.Clear();
}
inline float TopicKernelScore::kernel_purity(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.kernel_purity)
  return kernel_purity_.Get(index);
}
inline void TopicKernelScore::set_kernel_purity(int index, float value) {
  kernel_purity_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.kernel_purity)
}
inline void TopicKernelScore::add_kernel_purity(float value) {
  kernel_purity_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.kernel_purity)
}
inline const ::google::protobuf::RepeatedField< float >&
TopicKernelScore::kernel_purity() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.kernel_purity)
  return kernel_purity_;
}
inline ::google::protobuf::RepeatedField< float >*
TopicKernelScore::mutable_kernel_purity() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.kernel_purity)
  return &kernel_purity_;
}

// repeated float kernel_contrast = 3;
inline int TopicKernelScore::kernel_contrast_size() const {
  return kernel_contrast_.size();
}
inline void TopicKernelScore::clear_kernel_contrast() {
  kernel_contrast_.Clear();
}
inline float TopicKernelScore::kernel_contrast(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.kernel_contrast)
  return kernel_contrast_.Get(index);
}
inline void TopicKernelScore::set_kernel_contrast(int index, float value) {
  kernel_contrast_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.kernel_contrast)
}
inline void TopicKernelScore::add_kernel_contrast(float value) {
  kernel_contrast_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.kernel_contrast)
}
inline const ::google::protobuf::RepeatedField< float >&
TopicKernelScore::kernel_contrast() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.kernel_contrast)
  return kernel_contrast_;
}
inline ::google::protobuf::RepeatedField< float >*
TopicKernelScore::mutable_kernel_contrast() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.kernel_contrast)
  return &kernel_contrast_;
}

// optional float average_kernel_size = 4;
inline bool TopicKernelScore::has_average_kernel_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopicKernelScore::set_has_average_kernel_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopicKernelScore::clear_has_average_kernel_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopicKernelScore::clear_average_kernel_size() {
  average_kernel_size_ = 0;
  clear_has_average_kernel_size();
}
inline float TopicKernelScore::average_kernel_size() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.average_kernel_size)
  return average_kernel_size_;
}
inline void TopicKernelScore::set_average_kernel_size(float value) {
  set_has_average_kernel_size();
  average_kernel_size_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.average_kernel_size)
}

// optional float average_kernel_purity = 5;
inline bool TopicKernelScore::has_average_kernel_purity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopicKernelScore::set_has_average_kernel_purity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopicKernelScore::clear_has_average_kernel_purity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopicKernelScore::clear_average_kernel_purity() {
  average_kernel_purity_ = 0;
  clear_has_average_kernel_purity();
}
inline float TopicKernelScore::average_kernel_purity() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.average_kernel_purity)
  return average_kernel_purity_;
}
inline void TopicKernelScore::set_average_kernel_purity(float value) {
  set_has_average_kernel_purity();
  average_kernel_purity_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.average_kernel_purity)
}

// optional float average_kernel_contrast = 6;
inline bool TopicKernelScore::has_average_kernel_contrast() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TopicKernelScore::set_has_average_kernel_contrast() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TopicKernelScore::clear_has_average_kernel_contrast() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TopicKernelScore::clear_average_kernel_contrast() {
  average_kernel_contrast_ = 0;
  clear_has_average_kernel_contrast();
}
inline float TopicKernelScore::average_kernel_contrast() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.average_kernel_contrast)
  return average_kernel_contrast_;
}
inline void TopicKernelScore::set_average_kernel_contrast(float value) {
  set_has_average_kernel_contrast();
  average_kernel_contrast_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.average_kernel_contrast)
}

// repeated float coherence = 7;
inline int TopicKernelScore::coherence_size() const {
  return coherence_.size();
}
inline void TopicKernelScore::clear_coherence() {
  coherence_.Clear();
}
inline float TopicKernelScore::coherence(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.coherence)
  return coherence_.Get(index);
}
inline void TopicKernelScore::set_coherence(int index, float value) {
  coherence_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.coherence)
}
inline void TopicKernelScore::add_coherence(float value) {
  coherence_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.coherence)
}
inline const ::google::protobuf::RepeatedField< float >&
TopicKernelScore::coherence() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.coherence)
  return coherence_;
}
inline ::google::protobuf::RepeatedField< float >*
TopicKernelScore::mutable_coherence() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.coherence)
  return &coherence_;
}

// optional float average_coherence = 8;
inline bool TopicKernelScore::has_average_coherence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TopicKernelScore::set_has_average_coherence() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TopicKernelScore::clear_has_average_coherence() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TopicKernelScore::clear_average_coherence() {
  average_coherence_ = 0;
  clear_has_average_coherence();
}
inline float TopicKernelScore::average_coherence() const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.average_coherence)
  return average_coherence_;
}
inline void TopicKernelScore::set_average_coherence(float value) {
  set_has_average_coherence();
  average_coherence_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.average_coherence)
}

// repeated .artm.StringArray kernel_tokens = 9;
inline int TopicKernelScore::kernel_tokens_size() const {
  return kernel_tokens_.size();
}
inline void TopicKernelScore::clear_kernel_tokens() {
  kernel_tokens_.Clear();
}
inline const ::artm::StringArray& TopicKernelScore::kernel_tokens(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.kernel_tokens)
  return kernel_tokens_.Get(index);
}
inline ::artm::StringArray* TopicKernelScore::mutable_kernel_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicKernelScore.kernel_tokens)
  return kernel_tokens_.Mutable(index);
}
inline ::artm::StringArray* TopicKernelScore::add_kernel_tokens() {
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.kernel_tokens)
  return kernel_tokens_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::StringArray >*
TopicKernelScore::mutable_kernel_tokens() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.kernel_tokens)
  return &kernel_tokens_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::StringArray >&
TopicKernelScore::kernel_tokens() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.kernel_tokens)
  return kernel_tokens_;
}

// repeated string topic_name = 10;
inline int TopicKernelScore::topic_name_size() const {
  return topic_name_.size();
}
inline void TopicKernelScore::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopicKernelScore::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicKernelScore.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* TopicKernelScore::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicKernelScore.topic_name)
  return topic_name_.Mutable(index);
}
inline void TopicKernelScore::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicKernelScore.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicKernelScore::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicKernelScore.topic_name)
}
inline void TopicKernelScore::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicKernelScore.topic_name)
}
inline ::std::string* TopicKernelScore::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicKernelScore.topic_name)
  return topic_name_.Add();
}
inline void TopicKernelScore::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicKernelScore.topic_name)
}
inline void TopicKernelScore::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicKernelScore.topic_name)
}
inline void TopicKernelScore::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicKernelScore.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicKernelScore::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicKernelScore.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicKernelScore::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicKernelScore.topic_name)
  return &topic_name_;
}

// -------------------------------------------------------------------

// TopicMassPhiScoreConfig

// optional float eps = 1 [default = 1e-37];
inline bool TopicMassPhiScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicMassPhiScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicMassPhiScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicMassPhiScoreConfig::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
inline float TopicMassPhiScoreConfig::eps() const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScoreConfig.eps)
  return eps_;
}
inline void TopicMassPhiScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScoreConfig.eps)
}

// repeated string class_id = 2;
inline int TopicMassPhiScoreConfig::class_id_size() const {
  return class_id_.size();
}
inline void TopicMassPhiScoreConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& TopicMassPhiScoreConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScoreConfig.class_id)
  return class_id_.Get(index);
}
inline ::std::string* TopicMassPhiScoreConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicMassPhiScoreConfig.class_id)
  return class_id_.Mutable(index);
}
inline void TopicMassPhiScoreConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScoreConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void TopicMassPhiScoreConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicMassPhiScoreConfig.class_id)
}
inline void TopicMassPhiScoreConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicMassPhiScoreConfig.class_id)
}
inline ::std::string* TopicMassPhiScoreConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicMassPhiScoreConfig.class_id)
  return class_id_.Add();
}
inline void TopicMassPhiScoreConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicMassPhiScoreConfig.class_id)
}
inline void TopicMassPhiScoreConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicMassPhiScoreConfig.class_id)
}
inline void TopicMassPhiScoreConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicMassPhiScoreConfig.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicMassPhiScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.TopicMassPhiScoreConfig.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicMassPhiScoreConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicMassPhiScoreConfig.class_id)
  return &class_id_;
}

// repeated string topic_name = 3;
inline int TopicMassPhiScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void TopicMassPhiScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopicMassPhiScoreConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScoreConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* TopicMassPhiScoreConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicMassPhiScoreConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void TopicMassPhiScoreConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScoreConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicMassPhiScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicMassPhiScoreConfig.topic_name)
}
inline void TopicMassPhiScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicMassPhiScoreConfig.topic_name)
}
inline ::std::string* TopicMassPhiScoreConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicMassPhiScoreConfig.topic_name)
  return topic_name_.Add();
}
inline void TopicMassPhiScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicMassPhiScoreConfig.topic_name)
}
inline void TopicMassPhiScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicMassPhiScoreConfig.topic_name)
}
inline void TopicMassPhiScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicMassPhiScoreConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicMassPhiScoreConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicMassPhiScoreConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicMassPhiScoreConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicMassPhiScoreConfig.topic_name)
  return &topic_name_;
}

// -------------------------------------------------------------------

// TopicMassPhiScore

// optional float value = 1;
inline bool TopicMassPhiScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicMassPhiScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicMassPhiScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicMassPhiScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float TopicMassPhiScore::value() const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScore.value)
  return value_;
}
inline void TopicMassPhiScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScore.value)
}

// repeated string topic_name = 2;
inline int TopicMassPhiScore::topic_name_size() const {
  return topic_name_.size();
}
inline void TopicMassPhiScore::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopicMassPhiScore::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScore.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* TopicMassPhiScore::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicMassPhiScore.topic_name)
  return topic_name_.Mutable(index);
}
inline void TopicMassPhiScore::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScore.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicMassPhiScore::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicMassPhiScore.topic_name)
}
inline void TopicMassPhiScore::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicMassPhiScore.topic_name)
}
inline ::std::string* TopicMassPhiScore::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicMassPhiScore.topic_name)
  return topic_name_.Add();
}
inline void TopicMassPhiScore::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicMassPhiScore.topic_name)
}
inline void TopicMassPhiScore::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicMassPhiScore.topic_name)
}
inline void TopicMassPhiScore::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicMassPhiScore.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicMassPhiScore::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicMassPhiScore.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicMassPhiScore::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicMassPhiScore.topic_name)
  return &topic_name_;
}

// repeated float topic_ratio = 3;
inline int TopicMassPhiScore::topic_ratio_size() const {
  return topic_ratio_.size();
}
inline void TopicMassPhiScore::clear_topic_ratio() {
  topic_ratio_.Clear();
}
inline float TopicMassPhiScore::topic_ratio(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScore.topic_ratio)
  return topic_ratio_.Get(index);
}
inline void TopicMassPhiScore::set_topic_ratio(int index, float value) {
  topic_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScore.topic_ratio)
}
inline void TopicMassPhiScore::add_topic_ratio(float value) {
  topic_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicMassPhiScore.topic_ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
TopicMassPhiScore::topic_ratio() const {
  // @@protoc_insertion_point(field_list:artm.TopicMassPhiScore.topic_ratio)
  return topic_ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
TopicMassPhiScore::mutable_topic_ratio() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicMassPhiScore.topic_ratio)
  return &topic_ratio_;
}

// repeated float topic_mass = 4;
inline int TopicMassPhiScore::topic_mass_size() const {
  return topic_mass_.size();
}
inline void TopicMassPhiScore::clear_topic_mass() {
  topic_mass_.Clear();
}
inline float TopicMassPhiScore::topic_mass(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicMassPhiScore.topic_mass)
  return topic_mass_.Get(index);
}
inline void TopicMassPhiScore::set_topic_mass(int index, float value) {
  topic_mass_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.TopicMassPhiScore.topic_mass)
}
inline void TopicMassPhiScore::add_topic_mass(float value) {
  topic_mass_.Add(value);
  // @@protoc_insertion_point(field_add:artm.TopicMassPhiScore.topic_mass)
}
inline const ::google::protobuf::RepeatedField< float >&
TopicMassPhiScore::topic_mass() const {
  // @@protoc_insertion_point(field_list:artm.TopicMassPhiScore.topic_mass)
  return topic_mass_;
}
inline ::google::protobuf::RepeatedField< float >*
TopicMassPhiScore::mutable_topic_mass() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicMassPhiScore.topic_mass)
  return &topic_mass_;
}

// -------------------------------------------------------------------

// ClassPrecisionScoreConfig

// -------------------------------------------------------------------

// ClassPrecisionScore

// optional float value = 1;
inline bool ClassPrecisionScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassPrecisionScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassPrecisionScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassPrecisionScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float ClassPrecisionScore::value() const {
  // @@protoc_insertion_point(field_get:artm.ClassPrecisionScore.value)
  return value_;
}
inline void ClassPrecisionScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.ClassPrecisionScore.value)
}

// optional float error = 2;
inline bool ClassPrecisionScore::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClassPrecisionScore::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClassPrecisionScore::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClassPrecisionScore::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline float ClassPrecisionScore::error() const {
  // @@protoc_insertion_point(field_get:artm.ClassPrecisionScore.error)
  return error_;
}
inline void ClassPrecisionScore::set_error(float value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:artm.ClassPrecisionScore.error)
}

// optional float total = 3;
inline bool ClassPrecisionScore::has_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClassPrecisionScore::set_has_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClassPrecisionScore::clear_has_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClassPrecisionScore::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline float ClassPrecisionScore::total() const {
  // @@protoc_insertion_point(field_get:artm.ClassPrecisionScore.total)
  return total_;
}
inline void ClassPrecisionScore::set_total(float value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:artm.ClassPrecisionScore.total)
}

// -------------------------------------------------------------------

// PeakMemoryScoreConfig

// -------------------------------------------------------------------

// PeakMemoryScore

// optional int64 value = 1;
inline bool PeakMemoryScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeakMemoryScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeakMemoryScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeakMemoryScore::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 PeakMemoryScore::value() const {
  // @@protoc_insertion_point(field_get:artm.PeakMemoryScore.value)
  return value_;
}
inline void PeakMemoryScore::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.PeakMemoryScore.value)
}

// -------------------------------------------------------------------

// BackgroundTokensRatioScoreConfig

// optional float delta_threshold = 1 [default = 0.5];
inline bool BackgroundTokensRatioScoreConfig::has_delta_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundTokensRatioScoreConfig::set_has_delta_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackgroundTokensRatioScoreConfig::clear_has_delta_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackgroundTokensRatioScoreConfig::clear_delta_threshold() {
  delta_threshold_ = 0.5f;
  clear_has_delta_threshold();
}
inline float BackgroundTokensRatioScoreConfig::delta_threshold() const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScoreConfig.delta_threshold)
  return delta_threshold_;
}
inline void BackgroundTokensRatioScoreConfig::set_delta_threshold(float value) {
  set_has_delta_threshold();
  delta_threshold_ = value;
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScoreConfig.delta_threshold)
}

// optional bool save_tokens = 2 [default = true];
inline bool BackgroundTokensRatioScoreConfig::has_save_tokens() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundTokensRatioScoreConfig::set_has_save_tokens() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackgroundTokensRatioScoreConfig::clear_has_save_tokens() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackgroundTokensRatioScoreConfig::clear_save_tokens() {
  save_tokens_ = true;
  clear_has_save_tokens();
}
inline bool BackgroundTokensRatioScoreConfig::save_tokens() const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScoreConfig.save_tokens)
  return save_tokens_;
}
inline void BackgroundTokensRatioScoreConfig::set_save_tokens(bool value) {
  set_has_save_tokens();
  save_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScoreConfig.save_tokens)
}

// optional bool direct_kl = 3 [default = true];
inline bool BackgroundTokensRatioScoreConfig::has_direct_kl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundTokensRatioScoreConfig::set_has_direct_kl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackgroundTokensRatioScoreConfig::clear_has_direct_kl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackgroundTokensRatioScoreConfig::clear_direct_kl() {
  direct_kl_ = true;
  clear_has_direct_kl();
}
inline bool BackgroundTokensRatioScoreConfig::direct_kl() const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScoreConfig.direct_kl)
  return direct_kl_;
}
inline void BackgroundTokensRatioScoreConfig::set_direct_kl(bool value) {
  set_has_direct_kl();
  direct_kl_ = value;
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScoreConfig.direct_kl)
}

// optional string class_id = 4 [default = "@default_class"];
inline bool BackgroundTokensRatioScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackgroundTokensRatioScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackgroundTokensRatioScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackgroundTokensRatioScoreConfig::clear_class_id() {
  class_id_.ClearToDefaultNoArena(_default_class_id_);
  clear_has_class_id();
}
inline const ::std::string& BackgroundTokensRatioScoreConfig::class_id() const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScoreConfig.class_id)
  return class_id_.GetNoArena(_default_class_id_);
}
inline void BackgroundTokensRatioScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, value);
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScoreConfig.class_id)
}
inline void BackgroundTokensRatioScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.BackgroundTokensRatioScoreConfig.class_id)
}
inline void BackgroundTokensRatioScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(_default_class_id_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.BackgroundTokensRatioScoreConfig.class_id)
}
inline ::std::string* BackgroundTokensRatioScoreConfig::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.BackgroundTokensRatioScoreConfig.class_id)
  return class_id_.MutableNoArena(_default_class_id_);
}
inline ::std::string* BackgroundTokensRatioScoreConfig::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.BackgroundTokensRatioScoreConfig.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(_default_class_id_);
}
inline void BackgroundTokensRatioScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(_default_class_id_, class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.BackgroundTokensRatioScoreConfig.class_id)
}

// -------------------------------------------------------------------

// BackgroundTokensRatioScore

// optional float value = 1;
inline bool BackgroundTokensRatioScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundTokensRatioScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackgroundTokensRatioScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackgroundTokensRatioScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float BackgroundTokensRatioScore::value() const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScore.value)
  return value_;
}
inline void BackgroundTokensRatioScore::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScore.value)
}

// repeated string token = 2;
inline int BackgroundTokensRatioScore::token_size() const {
  return token_.size();
}
inline void BackgroundTokensRatioScore::clear_token() {
  token_.Clear();
}
inline const ::std::string& BackgroundTokensRatioScore::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.BackgroundTokensRatioScore.token)
  return token_.Get(index);
}
inline ::std::string* BackgroundTokensRatioScore::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.BackgroundTokensRatioScore.token)
  return token_.Mutable(index);
}
inline void BackgroundTokensRatioScore::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.BackgroundTokensRatioScore.token)
  token_.Mutable(index)->assign(value);
}
inline void BackgroundTokensRatioScore::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.BackgroundTokensRatioScore.token)
}
inline void BackgroundTokensRatioScore::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.BackgroundTokensRatioScore.token)
}
inline ::std::string* BackgroundTokensRatioScore::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.BackgroundTokensRatioScore.token)
  return token_.Add();
}
inline void BackgroundTokensRatioScore::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.BackgroundTokensRatioScore.token)
}
inline void BackgroundTokensRatioScore::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.BackgroundTokensRatioScore.token)
}
inline void BackgroundTokensRatioScore::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.BackgroundTokensRatioScore.token)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BackgroundTokensRatioScore::token() const {
  // @@protoc_insertion_point(field_list:artm.BackgroundTokensRatioScore.token)
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BackgroundTokensRatioScore::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.BackgroundTokensRatioScore.token)
  return &token_;
}

// -------------------------------------------------------------------

// TopicModel

// optional string name = 1 [default = "@model"];
inline bool TopicModel::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicModel::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicModel::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicModel::clear_name() {
  name_.ClearToDefaultNoArena(_default_name_);
  clear_has_name();
}
inline const ::std::string& TopicModel::name() const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.name)
  return name_.GetNoArena(_default_name_);
}
inline void TopicModel::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(_default_name_, value);
  // @@protoc_insertion_point(field_set:artm.TopicModel.name)
}
inline void TopicModel::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(_default_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TopicModel.name)
}
inline void TopicModel::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(_default_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TopicModel.name)
}
inline ::std::string* TopicModel::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.name)
  return name_.MutableNoArena(_default_name_);
}
inline ::std::string* TopicModel::release_name() {
  // @@protoc_insertion_point(field_release:artm.TopicModel.name)
  clear_has_name();
  return name_.ReleaseNoArena(_default_name_);
}
inline void TopicModel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(_default_name_, name);
  // @@protoc_insertion_point(field_set_allocated:artm.TopicModel.name)
}

// optional int32 num_topics = 2;
inline bool TopicModel::has_num_topics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicModel::set_has_num_topics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicModel::clear_has_num_topics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicModel::clear_num_topics() {
  num_topics_ = 0;
  clear_has_num_topics();
}
inline ::google::protobuf::int32 TopicModel::num_topics() const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.num_topics)
  return num_topics_;
}
inline void TopicModel::set_num_topics(::google::protobuf::int32 value) {
  set_has_num_topics();
  num_topics_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicModel.num_topics)
}

// repeated string topic_name = 3;
inline int TopicModel::topic_name_size() const {
  return topic_name_.size();
}
inline void TopicModel::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopicModel::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* TopicModel::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.topic_name)
  return topic_name_.Mutable(index);
}
inline void TopicModel::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicModel.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicModel::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicModel.topic_name)
}
inline void TopicModel::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicModel.topic_name)
}
inline ::std::string* TopicModel::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicModel.topic_name)
  return topic_name_.Add();
}
inline void TopicModel::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicModel.topic_name)
}
inline void TopicModel::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicModel.topic_name)
}
inline void TopicModel::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicModel.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicModel::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.TopicModel.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicModel::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicModel.topic_name)
  return &topic_name_;
}

// repeated string token = 4;
inline int TopicModel::token_size() const {
  return token_.size();
}
inline void TopicModel::clear_token() {
  token_.Clear();
}
inline const ::std::string& TopicModel::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.token)
  return token_.Get(index);
}
inline ::std::string* TopicModel::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.token)
  return token_.Mutable(index);
}
inline void TopicModel::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicModel.token)
  token_.Mutable(index)->assign(value);
}
inline void TopicModel::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicModel.token)
}
inline void TopicModel::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicModel.token)
}
inline ::std::string* TopicModel::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicModel.token)
  return token_.Add();
}
inline void TopicModel::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicModel.token)
}
inline void TopicModel::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicModel.token)
}
inline void TopicModel::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicModel.token)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicModel::token() const {
  // @@protoc_insertion_point(field_list:artm.TopicModel.token)
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicModel::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicModel.token)
  return &token_;
}

// repeated .artm.FloatArray token_weights = 5;
inline int TopicModel::token_weights_size() const {
  return token_weights_.size();
}
inline void TopicModel::clear_token_weights() {
  token_weights_.Clear();
}
inline const ::artm::FloatArray& TopicModel::token_weights(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.token_weights)
  return token_weights_.Get(index);
}
inline ::artm::FloatArray* TopicModel::mutable_token_weights(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.token_weights)
  return token_weights_.Mutable(index);
}
inline ::artm::FloatArray* TopicModel::add_token_weights() {
  // @@protoc_insertion_point(field_add:artm.TopicModel.token_weights)
  return token_weights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
TopicModel::mutable_token_weights() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicModel.token_weights)
  return &token_weights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
TopicModel::token_weights() const {
  // @@protoc_insertion_point(field_list:artm.TopicModel.token_weights)
  return token_weights_;
}

// repeated string class_id = 6;
inline int TopicModel::class_id_size() const {
  return class_id_.size();
}
inline void TopicModel::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& TopicModel::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.class_id)
  return class_id_.Get(index);
}
inline ::std::string* TopicModel::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.class_id)
  return class_id_.Mutable(index);
}
inline void TopicModel::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TopicModel.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void TopicModel::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TopicModel.class_id)
}
inline void TopicModel::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TopicModel.class_id)
}
inline ::std::string* TopicModel::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.TopicModel.class_id)
  return class_id_.Add();
}
inline void TopicModel::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TopicModel.class_id)
}
inline void TopicModel::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TopicModel.class_id)
}
inline void TopicModel::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TopicModel.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicModel::class_id() const {
  // @@protoc_insertion_point(field_list:artm.TopicModel.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicModel::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicModel.class_id)
  return &class_id_;
}

// repeated .artm.IntArray topic_indices = 8;
inline int TopicModel::topic_indices_size() const {
  return topic_indices_.size();
}
inline void TopicModel::clear_topic_indices() {
  topic_indices_.Clear();
}
inline const ::artm::IntArray& TopicModel::topic_indices(int index) const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.topic_indices)
  return topic_indices_.Get(index);
}
inline ::artm::IntArray* TopicModel::mutable_topic_indices(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TopicModel.topic_indices)
  return topic_indices_.Mutable(index);
}
inline ::artm::IntArray* TopicModel::add_topic_indices() {
  // @@protoc_insertion_point(field_add:artm.TopicModel.topic_indices)
  return topic_indices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
TopicModel::mutable_topic_indices() {
  // @@protoc_insertion_point(field_mutable_list:artm.TopicModel.topic_indices)
  return &topic_indices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
TopicModel::topic_indices() const {
  // @@protoc_insertion_point(field_list:artm.TopicModel.topic_indices)
  return topic_indices_;
}

// optional int64 num_values = 9;
inline bool TopicModel::has_num_values() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TopicModel::set_has_num_values() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TopicModel::clear_has_num_values() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TopicModel::clear_num_values() {
  num_values_ = GOOGLE_LONGLONG(0);
  clear_has_num_values();
}
inline ::google::protobuf::int64 TopicModel::num_values() const {
  // @@protoc_insertion_point(field_get:artm.TopicModel.num_values)
  return num_values_;
}
inline void TopicModel::set_num_values(::google::protobuf::int64 value) {
  set_has_num_values();
  num_values_ = value;
  // @@protoc_insertion_point(field_set:artm.TopicModel.num_values)
}

// -------------------------------------------------------------------

// ThetaMatrix

// repeated int32 item_id = 2;
inline int ThetaMatrix::item_id_size() const {
  return item_id_.size();
}
inline void ThetaMatrix::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 ThetaMatrix::item_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.item_id)
  return item_id_.Get(index);
}
inline void ThetaMatrix::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ThetaMatrix.item_id)
}
inline void ThetaMatrix::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ThetaMatrix.item_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ThetaMatrix::item_id() const {
  // @@protoc_insertion_point(field_list:artm.ThetaMatrix.item_id)
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ThetaMatrix::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaMatrix.item_id)
  return &item_id_;
}

// repeated .artm.FloatArray item_weights = 3;
inline int ThetaMatrix::item_weights_size() const {
  return item_weights_.size();
}
inline void ThetaMatrix::clear_item_weights() {
  item_weights_.Clear();
}
inline const ::artm::FloatArray& ThetaMatrix::item_weights(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.item_weights)
  return item_weights_.Get(index);
}
inline ::artm::FloatArray* ThetaMatrix::mutable_item_weights(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ThetaMatrix.item_weights)
  return item_weights_.Mutable(index);
}
inline ::artm::FloatArray* ThetaMatrix::add_item_weights() {
  // @@protoc_insertion_point(field_add:artm.ThetaMatrix.item_weights)
  return item_weights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
ThetaMatrix::mutable_item_weights() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaMatrix.item_weights)
  return &item_weights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
ThetaMatrix::item_weights() const {
  // @@protoc_insertion_point(field_list:artm.ThetaMatrix.item_weights)
  return item_weights_;
}

// repeated string topic_name = 4;
inline int ThetaMatrix::topic_name_size() const {
  return topic_name_.size();
}
inline void ThetaMatrix::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& ThetaMatrix::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* ThetaMatrix::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ThetaMatrix.topic_name)
  return topic_name_.Mutable(index);
}
inline void ThetaMatrix::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ThetaMatrix.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void ThetaMatrix::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ThetaMatrix.topic_name)
}
inline void ThetaMatrix::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ThetaMatrix.topic_name)
}
inline ::std::string* ThetaMatrix::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.ThetaMatrix.topic_name)
  return topic_name_.Add();
}
inline void ThetaMatrix::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ThetaMatrix.topic_name)
}
inline void ThetaMatrix::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ThetaMatrix.topic_name)
}
inline void ThetaMatrix::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ThetaMatrix.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ThetaMatrix::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.ThetaMatrix.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ThetaMatrix::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaMatrix.topic_name)
  return &topic_name_;
}

// optional int32 num_topics = 5;
inline bool ThetaMatrix::has_num_topics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThetaMatrix::set_has_num_topics() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThetaMatrix::clear_has_num_topics() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThetaMatrix::clear_num_topics() {
  num_topics_ = 0;
  clear_has_num_topics();
}
inline ::google::protobuf::int32 ThetaMatrix::num_topics() const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.num_topics)
  return num_topics_;
}
inline void ThetaMatrix::set_num_topics(::google::protobuf::int32 value) {
  set_has_num_topics();
  num_topics_ = value;
  // @@protoc_insertion_point(field_set:artm.ThetaMatrix.num_topics)
}

// repeated string item_title = 6;
inline int ThetaMatrix::item_title_size() const {
  return item_title_.size();
}
inline void ThetaMatrix::clear_item_title() {
  item_title_.Clear();
}
inline const ::std::string& ThetaMatrix::item_title(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.item_title)
  return item_title_.Get(index);
}
inline ::std::string* ThetaMatrix::mutable_item_title(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ThetaMatrix.item_title)
  return item_title_.Mutable(index);
}
inline void ThetaMatrix::set_item_title(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ThetaMatrix.item_title)
  item_title_.Mutable(index)->assign(value);
}
inline void ThetaMatrix::set_item_title(int index, const char* value) {
  item_title_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ThetaMatrix.item_title)
}
inline void ThetaMatrix::set_item_title(int index, const char* value, size_t size) {
  item_title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ThetaMatrix.item_title)
}
inline ::std::string* ThetaMatrix::add_item_title() {
  // @@protoc_insertion_point(field_add_mutable:artm.ThetaMatrix.item_title)
  return item_title_.Add();
}
inline void ThetaMatrix::add_item_title(const ::std::string& value) {
  item_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ThetaMatrix.item_title)
}
inline void ThetaMatrix::add_item_title(const char* value) {
  item_title_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ThetaMatrix.item_title)
}
inline void ThetaMatrix::add_item_title(const char* value, size_t size) {
  item_title_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ThetaMatrix.item_title)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ThetaMatrix::item_title() const {
  // @@protoc_insertion_point(field_list:artm.ThetaMatrix.item_title)
  return item_title_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ThetaMatrix::mutable_item_title() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaMatrix.item_title)
  return &item_title_;
}

// repeated .artm.IntArray topic_indices = 7;
inline int ThetaMatrix::topic_indices_size() const {
  return topic_indices_.size();
}
inline void ThetaMatrix::clear_topic_indices() {
  topic_indices_.Clear();
}
inline const ::artm::IntArray& ThetaMatrix::topic_indices(int index) const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.topic_indices)
  return topic_indices_.Get(index);
}
inline ::artm::IntArray* ThetaMatrix::mutable_topic_indices(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ThetaMatrix.topic_indices)
  return topic_indices_.Mutable(index);
}
inline ::artm::IntArray* ThetaMatrix::add_topic_indices() {
  // @@protoc_insertion_point(field_add:artm.ThetaMatrix.topic_indices)
  return topic_indices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
ThetaMatrix::mutable_topic_indices() {
  // @@protoc_insertion_point(field_mutable_list:artm.ThetaMatrix.topic_indices)
  return &topic_indices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
ThetaMatrix::topic_indices() const {
  // @@protoc_insertion_point(field_list:artm.ThetaMatrix.topic_indices)
  return topic_indices_;
}

// optional int64 num_values = 8;
inline bool ThetaMatrix::has_num_values() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ThetaMatrix::set_has_num_values() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ThetaMatrix::clear_has_num_values() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ThetaMatrix::clear_num_values() {
  num_values_ = GOOGLE_LONGLONG(0);
  clear_has_num_values();
}
inline ::google::protobuf::int64 ThetaMatrix::num_values() const {
  // @@protoc_insertion_point(field_get:artm.ThetaMatrix.num_values)
  return num_values_;
}
inline void ThetaMatrix::set_num_values(::google::protobuf::int64 value) {
  set_has_num_values();
  num_values_ = value;
  // @@protoc_insertion_point(field_set:artm.ThetaMatrix.num_values)
}

// -------------------------------------------------------------------

// CollectionParserConfig

// optional .artm.CollectionParserConfig.CollectionFormat format = 1 [default = BagOfWordsUci];
inline bool CollectionParserConfig::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectionParserConfig::set_has_format() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollectionParserConfig::clear_has_format() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollectionParserConfig::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::artm::CollectionParserConfig_CollectionFormat CollectionParserConfig::format() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.format)
  return static_cast< ::artm::CollectionParserConfig_CollectionFormat >(format_);
}
inline void CollectionParserConfig::set_format(::artm::CollectionParserConfig_CollectionFormat value) {
  assert(::artm::CollectionParserConfig_CollectionFormat_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.format)
}

// optional string docword_file_path = 2;
inline bool CollectionParserConfig::has_docword_file_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollectionParserConfig::set_has_docword_file_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollectionParserConfig::clear_has_docword_file_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CollectionParserConfig::clear_docword_file_path() {
  docword_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_docword_file_path();
}
inline const ::std::string& CollectionParserConfig::docword_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.docword_file_path)
  return docword_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_docword_file_path(const ::std::string& value) {
  set_has_docword_file_path();
  docword_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.docword_file_path)
}
inline void CollectionParserConfig::set_docword_file_path(const char* value) {
  set_has_docword_file_path();
  docword_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.docword_file_path)
}
inline void CollectionParserConfig::set_docword_file_path(const char* value, size_t size) {
  set_has_docword_file_path();
  docword_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.docword_file_path)
}
inline ::std::string* CollectionParserConfig::mutable_docword_file_path() {
  set_has_docword_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.docword_file_path)
  return docword_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectionParserConfig::release_docword_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.docword_file_path)
  clear_has_docword_file_path();
  return docword_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_allocated_docword_file_path(::std::string* docword_file_path) {
  if (docword_file_path != NULL) {
    set_has_docword_file_path();
  } else {
    clear_has_docword_file_path();
  }
  docword_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docword_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.docword_file_path)
}

// optional string vocab_file_path = 3;
inline bool CollectionParserConfig::has_vocab_file_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CollectionParserConfig::set_has_vocab_file_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CollectionParserConfig::clear_has_vocab_file_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CollectionParserConfig::clear_vocab_file_path() {
  vocab_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vocab_file_path();
}
inline const ::std::string& CollectionParserConfig::vocab_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.vocab_file_path)
  return vocab_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_vocab_file_path(const ::std::string& value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.vocab_file_path)
}
inline void CollectionParserConfig::set_vocab_file_path(const char* value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.vocab_file_path)
}
inline void CollectionParserConfig::set_vocab_file_path(const char* value, size_t size) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.vocab_file_path)
}
inline ::std::string* CollectionParserConfig::mutable_vocab_file_path() {
  set_has_vocab_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.vocab_file_path)
  return vocab_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectionParserConfig::release_vocab_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.vocab_file_path)
  clear_has_vocab_file_path();
  return vocab_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_allocated_vocab_file_path(::std::string* vocab_file_path) {
  if (vocab_file_path != NULL) {
    set_has_vocab_file_path();
  } else {
    clear_has_vocab_file_path();
  }
  vocab_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vocab_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.vocab_file_path)
}

// optional string target_folder = 4;
inline bool CollectionParserConfig::has_target_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CollectionParserConfig::set_has_target_folder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CollectionParserConfig::clear_has_target_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CollectionParserConfig::clear_target_folder() {
  target_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_folder();
}
inline const ::std::string& CollectionParserConfig::target_folder() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.target_folder)
  return target_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_target_folder(const ::std::string& value) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.target_folder)
}
inline void CollectionParserConfig::set_target_folder(const char* value) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.target_folder)
}
inline void CollectionParserConfig::set_target_folder(const char* value, size_t size) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.target_folder)
}
inline ::std::string* CollectionParserConfig::mutable_target_folder() {
  set_has_target_folder();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.target_folder)
  return target_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectionParserConfig::release_target_folder() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.target_folder)
  clear_has_target_folder();
  return target_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_allocated_target_folder(::std::string* target_folder) {
  if (target_folder != NULL) {
    set_has_target_folder();
  } else {
    clear_has_target_folder();
  }
  target_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_folder);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.target_folder)
}

// optional int32 num_items_per_batch = 5 [default = 1000];
inline bool CollectionParserConfig::has_num_items_per_batch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CollectionParserConfig::set_has_num_items_per_batch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CollectionParserConfig::clear_has_num_items_per_batch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CollectionParserConfig::clear_num_items_per_batch() {
  num_items_per_batch_ = 1000;
  clear_has_num_items_per_batch();
}
inline ::google::protobuf::int32 CollectionParserConfig::num_items_per_batch() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.num_items_per_batch)
  return num_items_per_batch_;
}
inline void CollectionParserConfig::set_num_items_per_batch(::google::protobuf::int32 value) {
  set_has_num_items_per_batch();
  num_items_per_batch_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.num_items_per_batch)
}

// optional bool use_unity_based_indices = 6 [default = true];
inline bool CollectionParserConfig::has_use_unity_based_indices() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CollectionParserConfig::set_has_use_unity_based_indices() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CollectionParserConfig::clear_has_use_unity_based_indices() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CollectionParserConfig::clear_use_unity_based_indices() {
  use_unity_based_indices_ = true;
  clear_has_use_unity_based_indices();
}
inline bool CollectionParserConfig::use_unity_based_indices() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.use_unity_based_indices)
  return use_unity_based_indices_;
}
inline void CollectionParserConfig::set_use_unity_based_indices(bool value) {
  set_has_use_unity_based_indices();
  use_unity_based_indices_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.use_unity_based_indices)
}

// optional .artm.CollectionParserConfig.BatchNameType name_type = 7 [default = Guid];
inline bool CollectionParserConfig::has_name_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CollectionParserConfig::set_has_name_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CollectionParserConfig::clear_has_name_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CollectionParserConfig::clear_name_type() {
  name_type_ = 0;
  clear_has_name_type();
}
inline ::artm::CollectionParserConfig_BatchNameType CollectionParserConfig::name_type() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.name_type)
  return static_cast< ::artm::CollectionParserConfig_BatchNameType >(name_type_);
}
inline void CollectionParserConfig::set_name_type(::artm::CollectionParserConfig_BatchNameType value) {
  assert(::artm::CollectionParserConfig_BatchNameType_IsValid(value));
  set_has_name_type();
  name_type_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.name_type)
}

// optional int32 num_threads = 8;
inline bool CollectionParserConfig::has_num_threads() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CollectionParserConfig::set_has_num_threads() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CollectionParserConfig::clear_has_num_threads() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CollectionParserConfig::clear_num_threads() {
  num_threads_ = 0;
  clear_has_num_threads();
}
inline ::google::protobuf::int32 CollectionParserConfig::num_threads() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.num_threads)
  return num_threads_;
}
inline void CollectionParserConfig::set_num_threads(::google::protobuf::int32 value) {
  set_has_num_threads();
  num_threads_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.num_threads)
}

// repeated string class_id = 9;
inline int CollectionParserConfig::class_id_size() const {
  return class_id_.size();
}
inline void CollectionParserConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& CollectionParserConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.class_id)
  return class_id_.Get(index);
}
inline ::std::string* CollectionParserConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.class_id)
  return class_id_.Mutable(index);
}
inline void CollectionParserConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void CollectionParserConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.class_id)
}
inline void CollectionParserConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.class_id)
}
inline ::std::string* CollectionParserConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.CollectionParserConfig.class_id)
  return class_id_.Add();
}
inline void CollectionParserConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.CollectionParserConfig.class_id)
}
inline void CollectionParserConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.CollectionParserConfig.class_id)
}
inline void CollectionParserConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.CollectionParserConfig.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CollectionParserConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.CollectionParserConfig.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CollectionParserConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.CollectionParserConfig.class_id)
  return &class_id_;
}

// optional string cooc_tf_file_path = 10;
inline bool CollectionParserConfig::has_cooc_tf_file_path() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CollectionParserConfig::set_has_cooc_tf_file_path() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CollectionParserConfig::clear_has_cooc_tf_file_path() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CollectionParserConfig::clear_cooc_tf_file_path() {
  cooc_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooc_tf_file_path();
}
inline const ::std::string& CollectionParserConfig::cooc_tf_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.cooc_tf_file_path)
  return cooc_tf_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_cooc_tf_file_path(const ::std::string& value) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.cooc_tf_file_path)
}
inline void CollectionParserConfig::set_cooc_tf_file_path(const char* value) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.cooc_tf_file_path)
}
inline void CollectionParserConfig::set_cooc_tf_file_path(const char* value, size_t size) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.cooc_tf_file_path)
}
inline ::std::string* CollectionParserConfig::mutable_cooc_tf_file_path() {
  set_has_cooc_tf_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.cooc_tf_file_path)
  return cooc_tf_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectionParserConfig::release_cooc_tf_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.cooc_tf_file_path)
  clear_has_cooc_tf_file_path();
  return cooc_tf_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_allocated_cooc_tf_file_path(::std::string* cooc_tf_file_path) {
  if (cooc_tf_file_path != NULL) {
    set_has_cooc_tf_file_path();
  } else {
    clear_has_cooc_tf_file_path();
  }
  cooc_tf_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooc_tf_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.cooc_tf_file_path)
}

// optional string cooc_df_file_path = 11;
inline bool CollectionParserConfig::has_cooc_df_file_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CollectionParserConfig::set_has_cooc_df_file_path() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CollectionParserConfig::clear_has_cooc_df_file_path() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CollectionParserConfig::clear_cooc_df_file_path() {
  cooc_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooc_df_file_path();
}
inline const ::std::string& CollectionParserConfig::cooc_df_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.cooc_df_file_path)
  return cooc_df_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_cooc_df_file_path(const ::std::string& value) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.cooc_df_file_path)
}
inline void CollectionParserConfig::set_cooc_df_file_path(const char* value) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.cooc_df_file_path)
}
inline void CollectionParserConfig::set_cooc_df_file_path(const char* value, size_t size) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.cooc_df_file_path)
}
inline ::std::string* CollectionParserConfig::mutable_cooc_df_file_path() {
  set_has_cooc_df_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.cooc_df_file_path)
  return cooc_df_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectionParserConfig::release_cooc_df_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.cooc_df_file_path)
  clear_has_cooc_df_file_path();
  return cooc_df_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_allocated_cooc_df_file_path(::std::string* cooc_df_file_path) {
  if (cooc_df_file_path != NULL) {
    set_has_cooc_df_file_path();
  } else {
    clear_has_cooc_df_file_path();
  }
  cooc_df_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooc_df_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.cooc_df_file_path)
}

// optional string ppmi_tf_file_path = 12;
inline bool CollectionParserConfig::has_ppmi_tf_file_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CollectionParserConfig::set_has_ppmi_tf_file_path() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CollectionParserConfig::clear_has_ppmi_tf_file_path() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CollectionParserConfig::clear_ppmi_tf_file_path() {
  ppmi_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ppmi_tf_file_path();
}
inline const ::std::string& CollectionParserConfig::ppmi_tf_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.ppmi_tf_file_path)
  return ppmi_tf_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_ppmi_tf_file_path(const ::std::string& value) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.ppmi_tf_file_path)
}
inline void CollectionParserConfig::set_ppmi_tf_file_path(const char* value) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.ppmi_tf_file_path)
}
inline void CollectionParserConfig::set_ppmi_tf_file_path(const char* value, size_t size) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.ppmi_tf_file_path)
}
inline ::std::string* CollectionParserConfig::mutable_ppmi_tf_file_path() {
  set_has_ppmi_tf_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.ppmi_tf_file_path)
  return ppmi_tf_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectionParserConfig::release_ppmi_tf_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.ppmi_tf_file_path)
  clear_has_ppmi_tf_file_path();
  return ppmi_tf_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_allocated_ppmi_tf_file_path(::std::string* ppmi_tf_file_path) {
  if (ppmi_tf_file_path != NULL) {
    set_has_ppmi_tf_file_path();
  } else {
    clear_has_ppmi_tf_file_path();
  }
  ppmi_tf_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppmi_tf_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.ppmi_tf_file_path)
}

// optional string ppmi_df_file_path = 13;
inline bool CollectionParserConfig::has_ppmi_df_file_path() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CollectionParserConfig::set_has_ppmi_df_file_path() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CollectionParserConfig::clear_has_ppmi_df_file_path() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CollectionParserConfig::clear_ppmi_df_file_path() {
  ppmi_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ppmi_df_file_path();
}
inline const ::std::string& CollectionParserConfig::ppmi_df_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.ppmi_df_file_path)
  return ppmi_df_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_ppmi_df_file_path(const ::std::string& value) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.ppmi_df_file_path)
}
inline void CollectionParserConfig::set_ppmi_df_file_path(const char* value) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CollectionParserConfig.ppmi_df_file_path)
}
inline void CollectionParserConfig::set_ppmi_df_file_path(const char* value, size_t size) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CollectionParserConfig.ppmi_df_file_path)
}
inline ::std::string* CollectionParserConfig::mutable_ppmi_df_file_path() {
  set_has_ppmi_df_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CollectionParserConfig.ppmi_df_file_path)
  return ppmi_df_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectionParserConfig::release_ppmi_df_file_path() {
  // @@protoc_insertion_point(field_release:artm.CollectionParserConfig.ppmi_df_file_path)
  clear_has_ppmi_df_file_path();
  return ppmi_df_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionParserConfig::set_allocated_ppmi_df_file_path(::std::string* ppmi_df_file_path) {
  if (ppmi_df_file_path != NULL) {
    set_has_ppmi_df_file_path();
  } else {
    clear_has_ppmi_df_file_path();
  }
  ppmi_df_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppmi_df_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CollectionParserConfig.ppmi_df_file_path)
}

// optional bool gather_cooc_tf = 14;
inline bool CollectionParserConfig::has_gather_cooc_tf() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CollectionParserConfig::set_has_gather_cooc_tf() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CollectionParserConfig::clear_has_gather_cooc_tf() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CollectionParserConfig::clear_gather_cooc_tf() {
  gather_cooc_tf_ = false;
  clear_has_gather_cooc_tf();
}
inline bool CollectionParserConfig::gather_cooc_tf() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.gather_cooc_tf)
  return gather_cooc_tf_;
}
inline void CollectionParserConfig::set_gather_cooc_tf(bool value) {
  set_has_gather_cooc_tf();
  gather_cooc_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.gather_cooc_tf)
}

// optional bool gather_cooc_df = 15;
inline bool CollectionParserConfig::has_gather_cooc_df() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CollectionParserConfig::set_has_gather_cooc_df() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CollectionParserConfig::clear_has_gather_cooc_df() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CollectionParserConfig::clear_gather_cooc_df() {
  gather_cooc_df_ = false;
  clear_has_gather_cooc_df();
}
inline bool CollectionParserConfig::gather_cooc_df() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.gather_cooc_df)
  return gather_cooc_df_;
}
inline void CollectionParserConfig::set_gather_cooc_df(bool value) {
  set_has_gather_cooc_df();
  gather_cooc_df_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.gather_cooc_df)
}

// optional bool gather_cooc = 16;
inline bool CollectionParserConfig::has_gather_cooc() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CollectionParserConfig::set_has_gather_cooc() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CollectionParserConfig::clear_has_gather_cooc() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CollectionParserConfig::clear_gather_cooc() {
  gather_cooc_ = false;
  clear_has_gather_cooc();
}
inline bool CollectionParserConfig::gather_cooc() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.gather_cooc)
  return gather_cooc_;
}
inline void CollectionParserConfig::set_gather_cooc(bool value) {
  set_has_gather_cooc();
  gather_cooc_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.gather_cooc)
}

// optional int32 cooc_window_width = 17 [default = 10];
inline bool CollectionParserConfig::has_cooc_window_width() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CollectionParserConfig::set_has_cooc_window_width() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CollectionParserConfig::clear_has_cooc_window_width() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CollectionParserConfig::clear_cooc_window_width() {
  cooc_window_width_ = 10;
  clear_has_cooc_window_width();
}
inline ::google::protobuf::int32 CollectionParserConfig::cooc_window_width() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.cooc_window_width)
  return cooc_window_width_;
}
inline void CollectionParserConfig::set_cooc_window_width(::google::protobuf::int32 value) {
  set_has_cooc_window_width();
  cooc_window_width_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.cooc_window_width)
}

// optional int32 cooc_min_tf = 18 [default = 1];
inline bool CollectionParserConfig::has_cooc_min_tf() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CollectionParserConfig::set_has_cooc_min_tf() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CollectionParserConfig::clear_has_cooc_min_tf() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CollectionParserConfig::clear_cooc_min_tf() {
  cooc_min_tf_ = 1;
  clear_has_cooc_min_tf();
}
inline ::google::protobuf::int32 CollectionParserConfig::cooc_min_tf() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.cooc_min_tf)
  return cooc_min_tf_;
}
inline void CollectionParserConfig::set_cooc_min_tf(::google::protobuf::int32 value) {
  set_has_cooc_min_tf();
  cooc_min_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.cooc_min_tf)
}

// optional int32 cooc_min_df = 19 [default = 1];
inline bool CollectionParserConfig::has_cooc_min_df() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CollectionParserConfig::set_has_cooc_min_df() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CollectionParserConfig::clear_has_cooc_min_df() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CollectionParserConfig::clear_cooc_min_df() {
  cooc_min_df_ = 1;
  clear_has_cooc_min_df();
}
inline ::google::protobuf::int32 CollectionParserConfig::cooc_min_df() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.cooc_min_df)
  return cooc_min_df_;
}
inline void CollectionParserConfig::set_cooc_min_df(::google::protobuf::int32 value) {
  set_has_cooc_min_df();
  cooc_min_df_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.cooc_min_df)
}

// optional bool store_symmetric_cooc_values = 20 [default = false];
inline bool CollectionParserConfig::has_store_symmetric_cooc_values() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CollectionParserConfig::set_has_store_symmetric_cooc_values() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CollectionParserConfig::clear_has_store_symmetric_cooc_values() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CollectionParserConfig::clear_store_symmetric_cooc_values() {
  store_symmetric_cooc_values_ = false;
  clear_has_store_symmetric_cooc_values();
}
inline bool CollectionParserConfig::store_symmetric_cooc_values() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserConfig.store_symmetric_cooc_values)
  return store_symmetric_cooc_values_;
}
inline void CollectionParserConfig::set_store_symmetric_cooc_values(bool value) {
  set_has_store_symmetric_cooc_values();
  store_symmetric_cooc_values_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserConfig.store_symmetric_cooc_values)
}

// -------------------------------------------------------------------

// CollectionParserInfo

// optional int64 num_items = 1;
inline bool CollectionParserInfo::has_num_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectionParserInfo::set_has_num_items() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollectionParserInfo::clear_has_num_items() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollectionParserInfo::clear_num_items() {
  num_items_ = GOOGLE_LONGLONG(0);
  clear_has_num_items();
}
inline ::google::protobuf::int64 CollectionParserInfo::num_items() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserInfo.num_items)
  return num_items_;
}
inline void CollectionParserInfo::set_num_items(::google::protobuf::int64 value) {
  set_has_num_items();
  num_items_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserInfo.num_items)
}

// optional int64 num_batches = 2;
inline bool CollectionParserInfo::has_num_batches() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollectionParserInfo::set_has_num_batches() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollectionParserInfo::clear_has_num_batches() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CollectionParserInfo::clear_num_batches() {
  num_batches_ = GOOGLE_LONGLONG(0);
  clear_has_num_batches();
}
inline ::google::protobuf::int64 CollectionParserInfo::num_batches() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserInfo.num_batches)
  return num_batches_;
}
inline void CollectionParserInfo::set_num_batches(::google::protobuf::int64 value) {
  set_has_num_batches();
  num_batches_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserInfo.num_batches)
}

// optional int64 dictionary_size = 3;
inline bool CollectionParserInfo::has_dictionary_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CollectionParserInfo::set_has_dictionary_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CollectionParserInfo::clear_has_dictionary_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CollectionParserInfo::clear_dictionary_size() {
  dictionary_size_ = GOOGLE_LONGLONG(0);
  clear_has_dictionary_size();
}
inline ::google::protobuf::int64 CollectionParserInfo::dictionary_size() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserInfo.dictionary_size)
  return dictionary_size_;
}
inline void CollectionParserInfo::set_dictionary_size(::google::protobuf::int64 value) {
  set_has_dictionary_size();
  dictionary_size_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserInfo.dictionary_size)
}

// optional int64 num_tokens = 4;
inline bool CollectionParserInfo::has_num_tokens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CollectionParserInfo::set_has_num_tokens() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CollectionParserInfo::clear_has_num_tokens() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CollectionParserInfo::clear_num_tokens() {
  num_tokens_ = GOOGLE_LONGLONG(0);
  clear_has_num_tokens();
}
inline ::google::protobuf::int64 CollectionParserInfo::num_tokens() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserInfo.num_tokens)
  return num_tokens_;
}
inline void CollectionParserInfo::set_num_tokens(::google::protobuf::int64 value) {
  set_has_num_tokens();
  num_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserInfo.num_tokens)
}

// optional float total_token_weight = 5;
inline bool CollectionParserInfo::has_total_token_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CollectionParserInfo::set_has_total_token_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CollectionParserInfo::clear_has_total_token_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CollectionParserInfo::clear_total_token_weight() {
  total_token_weight_ = 0;
  clear_has_total_token_weight();
}
inline float CollectionParserInfo::total_token_weight() const {
  // @@protoc_insertion_point(field_get:artm.CollectionParserInfo.total_token_weight)
  return total_token_weight_;
}
inline void CollectionParserInfo::set_total_token_weight(float value) {
  set_has_total_token_weight();
  total_token_weight_ = value;
  // @@protoc_insertion_point(field_set:artm.CollectionParserInfo.total_token_weight)
}

// -------------------------------------------------------------------

// CooccurrenceCollectorConfig

// optional bool gather_cooc = 1;
inline bool CooccurrenceCollectorConfig::has_gather_cooc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_gather_cooc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CooccurrenceCollectorConfig::clear_has_gather_cooc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CooccurrenceCollectorConfig::clear_gather_cooc() {
  gather_cooc_ = false;
  clear_has_gather_cooc();
}
inline bool CooccurrenceCollectorConfig::gather_cooc() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.gather_cooc)
  return gather_cooc_;
}
inline void CooccurrenceCollectorConfig::set_gather_cooc(bool value) {
  set_has_gather_cooc();
  gather_cooc_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.gather_cooc)
}

// optional bool gather_cooc_tf = 2;
inline bool CooccurrenceCollectorConfig::has_gather_cooc_tf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_gather_cooc_tf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CooccurrenceCollectorConfig::clear_has_gather_cooc_tf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CooccurrenceCollectorConfig::clear_gather_cooc_tf() {
  gather_cooc_tf_ = false;
  clear_has_gather_cooc_tf();
}
inline bool CooccurrenceCollectorConfig::gather_cooc_tf() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.gather_cooc_tf)
  return gather_cooc_tf_;
}
inline void CooccurrenceCollectorConfig::set_gather_cooc_tf(bool value) {
  set_has_gather_cooc_tf();
  gather_cooc_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.gather_cooc_tf)
}

// optional bool gather_cooc_df = 3;
inline bool CooccurrenceCollectorConfig::has_gather_cooc_df() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_gather_cooc_df() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CooccurrenceCollectorConfig::clear_has_gather_cooc_df() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CooccurrenceCollectorConfig::clear_gather_cooc_df() {
  gather_cooc_df_ = false;
  clear_has_gather_cooc_df();
}
inline bool CooccurrenceCollectorConfig::gather_cooc_df() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.gather_cooc_df)
  return gather_cooc_df_;
}
inline void CooccurrenceCollectorConfig::set_gather_cooc_df(bool value) {
  set_has_gather_cooc_df();
  gather_cooc_df_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.gather_cooc_df)
}

// optional bool store_symmetric_cooc_values = 4;
inline bool CooccurrenceCollectorConfig::has_store_symmetric_cooc_values() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_store_symmetric_cooc_values() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CooccurrenceCollectorConfig::clear_has_store_symmetric_cooc_values() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CooccurrenceCollectorConfig::clear_store_symmetric_cooc_values() {
  store_symmetric_cooc_values_ = false;
  clear_has_store_symmetric_cooc_values();
}
inline bool CooccurrenceCollectorConfig::store_symmetric_cooc_values() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.store_symmetric_cooc_values)
  return store_symmetric_cooc_values_;
}
inline void CooccurrenceCollectorConfig::set_store_symmetric_cooc_values(bool value) {
  set_has_store_symmetric_cooc_values();
  store_symmetric_cooc_values_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.store_symmetric_cooc_values)
}

// optional bool calculate_ppmi_tf = 5;
inline bool CooccurrenceCollectorConfig::has_calculate_ppmi_tf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_calculate_ppmi_tf() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CooccurrenceCollectorConfig::clear_has_calculate_ppmi_tf() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CooccurrenceCollectorConfig::clear_calculate_ppmi_tf() {
  calculate_ppmi_tf_ = false;
  clear_has_calculate_ppmi_tf();
}
inline bool CooccurrenceCollectorConfig::calculate_ppmi_tf() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.calculate_ppmi_tf)
  return calculate_ppmi_tf_;
}
inline void CooccurrenceCollectorConfig::set_calculate_ppmi_tf(bool value) {
  set_has_calculate_ppmi_tf();
  calculate_ppmi_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.calculate_ppmi_tf)
}

// optional bool calculate_ppmi_df = 6;
inline bool CooccurrenceCollectorConfig::has_calculate_ppmi_df() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_calculate_ppmi_df() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CooccurrenceCollectorConfig::clear_has_calculate_ppmi_df() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CooccurrenceCollectorConfig::clear_calculate_ppmi_df() {
  calculate_ppmi_df_ = false;
  clear_has_calculate_ppmi_df();
}
inline bool CooccurrenceCollectorConfig::calculate_ppmi_df() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.calculate_ppmi_df)
  return calculate_ppmi_df_;
}
inline void CooccurrenceCollectorConfig::set_calculate_ppmi_df(bool value) {
  set_has_calculate_ppmi_df();
  calculate_ppmi_df_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.calculate_ppmi_df)
}

// optional string vw_file_path = 7;
inline bool CooccurrenceCollectorConfig::has_vw_file_path() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_vw_file_path() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CooccurrenceCollectorConfig::clear_has_vw_file_path() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CooccurrenceCollectorConfig::clear_vw_file_path() {
  vw_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vw_file_path();
}
inline const ::std::string& CooccurrenceCollectorConfig::vw_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.vw_file_path)
  return vw_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_vw_file_path(const ::std::string& value) {
  set_has_vw_file_path();
  vw_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.vw_file_path)
}
inline void CooccurrenceCollectorConfig::set_vw_file_path(const char* value) {
  set_has_vw_file_path();
  vw_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.vw_file_path)
}
inline void CooccurrenceCollectorConfig::set_vw_file_path(const char* value, size_t size) {
  set_has_vw_file_path();
  vw_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.vw_file_path)
}
inline ::std::string* CooccurrenceCollectorConfig::mutable_vw_file_path() {
  set_has_vw_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.vw_file_path)
  return vw_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CooccurrenceCollectorConfig::release_vw_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.vw_file_path)
  clear_has_vw_file_path();
  return vw_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_allocated_vw_file_path(::std::string* vw_file_path) {
  if (vw_file_path != NULL) {
    set_has_vw_file_path();
  } else {
    clear_has_vw_file_path();
  }
  vw_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vw_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.vw_file_path)
}

// optional string vocab_file_path = 8;
inline bool CooccurrenceCollectorConfig::has_vocab_file_path() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_vocab_file_path() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CooccurrenceCollectorConfig::clear_has_vocab_file_path() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CooccurrenceCollectorConfig::clear_vocab_file_path() {
  vocab_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vocab_file_path();
}
inline const ::std::string& CooccurrenceCollectorConfig::vocab_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.vocab_file_path)
  return vocab_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_vocab_file_path(const ::std::string& value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.vocab_file_path)
}
inline void CooccurrenceCollectorConfig::set_vocab_file_path(const char* value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.vocab_file_path)
}
inline void CooccurrenceCollectorConfig::set_vocab_file_path(const char* value, size_t size) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.vocab_file_path)
}
inline ::std::string* CooccurrenceCollectorConfig::mutable_vocab_file_path() {
  set_has_vocab_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.vocab_file_path)
  return vocab_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CooccurrenceCollectorConfig::release_vocab_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.vocab_file_path)
  clear_has_vocab_file_path();
  return vocab_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_allocated_vocab_file_path(::std::string* vocab_file_path) {
  if (vocab_file_path != NULL) {
    set_has_vocab_file_path();
  } else {
    clear_has_vocab_file_path();
  }
  vocab_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vocab_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.vocab_file_path)
}

// optional string target_folder = 9;
inline bool CooccurrenceCollectorConfig::has_target_folder() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_target_folder() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CooccurrenceCollectorConfig::clear_has_target_folder() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CooccurrenceCollectorConfig::clear_target_folder() {
  target_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_folder();
}
inline const ::std::string& CooccurrenceCollectorConfig::target_folder() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.target_folder)
  return target_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_target_folder(const ::std::string& value) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.target_folder)
}
inline void CooccurrenceCollectorConfig::set_target_folder(const char* value) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.target_folder)
}
inline void CooccurrenceCollectorConfig::set_target_folder(const char* value, size_t size) {
  set_has_target_folder();
  target_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.target_folder)
}
inline ::std::string* CooccurrenceCollectorConfig::mutable_target_folder() {
  set_has_target_folder();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.target_folder)
  return target_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CooccurrenceCollectorConfig::release_target_folder() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.target_folder)
  clear_has_target_folder();
  return target_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_allocated_target_folder(::std::string* target_folder) {
  if (target_folder != NULL) {
    set_has_target_folder();
  } else {
    clear_has_target_folder();
  }
  target_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_folder);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.target_folder)
}

// optional string cooc_tf_file_path = 10;
inline bool CooccurrenceCollectorConfig::has_cooc_tf_file_path() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_cooc_tf_file_path() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CooccurrenceCollectorConfig::clear_has_cooc_tf_file_path() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CooccurrenceCollectorConfig::clear_cooc_tf_file_path() {
  cooc_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooc_tf_file_path();
}
inline const ::std::string& CooccurrenceCollectorConfig::cooc_tf_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
  return cooc_tf_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_cooc_tf_file_path(const ::std::string& value) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
}
inline void CooccurrenceCollectorConfig::set_cooc_tf_file_path(const char* value) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
}
inline void CooccurrenceCollectorConfig::set_cooc_tf_file_path(const char* value, size_t size) {
  set_has_cooc_tf_file_path();
  cooc_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
}
inline ::std::string* CooccurrenceCollectorConfig::mutable_cooc_tf_file_path() {
  set_has_cooc_tf_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
  return cooc_tf_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CooccurrenceCollectorConfig::release_cooc_tf_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
  clear_has_cooc_tf_file_path();
  return cooc_tf_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_allocated_cooc_tf_file_path(::std::string* cooc_tf_file_path) {
  if (cooc_tf_file_path != NULL) {
    set_has_cooc_tf_file_path();
  } else {
    clear_has_cooc_tf_file_path();
  }
  cooc_tf_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooc_tf_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.cooc_tf_file_path)
}

// optional string cooc_df_file_path = 11;
inline bool CooccurrenceCollectorConfig::has_cooc_df_file_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_cooc_df_file_path() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CooccurrenceCollectorConfig::clear_has_cooc_df_file_path() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CooccurrenceCollectorConfig::clear_cooc_df_file_path() {
  cooc_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooc_df_file_path();
}
inline const ::std::string& CooccurrenceCollectorConfig::cooc_df_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
  return cooc_df_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_cooc_df_file_path(const ::std::string& value) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
}
inline void CooccurrenceCollectorConfig::set_cooc_df_file_path(const char* value) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
}
inline void CooccurrenceCollectorConfig::set_cooc_df_file_path(const char* value, size_t size) {
  set_has_cooc_df_file_path();
  cooc_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
}
inline ::std::string* CooccurrenceCollectorConfig::mutable_cooc_df_file_path() {
  set_has_cooc_df_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
  return cooc_df_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CooccurrenceCollectorConfig::release_cooc_df_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
  clear_has_cooc_df_file_path();
  return cooc_df_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_allocated_cooc_df_file_path(::std::string* cooc_df_file_path) {
  if (cooc_df_file_path != NULL) {
    set_has_cooc_df_file_path();
  } else {
    clear_has_cooc_df_file_path();
  }
  cooc_df_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooc_df_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.cooc_df_file_path)
}

// optional string ppmi_tf_file_path = 12;
inline bool CooccurrenceCollectorConfig::has_ppmi_tf_file_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_ppmi_tf_file_path() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CooccurrenceCollectorConfig::clear_has_ppmi_tf_file_path() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CooccurrenceCollectorConfig::clear_ppmi_tf_file_path() {
  ppmi_tf_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ppmi_tf_file_path();
}
inline const ::std::string& CooccurrenceCollectorConfig::ppmi_tf_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
  return ppmi_tf_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_ppmi_tf_file_path(const ::std::string& value) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
}
inline void CooccurrenceCollectorConfig::set_ppmi_tf_file_path(const char* value) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
}
inline void CooccurrenceCollectorConfig::set_ppmi_tf_file_path(const char* value, size_t size) {
  set_has_ppmi_tf_file_path();
  ppmi_tf_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
}
inline ::std::string* CooccurrenceCollectorConfig::mutable_ppmi_tf_file_path() {
  set_has_ppmi_tf_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
  return ppmi_tf_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CooccurrenceCollectorConfig::release_ppmi_tf_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
  clear_has_ppmi_tf_file_path();
  return ppmi_tf_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_allocated_ppmi_tf_file_path(::std::string* ppmi_tf_file_path) {
  if (ppmi_tf_file_path != NULL) {
    set_has_ppmi_tf_file_path();
  } else {
    clear_has_ppmi_tf_file_path();
  }
  ppmi_tf_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppmi_tf_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.ppmi_tf_file_path)
}

// optional string ppmi_df_file_path = 13;
inline bool CooccurrenceCollectorConfig::has_ppmi_df_file_path() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_ppmi_df_file_path() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CooccurrenceCollectorConfig::clear_has_ppmi_df_file_path() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CooccurrenceCollectorConfig::clear_ppmi_df_file_path() {
  ppmi_df_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ppmi_df_file_path();
}
inline const ::std::string& CooccurrenceCollectorConfig::ppmi_df_file_path() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
  return ppmi_df_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_ppmi_df_file_path(const ::std::string& value) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
}
inline void CooccurrenceCollectorConfig::set_ppmi_df_file_path(const char* value) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
}
inline void CooccurrenceCollectorConfig::set_ppmi_df_file_path(const char* value, size_t size) {
  set_has_ppmi_df_file_path();
  ppmi_df_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
}
inline ::std::string* CooccurrenceCollectorConfig::mutable_ppmi_df_file_path() {
  set_has_ppmi_df_file_path();
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
  return ppmi_df_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CooccurrenceCollectorConfig::release_ppmi_df_file_path() {
  // @@protoc_insertion_point(field_release:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
  clear_has_ppmi_df_file_path();
  return ppmi_df_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CooccurrenceCollectorConfig::set_allocated_ppmi_df_file_path(::std::string* ppmi_df_file_path) {
  if (ppmi_df_file_path != NULL) {
    set_has_ppmi_df_file_path();
  } else {
    clear_has_ppmi_df_file_path();
  }
  ppmi_df_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppmi_df_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.CooccurrenceCollectorConfig.ppmi_df_file_path)
}

// optional int32 cooc_window_width = 14 [default = 10];
inline bool CooccurrenceCollectorConfig::has_cooc_window_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_cooc_window_width() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CooccurrenceCollectorConfig::clear_has_cooc_window_width() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CooccurrenceCollectorConfig::clear_cooc_window_width() {
  cooc_window_width_ = 10;
  clear_has_cooc_window_width();
}
inline ::google::protobuf::int32 CooccurrenceCollectorConfig::cooc_window_width() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.cooc_window_width)
  return cooc_window_width_;
}
inline void CooccurrenceCollectorConfig::set_cooc_window_width(::google::protobuf::int32 value) {
  set_has_cooc_window_width();
  cooc_window_width_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.cooc_window_width)
}

// optional int32 cooc_min_tf = 15 [default = 1];
inline bool CooccurrenceCollectorConfig::has_cooc_min_tf() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_cooc_min_tf() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CooccurrenceCollectorConfig::clear_has_cooc_min_tf() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CooccurrenceCollectorConfig::clear_cooc_min_tf() {
  cooc_min_tf_ = 1;
  clear_has_cooc_min_tf();
}
inline ::google::protobuf::int32 CooccurrenceCollectorConfig::cooc_min_tf() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.cooc_min_tf)
  return cooc_min_tf_;
}
inline void CooccurrenceCollectorConfig::set_cooc_min_tf(::google::protobuf::int32 value) {
  set_has_cooc_min_tf();
  cooc_min_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.cooc_min_tf)
}

// optional int32 cooc_min_df = 16 [default = 1];
inline bool CooccurrenceCollectorConfig::has_cooc_min_df() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_cooc_min_df() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CooccurrenceCollectorConfig::clear_has_cooc_min_df() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CooccurrenceCollectorConfig::clear_cooc_min_df() {
  cooc_min_df_ = 1;
  clear_has_cooc_min_df();
}
inline ::google::protobuf::int32 CooccurrenceCollectorConfig::cooc_min_df() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.cooc_min_df)
  return cooc_min_df_;
}
inline void CooccurrenceCollectorConfig::set_cooc_min_df(::google::protobuf::int32 value) {
  set_has_cooc_min_df();
  cooc_min_df_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.cooc_min_df)
}

// optional int32 max_num_of_open_files_in_a_thread = 17;
inline bool CooccurrenceCollectorConfig::has_max_num_of_open_files_in_a_thread() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_max_num_of_open_files_in_a_thread() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CooccurrenceCollectorConfig::clear_has_max_num_of_open_files_in_a_thread() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CooccurrenceCollectorConfig::clear_max_num_of_open_files_in_a_thread() {
  max_num_of_open_files_in_a_thread_ = 0;
  clear_has_max_num_of_open_files_in_a_thread();
}
inline ::google::protobuf::int32 CooccurrenceCollectorConfig::max_num_of_open_files_in_a_thread() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.max_num_of_open_files_in_a_thread)
  return max_num_of_open_files_in_a_thread_;
}
inline void CooccurrenceCollectorConfig::set_max_num_of_open_files_in_a_thread(::google::protobuf::int32 value) {
  set_has_max_num_of_open_files_in_a_thread();
  max_num_of_open_files_in_a_thread_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.max_num_of_open_files_in_a_thread)
}

// optional int32 num_items_per_batch = 18 [default = 1000];
inline bool CooccurrenceCollectorConfig::has_num_items_per_batch() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_num_items_per_batch() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CooccurrenceCollectorConfig::clear_has_num_items_per_batch() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CooccurrenceCollectorConfig::clear_num_items_per_batch() {
  num_items_per_batch_ = 1000;
  clear_has_num_items_per_batch();
}
inline ::google::protobuf::int32 CooccurrenceCollectorConfig::num_items_per_batch() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.num_items_per_batch)
  return num_items_per_batch_;
}
inline void CooccurrenceCollectorConfig::set_num_items_per_batch(::google::protobuf::int32 value) {
  set_has_num_items_per_batch();
  num_items_per_batch_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.num_items_per_batch)
}

// optional int32 num_threads = 19;
inline bool CooccurrenceCollectorConfig::has_num_threads() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_num_threads() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CooccurrenceCollectorConfig::clear_has_num_threads() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CooccurrenceCollectorConfig::clear_num_threads() {
  num_threads_ = 0;
  clear_has_num_threads();
}
inline ::google::protobuf::int32 CooccurrenceCollectorConfig::num_threads() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.num_threads)
  return num_threads_;
}
inline void CooccurrenceCollectorConfig::set_num_threads(::google::protobuf::int32 value) {
  set_has_num_threads();
  num_threads_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.num_threads)
}

// optional int64 total_num_of_pairs = 20;
inline bool CooccurrenceCollectorConfig::has_total_num_of_pairs() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_total_num_of_pairs() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CooccurrenceCollectorConfig::clear_has_total_num_of_pairs() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CooccurrenceCollectorConfig::clear_total_num_of_pairs() {
  total_num_of_pairs_ = GOOGLE_LONGLONG(0);
  clear_has_total_num_of_pairs();
}
inline ::google::protobuf::int64 CooccurrenceCollectorConfig::total_num_of_pairs() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.total_num_of_pairs)
  return total_num_of_pairs_;
}
inline void CooccurrenceCollectorConfig::set_total_num_of_pairs(::google::protobuf::int64 value) {
  set_has_total_num_of_pairs();
  total_num_of_pairs_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.total_num_of_pairs)
}

// optional int32 total_num_of_documents = 21;
inline bool CooccurrenceCollectorConfig::has_total_num_of_documents() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_total_num_of_documents() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CooccurrenceCollectorConfig::clear_has_total_num_of_documents() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CooccurrenceCollectorConfig::clear_total_num_of_documents() {
  total_num_of_documents_ = 0;
  clear_has_total_num_of_documents();
}
inline ::google::protobuf::int32 CooccurrenceCollectorConfig::total_num_of_documents() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.total_num_of_documents)
  return total_num_of_documents_;
}
inline void CooccurrenceCollectorConfig::set_total_num_of_documents(::google::protobuf::int32 value) {
  set_has_total_num_of_documents();
  total_num_of_documents_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.total_num_of_documents)
}

// repeated string class_id = 22;
inline int CooccurrenceCollectorConfig::class_id_size() const {
  return class_id_.size();
}
inline void CooccurrenceCollectorConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& CooccurrenceCollectorConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.class_id)
  return class_id_.Get(index);
}
inline ::std::string* CooccurrenceCollectorConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.CooccurrenceCollectorConfig.class_id)
  return class_id_.Mutable(index);
}
inline void CooccurrenceCollectorConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void CooccurrenceCollectorConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.CooccurrenceCollectorConfig.class_id)
}
inline void CooccurrenceCollectorConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.CooccurrenceCollectorConfig.class_id)
}
inline ::std::string* CooccurrenceCollectorConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.CooccurrenceCollectorConfig.class_id)
  return class_id_.Add();
}
inline void CooccurrenceCollectorConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.CooccurrenceCollectorConfig.class_id)
}
inline void CooccurrenceCollectorConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.CooccurrenceCollectorConfig.class_id)
}
inline void CooccurrenceCollectorConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.CooccurrenceCollectorConfig.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CooccurrenceCollectorConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.CooccurrenceCollectorConfig.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CooccurrenceCollectorConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.CooccurrenceCollectorConfig.class_id)
  return &class_id_;
}

// optional int32 max_num_of_open_files_in_a_process = 23;
inline bool CooccurrenceCollectorConfig::has_max_num_of_open_files_in_a_process() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CooccurrenceCollectorConfig::set_has_max_num_of_open_files_in_a_process() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CooccurrenceCollectorConfig::clear_has_max_num_of_open_files_in_a_process() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CooccurrenceCollectorConfig::clear_max_num_of_open_files_in_a_process() {
  max_num_of_open_files_in_a_process_ = 0;
  clear_has_max_num_of_open_files_in_a_process();
}
inline ::google::protobuf::int32 CooccurrenceCollectorConfig::max_num_of_open_files_in_a_process() const {
  // @@protoc_insertion_point(field_get:artm.CooccurrenceCollectorConfig.max_num_of_open_files_in_a_process)
  return max_num_of_open_files_in_a_process_;
}
inline void CooccurrenceCollectorConfig::set_max_num_of_open_files_in_a_process(::google::protobuf::int32 value) {
  set_has_max_num_of_open_files_in_a_process();
  max_num_of_open_files_in_a_process_ = value;
  // @@protoc_insertion_point(field_set:artm.CooccurrenceCollectorConfig.max_num_of_open_files_in_a_process)
}

// -------------------------------------------------------------------

// InitializeModelArgs

// optional string model_name = 1;
inline bool InitializeModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitializeModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitializeModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitializeModelArgs::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
inline const ::std::string& InitializeModelArgs::model_name() const {
  // @@protoc_insertion_point(field_get:artm.InitializeModelArgs.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitializeModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.InitializeModelArgs.model_name)
}
inline void InitializeModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.InitializeModelArgs.model_name)
}
inline void InitializeModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.InitializeModelArgs.model_name)
}
inline ::std::string* InitializeModelArgs::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.InitializeModelArgs.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitializeModelArgs::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.InitializeModelArgs.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitializeModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.InitializeModelArgs.model_name)
}

// optional string dictionary_name = 2;
inline bool InitializeModelArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitializeModelArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitializeModelArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitializeModelArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& InitializeModelArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.InitializeModelArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitializeModelArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.InitializeModelArgs.dictionary_name)
}
inline void InitializeModelArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.InitializeModelArgs.dictionary_name)
}
inline void InitializeModelArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.InitializeModelArgs.dictionary_name)
}
inline ::std::string* InitializeModelArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.InitializeModelArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitializeModelArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.InitializeModelArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitializeModelArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.InitializeModelArgs.dictionary_name)
}

// repeated string topic_name = 4;
inline int InitializeModelArgs::topic_name_size() const {
  return topic_name_.size();
}
inline void InitializeModelArgs::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& InitializeModelArgs::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.InitializeModelArgs.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* InitializeModelArgs::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.InitializeModelArgs.topic_name)
  return topic_name_.Mutable(index);
}
inline void InitializeModelArgs::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.InitializeModelArgs.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void InitializeModelArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.InitializeModelArgs.topic_name)
}
inline void InitializeModelArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.InitializeModelArgs.topic_name)
}
inline ::std::string* InitializeModelArgs::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.InitializeModelArgs.topic_name)
  return topic_name_.Add();
}
inline void InitializeModelArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.InitializeModelArgs.topic_name)
}
inline void InitializeModelArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.InitializeModelArgs.topic_name)
}
inline void InitializeModelArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.InitializeModelArgs.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InitializeModelArgs::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.InitializeModelArgs.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InitializeModelArgs::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.InitializeModelArgs.topic_name)
  return &topic_name_;
}

// optional int32 seed = 5 [default = -1];
inline bool InitializeModelArgs::has_seed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InitializeModelArgs::set_has_seed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InitializeModelArgs::clear_has_seed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InitializeModelArgs::clear_seed() {
  seed_ = -1;
  clear_has_seed();
}
inline ::google::protobuf::int32 InitializeModelArgs::seed() const {
  // @@protoc_insertion_point(field_get:artm.InitializeModelArgs.seed)
  return seed_;
}
inline void InitializeModelArgs::set_seed(::google::protobuf::int32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:artm.InitializeModelArgs.seed)
}

// -------------------------------------------------------------------

// DictionaryData

// optional string name = 1;
inline bool DictionaryData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DictionaryData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DictionaryData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DictionaryData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DictionaryData::name() const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictionaryData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.name)
}
inline void DictionaryData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.DictionaryData.name)
}
inline void DictionaryData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.DictionaryData.name)
}
inline ::std::string* DictionaryData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.DictionaryData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictionaryData::release_name() {
  // @@protoc_insertion_point(field_release:artm.DictionaryData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictionaryData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.DictionaryData.name)
}

// repeated string token = 2;
inline int DictionaryData::token_size() const {
  return token_.size();
}
inline void DictionaryData::clear_token() {
  token_.Clear();
}
inline const ::std::string& DictionaryData::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.token)
  return token_.Get(index);
}
inline ::std::string* DictionaryData::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DictionaryData.token)
  return token_.Mutable(index);
}
inline void DictionaryData::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DictionaryData.token)
  token_.Mutable(index)->assign(value);
}
inline void DictionaryData::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DictionaryData.token)
}
inline void DictionaryData::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DictionaryData.token)
}
inline ::std::string* DictionaryData::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.DictionaryData.token)
  return token_.Add();
}
inline void DictionaryData::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.token)
}
inline void DictionaryData::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DictionaryData.token)
}
inline void DictionaryData::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DictionaryData.token)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DictionaryData::token() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.token)
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DictionaryData::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.token)
  return &token_;
}

// repeated string class_id = 3;
inline int DictionaryData::class_id_size() const {
  return class_id_.size();
}
inline void DictionaryData::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& DictionaryData::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.class_id)
  return class_id_.Get(index);
}
inline ::std::string* DictionaryData::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.DictionaryData.class_id)
  return class_id_.Mutable(index);
}
inline void DictionaryData::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.DictionaryData.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void DictionaryData::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.DictionaryData.class_id)
}
inline void DictionaryData::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.DictionaryData.class_id)
}
inline ::std::string* DictionaryData::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.DictionaryData.class_id)
  return class_id_.Add();
}
inline void DictionaryData::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.class_id)
}
inline void DictionaryData::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.DictionaryData.class_id)
}
inline void DictionaryData::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.DictionaryData.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DictionaryData::class_id() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DictionaryData::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.class_id)
  return &class_id_;
}

// repeated float token_value = 4;
inline int DictionaryData::token_value_size() const {
  return token_value_.size();
}
inline void DictionaryData::clear_token_value() {
  token_value_.Clear();
}
inline float DictionaryData::token_value(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.token_value)
  return token_value_.Get(index);
}
inline void DictionaryData::set_token_value(int index, float value) {
  token_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.token_value)
}
inline void DictionaryData::add_token_value(float value) {
  token_value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.token_value)
}
inline const ::google::protobuf::RepeatedField< float >&
DictionaryData::token_value() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.token_value)
  return token_value_;
}
inline ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_token_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.token_value)
  return &token_value_;
}

// repeated float token_tf = 5;
inline int DictionaryData::token_tf_size() const {
  return token_tf_.size();
}
inline void DictionaryData::clear_token_tf() {
  token_tf_.Clear();
}
inline float DictionaryData::token_tf(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.token_tf)
  return token_tf_.Get(index);
}
inline void DictionaryData::set_token_tf(int index, float value) {
  token_tf_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.token_tf)
}
inline void DictionaryData::add_token_tf(float value) {
  token_tf_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.token_tf)
}
inline const ::google::protobuf::RepeatedField< float >&
DictionaryData::token_tf() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.token_tf)
  return token_tf_;
}
inline ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_token_tf() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.token_tf)
  return &token_tf_;
}

// repeated float token_df = 6;
inline int DictionaryData::token_df_size() const {
  return token_df_.size();
}
inline void DictionaryData::clear_token_df() {
  token_df_.Clear();
}
inline float DictionaryData::token_df(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.token_df)
  return token_df_.Get(index);
}
inline void DictionaryData::set_token_df(int index, float value) {
  token_df_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.token_df)
}
inline void DictionaryData::add_token_df(float value) {
  token_df_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.token_df)
}
inline const ::google::protobuf::RepeatedField< float >&
DictionaryData::token_df() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.token_df)
  return token_df_;
}
inline ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_token_df() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.token_df)
  return &token_df_;
}

// repeated int32 cooc_first_index = 7;
inline int DictionaryData::cooc_first_index_size() const {
  return cooc_first_index_.size();
}
inline void DictionaryData::clear_cooc_first_index() {
  cooc_first_index_.Clear();
}
inline ::google::protobuf::int32 DictionaryData::cooc_first_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.cooc_first_index)
  return cooc_first_index_.Get(index);
}
inline void DictionaryData::set_cooc_first_index(int index, ::google::protobuf::int32 value) {
  cooc_first_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.cooc_first_index)
}
inline void DictionaryData::add_cooc_first_index(::google::protobuf::int32 value) {
  cooc_first_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.cooc_first_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DictionaryData::cooc_first_index() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.cooc_first_index)
  return cooc_first_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DictionaryData::mutable_cooc_first_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.cooc_first_index)
  return &cooc_first_index_;
}

// repeated int32 cooc_second_index = 8;
inline int DictionaryData::cooc_second_index_size() const {
  return cooc_second_index_.size();
}
inline void DictionaryData::clear_cooc_second_index() {
  cooc_second_index_.Clear();
}
inline ::google::protobuf::int32 DictionaryData::cooc_second_index(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.cooc_second_index)
  return cooc_second_index_.Get(index);
}
inline void DictionaryData::set_cooc_second_index(int index, ::google::protobuf::int32 value) {
  cooc_second_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.cooc_second_index)
}
inline void DictionaryData::add_cooc_second_index(::google::protobuf::int32 value) {
  cooc_second_index_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.cooc_second_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DictionaryData::cooc_second_index() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.cooc_second_index)
  return cooc_second_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DictionaryData::mutable_cooc_second_index() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.cooc_second_index)
  return &cooc_second_index_;
}

// repeated float cooc_value = 9;
inline int DictionaryData::cooc_value_size() const {
  return cooc_value_.size();
}
inline void DictionaryData::clear_cooc_value() {
  cooc_value_.Clear();
}
inline float DictionaryData::cooc_value(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.cooc_value)
  return cooc_value_.Get(index);
}
inline void DictionaryData::set_cooc_value(int index, float value) {
  cooc_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.cooc_value)
}
inline void DictionaryData::add_cooc_value(float value) {
  cooc_value_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.cooc_value)
}
inline const ::google::protobuf::RepeatedField< float >&
DictionaryData::cooc_value() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.cooc_value)
  return cooc_value_;
}
inline ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_cooc_value() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.cooc_value)
  return &cooc_value_;
}

// optional int64 num_items_in_collection = 10;
inline bool DictionaryData::has_num_items_in_collection() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DictionaryData::set_has_num_items_in_collection() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DictionaryData::clear_has_num_items_in_collection() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DictionaryData::clear_num_items_in_collection() {
  num_items_in_collection_ = GOOGLE_LONGLONG(0);
  clear_has_num_items_in_collection();
}
inline ::google::protobuf::int64 DictionaryData::num_items_in_collection() const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.num_items_in_collection)
  return num_items_in_collection_;
}
inline void DictionaryData::set_num_items_in_collection(::google::protobuf::int64 value) {
  set_has_num_items_in_collection();
  num_items_in_collection_ = value;
  // @@protoc_insertion_point(field_set:artm.DictionaryData.num_items_in_collection)
}

// repeated float cooc_tf = 11;
inline int DictionaryData::cooc_tf_size() const {
  return cooc_tf_.size();
}
inline void DictionaryData::clear_cooc_tf() {
  cooc_tf_.Clear();
}
inline float DictionaryData::cooc_tf(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.cooc_tf)
  return cooc_tf_.Get(index);
}
inline void DictionaryData::set_cooc_tf(int index, float value) {
  cooc_tf_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.cooc_tf)
}
inline void DictionaryData::add_cooc_tf(float value) {
  cooc_tf_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.cooc_tf)
}
inline const ::google::protobuf::RepeatedField< float >&
DictionaryData::cooc_tf() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.cooc_tf)
  return cooc_tf_;
}
inline ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_cooc_tf() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.cooc_tf)
  return &cooc_tf_;
}

// repeated float cooc_df = 12;
inline int DictionaryData::cooc_df_size() const {
  return cooc_df_.size();
}
inline void DictionaryData::clear_cooc_df() {
  cooc_df_.Clear();
}
inline float DictionaryData::cooc_df(int index) const {
  // @@protoc_insertion_point(field_get:artm.DictionaryData.cooc_df)
  return cooc_df_.Get(index);
}
inline void DictionaryData::set_cooc_df(int index, float value) {
  cooc_df_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.DictionaryData.cooc_df)
}
inline void DictionaryData::add_cooc_df(float value) {
  cooc_df_.Add(value);
  // @@protoc_insertion_point(field_add:artm.DictionaryData.cooc_df)
}
inline const ::google::protobuf::RepeatedField< float >&
DictionaryData::cooc_df() const {
  // @@protoc_insertion_point(field_list:artm.DictionaryData.cooc_df)
  return cooc_df_;
}
inline ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_cooc_df() {
  // @@protoc_insertion_point(field_mutable_list:artm.DictionaryData.cooc_df)
  return &cooc_df_;
}

// -------------------------------------------------------------------

// FilterDictionaryArgs

// optional string dictionary_name = 1;
inline bool FilterDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilterDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilterDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilterDictionaryArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& FilterDictionaryArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.dictionary_name)
}
inline void FilterDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.FilterDictionaryArgs.dictionary_name)
}
inline void FilterDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.FilterDictionaryArgs.dictionary_name)
}
inline ::std::string* FilterDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.FilterDictionaryArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilterDictionaryArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.FilterDictionaryArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.FilterDictionaryArgs.dictionary_name)
}

// optional string dictionary_target_name = 2;
inline bool FilterDictionaryArgs::has_dictionary_target_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilterDictionaryArgs::set_has_dictionary_target_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilterDictionaryArgs::clear_has_dictionary_target_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilterDictionaryArgs::clear_dictionary_target_name() {
  dictionary_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_target_name();
}
inline const ::std::string& FilterDictionaryArgs::dictionary_target_name() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.dictionary_target_name)
  return dictionary_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterDictionaryArgs::set_dictionary_target_name(const ::std::string& value) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.dictionary_target_name)
}
inline void FilterDictionaryArgs::set_dictionary_target_name(const char* value) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.FilterDictionaryArgs.dictionary_target_name)
}
inline void FilterDictionaryArgs::set_dictionary_target_name(const char* value, size_t size) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.FilterDictionaryArgs.dictionary_target_name)
}
inline ::std::string* FilterDictionaryArgs::mutable_dictionary_target_name() {
  set_has_dictionary_target_name();
  // @@protoc_insertion_point(field_mutable:artm.FilterDictionaryArgs.dictionary_target_name)
  return dictionary_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilterDictionaryArgs::release_dictionary_target_name() {
  // @@protoc_insertion_point(field_release:artm.FilterDictionaryArgs.dictionary_target_name)
  clear_has_dictionary_target_name();
  return dictionary_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterDictionaryArgs::set_allocated_dictionary_target_name(::std::string* dictionary_target_name) {
  if (dictionary_target_name != NULL) {
    set_has_dictionary_target_name();
  } else {
    clear_has_dictionary_target_name();
  }
  dictionary_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.FilterDictionaryArgs.dictionary_target_name)
}

// optional string class_id = 3;
inline bool FilterDictionaryArgs::has_class_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FilterDictionaryArgs::set_has_class_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FilterDictionaryArgs::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FilterDictionaryArgs::clear_class_id() {
  class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_id();
}
inline const ::std::string& FilterDictionaryArgs::class_id() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.class_id)
  return class_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterDictionaryArgs::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.class_id)
}
inline void FilterDictionaryArgs::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.FilterDictionaryArgs.class_id)
}
inline void FilterDictionaryArgs::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.FilterDictionaryArgs.class_id)
}
inline ::std::string* FilterDictionaryArgs::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:artm.FilterDictionaryArgs.class_id)
  return class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilterDictionaryArgs::release_class_id() {
  // @@protoc_insertion_point(field_release:artm.FilterDictionaryArgs.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterDictionaryArgs::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.FilterDictionaryArgs.class_id)
}

// optional float min_df = 4;
inline bool FilterDictionaryArgs::has_min_df() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FilterDictionaryArgs::set_has_min_df() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FilterDictionaryArgs::clear_has_min_df() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FilterDictionaryArgs::clear_min_df() {
  min_df_ = 0;
  clear_has_min_df();
}
inline float FilterDictionaryArgs::min_df() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.min_df)
  return min_df_;
}
inline void FilterDictionaryArgs::set_min_df(float value) {
  set_has_min_df();
  min_df_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.min_df)
}

// optional float max_df = 5;
inline bool FilterDictionaryArgs::has_max_df() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FilterDictionaryArgs::set_has_max_df() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FilterDictionaryArgs::clear_has_max_df() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FilterDictionaryArgs::clear_max_df() {
  max_df_ = 0;
  clear_has_max_df();
}
inline float FilterDictionaryArgs::max_df() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.max_df)
  return max_df_;
}
inline void FilterDictionaryArgs::set_max_df(float value) {
  set_has_max_df();
  max_df_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.max_df)
}

// optional float min_df_rate = 6;
inline bool FilterDictionaryArgs::has_min_df_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FilterDictionaryArgs::set_has_min_df_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FilterDictionaryArgs::clear_has_min_df_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FilterDictionaryArgs::clear_min_df_rate() {
  min_df_rate_ = 0;
  clear_has_min_df_rate();
}
inline float FilterDictionaryArgs::min_df_rate() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.min_df_rate)
  return min_df_rate_;
}
inline void FilterDictionaryArgs::set_min_df_rate(float value) {
  set_has_min_df_rate();
  min_df_rate_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.min_df_rate)
}

// optional float max_df_rate = 7;
inline bool FilterDictionaryArgs::has_max_df_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FilterDictionaryArgs::set_has_max_df_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FilterDictionaryArgs::clear_has_max_df_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FilterDictionaryArgs::clear_max_df_rate() {
  max_df_rate_ = 0;
  clear_has_max_df_rate();
}
inline float FilterDictionaryArgs::max_df_rate() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.max_df_rate)
  return max_df_rate_;
}
inline void FilterDictionaryArgs::set_max_df_rate(float value) {
  set_has_max_df_rate();
  max_df_rate_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.max_df_rate)
}

// optional float min_tf = 8;
inline bool FilterDictionaryArgs::has_min_tf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FilterDictionaryArgs::set_has_min_tf() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FilterDictionaryArgs::clear_has_min_tf() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FilterDictionaryArgs::clear_min_tf() {
  min_tf_ = 0;
  clear_has_min_tf();
}
inline float FilterDictionaryArgs::min_tf() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.min_tf)
  return min_tf_;
}
inline void FilterDictionaryArgs::set_min_tf(float value) {
  set_has_min_tf();
  min_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.min_tf)
}

// optional float max_tf = 9;
inline bool FilterDictionaryArgs::has_max_tf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FilterDictionaryArgs::set_has_max_tf() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FilterDictionaryArgs::clear_has_max_tf() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FilterDictionaryArgs::clear_max_tf() {
  max_tf_ = 0;
  clear_has_max_tf();
}
inline float FilterDictionaryArgs::max_tf() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.max_tf)
  return max_tf_;
}
inline void FilterDictionaryArgs::set_max_tf(float value) {
  set_has_max_tf();
  max_tf_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.max_tf)
}

// optional int64 max_dictionary_size = 10;
inline bool FilterDictionaryArgs::has_max_dictionary_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FilterDictionaryArgs::set_has_max_dictionary_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FilterDictionaryArgs::clear_has_max_dictionary_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FilterDictionaryArgs::clear_max_dictionary_size() {
  max_dictionary_size_ = GOOGLE_LONGLONG(0);
  clear_has_max_dictionary_size();
}
inline ::google::protobuf::int64 FilterDictionaryArgs::max_dictionary_size() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.max_dictionary_size)
  return max_dictionary_size_;
}
inline void FilterDictionaryArgs::set_max_dictionary_size(::google::protobuf::int64 value) {
  set_has_max_dictionary_size();
  max_dictionary_size_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.max_dictionary_size)
}

// optional bool recalculate_value = 11 [default = false];
inline bool FilterDictionaryArgs::has_recalculate_value() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FilterDictionaryArgs::set_has_recalculate_value() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FilterDictionaryArgs::clear_has_recalculate_value() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FilterDictionaryArgs::clear_recalculate_value() {
  recalculate_value_ = false;
  clear_has_recalculate_value();
}
inline bool FilterDictionaryArgs::recalculate_value() const {
  // @@protoc_insertion_point(field_get:artm.FilterDictionaryArgs.recalculate_value)
  return recalculate_value_;
}
inline void FilterDictionaryArgs::set_recalculate_value(bool value) {
  set_has_recalculate_value();
  recalculate_value_ = value;
  // @@protoc_insertion_point(field_set:artm.FilterDictionaryArgs.recalculate_value)
}

// -------------------------------------------------------------------

// GatherDictionaryArgs

// optional string dictionary_target_name = 1;
inline bool GatherDictionaryArgs::has_dictionary_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatherDictionaryArgs::set_has_dictionary_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GatherDictionaryArgs::clear_has_dictionary_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GatherDictionaryArgs::clear_dictionary_target_name() {
  dictionary_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_target_name();
}
inline const ::std::string& GatherDictionaryArgs::dictionary_target_name() const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.dictionary_target_name)
  return dictionary_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatherDictionaryArgs::set_dictionary_target_name(const ::std::string& value) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.dictionary_target_name)
}
inline void GatherDictionaryArgs::set_dictionary_target_name(const char* value) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GatherDictionaryArgs.dictionary_target_name)
}
inline void GatherDictionaryArgs::set_dictionary_target_name(const char* value, size_t size) {
  set_has_dictionary_target_name();
  dictionary_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GatherDictionaryArgs.dictionary_target_name)
}
inline ::std::string* GatherDictionaryArgs::mutable_dictionary_target_name() {
  set_has_dictionary_target_name();
  // @@protoc_insertion_point(field_mutable:artm.GatherDictionaryArgs.dictionary_target_name)
  return dictionary_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GatherDictionaryArgs::release_dictionary_target_name() {
  // @@protoc_insertion_point(field_release:artm.GatherDictionaryArgs.dictionary_target_name)
  clear_has_dictionary_target_name();
  return dictionary_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatherDictionaryArgs::set_allocated_dictionary_target_name(::std::string* dictionary_target_name) {
  if (dictionary_target_name != NULL) {
    set_has_dictionary_target_name();
  } else {
    clear_has_dictionary_target_name();
  }
  dictionary_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.GatherDictionaryArgs.dictionary_target_name)
}

// optional string data_path = 2;
inline bool GatherDictionaryArgs::has_data_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatherDictionaryArgs::set_has_data_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GatherDictionaryArgs::clear_has_data_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GatherDictionaryArgs::clear_data_path() {
  data_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_path();
}
inline const ::std::string& GatherDictionaryArgs::data_path() const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.data_path)
  return data_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatherDictionaryArgs::set_data_path(const ::std::string& value) {
  set_has_data_path();
  data_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.data_path)
}
inline void GatherDictionaryArgs::set_data_path(const char* value) {
  set_has_data_path();
  data_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GatherDictionaryArgs.data_path)
}
inline void GatherDictionaryArgs::set_data_path(const char* value, size_t size) {
  set_has_data_path();
  data_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GatherDictionaryArgs.data_path)
}
inline ::std::string* GatherDictionaryArgs::mutable_data_path() {
  set_has_data_path();
  // @@protoc_insertion_point(field_mutable:artm.GatherDictionaryArgs.data_path)
  return data_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GatherDictionaryArgs::release_data_path() {
  // @@protoc_insertion_point(field_release:artm.GatherDictionaryArgs.data_path)
  clear_has_data_path();
  return data_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatherDictionaryArgs::set_allocated_data_path(::std::string* data_path) {
  if (data_path != NULL) {
    set_has_data_path();
  } else {
    clear_has_data_path();
  }
  data_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_path);
  // @@protoc_insertion_point(field_set_allocated:artm.GatherDictionaryArgs.data_path)
}

// optional string cooc_file_path = 3;
inline bool GatherDictionaryArgs::has_cooc_file_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GatherDictionaryArgs::set_has_cooc_file_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GatherDictionaryArgs::clear_has_cooc_file_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GatherDictionaryArgs::clear_cooc_file_path() {
  cooc_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cooc_file_path();
}
inline const ::std::string& GatherDictionaryArgs::cooc_file_path() const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.cooc_file_path)
  return cooc_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatherDictionaryArgs::set_cooc_file_path(const ::std::string& value) {
  set_has_cooc_file_path();
  cooc_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.cooc_file_path)
}
inline void GatherDictionaryArgs::set_cooc_file_path(const char* value) {
  set_has_cooc_file_path();
  cooc_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GatherDictionaryArgs.cooc_file_path)
}
inline void GatherDictionaryArgs::set_cooc_file_path(const char* value, size_t size) {
  set_has_cooc_file_path();
  cooc_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GatherDictionaryArgs.cooc_file_path)
}
inline ::std::string* GatherDictionaryArgs::mutable_cooc_file_path() {
  set_has_cooc_file_path();
  // @@protoc_insertion_point(field_mutable:artm.GatherDictionaryArgs.cooc_file_path)
  return cooc_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GatherDictionaryArgs::release_cooc_file_path() {
  // @@protoc_insertion_point(field_release:artm.GatherDictionaryArgs.cooc_file_path)
  clear_has_cooc_file_path();
  return cooc_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatherDictionaryArgs::set_allocated_cooc_file_path(::std::string* cooc_file_path) {
  if (cooc_file_path != NULL) {
    set_has_cooc_file_path();
  } else {
    clear_has_cooc_file_path();
  }
  cooc_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cooc_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.GatherDictionaryArgs.cooc_file_path)
}

// optional string vocab_file_path = 4;
inline bool GatherDictionaryArgs::has_vocab_file_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GatherDictionaryArgs::set_has_vocab_file_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GatherDictionaryArgs::clear_has_vocab_file_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GatherDictionaryArgs::clear_vocab_file_path() {
  vocab_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vocab_file_path();
}
inline const ::std::string& GatherDictionaryArgs::vocab_file_path() const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.vocab_file_path)
  return vocab_file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatherDictionaryArgs::set_vocab_file_path(const ::std::string& value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.vocab_file_path)
}
inline void GatherDictionaryArgs::set_vocab_file_path(const char* value) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GatherDictionaryArgs.vocab_file_path)
}
inline void GatherDictionaryArgs::set_vocab_file_path(const char* value, size_t size) {
  set_has_vocab_file_path();
  vocab_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GatherDictionaryArgs.vocab_file_path)
}
inline ::std::string* GatherDictionaryArgs::mutable_vocab_file_path() {
  set_has_vocab_file_path();
  // @@protoc_insertion_point(field_mutable:artm.GatherDictionaryArgs.vocab_file_path)
  return vocab_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GatherDictionaryArgs::release_vocab_file_path() {
  // @@protoc_insertion_point(field_release:artm.GatherDictionaryArgs.vocab_file_path)
  clear_has_vocab_file_path();
  return vocab_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatherDictionaryArgs::set_allocated_vocab_file_path(::std::string* vocab_file_path) {
  if (vocab_file_path != NULL) {
    set_has_vocab_file_path();
  } else {
    clear_has_vocab_file_path();
  }
  vocab_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vocab_file_path);
  // @@protoc_insertion_point(field_set_allocated:artm.GatherDictionaryArgs.vocab_file_path)
}

// optional bool symmetric_cooc_values = 5 [default = false];
inline bool GatherDictionaryArgs::has_symmetric_cooc_values() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GatherDictionaryArgs::set_has_symmetric_cooc_values() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GatherDictionaryArgs::clear_has_symmetric_cooc_values() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GatherDictionaryArgs::clear_symmetric_cooc_values() {
  symmetric_cooc_values_ = false;
  clear_has_symmetric_cooc_values();
}
inline bool GatherDictionaryArgs::symmetric_cooc_values() const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.symmetric_cooc_values)
  return symmetric_cooc_values_;
}
inline void GatherDictionaryArgs::set_symmetric_cooc_values(bool value) {
  set_has_symmetric_cooc_values();
  symmetric_cooc_values_ = value;
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.symmetric_cooc_values)
}

// repeated string batch_path = 6;
inline int GatherDictionaryArgs::batch_path_size() const {
  return batch_path_.size();
}
inline void GatherDictionaryArgs::clear_batch_path() {
  batch_path_.Clear();
}
inline const ::std::string& GatherDictionaryArgs::batch_path(int index) const {
  // @@protoc_insertion_point(field_get:artm.GatherDictionaryArgs.batch_path)
  return batch_path_.Get(index);
}
inline ::std::string* GatherDictionaryArgs::mutable_batch_path(int index) {
  // @@protoc_insertion_point(field_mutable:artm.GatherDictionaryArgs.batch_path)
  return batch_path_.Mutable(index);
}
inline void GatherDictionaryArgs::set_batch_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.GatherDictionaryArgs.batch_path)
  batch_path_.Mutable(index)->assign(value);
}
inline void GatherDictionaryArgs::set_batch_path(int index, const char* value) {
  batch_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.GatherDictionaryArgs.batch_path)
}
inline void GatherDictionaryArgs::set_batch_path(int index, const char* value, size_t size) {
  batch_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.GatherDictionaryArgs.batch_path)
}
inline ::std::string* GatherDictionaryArgs::add_batch_path() {
  // @@protoc_insertion_point(field_add_mutable:artm.GatherDictionaryArgs.batch_path)
  return batch_path_.Add();
}
inline void GatherDictionaryArgs::add_batch_path(const ::std::string& value) {
  batch_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.GatherDictionaryArgs.batch_path)
}
inline void GatherDictionaryArgs::add_batch_path(const char* value) {
  batch_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.GatherDictionaryArgs.batch_path)
}
inline void GatherDictionaryArgs::add_batch_path(const char* value, size_t size) {
  batch_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.GatherDictionaryArgs.batch_path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GatherDictionaryArgs::batch_path() const {
  // @@protoc_insertion_point(field_list:artm.GatherDictionaryArgs.batch_path)
  return batch_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GatherDictionaryArgs::mutable_batch_path() {
  // @@protoc_insertion_point(field_mutable_list:artm.GatherDictionaryArgs.batch_path)
  return &batch_path_;
}

// -------------------------------------------------------------------

// GetDictionaryArgs

// optional string dictionary_name = 1;
inline bool GetDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDictionaryArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& GetDictionaryArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.GetDictionaryArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GetDictionaryArgs.dictionary_name)
}
inline void GetDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GetDictionaryArgs.dictionary_name)
}
inline void GetDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GetDictionaryArgs.dictionary_name)
}
inline ::std::string* GetDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.GetDictionaryArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDictionaryArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.GetDictionaryArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.GetDictionaryArgs.dictionary_name)
}

// -------------------------------------------------------------------

// GetTopicModelArgs

// optional string model_name = 1;
inline bool GetTopicModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTopicModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTopicModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTopicModelArgs::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
inline const ::std::string& GetTopicModelArgs::model_name() const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTopicModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.model_name)
}
inline void GetTopicModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GetTopicModelArgs.model_name)
}
inline void GetTopicModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GetTopicModelArgs.model_name)
}
inline ::std::string* GetTopicModelArgs::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.GetTopicModelArgs.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTopicModelArgs::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.GetTopicModelArgs.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTopicModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.GetTopicModelArgs.model_name)
}

// repeated string topic_name = 2;
inline int GetTopicModelArgs::topic_name_size() const {
  return topic_name_.size();
}
inline void GetTopicModelArgs::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& GetTopicModelArgs::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* GetTopicModelArgs::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.GetTopicModelArgs.topic_name)
  return topic_name_.Mutable(index);
}
inline void GetTopicModelArgs::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void GetTopicModelArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.GetTopicModelArgs.topic_name)
}
inline void GetTopicModelArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.GetTopicModelArgs.topic_name)
}
inline ::std::string* GetTopicModelArgs::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.GetTopicModelArgs.topic_name)
  return topic_name_.Add();
}
inline void GetTopicModelArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.GetTopicModelArgs.topic_name)
}
inline void GetTopicModelArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.GetTopicModelArgs.topic_name)
}
inline void GetTopicModelArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.GetTopicModelArgs.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTopicModelArgs::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.GetTopicModelArgs.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTopicModelArgs::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.GetTopicModelArgs.topic_name)
  return &topic_name_;
}

// repeated string token = 3;
inline int GetTopicModelArgs::token_size() const {
  return token_.size();
}
inline void GetTopicModelArgs::clear_token() {
  token_.Clear();
}
inline const ::std::string& GetTopicModelArgs::token(int index) const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.token)
  return token_.Get(index);
}
inline ::std::string* GetTopicModelArgs::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:artm.GetTopicModelArgs.token)
  return token_.Mutable(index);
}
inline void GetTopicModelArgs::set_token(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.token)
  token_.Mutable(index)->assign(value);
}
inline void GetTopicModelArgs::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.GetTopicModelArgs.token)
}
inline void GetTopicModelArgs::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.GetTopicModelArgs.token)
}
inline ::std::string* GetTopicModelArgs::add_token() {
  // @@protoc_insertion_point(field_add_mutable:artm.GetTopicModelArgs.token)
  return token_.Add();
}
inline void GetTopicModelArgs::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.GetTopicModelArgs.token)
}
inline void GetTopicModelArgs::add_token(const char* value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.GetTopicModelArgs.token)
}
inline void GetTopicModelArgs::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.GetTopicModelArgs.token)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTopicModelArgs::token() const {
  // @@protoc_insertion_point(field_list:artm.GetTopicModelArgs.token)
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTopicModelArgs::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:artm.GetTopicModelArgs.token)
  return &token_;
}

// repeated string class_id = 4;
inline int GetTopicModelArgs::class_id_size() const {
  return class_id_.size();
}
inline void GetTopicModelArgs::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& GetTopicModelArgs::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.class_id)
  return class_id_.Get(index);
}
inline ::std::string* GetTopicModelArgs::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.GetTopicModelArgs.class_id)
  return class_id_.Mutable(index);
}
inline void GetTopicModelArgs::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void GetTopicModelArgs::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.GetTopicModelArgs.class_id)
}
inline void GetTopicModelArgs::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.GetTopicModelArgs.class_id)
}
inline ::std::string* GetTopicModelArgs::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.GetTopicModelArgs.class_id)
  return class_id_.Add();
}
inline void GetTopicModelArgs::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.GetTopicModelArgs.class_id)
}
inline void GetTopicModelArgs::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.GetTopicModelArgs.class_id)
}
inline void GetTopicModelArgs::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.GetTopicModelArgs.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTopicModelArgs::class_id() const {
  // @@protoc_insertion_point(field_list:artm.GetTopicModelArgs.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTopicModelArgs::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.GetTopicModelArgs.class_id)
  return &class_id_;
}

// optional bool use_sparse_format = 5;
inline bool GetTopicModelArgs::has_use_sparse_format() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetTopicModelArgs::set_has_use_sparse_format() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetTopicModelArgs::clear_has_use_sparse_format() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetTopicModelArgs::clear_use_sparse_format() {
  use_sparse_format_ = false;
  clear_has_use_sparse_format();
}
inline bool GetTopicModelArgs::use_sparse_format() const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.use_sparse_format)
  return use_sparse_format_;
}
inline void GetTopicModelArgs::set_use_sparse_format(bool value) {
  set_has_use_sparse_format();
  use_sparse_format_ = value;
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.use_sparse_format)
}

// optional float eps = 6 [default = 1e-37];
inline bool GetTopicModelArgs::has_eps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetTopicModelArgs::set_has_eps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetTopicModelArgs::clear_has_eps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetTopicModelArgs::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
inline float GetTopicModelArgs::eps() const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.eps)
  return eps_;
}
inline void GetTopicModelArgs::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.eps)
}

// optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
inline bool GetTopicModelArgs::has_matrix_layout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetTopicModelArgs::set_has_matrix_layout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetTopicModelArgs::clear_has_matrix_layout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetTopicModelArgs::clear_matrix_layout() {
  matrix_layout_ = 0;
  clear_has_matrix_layout();
}
inline ::artm::MatrixLayout GetTopicModelArgs::matrix_layout() const {
  // @@protoc_insertion_point(field_get:artm.GetTopicModelArgs.matrix_layout)
  return static_cast< ::artm::MatrixLayout >(matrix_layout_);
}
inline void GetTopicModelArgs::set_matrix_layout(::artm::MatrixLayout value) {
  assert(::artm::MatrixLayout_IsValid(value));
  set_has_matrix_layout();
  matrix_layout_ = value;
  // @@protoc_insertion_point(field_set:artm.GetTopicModelArgs.matrix_layout)
}

// -------------------------------------------------------------------

// GetThetaMatrixArgs

// repeated string topic_name = 3;
inline int GetThetaMatrixArgs::topic_name_size() const {
  return topic_name_.size();
}
inline void GetThetaMatrixArgs::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& GetThetaMatrixArgs::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.GetThetaMatrixArgs.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* GetThetaMatrixArgs::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.GetThetaMatrixArgs.topic_name)
  return topic_name_.Mutable(index);
}
inline void GetThetaMatrixArgs::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.GetThetaMatrixArgs.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void GetThetaMatrixArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.GetThetaMatrixArgs.topic_name)
}
inline void GetThetaMatrixArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.GetThetaMatrixArgs.topic_name)
}
inline ::std::string* GetThetaMatrixArgs::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.GetThetaMatrixArgs.topic_name)
  return topic_name_.Add();
}
inline void GetThetaMatrixArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.GetThetaMatrixArgs.topic_name)
}
inline void GetThetaMatrixArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.GetThetaMatrixArgs.topic_name)
}
inline void GetThetaMatrixArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.GetThetaMatrixArgs.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetThetaMatrixArgs::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.GetThetaMatrixArgs.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetThetaMatrixArgs::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.GetThetaMatrixArgs.topic_name)
  return &topic_name_;
}

// optional bool use_sparse_format = 6;
inline bool GetThetaMatrixArgs::has_use_sparse_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetThetaMatrixArgs::set_has_use_sparse_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetThetaMatrixArgs::clear_has_use_sparse_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetThetaMatrixArgs::clear_use_sparse_format() {
  use_sparse_format_ = false;
  clear_has_use_sparse_format();
}
inline bool GetThetaMatrixArgs::use_sparse_format() const {
  // @@protoc_insertion_point(field_get:artm.GetThetaMatrixArgs.use_sparse_format)
  return use_sparse_format_;
}
inline void GetThetaMatrixArgs::set_use_sparse_format(bool value) {
  set_has_use_sparse_format();
  use_sparse_format_ = value;
  // @@protoc_insertion_point(field_set:artm.GetThetaMatrixArgs.use_sparse_format)
}

// optional float eps = 7 [default = 1e-37];
inline bool GetThetaMatrixArgs::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetThetaMatrixArgs::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetThetaMatrixArgs::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetThetaMatrixArgs::clear_eps() {
  eps_ = 1e-37f;
  clear_has_eps();
}
inline float GetThetaMatrixArgs::eps() const {
  // @@protoc_insertion_point(field_get:artm.GetThetaMatrixArgs.eps)
  return eps_;
}
inline void GetThetaMatrixArgs::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:artm.GetThetaMatrixArgs.eps)
}

// optional .artm.MatrixLayout matrix_layout = 8 [default = MatrixLayout_Dense];
inline bool GetThetaMatrixArgs::has_matrix_layout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetThetaMatrixArgs::set_has_matrix_layout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetThetaMatrixArgs::clear_has_matrix_layout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetThetaMatrixArgs::clear_matrix_layout() {
  matrix_layout_ = 0;
  clear_has_matrix_layout();
}
inline ::artm::MatrixLayout GetThetaMatrixArgs::matrix_layout() const {
  // @@protoc_insertion_point(field_get:artm.GetThetaMatrixArgs.matrix_layout)
  return static_cast< ::artm::MatrixLayout >(matrix_layout_);
}
inline void GetThetaMatrixArgs::set_matrix_layout(::artm::MatrixLayout value) {
  assert(::artm::MatrixLayout_IsValid(value));
  set_has_matrix_layout();
  matrix_layout_ = value;
  // @@protoc_insertion_point(field_set:artm.GetThetaMatrixArgs.matrix_layout)
}

// -------------------------------------------------------------------

// GetScoreValueArgs

// optional string score_name = 2;
inline bool GetScoreValueArgs::has_score_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetScoreValueArgs::set_has_score_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetScoreValueArgs::clear_has_score_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetScoreValueArgs::clear_score_name() {
  score_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_score_name();
}
inline const ::std::string& GetScoreValueArgs::score_name() const {
  // @@protoc_insertion_point(field_get:artm.GetScoreValueArgs.score_name)
  return score_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetScoreValueArgs::set_score_name(const ::std::string& value) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GetScoreValueArgs.score_name)
}
inline void GetScoreValueArgs::set_score_name(const char* value) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GetScoreValueArgs.score_name)
}
inline void GetScoreValueArgs::set_score_name(const char* value, size_t size) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GetScoreValueArgs.score_name)
}
inline ::std::string* GetScoreValueArgs::mutable_score_name() {
  set_has_score_name();
  // @@protoc_insertion_point(field_mutable:artm.GetScoreValueArgs.score_name)
  return score_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetScoreValueArgs::release_score_name() {
  // @@protoc_insertion_point(field_release:artm.GetScoreValueArgs.score_name)
  clear_has_score_name();
  return score_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetScoreValueArgs::set_allocated_score_name(::std::string* score_name) {
  if (score_name != NULL) {
    set_has_score_name();
  } else {
    clear_has_score_name();
  }
  score_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), score_name);
  // @@protoc_insertion_point(field_set_allocated:artm.GetScoreValueArgs.score_name)
}

// -------------------------------------------------------------------

// GetScoreArrayArgs

// optional string score_name = 2;
inline bool GetScoreArrayArgs::has_score_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetScoreArrayArgs::set_has_score_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetScoreArrayArgs::clear_has_score_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetScoreArrayArgs::clear_score_name() {
  score_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_score_name();
}
inline const ::std::string& GetScoreArrayArgs::score_name() const {
  // @@protoc_insertion_point(field_get:artm.GetScoreArrayArgs.score_name)
  return score_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetScoreArrayArgs::set_score_name(const ::std::string& value) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.GetScoreArrayArgs.score_name)
}
inline void GetScoreArrayArgs::set_score_name(const char* value) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.GetScoreArrayArgs.score_name)
}
inline void GetScoreArrayArgs::set_score_name(const char* value, size_t size) {
  set_has_score_name();
  score_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.GetScoreArrayArgs.score_name)
}
inline ::std::string* GetScoreArrayArgs::mutable_score_name() {
  set_has_score_name();
  // @@protoc_insertion_point(field_mutable:artm.GetScoreArrayArgs.score_name)
  return score_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetScoreArrayArgs::release_score_name() {
  // @@protoc_insertion_point(field_release:artm.GetScoreArrayArgs.score_name)
  clear_has_score_name();
  return score_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetScoreArrayArgs::set_allocated_score_name(::std::string* score_name) {
  if (score_name != NULL) {
    set_has_score_name();
  } else {
    clear_has_score_name();
  }
  score_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), score_name);
  // @@protoc_insertion_point(field_set_allocated:artm.GetScoreArrayArgs.score_name)
}

// -------------------------------------------------------------------

// ExportModelArgs

// optional string file_name = 1;
inline bool ExportModelArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExportModelArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExportModelArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExportModelArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& ExportModelArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ExportModelArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportModelArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ExportModelArgs.file_name)
}
inline void ExportModelArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ExportModelArgs.file_name)
}
inline void ExportModelArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ExportModelArgs.file_name)
}
inline ::std::string* ExportModelArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ExportModelArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportModelArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ExportModelArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportModelArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ExportModelArgs.file_name)
}

// optional string model_name = 2;
inline bool ExportModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExportModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExportModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExportModelArgs::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
inline const ::std::string& ExportModelArgs::model_name() const {
  // @@protoc_insertion_point(field_get:artm.ExportModelArgs.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ExportModelArgs.model_name)
}
inline void ExportModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ExportModelArgs.model_name)
}
inline void ExportModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ExportModelArgs.model_name)
}
inline ::std::string* ExportModelArgs::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.ExportModelArgs.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportModelArgs::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.ExportModelArgs.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ExportModelArgs.model_name)
}

// -------------------------------------------------------------------

// ImportModelArgs

// optional string file_name = 1;
inline bool ImportModelArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportModelArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportModelArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportModelArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& ImportModelArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ImportModelArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportModelArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImportModelArgs.file_name)
}
inline void ImportModelArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImportModelArgs.file_name)
}
inline void ImportModelArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImportModelArgs.file_name)
}
inline ::std::string* ImportModelArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ImportModelArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportModelArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ImportModelArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportModelArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImportModelArgs.file_name)
}

// optional string model_name = 2;
inline bool ImportModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImportModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImportModelArgs::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
inline const ::std::string& ImportModelArgs::model_name() const {
  // @@protoc_insertion_point(field_get:artm.ImportModelArgs.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImportModelArgs.model_name)
}
inline void ImportModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImportModelArgs.model_name)
}
inline void ImportModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImportModelArgs.model_name)
}
inline ::std::string* ImportModelArgs::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.ImportModelArgs.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportModelArgs::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.ImportModelArgs.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImportModelArgs.model_name)
}

// -------------------------------------------------------------------

// ExportScoreTrackerArgs

// optional string file_name = 1;
inline bool ExportScoreTrackerArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExportScoreTrackerArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExportScoreTrackerArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExportScoreTrackerArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& ExportScoreTrackerArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ExportScoreTrackerArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportScoreTrackerArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ExportScoreTrackerArgs.file_name)
}
inline void ExportScoreTrackerArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ExportScoreTrackerArgs.file_name)
}
inline void ExportScoreTrackerArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ExportScoreTrackerArgs.file_name)
}
inline ::std::string* ExportScoreTrackerArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ExportScoreTrackerArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportScoreTrackerArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ExportScoreTrackerArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportScoreTrackerArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ExportScoreTrackerArgs.file_name)
}

// -------------------------------------------------------------------

// ImportScoreTrackerArgs

// optional string file_name = 1;
inline bool ImportScoreTrackerArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportScoreTrackerArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportScoreTrackerArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportScoreTrackerArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& ImportScoreTrackerArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ImportScoreTrackerArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportScoreTrackerArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImportScoreTrackerArgs.file_name)
}
inline void ImportScoreTrackerArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImportScoreTrackerArgs.file_name)
}
inline void ImportScoreTrackerArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImportScoreTrackerArgs.file_name)
}
inline ::std::string* ImportScoreTrackerArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ImportScoreTrackerArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportScoreTrackerArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ImportScoreTrackerArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportScoreTrackerArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImportScoreTrackerArgs.file_name)
}

// -------------------------------------------------------------------

// AttachModelArgs

// optional string model_name = 1;
inline bool AttachModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttachModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttachModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttachModelArgs::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
inline const ::std::string& AttachModelArgs::model_name() const {
  // @@protoc_insertion_point(field_get:artm.AttachModelArgs.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.AttachModelArgs.model_name)
}
inline void AttachModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.AttachModelArgs.model_name)
}
inline void AttachModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.AttachModelArgs.model_name)
}
inline ::std::string* AttachModelArgs::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:artm.AttachModelArgs.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachModelArgs::release_model_name() {
  // @@protoc_insertion_point(field_release:artm.AttachModelArgs.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:artm.AttachModelArgs.model_name)
}

// -------------------------------------------------------------------

// ProcessBatchesArgs

// optional string nwt_target_name = 1;
inline bool ProcessBatchesArgs::has_nwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessBatchesArgs::set_has_nwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessBatchesArgs::clear_has_nwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessBatchesArgs::clear_nwt_target_name() {
  nwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nwt_target_name();
}
inline const ::std::string& ProcessBatchesArgs::nwt_target_name() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.nwt_target_name)
  return nwt_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessBatchesArgs::set_nwt_target_name(const ::std::string& value) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.nwt_target_name)
}
inline void ProcessBatchesArgs::set_nwt_target_name(const char* value) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.nwt_target_name)
}
inline void ProcessBatchesArgs::set_nwt_target_name(const char* value, size_t size) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.nwt_target_name)
}
inline ::std::string* ProcessBatchesArgs::mutable_nwt_target_name() {
  set_has_nwt_target_name();
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.nwt_target_name)
  return nwt_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessBatchesArgs::release_nwt_target_name() {
  // @@protoc_insertion_point(field_release:artm.ProcessBatchesArgs.nwt_target_name)
  clear_has_nwt_target_name();
  return nwt_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessBatchesArgs::set_allocated_nwt_target_name(::std::string* nwt_target_name) {
  if (nwt_target_name != NULL) {
    set_has_nwt_target_name();
  } else {
    clear_has_nwt_target_name();
  }
  nwt_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nwt_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ProcessBatchesArgs.nwt_target_name)
}

// repeated string batch_filename = 2;
inline int ProcessBatchesArgs::batch_filename_size() const {
  return batch_filename_.size();
}
inline void ProcessBatchesArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
inline const ::std::string& ProcessBatchesArgs::batch_filename(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.batch_filename)
  return batch_filename_.Get(index);
}
inline ::std::string* ProcessBatchesArgs::mutable_batch_filename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.batch_filename)
  return batch_filename_.Mutable(index);
}
inline void ProcessBatchesArgs::set_batch_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.batch_filename)
  batch_filename_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.batch_filename)
}
inline void ProcessBatchesArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.batch_filename)
}
inline ::std::string* ProcessBatchesArgs::add_batch_filename() {
  // @@protoc_insertion_point(field_add_mutable:artm.ProcessBatchesArgs.batch_filename)
  return batch_filename_.Add();
}
inline void ProcessBatchesArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.batch_filename)
}
inline void ProcessBatchesArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ProcessBatchesArgs.batch_filename)
}
inline void ProcessBatchesArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ProcessBatchesArgs.batch_filename)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::batch_filename() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.batch_filename)
  return batch_filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_batch_filename() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.batch_filename)
  return &batch_filename_;
}

// optional string pwt_source_name = 3;
inline bool ProcessBatchesArgs::has_pwt_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessBatchesArgs::set_has_pwt_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcessBatchesArgs::clear_has_pwt_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcessBatchesArgs::clear_pwt_source_name() {
  pwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwt_source_name();
}
inline const ::std::string& ProcessBatchesArgs::pwt_source_name() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.pwt_source_name)
  return pwt_source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessBatchesArgs::set_pwt_source_name(const ::std::string& value) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.pwt_source_name)
}
inline void ProcessBatchesArgs::set_pwt_source_name(const char* value) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.pwt_source_name)
}
inline void ProcessBatchesArgs::set_pwt_source_name(const char* value, size_t size) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.pwt_source_name)
}
inline ::std::string* ProcessBatchesArgs::mutable_pwt_source_name() {
  set_has_pwt_source_name();
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.pwt_source_name)
  return pwt_source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessBatchesArgs::release_pwt_source_name() {
  // @@protoc_insertion_point(field_release:artm.ProcessBatchesArgs.pwt_source_name)
  clear_has_pwt_source_name();
  return pwt_source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessBatchesArgs::set_allocated_pwt_source_name(::std::string* pwt_source_name) {
  if (pwt_source_name != NULL) {
    set_has_pwt_source_name();
  } else {
    clear_has_pwt_source_name();
  }
  pwt_source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwt_source_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ProcessBatchesArgs.pwt_source_name)
}

// optional int32 num_document_passes = 4 [default = 10];
inline bool ProcessBatchesArgs::has_num_document_passes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessBatchesArgs::set_has_num_document_passes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProcessBatchesArgs::clear_has_num_document_passes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProcessBatchesArgs::clear_num_document_passes() {
  num_document_passes_ = 10;
  clear_has_num_document_passes();
}
inline ::google::protobuf::int32 ProcessBatchesArgs::num_document_passes() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.num_document_passes)
  return num_document_passes_;
}
inline void ProcessBatchesArgs::set_num_document_passes(::google::protobuf::int32 value) {
  set_has_num_document_passes();
  num_document_passes_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.num_document_passes)
}

// repeated string regularizer_name = 6;
inline int ProcessBatchesArgs::regularizer_name_size() const {
  return regularizer_name_.size();
}
inline void ProcessBatchesArgs::clear_regularizer_name() {
  regularizer_name_.Clear();
}
inline const ::std::string& ProcessBatchesArgs::regularizer_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.regularizer_name)
  return regularizer_name_.Get(index);
}
inline ::std::string* ProcessBatchesArgs::mutable_regularizer_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.regularizer_name)
  return regularizer_name_.Mutable(index);
}
inline void ProcessBatchesArgs::set_regularizer_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.regularizer_name)
  regularizer_name_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_regularizer_name(int index, const char* value) {
  regularizer_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.regularizer_name)
}
inline void ProcessBatchesArgs::set_regularizer_name(int index, const char* value, size_t size) {
  regularizer_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.regularizer_name)
}
inline ::std::string* ProcessBatchesArgs::add_regularizer_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.ProcessBatchesArgs.regularizer_name)
  return regularizer_name_.Add();
}
inline void ProcessBatchesArgs::add_regularizer_name(const ::std::string& value) {
  regularizer_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.regularizer_name)
}
inline void ProcessBatchesArgs::add_regularizer_name(const char* value) {
  regularizer_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ProcessBatchesArgs.regularizer_name)
}
inline void ProcessBatchesArgs::add_regularizer_name(const char* value, size_t size) {
  regularizer_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ProcessBatchesArgs.regularizer_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::regularizer_name() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.regularizer_name)
  return regularizer_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_regularizer_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.regularizer_name)
  return &regularizer_name_;
}

// repeated float regularizer_tau = 7;
inline int ProcessBatchesArgs::regularizer_tau_size() const {
  return regularizer_tau_.size();
}
inline void ProcessBatchesArgs::clear_regularizer_tau() {
  regularizer_tau_.Clear();
}
inline float ProcessBatchesArgs::regularizer_tau(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.regularizer_tau)
  return regularizer_tau_.Get(index);
}
inline void ProcessBatchesArgs::set_regularizer_tau(int index, float value) {
  regularizer_tau_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.regularizer_tau)
}
inline void ProcessBatchesArgs::add_regularizer_tau(float value) {
  regularizer_tau_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.regularizer_tau)
}
inline const ::google::protobuf::RepeatedField< float >&
ProcessBatchesArgs::regularizer_tau() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.regularizer_tau)
  return regularizer_tau_;
}
inline ::google::protobuf::RepeatedField< float >*
ProcessBatchesArgs::mutable_regularizer_tau() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.regularizer_tau)
  return &regularizer_tau_;
}

// repeated string class_id = 8;
inline int ProcessBatchesArgs::class_id_size() const {
  return class_id_.size();
}
inline void ProcessBatchesArgs::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& ProcessBatchesArgs::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.class_id)
  return class_id_.Get(index);
}
inline ::std::string* ProcessBatchesArgs::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.class_id)
  return class_id_.Mutable(index);
}
inline void ProcessBatchesArgs::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.class_id)
}
inline void ProcessBatchesArgs::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.class_id)
}
inline ::std::string* ProcessBatchesArgs::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.ProcessBatchesArgs.class_id)
  return class_id_.Add();
}
inline void ProcessBatchesArgs::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.class_id)
}
inline void ProcessBatchesArgs::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ProcessBatchesArgs.class_id)
}
inline void ProcessBatchesArgs::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ProcessBatchesArgs.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::class_id() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.class_id)
  return &class_id_;
}

// repeated float class_weight = 9;
inline int ProcessBatchesArgs::class_weight_size() const {
  return class_weight_.size();
}
inline void ProcessBatchesArgs::clear_class_weight() {
  class_weight_.Clear();
}
inline float ProcessBatchesArgs::class_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.class_weight)
  return class_weight_.Get(index);
}
inline void ProcessBatchesArgs::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.class_weight)
}
inline void ProcessBatchesArgs::add_class_weight(float value) {
  class_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.class_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
ProcessBatchesArgs::class_weight() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.class_weight)
  return class_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
ProcessBatchesArgs::mutable_class_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.class_weight)
  return &class_weight_;
}

// optional bool reuse_theta = 10 [default = false];
inline bool ProcessBatchesArgs::has_reuse_theta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProcessBatchesArgs::set_has_reuse_theta() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProcessBatchesArgs::clear_has_reuse_theta() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProcessBatchesArgs::clear_reuse_theta() {
  reuse_theta_ = false;
  clear_has_reuse_theta();
}
inline bool ProcessBatchesArgs::reuse_theta() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.reuse_theta)
  return reuse_theta_;
}
inline void ProcessBatchesArgs::set_reuse_theta(bool value) {
  set_has_reuse_theta();
  reuse_theta_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.reuse_theta)
}

// optional bool opt_for_avx = 11 [default = true];
inline bool ProcessBatchesArgs::has_opt_for_avx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProcessBatchesArgs::set_has_opt_for_avx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProcessBatchesArgs::clear_has_opt_for_avx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProcessBatchesArgs::clear_opt_for_avx() {
  opt_for_avx_ = true;
  clear_has_opt_for_avx();
}
inline bool ProcessBatchesArgs::opt_for_avx() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.opt_for_avx)
  return opt_for_avx_;
}
inline void ProcessBatchesArgs::set_opt_for_avx(bool value) {
  set_has_opt_for_avx();
  opt_for_avx_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.opt_for_avx)
}

// optional .artm.ThetaMatrixType theta_matrix_type = 14 [default = ThetaMatrixType_Cache];
inline bool ProcessBatchesArgs::has_theta_matrix_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProcessBatchesArgs::set_has_theta_matrix_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProcessBatchesArgs::clear_has_theta_matrix_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProcessBatchesArgs::clear_theta_matrix_type() {
  theta_matrix_type_ = 3;
  clear_has_theta_matrix_type();
}
inline ::artm::ThetaMatrixType ProcessBatchesArgs::theta_matrix_type() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.theta_matrix_type)
  return static_cast< ::artm::ThetaMatrixType >(theta_matrix_type_);
}
inline void ProcessBatchesArgs::set_theta_matrix_type(::artm::ThetaMatrixType value) {
  assert(::artm::ThetaMatrixType_IsValid(value));
  set_has_theta_matrix_type();
  theta_matrix_type_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.theta_matrix_type)
}

// repeated float batch_weight = 15;
inline int ProcessBatchesArgs::batch_weight_size() const {
  return batch_weight_.size();
}
inline void ProcessBatchesArgs::clear_batch_weight() {
  batch_weight_.Clear();
}
inline float ProcessBatchesArgs::batch_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.batch_weight)
  return batch_weight_.Get(index);
}
inline void ProcessBatchesArgs::set_batch_weight(int index, float value) {
  batch_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.batch_weight)
}
inline void ProcessBatchesArgs::add_batch_weight(float value) {
  batch_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.batch_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
ProcessBatchesArgs::batch_weight() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.batch_weight)
  return batch_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
ProcessBatchesArgs::mutable_batch_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.batch_weight)
  return &batch_weight_;
}

// optional string predict_class_id = 17;
inline bool ProcessBatchesArgs::has_predict_class_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProcessBatchesArgs::set_has_predict_class_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProcessBatchesArgs::clear_has_predict_class_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProcessBatchesArgs::clear_predict_class_id() {
  predict_class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_predict_class_id();
}
inline const ::std::string& ProcessBatchesArgs::predict_class_id() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.predict_class_id)
  return predict_class_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessBatchesArgs::set_predict_class_id(const ::std::string& value) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.predict_class_id)
}
inline void ProcessBatchesArgs::set_predict_class_id(const char* value) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.predict_class_id)
}
inline void ProcessBatchesArgs::set_predict_class_id(const char* value, size_t size) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.predict_class_id)
}
inline ::std::string* ProcessBatchesArgs::mutable_predict_class_id() {
  set_has_predict_class_id();
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.predict_class_id)
  return predict_class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessBatchesArgs::release_predict_class_id() {
  // @@protoc_insertion_point(field_release:artm.ProcessBatchesArgs.predict_class_id)
  clear_has_predict_class_id();
  return predict_class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessBatchesArgs::set_allocated_predict_class_id(::std::string* predict_class_id) {
  if (predict_class_id != NULL) {
    set_has_predict_class_id();
  } else {
    clear_has_predict_class_id();
  }
  predict_class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), predict_class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.ProcessBatchesArgs.predict_class_id)
}

// repeated .artm.Batch batch = 18;
inline int ProcessBatchesArgs::batch_size() const {
  return batch_.size();
}
inline void ProcessBatchesArgs::clear_batch() {
  batch_.Clear();
}
inline const ::artm::Batch& ProcessBatchesArgs::batch(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.batch)
  return batch_.Get(index);
}
inline ::artm::Batch* ProcessBatchesArgs::mutable_batch(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.batch)
  return batch_.Mutable(index);
}
inline ::artm::Batch* ProcessBatchesArgs::add_batch() {
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.batch)
  return batch_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
ProcessBatchesArgs::mutable_batch() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.batch)
  return &batch_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
ProcessBatchesArgs::batch() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.batch)
  return batch_;
}

// optional bool use_random_theta = 19 [default = false];
inline bool ProcessBatchesArgs::has_use_random_theta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProcessBatchesArgs::set_has_use_random_theta() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProcessBatchesArgs::clear_has_use_random_theta() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProcessBatchesArgs::clear_use_random_theta() {
  use_random_theta_ = false;
  clear_has_use_random_theta();
}
inline bool ProcessBatchesArgs::use_random_theta() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.use_random_theta)
  return use_random_theta_;
}
inline void ProcessBatchesArgs::set_use_random_theta(bool value) {
  set_has_use_random_theta();
  use_random_theta_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.use_random_theta)
}

// repeated string topic_name = 20;
inline int ProcessBatchesArgs::topic_name_size() const {
  return topic_name_.size();
}
inline void ProcessBatchesArgs::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& ProcessBatchesArgs::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* ProcessBatchesArgs::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.topic_name)
  return topic_name_.Mutable(index);
}
inline void ProcessBatchesArgs::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.topic_name)
}
inline void ProcessBatchesArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.topic_name)
}
inline ::std::string* ProcessBatchesArgs::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.ProcessBatchesArgs.topic_name)
  return topic_name_.Add();
}
inline void ProcessBatchesArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.topic_name)
}
inline void ProcessBatchesArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ProcessBatchesArgs.topic_name)
}
inline void ProcessBatchesArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ProcessBatchesArgs.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.topic_name)
  return &topic_name_;
}

// repeated string transaction_typename = 21;
inline int ProcessBatchesArgs::transaction_typename_size() const {
  return transaction_typename_.size();
}
inline void ProcessBatchesArgs::clear_transaction_typename() {
  transaction_typename_.Clear();
}
inline const ::std::string& ProcessBatchesArgs::transaction_typename(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.transaction_typename)
  return transaction_typename_.Get(index);
}
inline ::std::string* ProcessBatchesArgs::mutable_transaction_typename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesArgs.transaction_typename)
  return transaction_typename_.Mutable(index);
}
inline void ProcessBatchesArgs::set_transaction_typename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.transaction_typename)
  transaction_typename_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_transaction_typename(int index, const char* value) {
  transaction_typename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.ProcessBatchesArgs.transaction_typename)
}
inline void ProcessBatchesArgs::set_transaction_typename(int index, const char* value, size_t size) {
  transaction_typename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.ProcessBatchesArgs.transaction_typename)
}
inline ::std::string* ProcessBatchesArgs::add_transaction_typename() {
  // @@protoc_insertion_point(field_add_mutable:artm.ProcessBatchesArgs.transaction_typename)
  return transaction_typename_.Add();
}
inline void ProcessBatchesArgs::add_transaction_typename(const ::std::string& value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.transaction_typename)
}
inline void ProcessBatchesArgs::add_transaction_typename(const char* value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.ProcessBatchesArgs.transaction_typename)
}
inline void ProcessBatchesArgs::add_transaction_typename(const char* value, size_t size) {
  transaction_typename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.ProcessBatchesArgs.transaction_typename)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::transaction_typename() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.transaction_typename)
  return transaction_typename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_transaction_typename() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.transaction_typename)
  return &transaction_typename_;
}

// repeated float transaction_weight = 22;
inline int ProcessBatchesArgs::transaction_weight_size() const {
  return transaction_weight_.size();
}
inline void ProcessBatchesArgs::clear_transaction_weight() {
  transaction_weight_.Clear();
}
inline float ProcessBatchesArgs::transaction_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.transaction_weight)
  return transaction_weight_.Get(index);
}
inline void ProcessBatchesArgs::set_transaction_weight(int index, float value) {
  transaction_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.transaction_weight)
}
inline void ProcessBatchesArgs::add_transaction_weight(float value) {
  transaction_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesArgs.transaction_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
ProcessBatchesArgs::transaction_weight() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesArgs.transaction_weight)
  return transaction_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
ProcessBatchesArgs::mutable_transaction_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesArgs.transaction_weight)
  return &transaction_weight_;
}

// optional bool reset_nwt = 23 [default = true];
inline bool ProcessBatchesArgs::has_reset_nwt() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ProcessBatchesArgs::set_has_reset_nwt() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ProcessBatchesArgs::clear_has_reset_nwt() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ProcessBatchesArgs::clear_reset_nwt() {
  reset_nwt_ = true;
  clear_has_reset_nwt();
}
inline bool ProcessBatchesArgs::reset_nwt() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesArgs.reset_nwt)
  return reset_nwt_;
}
inline void ProcessBatchesArgs::set_reset_nwt(bool value) {
  set_has_reset_nwt();
  reset_nwt_ = value;
  // @@protoc_insertion_point(field_set:artm.ProcessBatchesArgs.reset_nwt)
}

// -------------------------------------------------------------------

// ProcessBatchesResult

// repeated .artm.ScoreData score_data = 1;
inline int ProcessBatchesResult::score_data_size() const {
  return score_data_.size();
}
inline void ProcessBatchesResult::clear_score_data() {
  score_data_.Clear();
}
inline const ::artm::ScoreData& ProcessBatchesResult::score_data(int index) const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesResult.score_data)
  return score_data_.Get(index);
}
inline ::artm::ScoreData* ProcessBatchesResult::mutable_score_data(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesResult.score_data)
  return score_data_.Mutable(index);
}
inline ::artm::ScoreData* ProcessBatchesResult::add_score_data() {
  // @@protoc_insertion_point(field_add:artm.ProcessBatchesResult.score_data)
  return score_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >*
ProcessBatchesResult::mutable_score_data() {
  // @@protoc_insertion_point(field_mutable_list:artm.ProcessBatchesResult.score_data)
  return &score_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >&
ProcessBatchesResult::score_data() const {
  // @@protoc_insertion_point(field_list:artm.ProcessBatchesResult.score_data)
  return score_data_;
}

// optional .artm.ThetaMatrix theta_matrix = 2;
inline bool ProcessBatchesResult::has_theta_matrix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessBatchesResult::set_has_theta_matrix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessBatchesResult::clear_has_theta_matrix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessBatchesResult::clear_theta_matrix() {
  if (theta_matrix_ != NULL) theta_matrix_->::artm::ThetaMatrix::Clear();
  clear_has_theta_matrix();
}
inline const ::artm::ThetaMatrix& ProcessBatchesResult::theta_matrix() const {
  // @@protoc_insertion_point(field_get:artm.ProcessBatchesResult.theta_matrix)
  return theta_matrix_ != NULL ? *theta_matrix_ : *default_instance_->theta_matrix_;
}
inline ::artm::ThetaMatrix* ProcessBatchesResult::mutable_theta_matrix() {
  set_has_theta_matrix();
  if (theta_matrix_ == NULL) {
    theta_matrix_ = new ::artm::ThetaMatrix;
  }
  // @@protoc_insertion_point(field_mutable:artm.ProcessBatchesResult.theta_matrix)
  return theta_matrix_;
}
inline ::artm::ThetaMatrix* ProcessBatchesResult::release_theta_matrix() {
  // @@protoc_insertion_point(field_release:artm.ProcessBatchesResult.theta_matrix)
  clear_has_theta_matrix();
  ::artm::ThetaMatrix* temp = theta_matrix_;
  theta_matrix_ = NULL;
  return temp;
}
inline void ProcessBatchesResult::set_allocated_theta_matrix(::artm::ThetaMatrix* theta_matrix) {
  delete theta_matrix_;
  theta_matrix_ = theta_matrix;
  if (theta_matrix) {
    set_has_theta_matrix();
  } else {
    clear_has_theta_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:artm.ProcessBatchesResult.theta_matrix)
}

// -------------------------------------------------------------------

// MergeModelArgs

// optional string nwt_target_name = 1;
inline bool MergeModelArgs::has_nwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MergeModelArgs::set_has_nwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MergeModelArgs::clear_has_nwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MergeModelArgs::clear_nwt_target_name() {
  nwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nwt_target_name();
}
inline const ::std::string& MergeModelArgs::nwt_target_name() const {
  // @@protoc_insertion_point(field_get:artm.MergeModelArgs.nwt_target_name)
  return nwt_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MergeModelArgs::set_nwt_target_name(const ::std::string& value) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MergeModelArgs.nwt_target_name)
}
inline void MergeModelArgs::set_nwt_target_name(const char* value) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MergeModelArgs.nwt_target_name)
}
inline void MergeModelArgs::set_nwt_target_name(const char* value, size_t size) {
  set_has_nwt_target_name();
  nwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MergeModelArgs.nwt_target_name)
}
inline ::std::string* MergeModelArgs::mutable_nwt_target_name() {
  set_has_nwt_target_name();
  // @@protoc_insertion_point(field_mutable:artm.MergeModelArgs.nwt_target_name)
  return nwt_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MergeModelArgs::release_nwt_target_name() {
  // @@protoc_insertion_point(field_release:artm.MergeModelArgs.nwt_target_name)
  clear_has_nwt_target_name();
  return nwt_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MergeModelArgs::set_allocated_nwt_target_name(::std::string* nwt_target_name) {
  if (nwt_target_name != NULL) {
    set_has_nwt_target_name();
  } else {
    clear_has_nwt_target_name();
  }
  nwt_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nwt_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.MergeModelArgs.nwt_target_name)
}

// repeated string nwt_source_name = 2;
inline int MergeModelArgs::nwt_source_name_size() const {
  return nwt_source_name_.size();
}
inline void MergeModelArgs::clear_nwt_source_name() {
  nwt_source_name_.Clear();
}
inline const ::std::string& MergeModelArgs::nwt_source_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.MergeModelArgs.nwt_source_name)
  return nwt_source_name_.Get(index);
}
inline ::std::string* MergeModelArgs::mutable_nwt_source_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MergeModelArgs.nwt_source_name)
  return nwt_source_name_.Mutable(index);
}
inline void MergeModelArgs::set_nwt_source_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.MergeModelArgs.nwt_source_name)
  nwt_source_name_.Mutable(index)->assign(value);
}
inline void MergeModelArgs::set_nwt_source_name(int index, const char* value) {
  nwt_source_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.MergeModelArgs.nwt_source_name)
}
inline void MergeModelArgs::set_nwt_source_name(int index, const char* value, size_t size) {
  nwt_source_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.MergeModelArgs.nwt_source_name)
}
inline ::std::string* MergeModelArgs::add_nwt_source_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.MergeModelArgs.nwt_source_name)
  return nwt_source_name_.Add();
}
inline void MergeModelArgs::add_nwt_source_name(const ::std::string& value) {
  nwt_source_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.MergeModelArgs.nwt_source_name)
}
inline void MergeModelArgs::add_nwt_source_name(const char* value) {
  nwt_source_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.MergeModelArgs.nwt_source_name)
}
inline void MergeModelArgs::add_nwt_source_name(const char* value, size_t size) {
  nwt_source_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.MergeModelArgs.nwt_source_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MergeModelArgs::nwt_source_name() const {
  // @@protoc_insertion_point(field_list:artm.MergeModelArgs.nwt_source_name)
  return nwt_source_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MergeModelArgs::mutable_nwt_source_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.MergeModelArgs.nwt_source_name)
  return &nwt_source_name_;
}

// repeated float source_weight = 3;
inline int MergeModelArgs::source_weight_size() const {
  return source_weight_.size();
}
inline void MergeModelArgs::clear_source_weight() {
  source_weight_.Clear();
}
inline float MergeModelArgs::source_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.MergeModelArgs.source_weight)
  return source_weight_.Get(index);
}
inline void MergeModelArgs::set_source_weight(int index, float value) {
  source_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.MergeModelArgs.source_weight)
}
inline void MergeModelArgs::add_source_weight(float value) {
  source_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.MergeModelArgs.source_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
MergeModelArgs::source_weight() const {
  // @@protoc_insertion_point(field_list:artm.MergeModelArgs.source_weight)
  return source_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
MergeModelArgs::mutable_source_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.MergeModelArgs.source_weight)
  return &source_weight_;
}

// repeated string topic_name = 4;
inline int MergeModelArgs::topic_name_size() const {
  return topic_name_.size();
}
inline void MergeModelArgs::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& MergeModelArgs::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.MergeModelArgs.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* MergeModelArgs::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MergeModelArgs.topic_name)
  return topic_name_.Mutable(index);
}
inline void MergeModelArgs::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.MergeModelArgs.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void MergeModelArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.MergeModelArgs.topic_name)
}
inline void MergeModelArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.MergeModelArgs.topic_name)
}
inline ::std::string* MergeModelArgs::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.MergeModelArgs.topic_name)
  return topic_name_.Add();
}
inline void MergeModelArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.MergeModelArgs.topic_name)
}
inline void MergeModelArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.MergeModelArgs.topic_name)
}
inline void MergeModelArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.MergeModelArgs.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MergeModelArgs::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.MergeModelArgs.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MergeModelArgs::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.MergeModelArgs.topic_name)
  return &topic_name_;
}

// optional string dictionary_name = 5;
inline bool MergeModelArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MergeModelArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MergeModelArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MergeModelArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& MergeModelArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.MergeModelArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MergeModelArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MergeModelArgs.dictionary_name)
}
inline void MergeModelArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MergeModelArgs.dictionary_name)
}
inline void MergeModelArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MergeModelArgs.dictionary_name)
}
inline ::std::string* MergeModelArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.MergeModelArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MergeModelArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.MergeModelArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MergeModelArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.MergeModelArgs.dictionary_name)
}

// -------------------------------------------------------------------

// RegularizeModelArgs

// optional string rwt_target_name = 1;
inline bool RegularizeModelArgs::has_rwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegularizeModelArgs::set_has_rwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegularizeModelArgs::clear_has_rwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegularizeModelArgs::clear_rwt_target_name() {
  rwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rwt_target_name();
}
inline const ::std::string& RegularizeModelArgs::rwt_target_name() const {
  // @@protoc_insertion_point(field_get:artm.RegularizeModelArgs.rwt_target_name)
  return rwt_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizeModelArgs::set_rwt_target_name(const ::std::string& value) {
  set_has_rwt_target_name();
  rwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizeModelArgs.rwt_target_name)
}
inline void RegularizeModelArgs::set_rwt_target_name(const char* value) {
  set_has_rwt_target_name();
  rwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizeModelArgs.rwt_target_name)
}
inline void RegularizeModelArgs::set_rwt_target_name(const char* value, size_t size) {
  set_has_rwt_target_name();
  rwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizeModelArgs.rwt_target_name)
}
inline ::std::string* RegularizeModelArgs::mutable_rwt_target_name() {
  set_has_rwt_target_name();
  // @@protoc_insertion_point(field_mutable:artm.RegularizeModelArgs.rwt_target_name)
  return rwt_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegularizeModelArgs::release_rwt_target_name() {
  // @@protoc_insertion_point(field_release:artm.RegularizeModelArgs.rwt_target_name)
  clear_has_rwt_target_name();
  return rwt_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizeModelArgs::set_allocated_rwt_target_name(::std::string* rwt_target_name) {
  if (rwt_target_name != NULL) {
    set_has_rwt_target_name();
  } else {
    clear_has_rwt_target_name();
  }
  rwt_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rwt_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizeModelArgs.rwt_target_name)
}

// optional string pwt_source_name = 2;
inline bool RegularizeModelArgs::has_pwt_source_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegularizeModelArgs::set_has_pwt_source_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegularizeModelArgs::clear_has_pwt_source_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegularizeModelArgs::clear_pwt_source_name() {
  pwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwt_source_name();
}
inline const ::std::string& RegularizeModelArgs::pwt_source_name() const {
  // @@protoc_insertion_point(field_get:artm.RegularizeModelArgs.pwt_source_name)
  return pwt_source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizeModelArgs::set_pwt_source_name(const ::std::string& value) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizeModelArgs.pwt_source_name)
}
inline void RegularizeModelArgs::set_pwt_source_name(const char* value) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizeModelArgs.pwt_source_name)
}
inline void RegularizeModelArgs::set_pwt_source_name(const char* value, size_t size) {
  set_has_pwt_source_name();
  pwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizeModelArgs.pwt_source_name)
}
inline ::std::string* RegularizeModelArgs::mutable_pwt_source_name() {
  set_has_pwt_source_name();
  // @@protoc_insertion_point(field_mutable:artm.RegularizeModelArgs.pwt_source_name)
  return pwt_source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegularizeModelArgs::release_pwt_source_name() {
  // @@protoc_insertion_point(field_release:artm.RegularizeModelArgs.pwt_source_name)
  clear_has_pwt_source_name();
  return pwt_source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizeModelArgs::set_allocated_pwt_source_name(::std::string* pwt_source_name) {
  if (pwt_source_name != NULL) {
    set_has_pwt_source_name();
  } else {
    clear_has_pwt_source_name();
  }
  pwt_source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwt_source_name);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizeModelArgs.pwt_source_name)
}

// optional string nwt_source_name = 3;
inline bool RegularizeModelArgs::has_nwt_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegularizeModelArgs::set_has_nwt_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegularizeModelArgs::clear_has_nwt_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegularizeModelArgs::clear_nwt_source_name() {
  nwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nwt_source_name();
}
inline const ::std::string& RegularizeModelArgs::nwt_source_name() const {
  // @@protoc_insertion_point(field_get:artm.RegularizeModelArgs.nwt_source_name)
  return nwt_source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizeModelArgs::set_nwt_source_name(const ::std::string& value) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.RegularizeModelArgs.nwt_source_name)
}
inline void RegularizeModelArgs::set_nwt_source_name(const char* value) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.RegularizeModelArgs.nwt_source_name)
}
inline void RegularizeModelArgs::set_nwt_source_name(const char* value, size_t size) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.RegularizeModelArgs.nwt_source_name)
}
inline ::std::string* RegularizeModelArgs::mutable_nwt_source_name() {
  set_has_nwt_source_name();
  // @@protoc_insertion_point(field_mutable:artm.RegularizeModelArgs.nwt_source_name)
  return nwt_source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegularizeModelArgs::release_nwt_source_name() {
  // @@protoc_insertion_point(field_release:artm.RegularizeModelArgs.nwt_source_name)
  clear_has_nwt_source_name();
  return nwt_source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegularizeModelArgs::set_allocated_nwt_source_name(::std::string* nwt_source_name) {
  if (nwt_source_name != NULL) {
    set_has_nwt_source_name();
  } else {
    clear_has_nwt_source_name();
  }
  nwt_source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nwt_source_name);
  // @@protoc_insertion_point(field_set_allocated:artm.RegularizeModelArgs.nwt_source_name)
}

// repeated .artm.RegularizerSettings regularizer_settings = 4;
inline int RegularizeModelArgs::regularizer_settings_size() const {
  return regularizer_settings_.size();
}
inline void RegularizeModelArgs::clear_regularizer_settings() {
  regularizer_settings_.Clear();
}
inline const ::artm::RegularizerSettings& RegularizeModelArgs::regularizer_settings(int index) const {
  // @@protoc_insertion_point(field_get:artm.RegularizeModelArgs.regularizer_settings)
  return regularizer_settings_.Get(index);
}
inline ::artm::RegularizerSettings* RegularizeModelArgs::mutable_regularizer_settings(int index) {
  // @@protoc_insertion_point(field_mutable:artm.RegularizeModelArgs.regularizer_settings)
  return regularizer_settings_.Mutable(index);
}
inline ::artm::RegularizerSettings* RegularizeModelArgs::add_regularizer_settings() {
  // @@protoc_insertion_point(field_add:artm.RegularizeModelArgs.regularizer_settings)
  return regularizer_settings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings >*
RegularizeModelArgs::mutable_regularizer_settings() {
  // @@protoc_insertion_point(field_mutable_list:artm.RegularizeModelArgs.regularizer_settings)
  return &regularizer_settings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings >&
RegularizeModelArgs::regularizer_settings() const {
  // @@protoc_insertion_point(field_list:artm.RegularizeModelArgs.regularizer_settings)
  return regularizer_settings_;
}

// -------------------------------------------------------------------

// NormalizeModelArgs

// optional string pwt_target_name = 1;
inline bool NormalizeModelArgs::has_pwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizeModelArgs::set_has_pwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalizeModelArgs::clear_has_pwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalizeModelArgs::clear_pwt_target_name() {
  pwt_target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwt_target_name();
}
inline const ::std::string& NormalizeModelArgs::pwt_target_name() const {
  // @@protoc_insertion_point(field_get:artm.NormalizeModelArgs.pwt_target_name)
  return pwt_target_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NormalizeModelArgs::set_pwt_target_name(const ::std::string& value) {
  set_has_pwt_target_name();
  pwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.NormalizeModelArgs.pwt_target_name)
}
inline void NormalizeModelArgs::set_pwt_target_name(const char* value) {
  set_has_pwt_target_name();
  pwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.NormalizeModelArgs.pwt_target_name)
}
inline void NormalizeModelArgs::set_pwt_target_name(const char* value, size_t size) {
  set_has_pwt_target_name();
  pwt_target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.NormalizeModelArgs.pwt_target_name)
}
inline ::std::string* NormalizeModelArgs::mutable_pwt_target_name() {
  set_has_pwt_target_name();
  // @@protoc_insertion_point(field_mutable:artm.NormalizeModelArgs.pwt_target_name)
  return pwt_target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NormalizeModelArgs::release_pwt_target_name() {
  // @@protoc_insertion_point(field_release:artm.NormalizeModelArgs.pwt_target_name)
  clear_has_pwt_target_name();
  return pwt_target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NormalizeModelArgs::set_allocated_pwt_target_name(::std::string* pwt_target_name) {
  if (pwt_target_name != NULL) {
    set_has_pwt_target_name();
  } else {
    clear_has_pwt_target_name();
  }
  pwt_target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwt_target_name);
  // @@protoc_insertion_point(field_set_allocated:artm.NormalizeModelArgs.pwt_target_name)
}

// optional string nwt_source_name = 2;
inline bool NormalizeModelArgs::has_nwt_source_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalizeModelArgs::set_has_nwt_source_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalizeModelArgs::clear_has_nwt_source_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalizeModelArgs::clear_nwt_source_name() {
  nwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nwt_source_name();
}
inline const ::std::string& NormalizeModelArgs::nwt_source_name() const {
  // @@protoc_insertion_point(field_get:artm.NormalizeModelArgs.nwt_source_name)
  return nwt_source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NormalizeModelArgs::set_nwt_source_name(const ::std::string& value) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.NormalizeModelArgs.nwt_source_name)
}
inline void NormalizeModelArgs::set_nwt_source_name(const char* value) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.NormalizeModelArgs.nwt_source_name)
}
inline void NormalizeModelArgs::set_nwt_source_name(const char* value, size_t size) {
  set_has_nwt_source_name();
  nwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.NormalizeModelArgs.nwt_source_name)
}
inline ::std::string* NormalizeModelArgs::mutable_nwt_source_name() {
  set_has_nwt_source_name();
  // @@protoc_insertion_point(field_mutable:artm.NormalizeModelArgs.nwt_source_name)
  return nwt_source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NormalizeModelArgs::release_nwt_source_name() {
  // @@protoc_insertion_point(field_release:artm.NormalizeModelArgs.nwt_source_name)
  clear_has_nwt_source_name();
  return nwt_source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NormalizeModelArgs::set_allocated_nwt_source_name(::std::string* nwt_source_name) {
  if (nwt_source_name != NULL) {
    set_has_nwt_source_name();
  } else {
    clear_has_nwt_source_name();
  }
  nwt_source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nwt_source_name);
  // @@protoc_insertion_point(field_set_allocated:artm.NormalizeModelArgs.nwt_source_name)
}

// optional string rwt_source_name = 3;
inline bool NormalizeModelArgs::has_rwt_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalizeModelArgs::set_has_rwt_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalizeModelArgs::clear_has_rwt_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalizeModelArgs::clear_rwt_source_name() {
  rwt_source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rwt_source_name();
}
inline const ::std::string& NormalizeModelArgs::rwt_source_name() const {
  // @@protoc_insertion_point(field_get:artm.NormalizeModelArgs.rwt_source_name)
  return rwt_source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NormalizeModelArgs::set_rwt_source_name(const ::std::string& value) {
  set_has_rwt_source_name();
  rwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.NormalizeModelArgs.rwt_source_name)
}
inline void NormalizeModelArgs::set_rwt_source_name(const char* value) {
  set_has_rwt_source_name();
  rwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.NormalizeModelArgs.rwt_source_name)
}
inline void NormalizeModelArgs::set_rwt_source_name(const char* value, size_t size) {
  set_has_rwt_source_name();
  rwt_source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.NormalizeModelArgs.rwt_source_name)
}
inline ::std::string* NormalizeModelArgs::mutable_rwt_source_name() {
  set_has_rwt_source_name();
  // @@protoc_insertion_point(field_mutable:artm.NormalizeModelArgs.rwt_source_name)
  return rwt_source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NormalizeModelArgs::release_rwt_source_name() {
  // @@protoc_insertion_point(field_release:artm.NormalizeModelArgs.rwt_source_name)
  clear_has_rwt_source_name();
  return rwt_source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NormalizeModelArgs::set_allocated_rwt_source_name(::std::string* rwt_source_name) {
  if (rwt_source_name != NULL) {
    set_has_rwt_source_name();
  } else {
    clear_has_rwt_source_name();
  }
  rwt_source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rwt_source_name);
  // @@protoc_insertion_point(field_set_allocated:artm.NormalizeModelArgs.rwt_source_name)
}

// -------------------------------------------------------------------

// ImportDictionaryArgs

// optional string file_name = 1;
inline bool ImportDictionaryArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportDictionaryArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportDictionaryArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportDictionaryArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& ImportDictionaryArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ImportDictionaryArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportDictionaryArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImportDictionaryArgs.file_name)
}
inline void ImportDictionaryArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImportDictionaryArgs.file_name)
}
inline void ImportDictionaryArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImportDictionaryArgs.file_name)
}
inline ::std::string* ImportDictionaryArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ImportDictionaryArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportDictionaryArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ImportDictionaryArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportDictionaryArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImportDictionaryArgs.file_name)
}

// optional string dictionary_name = 2;
inline bool ImportDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImportDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImportDictionaryArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& ImportDictionaryArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.ImportDictionaryArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ImportDictionaryArgs.dictionary_name)
}
inline void ImportDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ImportDictionaryArgs.dictionary_name)
}
inline void ImportDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ImportDictionaryArgs.dictionary_name)
}
inline ::std::string* ImportDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.ImportDictionaryArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportDictionaryArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.ImportDictionaryArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ImportDictionaryArgs.dictionary_name)
}

// -------------------------------------------------------------------

// ExportDictionaryArgs

// optional string file_name = 1;
inline bool ExportDictionaryArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExportDictionaryArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExportDictionaryArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExportDictionaryArgs::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& ExportDictionaryArgs::file_name() const {
  // @@protoc_insertion_point(field_get:artm.ExportDictionaryArgs.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportDictionaryArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ExportDictionaryArgs.file_name)
}
inline void ExportDictionaryArgs::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ExportDictionaryArgs.file_name)
}
inline void ExportDictionaryArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ExportDictionaryArgs.file_name)
}
inline ::std::string* ExportDictionaryArgs::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:artm.ExportDictionaryArgs.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportDictionaryArgs::release_file_name() {
  // @@protoc_insertion_point(field_release:artm.ExportDictionaryArgs.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportDictionaryArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ExportDictionaryArgs.file_name)
}

// optional string dictionary_name = 2;
inline bool ExportDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExportDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExportDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExportDictionaryArgs::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
inline const ::std::string& ExportDictionaryArgs::dictionary_name() const {
  // @@protoc_insertion_point(field_get:artm.ExportDictionaryArgs.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ExportDictionaryArgs.dictionary_name)
}
inline void ExportDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ExportDictionaryArgs.dictionary_name)
}
inline void ExportDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ExportDictionaryArgs.dictionary_name)
}
inline ::std::string* ExportDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:artm.ExportDictionaryArgs.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportDictionaryArgs::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:artm.ExportDictionaryArgs.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:artm.ExportDictionaryArgs.dictionary_name)
}

// -------------------------------------------------------------------

// DuplicateMasterComponentArgs

// -------------------------------------------------------------------

// GetMasterComponentInfoArgs

// -------------------------------------------------------------------

// MasterComponentInfo_RegularizerInfo

// optional string name = 1;
inline bool MasterComponentInfo_RegularizerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_RegularizerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_RegularizerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_RegularizerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MasterComponentInfo_RegularizerInfo::name() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.RegularizerInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_RegularizerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.RegularizerInfo.name)
}
inline void MasterComponentInfo_RegularizerInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.RegularizerInfo.name)
}
inline void MasterComponentInfo_RegularizerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.RegularizerInfo.name)
}
inline ::std::string* MasterComponentInfo_RegularizerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.RegularizerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterComponentInfo_RegularizerInfo::release_name() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.RegularizerInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_RegularizerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.RegularizerInfo.name)
}

// optional string type = 2;
inline bool MasterComponentInfo_RegularizerInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_RegularizerInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_RegularizerInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_RegularizerInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& MasterComponentInfo_RegularizerInfo::type() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.RegularizerInfo.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_RegularizerInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.RegularizerInfo.type)
}
inline void MasterComponentInfo_RegularizerInfo::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.RegularizerInfo.type)
}
inline void MasterComponentInfo_RegularizerInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.RegularizerInfo.type)
}
inline ::std::string* MasterComponentInfo_RegularizerInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.RegularizerInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterComponentInfo_RegularizerInfo::release_type() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.RegularizerInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_RegularizerInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.RegularizerInfo.type)
}

// -------------------------------------------------------------------

// MasterComponentInfo_ScoreInfo

// optional string name = 1;
inline bool MasterComponentInfo_ScoreInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_ScoreInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_ScoreInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_ScoreInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MasterComponentInfo_ScoreInfo::name() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ScoreInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_ScoreInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ScoreInfo.name)
}
inline void MasterComponentInfo_ScoreInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.ScoreInfo.name)
}
inline void MasterComponentInfo_ScoreInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.ScoreInfo.name)
}
inline ::std::string* MasterComponentInfo_ScoreInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.ScoreInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterComponentInfo_ScoreInfo::release_name() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.ScoreInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_ScoreInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.ScoreInfo.name)
}

// optional string type = 2;
inline bool MasterComponentInfo_ScoreInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_ScoreInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_ScoreInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_ScoreInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& MasterComponentInfo_ScoreInfo::type() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ScoreInfo.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_ScoreInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ScoreInfo.type)
}
inline void MasterComponentInfo_ScoreInfo::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.ScoreInfo.type)
}
inline void MasterComponentInfo_ScoreInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.ScoreInfo.type)
}
inline ::std::string* MasterComponentInfo_ScoreInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.ScoreInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterComponentInfo_ScoreInfo::release_type() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.ScoreInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_ScoreInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.ScoreInfo.type)
}

// -------------------------------------------------------------------

// MasterComponentInfo_DictionaryInfo

// optional string name = 1;
inline bool MasterComponentInfo_DictionaryInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_DictionaryInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_DictionaryInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_DictionaryInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MasterComponentInfo_DictionaryInfo::name() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.DictionaryInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_DictionaryInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.DictionaryInfo.name)
}
inline void MasterComponentInfo_DictionaryInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.DictionaryInfo.name)
}
inline void MasterComponentInfo_DictionaryInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.DictionaryInfo.name)
}
inline ::std::string* MasterComponentInfo_DictionaryInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.DictionaryInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterComponentInfo_DictionaryInfo::release_name() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.DictionaryInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_DictionaryInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.DictionaryInfo.name)
}

// optional int64 num_entries = 2;
inline bool MasterComponentInfo_DictionaryInfo::has_num_entries() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_DictionaryInfo::set_has_num_entries() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_DictionaryInfo::clear_has_num_entries() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_DictionaryInfo::clear_num_entries() {
  num_entries_ = GOOGLE_LONGLONG(0);
  clear_has_num_entries();
}
inline ::google::protobuf::int64 MasterComponentInfo_DictionaryInfo::num_entries() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.DictionaryInfo.num_entries)
  return num_entries_;
}
inline void MasterComponentInfo_DictionaryInfo::set_num_entries(::google::protobuf::int64 value) {
  set_has_num_entries();
  num_entries_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.DictionaryInfo.num_entries)
}

// optional int64 byte_size = 3;
inline bool MasterComponentInfo_DictionaryInfo::has_byte_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MasterComponentInfo_DictionaryInfo::set_has_byte_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MasterComponentInfo_DictionaryInfo::clear_has_byte_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MasterComponentInfo_DictionaryInfo::clear_byte_size() {
  byte_size_ = GOOGLE_LONGLONG(0);
  clear_has_byte_size();
}
inline ::google::protobuf::int64 MasterComponentInfo_DictionaryInfo::byte_size() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.DictionaryInfo.byte_size)
  return byte_size_;
}
inline void MasterComponentInfo_DictionaryInfo::set_byte_size(::google::protobuf::int64 value) {
  set_has_byte_size();
  byte_size_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.DictionaryInfo.byte_size)
}

// -------------------------------------------------------------------

// MasterComponentInfo_BatchInfo

// optional string name = 1;
inline bool MasterComponentInfo_BatchInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_BatchInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_BatchInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_BatchInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MasterComponentInfo_BatchInfo::name() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.BatchInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_BatchInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.BatchInfo.name)
}
inline void MasterComponentInfo_BatchInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.BatchInfo.name)
}
inline void MasterComponentInfo_BatchInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.BatchInfo.name)
}
inline ::std::string* MasterComponentInfo_BatchInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.BatchInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterComponentInfo_BatchInfo::release_name() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.BatchInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_BatchInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.BatchInfo.name)
}

// optional int32 num_items = 2;
inline bool MasterComponentInfo_BatchInfo::has_num_items() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_BatchInfo::set_has_num_items() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_BatchInfo::clear_has_num_items() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_BatchInfo::clear_num_items() {
  num_items_ = 0;
  clear_has_num_items();
}
inline ::google::protobuf::int32 MasterComponentInfo_BatchInfo::num_items() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.BatchInfo.num_items)
  return num_items_;
}
inline void MasterComponentInfo_BatchInfo::set_num_items(::google::protobuf::int32 value) {
  set_has_num_items();
  num_items_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.BatchInfo.num_items)
}

// optional int32 num_tokens = 3;
inline bool MasterComponentInfo_BatchInfo::has_num_tokens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MasterComponentInfo_BatchInfo::set_has_num_tokens() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MasterComponentInfo_BatchInfo::clear_has_num_tokens() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MasterComponentInfo_BatchInfo::clear_num_tokens() {
  num_tokens_ = 0;
  clear_has_num_tokens();
}
inline ::google::protobuf::int32 MasterComponentInfo_BatchInfo::num_tokens() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.BatchInfo.num_tokens)
  return num_tokens_;
}
inline void MasterComponentInfo_BatchInfo::set_num_tokens(::google::protobuf::int32 value) {
  set_has_num_tokens();
  num_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.BatchInfo.num_tokens)
}

// -------------------------------------------------------------------

// MasterComponentInfo_ModelInfo

// optional string name = 1;
inline bool MasterComponentInfo_ModelInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_ModelInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_ModelInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_ModelInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MasterComponentInfo_ModelInfo::name() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ModelInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_ModelInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ModelInfo.name)
}
inline void MasterComponentInfo_ModelInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.ModelInfo.name)
}
inline void MasterComponentInfo_ModelInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.ModelInfo.name)
}
inline ::std::string* MasterComponentInfo_ModelInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.ModelInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterComponentInfo_ModelInfo::release_name() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.ModelInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_ModelInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.ModelInfo.name)
}

// optional string type = 2;
inline bool MasterComponentInfo_ModelInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_ModelInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_ModelInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_ModelInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& MasterComponentInfo_ModelInfo::type() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ModelInfo.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_ModelInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ModelInfo.type)
}
inline void MasterComponentInfo_ModelInfo::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.ModelInfo.type)
}
inline void MasterComponentInfo_ModelInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.ModelInfo.type)
}
inline ::std::string* MasterComponentInfo_ModelInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.ModelInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterComponentInfo_ModelInfo::release_type() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.ModelInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_ModelInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.ModelInfo.type)
}

// optional int32 num_topics = 3;
inline bool MasterComponentInfo_ModelInfo::has_num_topics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MasterComponentInfo_ModelInfo::set_has_num_topics() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MasterComponentInfo_ModelInfo::clear_has_num_topics() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MasterComponentInfo_ModelInfo::clear_num_topics() {
  num_topics_ = 0;
  clear_has_num_topics();
}
inline ::google::protobuf::int32 MasterComponentInfo_ModelInfo::num_topics() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ModelInfo.num_topics)
  return num_topics_;
}
inline void MasterComponentInfo_ModelInfo::set_num_topics(::google::protobuf::int32 value) {
  set_has_num_topics();
  num_topics_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ModelInfo.num_topics)
}

// optional int32 num_tokens = 4;
inline bool MasterComponentInfo_ModelInfo::has_num_tokens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MasterComponentInfo_ModelInfo::set_has_num_tokens() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MasterComponentInfo_ModelInfo::clear_has_num_tokens() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MasterComponentInfo_ModelInfo::clear_num_tokens() {
  num_tokens_ = 0;
  clear_has_num_tokens();
}
inline ::google::protobuf::int32 MasterComponentInfo_ModelInfo::num_tokens() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ModelInfo.num_tokens)
  return num_tokens_;
}
inline void MasterComponentInfo_ModelInfo::set_num_tokens(::google::protobuf::int32 value) {
  set_has_num_tokens();
  num_tokens_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ModelInfo.num_tokens)
}

// optional int64 byte_size = 5;
inline bool MasterComponentInfo_ModelInfo::has_byte_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MasterComponentInfo_ModelInfo::set_has_byte_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MasterComponentInfo_ModelInfo::clear_has_byte_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MasterComponentInfo_ModelInfo::clear_byte_size() {
  byte_size_ = GOOGLE_LONGLONG(0);
  clear_has_byte_size();
}
inline ::google::protobuf::int64 MasterComponentInfo_ModelInfo::byte_size() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.ModelInfo.byte_size)
  return byte_size_;
}
inline void MasterComponentInfo_ModelInfo::set_byte_size(::google::protobuf::int64 value) {
  set_has_byte_size();
  byte_size_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.ModelInfo.byte_size)
}

// -------------------------------------------------------------------

// MasterComponentInfo_CacheEntryInfo

// optional string key = 1;
inline bool MasterComponentInfo_CacheEntryInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_CacheEntryInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_CacheEntryInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_CacheEntryInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& MasterComponentInfo_CacheEntryInfo::key() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.CacheEntryInfo.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_CacheEntryInfo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.CacheEntryInfo.key)
}
inline void MasterComponentInfo_CacheEntryInfo::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterComponentInfo.CacheEntryInfo.key)
}
inline void MasterComponentInfo_CacheEntryInfo::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterComponentInfo.CacheEntryInfo.key)
}
inline ::std::string* MasterComponentInfo_CacheEntryInfo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.CacheEntryInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterComponentInfo_CacheEntryInfo::release_key() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.CacheEntryInfo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterComponentInfo_CacheEntryInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.CacheEntryInfo.key)
}

// optional int32 byte_size = 2;
inline bool MasterComponentInfo_CacheEntryInfo::has_byte_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_CacheEntryInfo::set_has_byte_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_CacheEntryInfo::clear_has_byte_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_CacheEntryInfo::clear_byte_size() {
  byte_size_ = 0;
  clear_has_byte_size();
}
inline ::google::protobuf::int32 MasterComponentInfo_CacheEntryInfo::byte_size() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.CacheEntryInfo.byte_size)
  return byte_size_;
}
inline void MasterComponentInfo_CacheEntryInfo::set_byte_size(::google::protobuf::int32 value) {
  set_has_byte_size();
  byte_size_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.CacheEntryInfo.byte_size)
}

// -------------------------------------------------------------------

// MasterComponentInfo

// optional .artm.MasterModelConfig config = 2;
inline bool MasterComponentInfo::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo::clear_config() {
  if (config_ != NULL) config_->::artm::MasterModelConfig::Clear();
  clear_has_config();
}
inline const ::artm::MasterModelConfig& MasterComponentInfo::config() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::artm::MasterModelConfig* MasterComponentInfo::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::artm::MasterModelConfig;
  }
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.config)
  return config_;
}
inline ::artm::MasterModelConfig* MasterComponentInfo::release_config() {
  // @@protoc_insertion_point(field_release:artm.MasterComponentInfo.config)
  clear_has_config();
  ::artm::MasterModelConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void MasterComponentInfo::set_allocated_config(::artm::MasterModelConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:artm.MasterComponentInfo.config)
}

// repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
inline int MasterComponentInfo::regularizer_size() const {
  return regularizer_.size();
}
inline void MasterComponentInfo::clear_regularizer() {
  regularizer_.Clear();
}
inline const ::artm::MasterComponentInfo_RegularizerInfo& MasterComponentInfo::regularizer(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.regularizer)
  return regularizer_.Get(index);
}
inline ::artm::MasterComponentInfo_RegularizerInfo* MasterComponentInfo::mutable_regularizer(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.regularizer)
  return regularizer_.Mutable(index);
}
inline ::artm::MasterComponentInfo_RegularizerInfo* MasterComponentInfo::add_regularizer() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.regularizer)
  return regularizer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo >*
MasterComponentInfo::mutable_regularizer() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.regularizer)
  return &regularizer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo >&
MasterComponentInfo::regularizer() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.regularizer)
  return regularizer_;
}

// repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
inline int MasterComponentInfo::score_size() const {
  return score_.size();
}
inline void MasterComponentInfo::clear_score() {
  score_.Clear();
}
inline const ::artm::MasterComponentInfo_ScoreInfo& MasterComponentInfo::score(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.score)
  return score_.Get(index);
}
inline ::artm::MasterComponentInfo_ScoreInfo* MasterComponentInfo::mutable_score(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.score)
  return score_.Mutable(index);
}
inline ::artm::MasterComponentInfo_ScoreInfo* MasterComponentInfo::add_score() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.score)
  return score_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo >*
MasterComponentInfo::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.score)
  return &score_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo >&
MasterComponentInfo::score() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.score)
  return score_;
}

// repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
inline int MasterComponentInfo::dictionary_size() const {
  return dictionary_.size();
}
inline void MasterComponentInfo::clear_dictionary() {
  dictionary_.Clear();
}
inline const ::artm::MasterComponentInfo_DictionaryInfo& MasterComponentInfo::dictionary(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.dictionary)
  return dictionary_.Get(index);
}
inline ::artm::MasterComponentInfo_DictionaryInfo* MasterComponentInfo::mutable_dictionary(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.dictionary)
  return dictionary_.Mutable(index);
}
inline ::artm::MasterComponentInfo_DictionaryInfo* MasterComponentInfo::add_dictionary() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.dictionary)
  return dictionary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo >*
MasterComponentInfo::mutable_dictionary() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.dictionary)
  return &dictionary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo >&
MasterComponentInfo::dictionary() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.dictionary)
  return dictionary_;
}

// repeated .artm.MasterComponentInfo.ModelInfo model = 6;
inline int MasterComponentInfo::model_size() const {
  return model_.size();
}
inline void MasterComponentInfo::clear_model() {
  model_.Clear();
}
inline const ::artm::MasterComponentInfo_ModelInfo& MasterComponentInfo::model(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.model)
  return model_.Get(index);
}
inline ::artm::MasterComponentInfo_ModelInfo* MasterComponentInfo::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.model)
  return model_.Mutable(index);
}
inline ::artm::MasterComponentInfo_ModelInfo* MasterComponentInfo::add_model() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.model)
  return model_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo >*
MasterComponentInfo::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.model)
  return &model_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo >&
MasterComponentInfo::model() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.model)
  return model_;
}

// repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
inline int MasterComponentInfo::cache_entry_size() const {
  return cache_entry_.size();
}
inline void MasterComponentInfo::clear_cache_entry() {
  cache_entry_.Clear();
}
inline const ::artm::MasterComponentInfo_CacheEntryInfo& MasterComponentInfo::cache_entry(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.cache_entry)
  return cache_entry_.Get(index);
}
inline ::artm::MasterComponentInfo_CacheEntryInfo* MasterComponentInfo::mutable_cache_entry(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.cache_entry)
  return cache_entry_.Mutable(index);
}
inline ::artm::MasterComponentInfo_CacheEntryInfo* MasterComponentInfo::add_cache_entry() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.cache_entry)
  return cache_entry_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo >*
MasterComponentInfo::mutable_cache_entry() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.cache_entry)
  return &cache_entry_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo >&
MasterComponentInfo::cache_entry() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.cache_entry)
  return cache_entry_;
}

// optional int32 processor_queue_size = 9;
inline bool MasterComponentInfo::has_processor_queue_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MasterComponentInfo::set_has_processor_queue_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MasterComponentInfo::clear_has_processor_queue_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MasterComponentInfo::clear_processor_queue_size() {
  processor_queue_size_ = 0;
  clear_has_processor_queue_size();
}
inline ::google::protobuf::int32 MasterComponentInfo::processor_queue_size() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.processor_queue_size)
  return processor_queue_size_;
}
inline void MasterComponentInfo::set_processor_queue_size(::google::protobuf::int32 value) {
  set_has_processor_queue_size();
  processor_queue_size_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.processor_queue_size)
}

// repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
inline int MasterComponentInfo::batch_size() const {
  return batch_.size();
}
inline void MasterComponentInfo::clear_batch() {
  batch_.Clear();
}
inline const ::artm::MasterComponentInfo_BatchInfo& MasterComponentInfo::batch(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.batch)
  return batch_.Get(index);
}
inline ::artm::MasterComponentInfo_BatchInfo* MasterComponentInfo::mutable_batch(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterComponentInfo.batch)
  return batch_.Mutable(index);
}
inline ::artm::MasterComponentInfo_BatchInfo* MasterComponentInfo::add_batch() {
  // @@protoc_insertion_point(field_add:artm.MasterComponentInfo.batch)
  return batch_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo >*
MasterComponentInfo::mutable_batch() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterComponentInfo.batch)
  return &batch_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo >&
MasterComponentInfo::batch() const {
  // @@protoc_insertion_point(field_list:artm.MasterComponentInfo.batch)
  return batch_;
}

// optional int32 num_processors = 11;
inline bool MasterComponentInfo::has_num_processors() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MasterComponentInfo::set_has_num_processors() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MasterComponentInfo::clear_has_num_processors() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MasterComponentInfo::clear_num_processors() {
  num_processors_ = 0;
  clear_has_num_processors();
}
inline ::google::protobuf::int32 MasterComponentInfo::num_processors() const {
  // @@protoc_insertion_point(field_get:artm.MasterComponentInfo.num_processors)
  return num_processors_;
}
inline void MasterComponentInfo::set_num_processors(::google::protobuf::int32 value) {
  set_has_num_processors();
  num_processors_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterComponentInfo.num_processors)
}

// -------------------------------------------------------------------

// ImportBatchesArgs

// repeated .artm.Batch batch = 3;
inline int ImportBatchesArgs::batch_size() const {
  return batch_.size();
}
inline void ImportBatchesArgs::clear_batch() {
  batch_.Clear();
}
inline const ::artm::Batch& ImportBatchesArgs::batch(int index) const {
  // @@protoc_insertion_point(field_get:artm.ImportBatchesArgs.batch)
  return batch_.Get(index);
}
inline ::artm::Batch* ImportBatchesArgs::mutable_batch(int index) {
  // @@protoc_insertion_point(field_mutable:artm.ImportBatchesArgs.batch)
  return batch_.Mutable(index);
}
inline ::artm::Batch* ImportBatchesArgs::add_batch() {
  // @@protoc_insertion_point(field_add:artm.ImportBatchesArgs.batch)
  return batch_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
ImportBatchesArgs::mutable_batch() {
  // @@protoc_insertion_point(field_mutable_list:artm.ImportBatchesArgs.batch)
  return &batch_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
ImportBatchesArgs::batch() const {
  // @@protoc_insertion_point(field_list:artm.ImportBatchesArgs.batch)
  return batch_;
}

// -------------------------------------------------------------------

// AwaitOperationArgs

// optional int32 timeout_milliseconds = 1 [default = -1];
inline bool AwaitOperationArgs::has_timeout_milliseconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AwaitOperationArgs::set_has_timeout_milliseconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AwaitOperationArgs::clear_has_timeout_milliseconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AwaitOperationArgs::clear_timeout_milliseconds() {
  timeout_milliseconds_ = -1;
  clear_has_timeout_milliseconds();
}
inline ::google::protobuf::int32 AwaitOperationArgs::timeout_milliseconds() const {
  // @@protoc_insertion_point(field_get:artm.AwaitOperationArgs.timeout_milliseconds)
  return timeout_milliseconds_;
}
inline void AwaitOperationArgs::set_timeout_milliseconds(::google::protobuf::int32 value) {
  set_has_timeout_milliseconds();
  timeout_milliseconds_ = value;
  // @@protoc_insertion_point(field_set:artm.AwaitOperationArgs.timeout_milliseconds)
}

// -------------------------------------------------------------------

// MasterModelConfig

// repeated string topic_name = 1;
inline int MasterModelConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void MasterModelConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& MasterModelConfig::topic_name(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.topic_name)
  return topic_name_.Get(index);
}
inline ::std::string* MasterModelConfig::mutable_topic_name(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.topic_name)
  return topic_name_.Mutable(index);
}
inline void MasterModelConfig::set_topic_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.topic_name)
  topic_name_.Mutable(index)->assign(value);
}
inline void MasterModelConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.topic_name)
}
inline void MasterModelConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.topic_name)
}
inline ::std::string* MasterModelConfig::add_topic_name() {
  // @@protoc_insertion_point(field_add_mutable:artm.MasterModelConfig.topic_name)
  return topic_name_.Add();
}
inline void MasterModelConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.topic_name)
}
inline void MasterModelConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.MasterModelConfig.topic_name)
}
inline void MasterModelConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.MasterModelConfig.topic_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MasterModelConfig::topic_name() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.topic_name)
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MasterModelConfig::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.topic_name)
  return &topic_name_;
}

// repeated string class_id = 2;
inline int MasterModelConfig::class_id_size() const {
  return class_id_.size();
}
inline void MasterModelConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& MasterModelConfig::class_id(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.class_id)
  return class_id_.Get(index);
}
inline ::std::string* MasterModelConfig::mutable_class_id(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.class_id)
  return class_id_.Mutable(index);
}
inline void MasterModelConfig::set_class_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.class_id)
  class_id_.Mutable(index)->assign(value);
}
inline void MasterModelConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.class_id)
}
inline void MasterModelConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.class_id)
}
inline ::std::string* MasterModelConfig::add_class_id() {
  // @@protoc_insertion_point(field_add_mutable:artm.MasterModelConfig.class_id)
  return class_id_.Add();
}
inline void MasterModelConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.class_id)
}
inline void MasterModelConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.MasterModelConfig.class_id)
}
inline void MasterModelConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.MasterModelConfig.class_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MasterModelConfig::class_id() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.class_id)
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MasterModelConfig::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.class_id)
  return &class_id_;
}

// repeated float class_weight = 3;
inline int MasterModelConfig::class_weight_size() const {
  return class_weight_.size();
}
inline void MasterModelConfig::clear_class_weight() {
  class_weight_.Clear();
}
inline float MasterModelConfig::class_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.class_weight)
  return class_weight_.Get(index);
}
inline void MasterModelConfig::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.class_weight)
}
inline void MasterModelConfig::add_class_weight(float value) {
  class_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.class_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
MasterModelConfig::class_weight() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.class_weight)
  return class_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
MasterModelConfig::mutable_class_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.class_weight)
  return &class_weight_;
}

// repeated .artm.ScoreConfig score_config = 4;
inline int MasterModelConfig::score_config_size() const {
  return score_config_.size();
}
inline void MasterModelConfig::clear_score_config() {
  score_config_.Clear();
}
inline const ::artm::ScoreConfig& MasterModelConfig::score_config(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.score_config)
  return score_config_.Get(index);
}
inline ::artm::ScoreConfig* MasterModelConfig::mutable_score_config(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.score_config)
  return score_config_.Mutable(index);
}
inline ::artm::ScoreConfig* MasterModelConfig::add_score_config() {
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.score_config)
  return score_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig >*
MasterModelConfig::mutable_score_config() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.score_config)
  return &score_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig >&
MasterModelConfig::score_config() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.score_config)
  return score_config_;
}

// repeated .artm.RegularizerConfig regularizer_config = 5;
inline int MasterModelConfig::regularizer_config_size() const {
  return regularizer_config_.size();
}
inline void MasterModelConfig::clear_regularizer_config() {
  regularizer_config_.Clear();
}
inline const ::artm::RegularizerConfig& MasterModelConfig::regularizer_config(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.regularizer_config)
  return regularizer_config_.Get(index);
}
inline ::artm::RegularizerConfig* MasterModelConfig::mutable_regularizer_config(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.regularizer_config)
  return regularizer_config_.Mutable(index);
}
inline ::artm::RegularizerConfig* MasterModelConfig::add_regularizer_config() {
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.regularizer_config)
  return regularizer_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig >*
MasterModelConfig::mutable_regularizer_config() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.regularizer_config)
  return &regularizer_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig >&
MasterModelConfig::regularizer_config() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.regularizer_config)
  return regularizer_config_;
}

// optional int32 num_processors = 6;
inline bool MasterModelConfig::has_num_processors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MasterModelConfig::set_has_num_processors() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MasterModelConfig::clear_has_num_processors() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MasterModelConfig::clear_num_processors() {
  num_processors_ = 0;
  clear_has_num_processors();
}
inline ::google::protobuf::int32 MasterModelConfig::num_processors() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.num_processors)
  return num_processors_;
}
inline void MasterModelConfig::set_num_processors(::google::protobuf::int32 value) {
  set_has_num_processors();
  num_processors_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.num_processors)
}

// optional string pwt_name = 7 [default = "pwt"];
inline bool MasterModelConfig::has_pwt_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MasterModelConfig::set_has_pwt_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MasterModelConfig::clear_has_pwt_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MasterModelConfig::clear_pwt_name() {
  pwt_name_.ClearToDefaultNoArena(_default_pwt_name_);
  clear_has_pwt_name();
}
inline const ::std::string& MasterModelConfig::pwt_name() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.pwt_name)
  return pwt_name_.GetNoArena(_default_pwt_name_);
}
inline void MasterModelConfig::set_pwt_name(const ::std::string& value) {
  set_has_pwt_name();
  pwt_name_.SetNoArena(_default_pwt_name_, value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.pwt_name)
}
inline void MasterModelConfig::set_pwt_name(const char* value) {
  set_has_pwt_name();
  pwt_name_.SetNoArena(_default_pwt_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.pwt_name)
}
inline void MasterModelConfig::set_pwt_name(const char* value, size_t size) {
  set_has_pwt_name();
  pwt_name_.SetNoArena(_default_pwt_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.pwt_name)
}
inline ::std::string* MasterModelConfig::mutable_pwt_name() {
  set_has_pwt_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.pwt_name)
  return pwt_name_.MutableNoArena(_default_pwt_name_);
}
inline ::std::string* MasterModelConfig::release_pwt_name() {
  // @@protoc_insertion_point(field_release:artm.MasterModelConfig.pwt_name)
  clear_has_pwt_name();
  return pwt_name_.ReleaseNoArena(_default_pwt_name_);
}
inline void MasterModelConfig::set_allocated_pwt_name(::std::string* pwt_name) {
  if (pwt_name != NULL) {
    set_has_pwt_name();
  } else {
    clear_has_pwt_name();
  }
  pwt_name_.SetAllocatedNoArena(_default_pwt_name_, pwt_name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterModelConfig.pwt_name)
}

// optional string nwt_name = 8 [default = "nwt"];
inline bool MasterModelConfig::has_nwt_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MasterModelConfig::set_has_nwt_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MasterModelConfig::clear_has_nwt_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MasterModelConfig::clear_nwt_name() {
  nwt_name_.ClearToDefaultNoArena(_default_nwt_name_);
  clear_has_nwt_name();
}
inline const ::std::string& MasterModelConfig::nwt_name() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.nwt_name)
  return nwt_name_.GetNoArena(_default_nwt_name_);
}
inline void MasterModelConfig::set_nwt_name(const ::std::string& value) {
  set_has_nwt_name();
  nwt_name_.SetNoArena(_default_nwt_name_, value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.nwt_name)
}
inline void MasterModelConfig::set_nwt_name(const char* value) {
  set_has_nwt_name();
  nwt_name_.SetNoArena(_default_nwt_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.nwt_name)
}
inline void MasterModelConfig::set_nwt_name(const char* value, size_t size) {
  set_has_nwt_name();
  nwt_name_.SetNoArena(_default_nwt_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.nwt_name)
}
inline ::std::string* MasterModelConfig::mutable_nwt_name() {
  set_has_nwt_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.nwt_name)
  return nwt_name_.MutableNoArena(_default_nwt_name_);
}
inline ::std::string* MasterModelConfig::release_nwt_name() {
  // @@protoc_insertion_point(field_release:artm.MasterModelConfig.nwt_name)
  clear_has_nwt_name();
  return nwt_name_.ReleaseNoArena(_default_nwt_name_);
}
inline void MasterModelConfig::set_allocated_nwt_name(::std::string* nwt_name) {
  if (nwt_name != NULL) {
    set_has_nwt_name();
  } else {
    clear_has_nwt_name();
  }
  nwt_name_.SetAllocatedNoArena(_default_nwt_name_, nwt_name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterModelConfig.nwt_name)
}

// optional int32 num_document_passes = 9;
inline bool MasterModelConfig::has_num_document_passes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MasterModelConfig::set_has_num_document_passes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MasterModelConfig::clear_has_num_document_passes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MasterModelConfig::clear_num_document_passes() {
  num_document_passes_ = 0;
  clear_has_num_document_passes();
}
inline ::google::protobuf::int32 MasterModelConfig::num_document_passes() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.num_document_passes)
  return num_document_passes_;
}
inline void MasterModelConfig::set_num_document_passes(::google::protobuf::int32 value) {
  set_has_num_document_passes();
  num_document_passes_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.num_document_passes)
}

// optional bool reuse_theta = 10 [default = false];
inline bool MasterModelConfig::has_reuse_theta() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MasterModelConfig::set_has_reuse_theta() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MasterModelConfig::clear_has_reuse_theta() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MasterModelConfig::clear_reuse_theta() {
  reuse_theta_ = false;
  clear_has_reuse_theta();
}
inline bool MasterModelConfig::reuse_theta() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.reuse_theta)
  return reuse_theta_;
}
inline void MasterModelConfig::set_reuse_theta(bool value) {
  set_has_reuse_theta();
  reuse_theta_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.reuse_theta)
}

// optional bool opt_for_avx = 11 [default = true];
inline bool MasterModelConfig::has_opt_for_avx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MasterModelConfig::set_has_opt_for_avx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MasterModelConfig::clear_has_opt_for_avx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MasterModelConfig::clear_opt_for_avx() {
  opt_for_avx_ = true;
  clear_has_opt_for_avx();
}
inline bool MasterModelConfig::opt_for_avx() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.opt_for_avx)
  return opt_for_avx_;
}
inline void MasterModelConfig::set_opt_for_avx(bool value) {
  set_has_opt_for_avx();
  opt_for_avx_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.opt_for_avx)
}

// optional string disk_cache_path = 13;
inline bool MasterModelConfig::has_disk_cache_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MasterModelConfig::set_has_disk_cache_path() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MasterModelConfig::clear_has_disk_cache_path() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MasterModelConfig::clear_disk_cache_path() {
  disk_cache_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_disk_cache_path();
}
inline const ::std::string& MasterModelConfig::disk_cache_path() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.disk_cache_path)
  return disk_cache_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterModelConfig::set_disk_cache_path(const ::std::string& value) {
  set_has_disk_cache_path();
  disk_cache_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.disk_cache_path)
}
inline void MasterModelConfig::set_disk_cache_path(const char* value) {
  set_has_disk_cache_path();
  disk_cache_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.disk_cache_path)
}
inline void MasterModelConfig::set_disk_cache_path(const char* value, size_t size) {
  set_has_disk_cache_path();
  disk_cache_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.disk_cache_path)
}
inline ::std::string* MasterModelConfig::mutable_disk_cache_path() {
  set_has_disk_cache_path();
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.disk_cache_path)
  return disk_cache_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterModelConfig::release_disk_cache_path() {
  // @@protoc_insertion_point(field_release:artm.MasterModelConfig.disk_cache_path)
  clear_has_disk_cache_path();
  return disk_cache_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterModelConfig::set_allocated_disk_cache_path(::std::string* disk_cache_path) {
  if (disk_cache_path != NULL) {
    set_has_disk_cache_path();
  } else {
    clear_has_disk_cache_path();
  }
  disk_cache_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disk_cache_path);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterModelConfig.disk_cache_path)
}

// optional bool cache_theta = 15 [default = false];
inline bool MasterModelConfig::has_cache_theta() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MasterModelConfig::set_has_cache_theta() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MasterModelConfig::clear_has_cache_theta() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MasterModelConfig::clear_cache_theta() {
  cache_theta_ = false;
  clear_has_cache_theta();
}
inline bool MasterModelConfig::cache_theta() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.cache_theta)
  return cache_theta_;
}
inline void MasterModelConfig::set_cache_theta(bool value) {
  set_has_cache_theta();
  cache_theta_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.cache_theta)
}

// optional string ptd_name = 16 [default = ""];
inline bool MasterModelConfig::has_ptd_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MasterModelConfig::set_has_ptd_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MasterModelConfig::clear_has_ptd_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MasterModelConfig::clear_ptd_name() {
  ptd_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ptd_name();
}
inline const ::std::string& MasterModelConfig::ptd_name() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.ptd_name)
  return ptd_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterModelConfig::set_ptd_name(const ::std::string& value) {
  set_has_ptd_name();
  ptd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.ptd_name)
}
inline void MasterModelConfig::set_ptd_name(const char* value) {
  set_has_ptd_name();
  ptd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.ptd_name)
}
inline void MasterModelConfig::set_ptd_name(const char* value, size_t size) {
  set_has_ptd_name();
  ptd_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.ptd_name)
}
inline ::std::string* MasterModelConfig::mutable_ptd_name() {
  set_has_ptd_name();
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.ptd_name)
  return ptd_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterModelConfig::release_ptd_name() {
  // @@protoc_insertion_point(field_release:artm.MasterModelConfig.ptd_name)
  clear_has_ptd_name();
  return ptd_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterModelConfig::set_allocated_ptd_name(::std::string* ptd_name) {
  if (ptd_name != NULL) {
    set_has_ptd_name();
  } else {
    clear_has_ptd_name();
  }
  ptd_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ptd_name);
  // @@protoc_insertion_point(field_set_allocated:artm.MasterModelConfig.ptd_name)
}

// repeated string transaction_typename = 17;
inline int MasterModelConfig::transaction_typename_size() const {
  return transaction_typename_.size();
}
inline void MasterModelConfig::clear_transaction_typename() {
  transaction_typename_.Clear();
}
inline const ::std::string& MasterModelConfig::transaction_typename(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.transaction_typename)
  return transaction_typename_.Get(index);
}
inline ::std::string* MasterModelConfig::mutable_transaction_typename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.MasterModelConfig.transaction_typename)
  return transaction_typename_.Mutable(index);
}
inline void MasterModelConfig::set_transaction_typename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.transaction_typename)
  transaction_typename_.Mutable(index)->assign(value);
}
inline void MasterModelConfig::set_transaction_typename(int index, const char* value) {
  transaction_typename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.MasterModelConfig.transaction_typename)
}
inline void MasterModelConfig::set_transaction_typename(int index, const char* value, size_t size) {
  transaction_typename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.MasterModelConfig.transaction_typename)
}
inline ::std::string* MasterModelConfig::add_transaction_typename() {
  // @@protoc_insertion_point(field_add_mutable:artm.MasterModelConfig.transaction_typename)
  return transaction_typename_.Add();
}
inline void MasterModelConfig::add_transaction_typename(const ::std::string& value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.transaction_typename)
}
inline void MasterModelConfig::add_transaction_typename(const char* value) {
  transaction_typename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.MasterModelConfig.transaction_typename)
}
inline void MasterModelConfig::add_transaction_typename(const char* value, size_t size) {
  transaction_typename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.MasterModelConfig.transaction_typename)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MasterModelConfig::transaction_typename() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.transaction_typename)
  return transaction_typename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MasterModelConfig::mutable_transaction_typename() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.transaction_typename)
  return &transaction_typename_;
}

// repeated float transaction_weight = 18;
inline int MasterModelConfig::transaction_weight_size() const {
  return transaction_weight_.size();
}
inline void MasterModelConfig::clear_transaction_weight() {
  transaction_weight_.Clear();
}
inline float MasterModelConfig::transaction_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.transaction_weight)
  return transaction_weight_.Get(index);
}
inline void MasterModelConfig::set_transaction_weight(int index, float value) {
  transaction_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.transaction_weight)
}
inline void MasterModelConfig::add_transaction_weight(float value) {
  transaction_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.MasterModelConfig.transaction_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
MasterModelConfig::transaction_weight() const {
  // @@protoc_insertion_point(field_list:artm.MasterModelConfig.transaction_weight)
  return transaction_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
MasterModelConfig::mutable_transaction_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.MasterModelConfig.transaction_weight)
  return &transaction_weight_;
}

// optional int32 parent_master_model_id = 19;
inline bool MasterModelConfig::has_parent_master_model_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MasterModelConfig::set_has_parent_master_model_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MasterModelConfig::clear_has_parent_master_model_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MasterModelConfig::clear_parent_master_model_id() {
  parent_master_model_id_ = 0;
  clear_has_parent_master_model_id();
}
inline ::google::protobuf::int32 MasterModelConfig::parent_master_model_id() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.parent_master_model_id)
  return parent_master_model_id_;
}
inline void MasterModelConfig::set_parent_master_model_id(::google::protobuf::int32 value) {
  set_has_parent_master_model_id();
  parent_master_model_id_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.parent_master_model_id)
}

// optional float parent_master_model_weight = 20 [default = 1];
inline bool MasterModelConfig::has_parent_master_model_weight() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MasterModelConfig::set_has_parent_master_model_weight() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MasterModelConfig::clear_has_parent_master_model_weight() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MasterModelConfig::clear_parent_master_model_weight() {
  parent_master_model_weight_ = 1;
  clear_has_parent_master_model_weight();
}
inline float MasterModelConfig::parent_master_model_weight() const {
  // @@protoc_insertion_point(field_get:artm.MasterModelConfig.parent_master_model_weight)
  return parent_master_model_weight_;
}
inline void MasterModelConfig::set_parent_master_model_weight(float value) {
  set_has_parent_master_model_weight();
  parent_master_model_weight_ = value;
  // @@protoc_insertion_point(field_set:artm.MasterModelConfig.parent_master_model_weight)
}

// -------------------------------------------------------------------

// FitOfflineMasterModelArgs

// repeated string batch_filename = 1;
inline int FitOfflineMasterModelArgs::batch_filename_size() const {
  return batch_filename_.size();
}
inline void FitOfflineMasterModelArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
inline const ::std::string& FitOfflineMasterModelArgs::batch_filename(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOfflineMasterModelArgs.batch_filename)
  return batch_filename_.Get(index);
}
inline ::std::string* FitOfflineMasterModelArgs::mutable_batch_filename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.FitOfflineMasterModelArgs.batch_filename)
  return batch_filename_.Mutable(index);
}
inline void FitOfflineMasterModelArgs::set_batch_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.FitOfflineMasterModelArgs.batch_filename)
  batch_filename_.Mutable(index)->assign(value);
}
inline void FitOfflineMasterModelArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.FitOfflineMasterModelArgs.batch_filename)
}
inline void FitOfflineMasterModelArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.FitOfflineMasterModelArgs.batch_filename)
}
inline ::std::string* FitOfflineMasterModelArgs::add_batch_filename() {
  // @@protoc_insertion_point(field_add_mutable:artm.FitOfflineMasterModelArgs.batch_filename)
  return batch_filename_.Add();
}
inline void FitOfflineMasterModelArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.FitOfflineMasterModelArgs.batch_filename)
}
inline void FitOfflineMasterModelArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.FitOfflineMasterModelArgs.batch_filename)
}
inline void FitOfflineMasterModelArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.FitOfflineMasterModelArgs.batch_filename)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FitOfflineMasterModelArgs::batch_filename() const {
  // @@protoc_insertion_point(field_list:artm.FitOfflineMasterModelArgs.batch_filename)
  return batch_filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FitOfflineMasterModelArgs::mutable_batch_filename() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOfflineMasterModelArgs.batch_filename)
  return &batch_filename_;
}

// repeated float batch_weight = 2;
inline int FitOfflineMasterModelArgs::batch_weight_size() const {
  return batch_weight_.size();
}
inline void FitOfflineMasterModelArgs::clear_batch_weight() {
  batch_weight_.Clear();
}
inline float FitOfflineMasterModelArgs::batch_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOfflineMasterModelArgs.batch_weight)
  return batch_weight_.Get(index);
}
inline void FitOfflineMasterModelArgs::set_batch_weight(int index, float value) {
  batch_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FitOfflineMasterModelArgs.batch_weight)
}
inline void FitOfflineMasterModelArgs::add_batch_weight(float value) {
  batch_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FitOfflineMasterModelArgs.batch_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
FitOfflineMasterModelArgs::batch_weight() const {
  // @@protoc_insertion_point(field_list:artm.FitOfflineMasterModelArgs.batch_weight)
  return batch_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
FitOfflineMasterModelArgs::mutable_batch_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOfflineMasterModelArgs.batch_weight)
  return &batch_weight_;
}

// optional int32 num_collection_passes = 3 [default = 1];
inline bool FitOfflineMasterModelArgs::has_num_collection_passes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FitOfflineMasterModelArgs::set_has_num_collection_passes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FitOfflineMasterModelArgs::clear_has_num_collection_passes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FitOfflineMasterModelArgs::clear_num_collection_passes() {
  num_collection_passes_ = 1;
  clear_has_num_collection_passes();
}
inline ::google::protobuf::int32 FitOfflineMasterModelArgs::num_collection_passes() const {
  // @@protoc_insertion_point(field_get:artm.FitOfflineMasterModelArgs.num_collection_passes)
  return num_collection_passes_;
}
inline void FitOfflineMasterModelArgs::set_num_collection_passes(::google::protobuf::int32 value) {
  set_has_num_collection_passes();
  num_collection_passes_ = value;
  // @@protoc_insertion_point(field_set:artm.FitOfflineMasterModelArgs.num_collection_passes)
}

// optional string batch_folder = 4;
inline bool FitOfflineMasterModelArgs::has_batch_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FitOfflineMasterModelArgs::set_has_batch_folder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FitOfflineMasterModelArgs::clear_has_batch_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FitOfflineMasterModelArgs::clear_batch_folder() {
  batch_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_batch_folder();
}
inline const ::std::string& FitOfflineMasterModelArgs::batch_folder() const {
  // @@protoc_insertion_point(field_get:artm.FitOfflineMasterModelArgs.batch_folder)
  return batch_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FitOfflineMasterModelArgs::set_batch_folder(const ::std::string& value) {
  set_has_batch_folder();
  batch_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.FitOfflineMasterModelArgs.batch_folder)
}
inline void FitOfflineMasterModelArgs::set_batch_folder(const char* value) {
  set_has_batch_folder();
  batch_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.FitOfflineMasterModelArgs.batch_folder)
}
inline void FitOfflineMasterModelArgs::set_batch_folder(const char* value, size_t size) {
  set_has_batch_folder();
  batch_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.FitOfflineMasterModelArgs.batch_folder)
}
inline ::std::string* FitOfflineMasterModelArgs::mutable_batch_folder() {
  set_has_batch_folder();
  // @@protoc_insertion_point(field_mutable:artm.FitOfflineMasterModelArgs.batch_folder)
  return batch_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FitOfflineMasterModelArgs::release_batch_folder() {
  // @@protoc_insertion_point(field_release:artm.FitOfflineMasterModelArgs.batch_folder)
  clear_has_batch_folder();
  return batch_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FitOfflineMasterModelArgs::set_allocated_batch_folder(::std::string* batch_folder) {
  if (batch_folder != NULL) {
    set_has_batch_folder();
  } else {
    clear_has_batch_folder();
  }
  batch_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), batch_folder);
  // @@protoc_insertion_point(field_set_allocated:artm.FitOfflineMasterModelArgs.batch_folder)
}

// optional bool reset_nwt = 5 [default = true];
inline bool FitOfflineMasterModelArgs::has_reset_nwt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FitOfflineMasterModelArgs::set_has_reset_nwt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FitOfflineMasterModelArgs::clear_has_reset_nwt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FitOfflineMasterModelArgs::clear_reset_nwt() {
  reset_nwt_ = true;
  clear_has_reset_nwt();
}
inline bool FitOfflineMasterModelArgs::reset_nwt() const {
  // @@protoc_insertion_point(field_get:artm.FitOfflineMasterModelArgs.reset_nwt)
  return reset_nwt_;
}
inline void FitOfflineMasterModelArgs::set_reset_nwt(bool value) {
  set_has_reset_nwt();
  reset_nwt_ = value;
  // @@protoc_insertion_point(field_set:artm.FitOfflineMasterModelArgs.reset_nwt)
}

// -------------------------------------------------------------------

// FitOnlineMasterModelArgs

// repeated string batch_filename = 1;
inline int FitOnlineMasterModelArgs::batch_filename_size() const {
  return batch_filename_.size();
}
inline void FitOnlineMasterModelArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
inline const ::std::string& FitOnlineMasterModelArgs::batch_filename(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.batch_filename)
  return batch_filename_.Get(index);
}
inline ::std::string* FitOnlineMasterModelArgs::mutable_batch_filename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.FitOnlineMasterModelArgs.batch_filename)
  return batch_filename_.Mutable(index);
}
inline void FitOnlineMasterModelArgs::set_batch_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.batch_filename)
  batch_filename_.Mutable(index)->assign(value);
}
inline void FitOnlineMasterModelArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.FitOnlineMasterModelArgs.batch_filename)
}
inline void FitOnlineMasterModelArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.FitOnlineMasterModelArgs.batch_filename)
}
inline ::std::string* FitOnlineMasterModelArgs::add_batch_filename() {
  // @@protoc_insertion_point(field_add_mutable:artm.FitOnlineMasterModelArgs.batch_filename)
  return batch_filename_.Add();
}
inline void FitOnlineMasterModelArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.FitOnlineMasterModelArgs.batch_filename)
}
inline void FitOnlineMasterModelArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.FitOnlineMasterModelArgs.batch_filename)
}
inline void FitOnlineMasterModelArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.FitOnlineMasterModelArgs.batch_filename)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FitOnlineMasterModelArgs::batch_filename() const {
  // @@protoc_insertion_point(field_list:artm.FitOnlineMasterModelArgs.batch_filename)
  return batch_filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FitOnlineMasterModelArgs::mutable_batch_filename() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOnlineMasterModelArgs.batch_filename)
  return &batch_filename_;
}

// repeated float batch_weight = 2;
inline int FitOnlineMasterModelArgs::batch_weight_size() const {
  return batch_weight_.size();
}
inline void FitOnlineMasterModelArgs::clear_batch_weight() {
  batch_weight_.Clear();
}
inline float FitOnlineMasterModelArgs::batch_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.batch_weight)
  return batch_weight_.Get(index);
}
inline void FitOnlineMasterModelArgs::set_batch_weight(int index, float value) {
  batch_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.batch_weight)
}
inline void FitOnlineMasterModelArgs::add_batch_weight(float value) {
  batch_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FitOnlineMasterModelArgs.batch_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
FitOnlineMasterModelArgs::batch_weight() const {
  // @@protoc_insertion_point(field_list:artm.FitOnlineMasterModelArgs.batch_weight)
  return batch_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
FitOnlineMasterModelArgs::mutable_batch_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOnlineMasterModelArgs.batch_weight)
  return &batch_weight_;
}

// repeated int32 update_after = 3;
inline int FitOnlineMasterModelArgs::update_after_size() const {
  return update_after_.size();
}
inline void FitOnlineMasterModelArgs::clear_update_after() {
  update_after_.Clear();
}
inline ::google::protobuf::int32 FitOnlineMasterModelArgs::update_after(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.update_after)
  return update_after_.Get(index);
}
inline void FitOnlineMasterModelArgs::set_update_after(int index, ::google::protobuf::int32 value) {
  update_after_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.update_after)
}
inline void FitOnlineMasterModelArgs::add_update_after(::google::protobuf::int32 value) {
  update_after_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FitOnlineMasterModelArgs.update_after)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FitOnlineMasterModelArgs::update_after() const {
  // @@protoc_insertion_point(field_list:artm.FitOnlineMasterModelArgs.update_after)
  return update_after_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FitOnlineMasterModelArgs::mutable_update_after() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOnlineMasterModelArgs.update_after)
  return &update_after_;
}

// repeated float apply_weight = 4;
inline int FitOnlineMasterModelArgs::apply_weight_size() const {
  return apply_weight_.size();
}
inline void FitOnlineMasterModelArgs::clear_apply_weight() {
  apply_weight_.Clear();
}
inline float FitOnlineMasterModelArgs::apply_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.apply_weight)
  return apply_weight_.Get(index);
}
inline void FitOnlineMasterModelArgs::set_apply_weight(int index, float value) {
  apply_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.apply_weight)
}
inline void FitOnlineMasterModelArgs::add_apply_weight(float value) {
  apply_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FitOnlineMasterModelArgs.apply_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
FitOnlineMasterModelArgs::apply_weight() const {
  // @@protoc_insertion_point(field_list:artm.FitOnlineMasterModelArgs.apply_weight)
  return apply_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
FitOnlineMasterModelArgs::mutable_apply_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOnlineMasterModelArgs.apply_weight)
  return &apply_weight_;
}

// repeated float decay_weight = 5;
inline int FitOnlineMasterModelArgs::decay_weight_size() const {
  return decay_weight_.size();
}
inline void FitOnlineMasterModelArgs::clear_decay_weight() {
  decay_weight_.Clear();
}
inline float FitOnlineMasterModelArgs::decay_weight(int index) const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.decay_weight)
  return decay_weight_.Get(index);
}
inline void FitOnlineMasterModelArgs::set_decay_weight(int index, float value) {
  decay_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.decay_weight)
}
inline void FitOnlineMasterModelArgs::add_decay_weight(float value) {
  decay_weight_.Add(value);
  // @@protoc_insertion_point(field_add:artm.FitOnlineMasterModelArgs.decay_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
FitOnlineMasterModelArgs::decay_weight() const {
  // @@protoc_insertion_point(field_list:artm.FitOnlineMasterModelArgs.decay_weight)
  return decay_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
FitOnlineMasterModelArgs::mutable_decay_weight() {
  // @@protoc_insertion_point(field_mutable_list:artm.FitOnlineMasterModelArgs.decay_weight)
  return &decay_weight_;
}

// optional bool asynchronous = 6 [default = false];
inline bool FitOnlineMasterModelArgs::has_asynchronous() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FitOnlineMasterModelArgs::set_has_asynchronous() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FitOnlineMasterModelArgs::clear_has_asynchronous() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FitOnlineMasterModelArgs::clear_asynchronous() {
  asynchronous_ = false;
  clear_has_asynchronous();
}
inline bool FitOnlineMasterModelArgs::asynchronous() const {
  // @@protoc_insertion_point(field_get:artm.FitOnlineMasterModelArgs.asynchronous)
  return asynchronous_;
}
inline void FitOnlineMasterModelArgs::set_asynchronous(bool value) {
  set_has_asynchronous();
  asynchronous_ = value;
  // @@protoc_insertion_point(field_set:artm.FitOnlineMasterModelArgs.asynchronous)
}

// -------------------------------------------------------------------

// TransformMasterModelArgs

// repeated .artm.Batch batch = 1;
inline int TransformMasterModelArgs::batch_size() const {
  return batch_.size();
}
inline void TransformMasterModelArgs::clear_batch() {
  batch_.Clear();
}
inline const ::artm::Batch& TransformMasterModelArgs::batch(int index) const {
  // @@protoc_insertion_point(field_get:artm.TransformMasterModelArgs.batch)
  return batch_.Get(index);
}
inline ::artm::Batch* TransformMasterModelArgs::mutable_batch(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TransformMasterModelArgs.batch)
  return batch_.Mutable(index);
}
inline ::artm::Batch* TransformMasterModelArgs::add_batch() {
  // @@protoc_insertion_point(field_add:artm.TransformMasterModelArgs.batch)
  return batch_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
TransformMasterModelArgs::mutable_batch() {
  // @@protoc_insertion_point(field_mutable_list:artm.TransformMasterModelArgs.batch)
  return &batch_;
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
TransformMasterModelArgs::batch() const {
  // @@protoc_insertion_point(field_list:artm.TransformMasterModelArgs.batch)
  return batch_;
}

// repeated string batch_filename = 2;
inline int TransformMasterModelArgs::batch_filename_size() const {
  return batch_filename_.size();
}
inline void TransformMasterModelArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
inline const ::std::string& TransformMasterModelArgs::batch_filename(int index) const {
  // @@protoc_insertion_point(field_get:artm.TransformMasterModelArgs.batch_filename)
  return batch_filename_.Get(index);
}
inline ::std::string* TransformMasterModelArgs::mutable_batch_filename(int index) {
  // @@protoc_insertion_point(field_mutable:artm.TransformMasterModelArgs.batch_filename)
  return batch_filename_.Mutable(index);
}
inline void TransformMasterModelArgs::set_batch_filename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:artm.TransformMasterModelArgs.batch_filename)
  batch_filename_.Mutable(index)->assign(value);
}
inline void TransformMasterModelArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:artm.TransformMasterModelArgs.batch_filename)
}
inline void TransformMasterModelArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:artm.TransformMasterModelArgs.batch_filename)
}
inline ::std::string* TransformMasterModelArgs::add_batch_filename() {
  // @@protoc_insertion_point(field_add_mutable:artm.TransformMasterModelArgs.batch_filename)
  return batch_filename_.Add();
}
inline void TransformMasterModelArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:artm.TransformMasterModelArgs.batch_filename)
}
inline void TransformMasterModelArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:artm.TransformMasterModelArgs.batch_filename)
}
inline void TransformMasterModelArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:artm.TransformMasterModelArgs.batch_filename)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransformMasterModelArgs::batch_filename() const {
  // @@protoc_insertion_point(field_list:artm.TransformMasterModelArgs.batch_filename)
  return batch_filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TransformMasterModelArgs::mutable_batch_filename() {
  // @@protoc_insertion_point(field_mutable_list:artm.TransformMasterModelArgs.batch_filename)
  return &batch_filename_;
}

// optional .artm.ThetaMatrixType theta_matrix_type = 3 [default = ThetaMatrixType_Dense];
inline bool TransformMasterModelArgs::has_theta_matrix_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformMasterModelArgs::set_has_theta_matrix_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformMasterModelArgs::clear_has_theta_matrix_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformMasterModelArgs::clear_theta_matrix_type() {
  theta_matrix_type_ = 1;
  clear_has_theta_matrix_type();
}
inline ::artm::ThetaMatrixType TransformMasterModelArgs::theta_matrix_type() const {
  // @@protoc_insertion_point(field_get:artm.TransformMasterModelArgs.theta_matrix_type)
  return static_cast< ::artm::ThetaMatrixType >(theta_matrix_type_);
}
inline void TransformMasterModelArgs::set_theta_matrix_type(::artm::ThetaMatrixType value) {
  assert(::artm::ThetaMatrixType_IsValid(value));
  set_has_theta_matrix_type();
  theta_matrix_type_ = value;
  // @@protoc_insertion_point(field_set:artm.TransformMasterModelArgs.theta_matrix_type)
}

// optional string predict_class_id = 4;
inline bool TransformMasterModelArgs::has_predict_class_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformMasterModelArgs::set_has_predict_class_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformMasterModelArgs::clear_has_predict_class_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformMasterModelArgs::clear_predict_class_id() {
  predict_class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_predict_class_id();
}
inline const ::std::string& TransformMasterModelArgs::predict_class_id() const {
  // @@protoc_insertion_point(field_get:artm.TransformMasterModelArgs.predict_class_id)
  return predict_class_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformMasterModelArgs::set_predict_class_id(const ::std::string& value) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.TransformMasterModelArgs.predict_class_id)
}
inline void TransformMasterModelArgs::set_predict_class_id(const char* value) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.TransformMasterModelArgs.predict_class_id)
}
inline void TransformMasterModelArgs::set_predict_class_id(const char* value, size_t size) {
  set_has_predict_class_id();
  predict_class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.TransformMasterModelArgs.predict_class_id)
}
inline ::std::string* TransformMasterModelArgs::mutable_predict_class_id() {
  set_has_predict_class_id();
  // @@protoc_insertion_point(field_mutable:artm.TransformMasterModelArgs.predict_class_id)
  return predict_class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransformMasterModelArgs::release_predict_class_id() {
  // @@protoc_insertion_point(field_release:artm.TransformMasterModelArgs.predict_class_id)
  clear_has_predict_class_id();
  return predict_class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformMasterModelArgs::set_allocated_predict_class_id(::std::string* predict_class_id) {
  if (predict_class_id != NULL) {
    set_has_predict_class_id();
  } else {
    clear_has_predict_class_id();
  }
  predict_class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), predict_class_id);
  // @@protoc_insertion_point(field_set_allocated:artm.TransformMasterModelArgs.predict_class_id)
}

// -------------------------------------------------------------------

// ConfigureLoggingArgs

// optional string log_dir = 1;
inline bool ConfigureLoggingArgs::has_log_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigureLoggingArgs::set_has_log_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigureLoggingArgs::clear_has_log_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigureLoggingArgs::clear_log_dir() {
  log_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_dir();
}
inline const ::std::string& ConfigureLoggingArgs::log_dir() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.log_dir)
  return log_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigureLoggingArgs::set_log_dir(const ::std::string& value) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.log_dir)
}
inline void ConfigureLoggingArgs::set_log_dir(const char* value) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:artm.ConfigureLoggingArgs.log_dir)
}
inline void ConfigureLoggingArgs::set_log_dir(const char* value, size_t size) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:artm.ConfigureLoggingArgs.log_dir)
}
inline ::std::string* ConfigureLoggingArgs::mutable_log_dir() {
  set_has_log_dir();
  // @@protoc_insertion_point(field_mutable:artm.ConfigureLoggingArgs.log_dir)
  return log_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigureLoggingArgs::release_log_dir() {
  // @@protoc_insertion_point(field_release:artm.ConfigureLoggingArgs.log_dir)
  clear_has_log_dir();
  return log_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigureLoggingArgs::set_allocated_log_dir(::std::string* log_dir) {
  if (log_dir != NULL) {
    set_has_log_dir();
  } else {
    clear_has_log_dir();
  }
  log_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_dir);
  // @@protoc_insertion_point(field_set_allocated:artm.ConfigureLoggingArgs.log_dir)
}

// optional int32 minloglevel = 2;
inline bool ConfigureLoggingArgs::has_minloglevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigureLoggingArgs::set_has_minloglevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigureLoggingArgs::clear_has_minloglevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigureLoggingArgs::clear_minloglevel() {
  minloglevel_ = 0;
  clear_has_minloglevel();
}
inline ::google::protobuf::int32 ConfigureLoggingArgs::minloglevel() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.minloglevel)
  return minloglevel_;
}
inline void ConfigureLoggingArgs::set_minloglevel(::google::protobuf::int32 value) {
  set_has_minloglevel();
  minloglevel_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.minloglevel)
}

// optional int32 stderrthreshold = 3;
inline bool ConfigureLoggingArgs::has_stderrthreshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigureLoggingArgs::set_has_stderrthreshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigureLoggingArgs::clear_has_stderrthreshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigureLoggingArgs::clear_stderrthreshold() {
  stderrthreshold_ = 0;
  clear_has_stderrthreshold();
}
inline ::google::protobuf::int32 ConfigureLoggingArgs::stderrthreshold() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.stderrthreshold)
  return stderrthreshold_;
}
inline void ConfigureLoggingArgs::set_stderrthreshold(::google::protobuf::int32 value) {
  set_has_stderrthreshold();
  stderrthreshold_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.stderrthreshold)
}

// optional bool logtostderr = 4;
inline bool ConfigureLoggingArgs::has_logtostderr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigureLoggingArgs::set_has_logtostderr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigureLoggingArgs::clear_has_logtostderr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigureLoggingArgs::clear_logtostderr() {
  logtostderr_ = false;
  clear_has_logtostderr();
}
inline bool ConfigureLoggingArgs::logtostderr() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.logtostderr)
  return logtostderr_;
}
inline void ConfigureLoggingArgs::set_logtostderr(bool value) {
  set_has_logtostderr();
  logtostderr_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.logtostderr)
}

// optional bool colorlogtostderr = 5;
inline bool ConfigureLoggingArgs::has_colorlogtostderr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigureLoggingArgs::set_has_colorlogtostderr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigureLoggingArgs::clear_has_colorlogtostderr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigureLoggingArgs::clear_colorlogtostderr() {
  colorlogtostderr_ = false;
  clear_has_colorlogtostderr();
}
inline bool ConfigureLoggingArgs::colorlogtostderr() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.colorlogtostderr)
  return colorlogtostderr_;
}
inline void ConfigureLoggingArgs::set_colorlogtostderr(bool value) {
  set_has_colorlogtostderr();
  colorlogtostderr_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.colorlogtostderr)
}

// optional bool alsologtostderr = 6;
inline bool ConfigureLoggingArgs::has_alsologtostderr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigureLoggingArgs::set_has_alsologtostderr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigureLoggingArgs::clear_has_alsologtostderr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigureLoggingArgs::clear_alsologtostderr() {
  alsologtostderr_ = false;
  clear_has_alsologtostderr();
}
inline bool ConfigureLoggingArgs::alsologtostderr() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.alsologtostderr)
  return alsologtostderr_;
}
inline void ConfigureLoggingArgs::set_alsologtostderr(bool value) {
  set_has_alsologtostderr();
  alsologtostderr_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.alsologtostderr)
}

// optional int32 logbufsecs = 7;
inline bool ConfigureLoggingArgs::has_logbufsecs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigureLoggingArgs::set_has_logbufsecs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigureLoggingArgs::clear_has_logbufsecs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigureLoggingArgs::clear_logbufsecs() {
  logbufsecs_ = 0;
  clear_has_logbufsecs();
}
inline ::google::protobuf::int32 ConfigureLoggingArgs::logbufsecs() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.logbufsecs)
  return logbufsecs_;
}
inline void ConfigureLoggingArgs::set_logbufsecs(::google::protobuf::int32 value) {
  set_has_logbufsecs();
  logbufsecs_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.logbufsecs)
}

// optional int32 logbuflevel = 8;
inline bool ConfigureLoggingArgs::has_logbuflevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigureLoggingArgs::set_has_logbuflevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigureLoggingArgs::clear_has_logbuflevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigureLoggingArgs::clear_logbuflevel() {
  logbuflevel_ = 0;
  clear_has_logbuflevel();
}
inline ::google::protobuf::int32 ConfigureLoggingArgs::logbuflevel() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.logbuflevel)
  return logbuflevel_;
}
inline void ConfigureLoggingArgs::set_logbuflevel(::google::protobuf::int32 value) {
  set_has_logbuflevel();
  logbuflevel_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.logbuflevel)
}

// optional int32 max_log_size = 9;
inline bool ConfigureLoggingArgs::has_max_log_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigureLoggingArgs::set_has_max_log_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigureLoggingArgs::clear_has_max_log_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigureLoggingArgs::clear_max_log_size() {
  max_log_size_ = 0;
  clear_has_max_log_size();
}
inline ::google::protobuf::int32 ConfigureLoggingArgs::max_log_size() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.max_log_size)
  return max_log_size_;
}
inline void ConfigureLoggingArgs::set_max_log_size(::google::protobuf::int32 value) {
  set_has_max_log_size();
  max_log_size_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.max_log_size)
}

// optional bool stop_logging_if_full_disk = 10;
inline bool ConfigureLoggingArgs::has_stop_logging_if_full_disk() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigureLoggingArgs::set_has_stop_logging_if_full_disk() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigureLoggingArgs::clear_has_stop_logging_if_full_disk() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigureLoggingArgs::clear_stop_logging_if_full_disk() {
  stop_logging_if_full_disk_ = false;
  clear_has_stop_logging_if_full_disk();
}
inline bool ConfigureLoggingArgs::stop_logging_if_full_disk() const {
  // @@protoc_insertion_point(field_get:artm.ConfigureLoggingArgs.stop_logging_if_full_disk)
  return stop_logging_if_full_disk_;
}
inline void ConfigureLoggingArgs::set_stop_logging_if_full_disk(bool value) {
  set_has_stop_logging_if_full_disk();
  stop_logging_if_full_disk_ = value;
  // @@protoc_insertion_point(field_set:artm.ConfigureLoggingArgs.stop_logging_if_full_disk)
}

// -------------------------------------------------------------------

// ClearThetaCacheArgs

// -------------------------------------------------------------------

// ClearScoreCacheArgs

// -------------------------------------------------------------------

// ClearScoreArrayCacheArgs

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace artm

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::artm::SpecifiedSparsePhiConfig_SparseMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::SpecifiedSparsePhiConfig_SparseMode>() {
  return ::artm::SpecifiedSparsePhiConfig_SparseMode_descriptor();
}
template <> struct is_proto_enum< ::artm::SmoothPtdwConfig_SmoothType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::SmoothPtdwConfig_SmoothType>() {
  return ::artm::SmoothPtdwConfig_SmoothType_descriptor();
}
template <> struct is_proto_enum< ::artm::TransformConfig_TransformType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::TransformConfig_TransformType>() {
  return ::artm::TransformConfig_TransformType_descriptor();
}
template <> struct is_proto_enum< ::artm::PerplexityScoreConfig_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::PerplexityScoreConfig_Type>() {
  return ::artm::PerplexityScoreConfig_Type_descriptor();
}
template <> struct is_proto_enum< ::artm::CollectionParserConfig_CollectionFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::CollectionParserConfig_CollectionFormat>() {
  return ::artm::CollectionParserConfig_CollectionFormat_descriptor();
}
template <> struct is_proto_enum< ::artm::CollectionParserConfig_BatchNameType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::CollectionParserConfig_BatchNameType>() {
  return ::artm::CollectionParserConfig_BatchNameType_descriptor();
}
template <> struct is_proto_enum< ::artm::RegularizerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::RegularizerType>() {
  return ::artm::RegularizerType_descriptor();
}
template <> struct is_proto_enum< ::artm::ScoreType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::ScoreType>() {
  return ::artm::ScoreType_descriptor();
}
template <> struct is_proto_enum< ::artm::MatrixLayout> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::MatrixLayout>() {
  return ::artm::MatrixLayout_descriptor();
}
template <> struct is_proto_enum< ::artm::ThetaMatrixType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::ThetaMatrixType>() {
  return ::artm::ThetaMatrixType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_artm_2fmessages_2eproto__INCLUDED
